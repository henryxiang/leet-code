{
  "questionId": "1003",
  "questionFrontendId": "963",
  "boundTopicId": null,
  "title": "Minimum Area Rectangle II",
  "titleSlug": "minimum-area-rectangle-ii",
  "categoryTitle": "Algorithms",
  "content": "<p>Given a set of points in the xy-plane, determine the minimum area of <strong>any</strong> rectangle formed from these points, with sides <strong>not necessarily parallel</strong> to the x and y axes.</p>\r\n\r\n<p>If there isn&#39;t any rectangle, return 0.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/21/1a.png\" style=\"width: 150px; height: 151px;\" /></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[[1,2],[2,1],[1,0],[0,1]]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">2.00000\r\n<strong>Explanation:</strong> </span><span>The minimum area rectangle occurs at [1,2],[2,1],[1,0],[0,1], with an area of 2.</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/22/2.png\" style=\"width: 150px; height: 94px;\" /></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[[0,1],[2,1],[1,1],[1,0],[2,0]]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">1.00000\r\n</span><strong>Explanation:</strong> The minimum area rectangle occurs at [1,0],[1,1],[2,1],[2,0], with an area of 1.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/22/3.png\" style=\"width: 160px; height: 167px;\" /></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">[[0,3],[1,2],[3,1],[1,3],[2,1]]</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">0\r\n</span><span><strong>Explanation:</strong> There is no possible rectangle to form from these points.</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/21/4c.png\" style=\"width: 160px; height: 155px;\" /></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-4-1\">[[3,1],[1,1],[0,1],[2,1],[3,3],[3,2],[0,2],[2,3]]</span>\r\n<strong>Output: </strong><span id=\"example-output-4\">2.00000\r\n</span><span><strong>Explanation:</strong> The minimum area rectangle occurs at [2,1],[2,3],[3,3],[3,1], with an area of 2.</span>\r\n</pre>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n</div>\r\n</div>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= points.length &lt;= 50</code></li>\r\n\t<li><code>0 &lt;=&nbsp;points[i][0] &lt;=&nbsp;40000</code></li>\r\n\t<li><code>0 &lt;=&nbsp;points[i][1] &lt;=&nbsp;40000</code></li>\r\n\t<li>All points are distinct.</li>\r\n\t<li>Answers within <code>10^-5</code> of the actual value will be accepted as correct.</li>\r\n</ol>\r\n",
  "isPaidOnly": false,
  "difficulty": "Medium",
  "likes": 96,
  "dislikes": 154,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [
    {
      "username": "awice",
      "profileUrl": "/awice/",
      "avatarUrl": "https://assets.leetcode.com/users/awice/avatar_1576905115.png"
    }
  ],
  "topicTags": [
    {
      "name": "Math",
      "slug": "math"
    },
    {
      "name": "Geometry",
      "slug": "geometry"
    }
  ],
  "companyTagStats": "{\"2\": [{\"taggedByAdmin\": true, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 5}, {\"taggedByAdmin\": false, \"name\": \"Facebook\", \"slug\": \"facebook\", \"timesEncountered\": 2}], \"1\": [{\"taggedByAdmin\": false, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 2}], \"3\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    double minAreaFreeRect(vector<vector<int>>& points) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public double minAreaFreeRect(int[][] points) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def minAreaFreeRect(self, points):\n        \"\"\"\n        :type points: List[List[int]]\n        :rtype: float\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def minAreaFreeRect(self, points: List[List[int]]) -> float:\n        "
    },
    {
      "lang": "C",
      "code": "\n\ndouble minAreaFreeRect(int** points, int pointsSize, int* pointsColSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public double MinAreaFreeRect(int[][] points) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number[][]} points\n * @return {number}\n */\nvar minAreaFreeRect = function(points) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer[][]} points\n# @return {Float}\ndef min_area_free_rect(points)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func minAreaFreeRect(_ points: [[Int]]) -> Double {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func minAreaFreeRect(points [][]int) float64 {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def minAreaFreeRect(points: Array[Array[Int]]): Double = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun minAreaFreeRect(points: Array<IntArray>): Double {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn min_area_free_rect(points: Vec<Vec<i32>>) -> f64 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer[][] $points\n     * @return Float\n     */\n    function minAreaFreeRect($points) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"8.1K\", \"totalSubmission\": \"16.9K\", \"totalAcceptedRaw\": 8125, \"totalSubmissionRaw\": 16859, \"acRate\": \"48.2%\"}",
  "hints": [],
  "solution": {
    "id": "648",
    "canSeeDetail": true,
    "url": "/articles/minimum-area-rectangle-ii/",
    "content": "[TOC]\n\n## Solution\n---\n#### Approach 1: Iterate Triangles\n\n**Intuition**\n\nFor each triangle, let's try to find the 4th point and whether it is a rectangle.\n\n**Algorithm**\n\nSay the first 3 points are `p1, p2, p3`, and that  `p2` and `p3` are opposite corners of the final rectangle.  The 4th point must be `p4 = p2 + p3 - p1` (using vector notation) because `p1, p2, p4, p3` must form a parallelogram, and `p1 + (p2 - p1) + (p3 - p1) = p4`.\n\nIf this point exists in our collection (we can use a `HashSet` to check), then we should check that the angles of this parallelogram are 90 degrees.  The easiest way is to check the dot product of the two vectors `(p2 - p1)` and `(p3 - p1)`.  (Another way is we could normalize the vectors to length 1, and check that one equals the other rotated by 90 degrees.)\n\n<iframe src=\"https://leetcode.com/playground/4L9BqZN7/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"4L9BqZN7\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity:  $$O(N^3)$$, where $$N$$ is the length of `points`.\n\n* Space Complexity:  $$O(N)$$.\n<br />\n<br />\n\n\n---\n#### Approach 2: Iterate Centers\n\n**Intuition**\n\nConsider opposite points `AC` and `BD` of a rectangle `ABCD`.  They both have the same center `O`, which is the midpoint of `AC` and the midpoint of `AB`; and they both have the same radius `dist(O, A) == dist(O, B) == dist(O, C) == dist(O, D)`.  Notice that a necessary and sufficient condition to form a rectangle with two opposite pairs of points is that the points must have the same center and radius.\n\nMotivated by that result, let's classify each pair of points `PQ` by their center `C` = the midpoint of `PQ`, and the radius `r = dist(P, C)`.  Our strategy is to brute force on pairs of points with the same classification.\n\n**Algorithm**\n\nFor each pair of points, classify them by `center` and `radius`.  We only need to record one of the points `P`, since the other point is `P' = 2 * center - P` (using vector notation).\n\nFor each `center` and `radius`, look at every possible rectangle (two pairs of points `P, P', Q, Q'`).  The area of this rectangle `dist(P, Q) * dist(P, Q')` is a candidate answer.\n\n<iframe src=\"https://leetcode.com/playground/2wzCpbAU/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"2wzCpbAU\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity:  $$O(N^2 \\log N)$$, where $$N$$ is the length of `points`.  It can be shown that the number of pairs of points with the same classification is bounded by $$\\log N$$ - [see this link for more.](https://en.wikipedia.org/wiki/Sum_of_squares_function#Particular_cases)\n\n* Space Complexity:  $$O(N)$$.\n<br />\n<br />\n\n\n---\nAnalysis written by: [@awice](https://leetcode.com/awice).",
    "contentTypeId": "107",
    "rating": {
      "id": "634",
      "count": 18,
      "average": 2.167,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "[[1,2],[2,1],[1,0],[0,1]]",
  "metaData": "{\r\n  \"name\": \"minAreaFreeRect\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"points\",\r\n      \"type\": \"integer[][]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"double\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
