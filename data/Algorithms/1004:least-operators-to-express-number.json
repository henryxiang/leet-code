{
  "questionId": "1004",
  "questionFrontendId": "964",
  "boundTopicId": null,
  "title": "Least Operators to Express Number",
  "titleSlug": "least-operators-to-express-number",
  "categoryTitle": "Algorithms",
  "content": "<p>Given a single positive integer <code>x</code>, we will write an expression of the form <code>x (op1) x (op2) x (op3) x ...</code>&nbsp;where each operator <code>op1</code>, <code>op2</code>, etc. is either addition, subtraction, multiplication, or division (<code>+</code>, <code>-</code>, <code>*</code>, or <code>/)</code>.&nbsp; For example, with <code>x = 3</code>, we might write <code>3 * 3 / 3 + 3 - 3</code>&nbsp;which is a value of <font face=\"monospace\">3</font>.</p>\r\n\r\n<p>When writing such an expression, we adhere to the following conventions:</p>\r\n\r\n<ol>\r\n\t<li>The division operator (<code>/</code>) returns rational numbers.</li>\r\n\t<li>There are no parentheses placed anywhere.</li>\r\n\t<li>We use the usual order of operations: multiplication and division happens before addition and subtraction.</li>\r\n\t<li>It&#39;s not allowed to use the unary negation&nbsp;operator (<code>-</code>).&nbsp; For example, &quot;<code>x&nbsp;- x</code>&quot;&nbsp;is a valid expression as it only uses subtraction, but &quot;<code>-x +&nbsp;x</code>&quot; is not because it uses negation.</li>\r\n</ol>\r\n\r\n<p>We would like to write an expression with the least number of operators such that the expression equals the given <code>target</code>.&nbsp; Return the least number of operators used.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>x = <span id=\"example-input-1-1\">3</span>, target = <span id=\"example-input-1-2\">19</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">5</span>\r\n<strong>Explanation: </strong><span id=\"example-output-1\">3 * 3 + 3 * 3 + 3 / 3.  The expression contains 5 operations.</span>\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<div>\r\n<pre>\r\n<strong>Input: </strong>x = <span id=\"example-input-2-1\">5</span>, target = <span id=\"example-input-2-2\">501</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">8</span>\r\n<strong>Explanation: </strong><span id=\"example-output-1\">5 * 5 * 5 * 5 - 5 * 5 * 5 + 5 / 5.  The expression contains 8 operations.</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>x = <span id=\"example-input-3-1\">100</span>, target = <span id=\"example-input-3-2\">100000000</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">3</span>\r\n<strong>Explanation: </strong><span id=\"example-output-1\">100 * 100 * 100 * 100.  The expression contains 3 operations.</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n</div>\r\n</div>\r\n</div>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>2 &lt;= x &lt;= 100</code></li>\r\n\t<li><code>1 &lt;= target &lt;= 2 * 10^8</code></li>\r\n</ul>\r\n\r\n<div>\r\n<div>\r\n<div>&nbsp;</div>\r\n</div>\r\n</div>\r\n",
  "isPaidOnly": false,
  "difficulty": "Hard",
  "likes": 129,
  "dislikes": 44,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [],
  "topicTags": [
    {
      "name": "Math",
      "slug": "math"
    },
    {
      "name": "Dynamic Programming",
      "slug": "dynamic-programming"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"Snapchat\", \"slug\": \"snapchat\", \"timesEncountered\": 0}], \"1\": [], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    int leastOpsExpressTarget(int x, int target) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int leastOpsExpressTarget(int x, int target) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def leastOpsExpressTarget(self, x, target):\n        \"\"\"\n        :type x: int\n        :type target: int\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def leastOpsExpressTarget(self, x: int, target: int) -> int:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nint leastOpsExpressTarget(int x, int target){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public int LeastOpsExpressTarget(int x, int target) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number} x\n * @param {number} target\n * @return {number}\n */\nvar leastOpsExpressTarget = function(x, target) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer} x\n# @param {Integer} target\n# @return {Integer}\ndef least_ops_express_target(x, target)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func leastOpsExpressTarget(_ x: Int, _ target: Int) -> Int {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func leastOpsExpressTarget(x int, target int) int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def leastOpsExpressTarget(x: Int, target: Int): Int = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun leastOpsExpressTarget(x: Int, target: Int): Int {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn least_ops_express_target(x: i32, target: i32) -> i32 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer $x\n     * @param Integer $target\n     * @return Integer\n     */\n    function leastOpsExpressTarget($x, $target) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"4K\", \"totalSubmission\": \"9.4K\", \"totalAcceptedRaw\": 3977, \"totalSubmissionRaw\": 9374, \"acRate\": \"42.4%\"}",
  "hints": [],
  "solution": {
    "id": "649",
    "canSeeDetail": true,
    "url": "/articles/least-operators-to-express-number/",
    "content": "[TOC]\n\n## Solution\n---\n#### Approach 1: Dynamic Programming\n\n**Intuition**\n\nFirst, we notice that we can consider blocks of multiplication and division separately.  Each block is a power of `x`: either `x / x`, `x`, `x * x`, `x * x * x`, `x * x * x * x` and so on.  (There is no point to write expressions like `x * x / x` because it uses strictly more operators.)\n\nLet's think of the cost of a block as all the operators needed to express it, including the addition or subtraction operator in front of it.  For example, we can think of `x * x + x + x / x` as `(+ x * x) (+ x) (+ x / x)` for a cost of `2 + 1 + 2`, minus 1 for the leading `+` (so the total cost is `4`).\n\nWe can write the cost of writing a block that has value $$x^e$$: it is $$e$$, except when $$e = 0$$ it is 2.  We want the sum of the costs of all blocks minus 1.\n\nNow, we have the reduced problem: we have the costs of writing all $$x^e$$ or $$-x^e$$, and we want to find the least cost to express the target.\n\nNotice that modulo $$x$$, the only blocks that change the expression are $$x^0$$.  Let $$r_1 = \\text{target} \\pmod x$$.  So we must either subtract $$r_1$$ $$x^0$$'s, or add $$x-r_1$$ $$x^0$$'s.  This will form a new \"remaining\" target, $$\\text{target}_2$$, that is divisible by $$x$$.\n\nThen, modulo $$x^2$$, the only blocks that change the expression are $$x^1$$ and $$x^0$$.  However, since the new target is divisible by $$x$$, there is no point to use $$x^0$$, as we would have to use at least $$x$$ of them to do the same work as one use of $$x^1$$, which is a strictly higher cost.\n\nAgain, in a similar way, we have $$r_2 = \\text{target}_2 \\pmod {x^2}$$, and we must either subtract $$r_2 / x$$ $$x^1$$'s, or add $$x - r_2 / x$$ $$x^1$$'s.  This will form a new remaining target $$\\text{target}_3$$, and so on.\n\nAs a concrete example, say `x = 5, target = 123`.  We either add `2` or subtract `3`.  This leaves us with a target of `120` or `125`.  If the target is `120`, we can either add `5` or subtract `20`, leaving us with a target of `100` or `125`.  If the target is `100`, we can either add `25` or subtract `100`, leaving us with a target of `125` or `0`.  If the target is `125`, we subtract `125`.\n\n**Algorithm**\n\nLet's calculate `dp(i, target)` using a top down `dp`.  Here, `i` will be the exponent of the block $$x^i$$ being considered, and `target` will be the remaining target, already divided by $$x^i$$.\n\nFrom here, the recursion is straightforward: $$r = \\text{target} \\pmod x$$, and we either subtract $$r$$ blocks or add $$(x-r)$$ of them.  The base cases are easily deduced - see the code for more details.\n\n<iframe src=\"https://leetcode.com/playground/zS62KWLG/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"zS62KWLG\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity:  $$O(\\log_{x} \\text{target})$$.  We can prove that we only visit up to two states for each base-x digit of $$\\text{target}$$.\n\n* Space Complexity:  $$O(\\log \\text{target})$$.\n<br />\n<br />\n\n\n---\nAnalysis written by: [@awice](https://leetcode.com/awice).",
    "contentTypeId": "107",
    "rating": {
      "id": "635",
      "count": 30,
      "average": 2.933,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "3\n19",
  "metaData": "{\r\n  \"name\": \"leastOpsExpressTarget\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"x\",\r\n      \"type\": \"integer\"\r\n    },\r\n    {\r\n      \"name\": \"target\",\r\n      \"type\": \"integer\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
