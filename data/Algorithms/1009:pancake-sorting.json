{
  "questionId": "1009",
  "questionFrontendId": "969",
  "boundTopicId": null,
  "title": "Pancake Sorting",
  "titleSlug": "pancake-sorting",
  "categoryTitle": "Algorithms",
  "content": "<p>Given an array <code>A</code>, we can perform a&nbsp;<em>pancake flip</em>:&nbsp;We choose some positive integer&nbsp;<code><strong>k</strong> &lt;= A.length</code>, then reverse the order of the first <strong>k</strong> elements of <code>A</code>.&nbsp; We want to perform zero or more pancake flips (doing them one after another in succession) to sort the array <code>A</code>.</p>\r\n\r\n<p>Return the k-values corresponding to a sequence of pancake flips that sort <code>A</code>.&nbsp; Any&nbsp;valid answer that sorts the array within <code>10 * A.length</code> flips will be judged as correct.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[3,2,4,1]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[4,2,4,3]</span>\r\n<strong>Explanation: </strong>\r\nWe perform 4 pancake flips, with k values 4, 2, 4, and 3.\r\nStarting state: A = [3, 2, 4, 1]\r\nAfter 1st flip (k=4): A = [1, 4, 2, 3]\r\nAfter 2nd flip (k=2): A = [4, 1, 2, 3]\r\nAfter 3rd flip (k=4): A = [3, 2, 1, 4]\r\nAfter 4th flip (k=3): A = [1, 2, 3, 4], which is sorted. \r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[1,2,3]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">[]</span>\r\n<strong>Explanation: </strong>The input is already sorted, so there is no need to flip anything.\r\nNote that other answers, such as [3, 3], would also be accepted.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n</div>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= A.length &lt;= 100</code></li>\r\n\t<li><code>A[i]</code> is a permutation of <code>[1, 2, ..., A.length]</code></li>\r\n</ol>\r\n",
  "isPaidOnly": false,
  "difficulty": "Medium",
  "likes": 245,
  "dislikes": 305,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [],
  "topicTags": [
    {
      "name": "Array",
      "slug": "array"
    },
    {
      "name": "Sort",
      "slug": "sort"
    }
  ],
  "companyTagStats": "{\"2\": [{\"taggedByAdmin\": true, \"name\": \"Square\", \"slug\": \"square\", \"timesEncountered\": 4}], \"1\": [{\"taggedByAdmin\": false, \"name\": \"Microsoft\", \"slug\": \"microsoft\", \"timesEncountered\": 3}, {\"taggedByAdmin\": false, \"name\": \"Facebook\", \"slug\": \"facebook\", \"timesEncountered\": 3}], \"3\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    vector<int> pancakeSort(vector<int>& A) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public List<Integer> pancakeSort(int[] A) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def pancakeSort(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: List[int]\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def pancakeSort(self, A: List[int]) -> List[int]:\n        "
    },
    {
      "lang": "C",
      "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* pancakeSort(int* A, int ASize, int* returnSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public IList<int> PancakeSort(int[] A) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number[]} A\n * @return {number[]}\n */\nvar pancakeSort = function(A) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer[]} a\n# @return {Integer[]}\ndef pancake_sort(a)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func pancakeSort(_ A: [Int]) -> [Int] {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func pancakeSort(A []int) []int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def pancakeSort(A: Array[Int]): List[Int] = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun pancakeSort(A: IntArray): List<Int> {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn pancake_sort(a: Vec<i32>) -> Vec<i32> {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer[] $A\n     * @return Integer[]\n     */\n    function pancakeSort($A) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"19K\", \"totalSubmission\": \"29.8K\", \"totalAcceptedRaw\": 19014, \"totalSubmissionRaw\": 29780, \"acRate\": \"63.8%\"}",
  "hints": [],
  "solution": {
    "id": "657",
    "canSeeDetail": true,
    "url": "/articles/pancake-sorting/",
    "content": "[TOC]\n\n## Solution\n---\n#### Approach 1: Sort Largest to Smallest\n\n**Intuition**\n\nWe can place the largest element (in location `i`, 1-indexed) by flipping `i` to move the element to the first position, then `A.length` to move it to the last position.  Afterwards, the largest element is in the correct position, so we no longer need to pancake-flip by `A.length` or more.\n\nWe can repeat this process until the array is sorted.  Each move will use 2 flips per element.\n\n**Algorithm**\n\nFirst, sort the locations from largest value of A to smallest value of A.\n\nFor each element (from largest to smallest) with location `i`, we will first simulate where this element actually is, based on the pancake flips we have done.  For a pancake flip `f`, if `i <= f`, then the element has moved from location `i` to `f+1 - i`.\n\nAfter, we flip by `i` then `N--` to put this element in the correct position.\n\n<iframe src=\"https://leetcode.com/playground/kQvhoWDb/shared\" frameBorder=\"0\" width=\"100%\" height=\"412\" name=\"kQvhoWDb\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity:  $$O(N^2)$$, where $$N$$ is the length of `A`.\n\n* Space Complexity:  $$O(N)$$.\n<br />\n<br />\n\n\n---\nAnalysis written by: [@awice](https://leetcode.com/awice).",
    "contentTypeId": "107",
    "rating": {
      "id": "643",
      "count": 50,
      "average": 2.04,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "[3,2,4,1]",
  "metaData": "{\r\n  \"name\": \"pancakeSort\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"A\",\r\n      \"type\": \"integer[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"list<integer>\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
