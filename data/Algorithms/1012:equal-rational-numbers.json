{
  "questionId": "1012",
  "questionFrontendId": "972",
  "boundTopicId": null,
  "title": "Equal Rational Numbers",
  "titleSlug": "equal-rational-numbers",
  "categoryTitle": "Algorithms",
  "content": "<p>Given two strings <code>S</code> and <code>T</code>, each of which represents a non-negative rational number, return <strong>True</strong> if and only if they represent the same number. The strings may use parentheses to denote the repeating part of the rational number.</p>\r\n\r\n<p>In general a rational number can be represented using up to&nbsp;three parts: an&nbsp;<em>integer part</em>, a&nbsp;<em>non-repeating part,</em> and a&nbsp;<em>repeating part</em>. The number will be represented&nbsp;in one of the following three ways:</p>\r\n\r\n<ul>\r\n\t<li><code>&lt;IntegerPart&gt;</code> (e.g. 0, 12, 123)</li>\r\n\t<li><code>&lt;IntegerPart&gt;&lt;.&gt;&lt;NonRepeatingPart&gt;</code> &nbsp;(e.g. 0.5, 1., 2.12, 2.0001)</li>\r\n\t<li><code>&lt;IntegerPart&gt;&lt;.&gt;&lt;NonRepeatingPart&gt;&lt;(&gt;&lt;RepeatingPart&gt;&lt;)&gt;</code> (e.g. 0.1(6), 0.9(9), 0.00(1212))</li>\r\n</ul>\r\n\r\n<p>The repeating portion of a decimal expansion is conventionally denoted within a pair of round brackets.&nbsp; For example:</p>\r\n\r\n<p>1 / 6 = 0.16666666... = 0.1(6) = 0.1666(6) = 0.166(66)</p>\r\n\r\n<p>Both 0.1(6) or 0.1666(6) or 0.166(66) are correct representations of 1 / 6.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>S = <span id=\"example-input-1-1\">&quot;0.(52)&quot;</span>, T = <span id=\"example-input-1-2\">&quot;0.5(25)&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">true</span>\r\n<strong>Explanation:\r\n</strong>Because &quot;0.(52)&quot; represents 0.52525252..., and &quot;0.5(25)&quot; represents 0.52525252525..... , the strings represent the same number.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>S = <span id=\"example-input-2-1\">&quot;0.1666(6)&quot;</span>, T = <span id=\"example-input-2-2\">&quot;0.166(66)&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">true</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>S = <span id=\"example-input-3-1\">&quot;0.9(9)&quot;</span>, T = <span id=\"example-input-3-2\">&quot;1.&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">true</span>\r\n<strong>Explanation: </strong>\r\n&quot;0.9(9)&quot; represents 0.999999999... repeated forever, which equals 1.  [<a href=\"https://en.wikipedia.org/wiki/0.999...\" target=\"_blank\">See this link for an explanation.</a>]\r\n&quot;1.&quot; represents the number 1, which is formed correctly: (IntegerPart) = &quot;1&quot; and (NonRepeatingPart) = &quot;&quot;.</pre>\r\n\r\n<p>&nbsp;</p>\r\n</div>\r\n</div>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li>Each part consists only of digits.</li>\r\n\t<li>The <code>&lt;IntegerPart&gt;</code>&nbsp;will&nbsp;not begin with 2 or more zeros.&nbsp; (There is no other restriction on the digits of each part.)</li>\r\n\t<li><code>1 &lt;= &lt;IntegerPart&gt;.length &lt;= 4 </code></li>\r\n\t<li><code>0 &lt;= &lt;NonRepeatingPart&gt;.length &lt;= 4 </code></li>\r\n\t<li><code>1 &lt;= &lt;RepeatingPart&gt;.length &lt;= 4</code></li>\r\n</ol>\r\n",
  "isPaidOnly": false,
  "difficulty": "Hard",
  "likes": 36,
  "dislikes": 117,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [],
  "topicTags": [
    {
      "name": "Math",
      "slug": "math"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"Microsoft\", \"slug\": \"microsoft\", \"timesEncountered\": 0}], \"1\": [], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    bool isRationalEqual(string S, string T) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public boolean isRationalEqual(String S, String T) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def isRationalEqual(self, S, T):\n        \"\"\"\n        :type S: str\n        :type T: str\n        :rtype: bool\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def isRationalEqual(self, S: str, T: str) -> bool:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nbool isRationalEqual(char * S, char * T){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public bool IsRationalEqual(string S, string T) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {string} S\n * @param {string} T\n * @return {boolean}\n */\nvar isRationalEqual = function(S, T) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {String} s\n# @param {String} t\n# @return {Boolean}\ndef is_rational_equal(s, t)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func isRationalEqual(_ S: String, _ T: String) -> Bool {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func isRationalEqual(S string, T string) bool {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def isRationalEqual(S: String, T: String): Boolean = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun isRationalEqual(S: String, T: String): Boolean {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn is_rational_equal(s: String, t: String) -> bool {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param String $S\n     * @param String $T\n     * @return Boolean\n     */\n    function isRationalEqual($S, $T) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"3.3K\", \"totalSubmission\": \"8.1K\", \"totalAcceptedRaw\": 3334, \"totalSubmissionRaw\": 8076, \"acRate\": \"41.3%\"}",
  "hints": [],
  "solution": {
    "id": "656",
    "canSeeDetail": true,
    "url": "/articles/equal-rational-numbers/",
    "content": "[TOC]\n\n## Solution\n---\n#### Approach 1: Fraction Class\n\n**Intuition**\n\nAs both numbers represent a fraction, we need a fraction class to handle fractions.  It should help us add two fractions together, keeping the answer in lowest terms.\n\n**Algorithm**\n\nWe need to make sense of the fraction we are given.  The hard part is the repeating part.\n\nSay we have a string like `S = \"0.(12)\"`.  It represents (for $$r = \\frac{1}{100}$$):\n\n$$\nS = \\frac{12}{100} + \\frac{12}{10000} + \\frac{12}{10^6} + \\frac{12}{10^8} + \\frac{12}{10^{10}} + \\cdots\n$$\n\n$$\nS = 12 * (r + r^2 + r^3 + \\cdots)\n$$\n\n$$\nS = 12 * \\frac{r}{1-r}\n$$\n\nas the sum $$(r + r^2 + r^3 + \\cdots)$$ is a geometric sum.\n\nIn general, for a repeating part $$x$$ with length $$k$$, we have $$r = 10^{-k}$$ and the contribution is $$\\frac{xr}{1-r}$$.\n\nThe other two parts are easier, as it is just a literal interpretation of the value.\n\n<iframe src=\"https://leetcode.com/playground/hvAK7yRs/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"hvAK7yRs\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity:  $$O(1)$$, if we take the length of $$S, T$$ as $$O(1)$$.\n\n* Space Complexity:  $$O(1)$$.\n<br />\n<br />\n\n\n---\nAnalysis written by: [@awice](https://leetcode.com/awice).",
    "contentTypeId": "107",
    "rating": {
      "id": "642",
      "count": 10,
      "average": 4.5,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "\"0.(52)\"\n\"0.5(25)\"",
  "metaData": "{\r\n  \"name\": \"isRationalEqual\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"S\",\r\n      \"type\": \"string\"\r\n    },\r\n    {\r\n      \"name\": \"T\",\r\n      \"type\": \"string\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"boolean\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
