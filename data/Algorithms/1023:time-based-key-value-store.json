{
  "questionId": "1023",
  "questionFrontendId": "981",
  "boundTopicId": null,
  "title": "Time Based Key-Value Store",
  "titleSlug": "time-based-key-value-store",
  "categoryTitle": "Algorithms",
  "content": "<p>Create a timebased key-value store class&nbsp;<code>TimeMap</code>, that supports two operations.</p>\r\n\r\n<p>1. <code>set(string key, string value, int timestamp)</code></p>\r\n\r\n<ul>\r\n\t<li>Stores the <code>key</code> and <code>value</code>, along with the given <code>timestamp</code>.</li>\r\n</ul>\r\n\r\n<p>2. <code>get(string key, int timestamp)</code></p>\r\n\r\n<ul>\r\n\t<li>Returns a value such that <code>set(key, value, timestamp_prev)</code> was called previously, with <code>timestamp_prev &lt;= timestamp</code>.</li>\r\n\t<li>If there are multiple such values, it returns the one with the largest <code>timestamp_prev</code>.</li>\r\n\t<li>If there are no values, it returns the empty string (<code>&quot;&quot;</code>).</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>inputs = <span id=\"example-input-1-1\">[&quot;TimeMap&quot;,&quot;set&quot;,&quot;get&quot;,&quot;get&quot;,&quot;set&quot;,&quot;get&quot;,&quot;get&quot;]</span>, inputs = <span id=\"example-input-1-2\">[[],[&quot;foo&quot;,&quot;bar&quot;,1],[&quot;foo&quot;,1],[&quot;foo&quot;,3],[&quot;foo&quot;,&quot;bar2&quot;,4],[&quot;foo&quot;,4],[&quot;foo&quot;,5]]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[null,null,&quot;bar&quot;,&quot;bar&quot;,null,&quot;bar2&quot;,&quot;bar2&quot;]</span>\r\n<strong>Explanation: </strong><span id=\"example-output-1\">&nbsp; \r\nTimeMap kv; &nbsp; \r\nkv.set(&quot;foo&quot;, &quot;bar&quot;, 1); // store the key &quot;foo&quot; and value &quot;bar&quot; along with timestamp = 1 &nbsp; \r\nkv.get(&quot;foo&quot;, 1);  // output &quot;bar&quot; &nbsp; \r\nkv.get(&quot;foo&quot;, 3); // output &quot;bar&quot; since there is no value corresponding to foo at timestamp 3 and timestamp 2, then the only value is at timestamp 1 ie &quot;bar&quot; &nbsp; \r\nkv.set(&quot;foo&quot;, &quot;bar2&quot;, 4); &nbsp; \r\nkv.get(&quot;foo&quot;, 4); // output &quot;bar2&quot; &nbsp; \r\nkv.get(&quot;foo&quot;, 5); //output &quot;bar2&quot; &nbsp; \r\n</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>inputs = <span id=\"example-input-2-1\">[&quot;TimeMap&quot;,&quot;set&quot;,&quot;set&quot;,&quot;get&quot;,&quot;get&quot;,&quot;get&quot;,&quot;get&quot;,&quot;get&quot;]</span>, inputs = <span id=\"example-input-2-2\">[[],[&quot;love&quot;,&quot;high&quot;,10],[&quot;love&quot;,&quot;low&quot;,20],[&quot;love&quot;,5],[&quot;love&quot;,10],[&quot;love&quot;,15],[&quot;love&quot;,20],[&quot;love&quot;,25]]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">[null,null,null,&quot;&quot;,&quot;high&quot;,&quot;high&quot;,&quot;low&quot;,&quot;low&quot;]</span>\r\n</pre>\r\n</div>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li>All key/value strings are lowercase.</li>\r\n\t<li>All key/value strings have&nbsp;length in the range&nbsp;<code>[1, 100]</code></li>\r\n\t<li>The <code>timestamps</code> for all <code>TimeMap.set</code> operations are strictly increasing.</li>\r\n\t<li><code>1 &lt;= timestamp &lt;= 10^7</code></li>\r\n\t<li><code>TimeMap.set</code> and <code>TimeMap.get</code>&nbsp;functions will be called a total of <code>120000</code> times (combined) per test case.</li>\r\n</ol>\r\n",
  "isPaidOnly": false,
  "difficulty": "Medium",
  "likes": 446,
  "dislikes": 61,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [],
  "topicTags": [
    {
      "name": "Hash Table",
      "slug": "hash-table"
    },
    {
      "name": "Binary Search",
      "slug": "binary-search"
    }
  ],
  "companyTagStats": "{\"2\": [{\"taggedByAdmin\": false, \"name\": \"Zillow\", \"slug\": \"zillow\", \"timesEncountered\": 3}, {\"taggedByAdmin\": false, \"name\": \"Facebook\", \"slug\": \"facebook\", \"timesEncountered\": 3}, {\"taggedByAdmin\": false, \"name\": \"Atlassian\", \"slug\": \"atlassian\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Microsoft\", \"slug\": \"microsoft\", \"timesEncountered\": 2}], \"3\": [{\"taggedByAdmin\": true, \"name\": \"Flexport\", \"slug\": \"flexport\", \"timesEncountered\": 0}, {\"taggedByAdmin\": true, \"name\": \"Databricks\", \"slug\": \"databricks\", \"timesEncountered\": 0}], \"1\": [{\"taggedByAdmin\": false, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 9}, {\"taggedByAdmin\": false, \"name\": \"Lyft\", \"slug\": \"lyft\", \"timesEncountered\": 7}, {\"taggedByAdmin\": false, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 6}, {\"taggedByAdmin\": false, \"name\": \"Sumologic\", \"slug\": \"sumologic\", \"timesEncountered\": 3}, {\"taggedByAdmin\": false, \"name\": \"Twitter\", \"slug\": \"twitter\", \"timesEncountered\": 3}]}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class TimeMap {\npublic:\n    /** Initialize your data structure here. */\n    TimeMap() {\n        \n    }\n    \n    void set(string key, string value, int timestamp) {\n        \n    }\n    \n    string get(string key, int timestamp) {\n        \n    }\n};\n\n/**\n * Your TimeMap object will be instantiated and called as such:\n * TimeMap* obj = new TimeMap();\n * obj->set(key,value,timestamp);\n * string param_2 = obj->get(key,timestamp);\n */"
    },
    {
      "lang": "Java",
      "code": "class TimeMap {\n\n    /** Initialize your data structure here. */\n    public TimeMap() {\n        \n    }\n    \n    public void set(String key, String value, int timestamp) {\n        \n    }\n    \n    public String get(String key, int timestamp) {\n        \n    }\n}\n\n/**\n * Your TimeMap object will be instantiated and called as such:\n * TimeMap obj = new TimeMap();\n * obj.set(key,value,timestamp);\n * String param_2 = obj.get(key,timestamp);\n */"
    },
    {
      "lang": "Python",
      "code": "class TimeMap(object):\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        \n\n    def set(self, key, value, timestamp):\n        \"\"\"\n        :type key: str\n        :type value: str\n        :type timestamp: int\n        :rtype: None\n        \"\"\"\n        \n\n    def get(self, key, timestamp):\n        \"\"\"\n        :type key: str\n        :type timestamp: int\n        :rtype: str\n        \"\"\"\n        \n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)"
    },
    {
      "lang": "Python3",
      "code": "class TimeMap:\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        \n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        \n\n    def get(self, key: str, timestamp: int) -> str:\n        \n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)"
    },
    {
      "lang": "C",
      "code": "\n\n\ntypedef struct {\n    \n} TimeMap;\n\n/** Initialize your data structure here. */\n\nTimeMap* timeMapCreate() {\n    \n}\n\nvoid timeMapSet(TimeMap* obj, char * key, char * value, int timestamp) {\n  \n}\n\nchar * timeMapGet(TimeMap* obj, char * key, int timestamp) {\n  \n}\n\nvoid timeMapFree(TimeMap* obj) {\n    \n}\n\n/**\n * Your TimeMap struct will be instantiated and called as such:\n * TimeMap* obj = timeMapCreate();\n * timeMapSet(obj, key, value, timestamp);\n \n * char * param_2 = timeMapGet(obj, key, timestamp);\n \n * timeMapFree(obj);\n*/"
    },
    {
      "lang": "C#",
      "code": "public class TimeMap {\n\n    /** Initialize your data structure here. */\n    public TimeMap() {\n        \n    }\n    \n    public void Set(string key, string value, int timestamp) {\n        \n    }\n    \n    public string Get(string key, int timestamp) {\n        \n    }\n}\n\n/**\n * Your TimeMap object will be instantiated and called as such:\n * TimeMap obj = new TimeMap();\n * obj.Set(key,value,timestamp);\n * string param_2 = obj.Get(key,timestamp);\n */"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * Initialize your data structure here.\n */\nvar TimeMap = function() {\n    \n};\n\n/** \n * @param {string} key \n * @param {string} value \n * @param {number} timestamp\n * @return {void}\n */\nTimeMap.prototype.set = function(key, value, timestamp) {\n    \n};\n\n/** \n * @param {string} key \n * @param {number} timestamp\n * @return {string}\n */\nTimeMap.prototype.get = function(key, timestamp) {\n    \n};\n\n/** \n * Your TimeMap object will be instantiated and called as such:\n * var obj = new TimeMap()\n * obj.set(key,value,timestamp)\n * var param_2 = obj.get(key,timestamp)\n */"
    },
    {
      "lang": "Ruby",
      "code": "class TimeMap\n\n=begin\n    Initialize your data structure here.\n=end\n    def initialize()\n        \n    end\n\n\n=begin\n    :type key: String\n    :type value: String\n    :type timestamp: Integer\n    :rtype: Void\n=end\n    def set(key, value, timestamp)\n        \n    end\n\n\n=begin\n    :type key: String\n    :type timestamp: Integer\n    :rtype: String\n=end\n    def get(key, timestamp)\n        \n    end\n\n\nend\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap.new()\n# obj.set(key, value, timestamp)\n# param_2 = obj.get(key, timestamp)"
    },
    {
      "lang": "Swift",
      "code": "\nclass TimeMap {\n\n    /** Initialize your data structure here. */\n    init() {\n        \n    }\n    \n    func set(_ key: String, _ value: String, _ timestamp: Int) {\n        \n    }\n    \n    func get(_ key: String, _ timestamp: Int) -> String {\n        \n    }\n}\n\n/**\n * Your TimeMap object will be instantiated and called as such:\n * let obj = TimeMap()\n * obj.set(key, value, timestamp)\n * let ret_2: String = obj.get(key, timestamp)\n */"
    },
    {
      "lang": "Go",
      "code": "type TimeMap struct {\n    \n}\n\n\n/** Initialize your data structure here. */\nfunc Constructor() TimeMap {\n    \n}\n\n\nfunc (this *TimeMap) Set(key string, value string, timestamp int)  {\n    \n}\n\n\nfunc (this *TimeMap) Get(key string, timestamp int) string {\n    \n}\n\n\n/**\n * Your TimeMap object will be instantiated and called as such:\n * obj := Constructor();\n * obj.Set(key,value,timestamp);\n * param_2 := obj.Get(key,timestamp);\n */"
    },
    {
      "lang": "Scala",
      "code": "class TimeMap() {\n\n    /** Initialize your data structure here. */\n    \n\n    def set(key: String, value: String, timestamp: Int) {\n        \n    }\n\n    def get(key: String, timestamp: Int): String = {\n        \n    }\n\n}\n\n/**\n * Your TimeMap object will be instantiated and called as such:\n * var obj = new TimeMap()\n * obj.set(key,value,timestamp)\n * var param_2 = obj.get(key,timestamp)\n */"
    },
    {
      "lang": "Kotlin",
      "code": "class TimeMap() {\n\n    /** Initialize your data structure here. */\n    \n\n    fun set(key: String, value: String, timestamp: Int) {\n        \n    }\n\n    fun get(key: String, timestamp: Int): String {\n        \n    }\n\n}\n\n/**\n * Your TimeMap object will be instantiated and called as such:\n * var obj = TimeMap()\n * obj.set(key,value,timestamp)\n * var param_2 = obj.get(key,timestamp)\n */"
    },
    {
      "lang": "Rust",
      "code": "struct TimeMap {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl TimeMap {\n\n    /** Initialize your data structure here. */\n    fn new() -> Self {\n        \n    }\n    \n    fn set(&self, key: String, value: String, timestamp: i32) {\n        \n    }\n    \n    fn get(&self, key: String, timestamp: i32) -> String {\n        \n    }\n}\n\n/**\n * Your TimeMap object will be instantiated and called as such:\n * let obj = TimeMap::new();\n * obj.set(key, value, timestamp);\n * let ret_2: String = obj.get(key, timestamp);\n */"
    },
    {
      "lang": "PHP",
      "code": "class TimeMap {\n    /**\n     * Initialize your data structure here.\n     */\n    function __construct() {\n        \n    }\n  \n    /**\n     * @param String $key\n     * @param String $value\n     * @param Integer $timestamp\n     * @return NULL\n     */\n    function set($key, $value, $timestamp) {\n        \n    }\n  \n    /**\n     * @param String $key\n     * @param Integer $timestamp\n     * @return String\n     */\n    function get($key, $timestamp) {\n        \n    }\n}\n\n/**\n * Your TimeMap object will be instantiated and called as such:\n * $obj = TimeMap();\n * $obj->set($key, $value, $timestamp);\n * $ret_2 = $obj->get($key, $timestamp);\n */"
    }
  ],
  "stats": "{\"totalAccepted\": \"39.3K\", \"totalSubmission\": \"76K\", \"totalAcceptedRaw\": 39338, \"totalSubmissionRaw\": 75958, \"acRate\": \"51.8%\"}",
  "hints": [],
  "solution": {
    "id": "677",
    "canSeeDetail": true,
    "url": "/articles/time-based-key-value-store/",
    "content": "[TOC]\n\n## Solution\n---\n#### Approach 1: HashMap + Binary Search\n\n**Intuition and Algorithm**\n\nFor each `key` we get or set, we only care about the timestamps and values for that key.  We can store this information in a `HashMap`.\n\nNow, for each `key`, we can binary search the sorted list of timestamps to find the relevant `value` for that `key`.\n\n<iframe src=\"https://leetcode.com/playground/jS7yH954/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"jS7yH954\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity:  $$O(1)$$ for each `set` operation, and $$O(\\log N)$$ for each `get` operation, where $$N$$ is the number of entries in the `TimeMap`.\n\n* Space Complexity:  $$O(N)$$.\n<br />\n<br />\n\n\n---\n#### Approach 2: TreeMap\n\n**Intuition and Algorithm**\n\nIn `Java`, we can use `TreeMap.floorKey(timestamp)` to find the largest timestamp smaller than the given `timestamp`.\n\nWe build our solution in the same way as *Approach 1*, swapping in this functionality.\n\n<iframe src=\"https://leetcode.com/playground/pH7WK8ph/shared\" frameBorder=\"0\" width=\"100%\" height=\"429\" name=\"pH7WK8ph\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity:  $$O(1)$$ for each `set` operation, and $$O(\\log N)$$ for each `get` operation, where $$N$$ is the number of entries in the `TimeMap`.\n\n* Space Complexity:  $$O(N)$$.\n<br />\n<br />\n\n\n---\nAnalysis written by: [@awice](https://leetcode.com/awice).",
    "contentTypeId": "107",
    "rating": {
      "id": "663",
      "count": 12,
      "average": 4.333,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "[\"TimeMap\",\"set\",\"get\",\"get\",\"set\",\"get\",\"get\"]\n[[],[\"foo\",\"bar\",1],[\"foo\",1],[\"foo\",3],[\"foo\",\"bar2\",4],[\"foo\",4],[\"foo\",5]]",
  "metaData": "{\r\n  \"classname\": \"TimeMap\",\r\n  \"maxbytesperline\": 130000,\r\n  \"constructor\": {\r\n      \"params\": [\r\n        {\r\n            \"type\": \"integer\",\r\n            \"name\": \"maxSize\",\r\n            \"lang\": \"c\",\r\n            \"value\": \"64000\"\r\n        }\r\n      ],\r\n      \"comment\": \"Initialize your data structure here.\"\r\n  },\r\n  \"methods\": [\r\n      { \"name\" : \"set\",\r\n        \"params\": [\r\n            {\r\n                \"type\": \"string\",\r\n                \"name\": \"key\"\r\n            },\r\n            {\r\n                \"type\": \"string\",\r\n                \"name\": \"value\"\r\n            },\r\n            {\r\n                \"type\": \"integer\",\r\n                \"name\": \"timestamp\"\r\n            }\r\n        ],\r\n        \"return\": {\r\n            \"type\": \"void\"\r\n        }\r\n      },\r\n      { \"name\": \"get\",\r\n        \"params\": [\r\n            {\r\n                \"type\": \"string\",\r\n                \"name\": \"key\"\r\n            },\r\n            {\r\n                \"type\": \"integer\",\r\n                \"name\": \"timestamp\"\r\n            }\r\n            ],\r\n        \"return\": {\r\n            \"type\": \"string\"\r\n        }\r\n      }\r\n  ],\r\n  \"systemdesign\": true,\r\n  \"params\": [\r\n        {\r\n            \"name\": \"inputs\",\r\n            \"type\": \"integer[]\"\r\n        },\r\n        {\r\n            \"name\": \"inputs\",\r\n            \"type\": \"integer[]\"\r\n        }\r\n    ],\r\n    \"return\": {\r\n        \"type\": \"list<String>\",\r\n        \"dealloc\": true\r\n    }\r\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
