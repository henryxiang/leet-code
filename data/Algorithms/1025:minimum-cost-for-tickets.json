{
  "questionId": "1025",
  "questionFrontendId": "983",
  "boundTopicId": null,
  "title": "Minimum Cost For Tickets",
  "titleSlug": "minimum-cost-for-tickets",
  "categoryTitle": "Algorithms",
  "content": "<p>In a country popular for train travel, you&nbsp;have planned some train travelling one year in advance.&nbsp; The days of the year that you will travel is given as an array <code>days</code>.&nbsp; Each day is an integer from <code>1</code> to <code>365</code>.</p>\r\n\r\n<p>Train tickets are sold in 3 different ways:</p>\r\n\r\n<ul>\r\n\t<li>a 1-day pass is sold for <code>costs[0]</code> dollars;</li>\r\n\t<li>a 7-day pass is sold for <code>costs[1]</code> dollars;</li>\r\n\t<li>a 30-day pass is sold for <code>costs[2]</code> dollars.</li>\r\n</ul>\r\n\r\n<p>The passes allow that many days of consecutive travel.&nbsp; For example, if we get a 7-day pass on day 2, then we can travel for 7 days: day 2, 3, 4, 5, 6, 7, and 8.</p>\r\n\r\n<p>Return the minimum number of dollars you need to travel every day in the given list of <code>days</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>days = <span id=\"example-input-1-1\">[1,4,6,7,8,20]</span>, costs = <span id=\"example-input-1-2\">[2,7,15]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">11</span>\r\n<strong>Explanation: </strong>\r\nFor example, here is one way to buy passes that lets you travel your travel plan:\r\nOn day 1, you bought a 1-day pass for costs[0] = $2, which covered day 1.\r\nOn day 3, you bought a 7-day pass for costs[1] = $7, which covered days 3, 4, ..., 9.\r\nOn day 20, you bought a 1-day pass for costs[0] = $2, which covered day 20.\r\nIn total you spent $11 and covered all the days of your travel.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>days = <span id=\"example-input-2-1\">[1,2,3,4,5,6,7,8,9,10,30,31]</span>, costs = <span id=\"example-input-2-2\">[2,7,15]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">17</span>\r\n<strong>Explanation: </strong>\r\nFor example, here is one way to buy passes that lets you travel your travel plan:\r\nOn day 1, you bought a 30-day pass for costs[2] = $15 which covered days 1, 2, ..., 30.\r\nOn day 31, you bought a 1-day pass for costs[0] = $2 which covered day 31.\r\nIn total you spent $17 and covered all the days of your travel.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n</div>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= days.length &lt;= 365</code></li>\r\n\t<li><code>1 &lt;= days[i] &lt;= 365</code></li>\r\n\t<li><code>days</code> is in strictly increasing order.</li>\r\n\t<li><code>costs.length == 3</code></li>\r\n\t<li><code>1 &lt;= costs[i] &lt;= 1000</code></li>\r\n</ol>\r\n",
  "isPaidOnly": false,
  "difficulty": "Medium",
  "likes": 805,
  "dislikes": 19,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"Coin Change\", \"titleSlug\": \"coin-change\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
  "contributors": [
    {
      "username": "pravo23",
      "profileUrl": "/pravo23/",
      "avatarUrl": "https://assets.leetcode.com/users/pravo23/avatar_1532244130.png"
    }
  ],
  "topicTags": [
    {
      "name": "Dynamic Programming",
      "slug": "dynamic-programming"
    }
  ],
  "companyTagStats": "{\"2\": [{\"taggedByAdmin\": true, \"name\": \"Grab\", \"slug\": \"grab\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Uber\", \"slug\": \"uber\", \"timesEncountered\": 2}], \"1\": [{\"taggedByAdmin\": false, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 2}], \"3\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    int mincostTickets(vector<int>& days, vector<int>& costs) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int mincostTickets(int[] days, int[] costs) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def mincostTickets(self, days, costs):\n        \"\"\"\n        :type days: List[int]\n        :type costs: List[int]\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def mincostTickets(self, days: List[int], costs: List[int]) -> int:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nint mincostTickets(int* days, int daysSize, int* costs, int costsSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public int MincostTickets(int[] days, int[] costs) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number[]} days\n * @param {number[]} costs\n * @return {number}\n */\nvar mincostTickets = function(days, costs) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer[]} days\n# @param {Integer[]} costs\n# @return {Integer}\ndef mincost_tickets(days, costs)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func mincostTickets(_ days: [Int], _ costs: [Int]) -> Int {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func mincostTickets(days []int, costs []int) int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def mincostTickets(days: Array[Int], costs: Array[Int]): Int = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun mincostTickets(days: IntArray, costs: IntArray): Int {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn mincost_tickets(days: Vec<i32>, costs: Vec<i32>) -> i32 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer[] $days\n     * @param Integer[] $costs\n     * @return Integer\n     */\n    function mincostTickets($days, $costs) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"27.4K\", \"totalSubmission\": \"47.3K\", \"totalAcceptedRaw\": 27406, \"totalSubmissionRaw\": 47310, \"acRate\": \"57.9%\"}",
  "hints": [],
  "solution": {
    "id": "675",
    "canSeeDetail": true,
    "url": "/articles/minimum-cost-for-tickets/",
    "content": "[TOC]\n\n## Solution\n---\n#### Approach 1: Dynamic Programming (Day Variant)\n\n**Intuition and Algorithm**\n\nFor each day, if you don't have to travel today, then it's strictly better to wait to buy a pass.  If you have to travel today, you have up to 3 choices: you must buy either a 1-day, 7-day, or 30-day pass.\n\nWe can express those choices as a recursion and use dynamic programming.  Let's say `dp(i)` is the cost to fulfill your travel plan from day `i` to the end of the plan.  Then, if you have to travel today, your cost is:\n\n$$\n\\text{dp}(i) = \\min(\\text{dp}(i+1) + \\text{costs}[0], \\text{dp}(i+7) + \\text{costs}[1], \\text{dp}(i+30) + \\text{costs}[2])\n$$\n\n<iframe src=\"https://leetcode.com/playground/vQP5W3UT/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"vQP5W3UT\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity:  $$O(W)$$, where $$W = 365$$ is the maximum numbered day in your travel plan.\n\n* Space Complexity:  $$O(W)$$.\n<br />\n<br />\n\n\n---\n#### Approach 2: Dynamic Programming (Window Variant)\n\n**Intuition and Algorithm**\n\nAs in *Approach 1*, we only need to buy a travel pass on a day we intend to travel.\n\nNow, let `dp(i)` be the cost to travel from day `days[i]` to the end of the plan.  If say, `j1` is the largest index such that `days[j1] < days[i] + 1`, `j7` is the largest index such that `days[j7] < days[i] + 7`, and `j30` is the largest index such that `days[j30] < days[i] + 30`, then we have:\n\n$$\n\\text{dp}(i) = \\min(\\text{dp}(j1) + \\text{costs}[0], \\text{dp}(j7) + \\text{costs}[1], \\text{dp}(j30) + \\text{costs}[2])\n$$\n\n<iframe src=\"https://leetcode.com/playground/NtqEyFYA/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"NtqEyFYA\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity:  $$O(N)$$, where $$N$$ is the number of unique days in your travel plan.\n\n* Space Complexity:  $$O(N)$$.\n<br />\n<br />\n\n\n---\nAnalysis written by: [@awice](https://leetcode.com/awice).",
    "contentTypeId": "107",
    "rating": {
      "id": "661",
      "count": 35,
      "average": 4.143,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "[1,4,6,7,8,20]\n[2,7,15]",
  "metaData": "{\r\n  \"name\": \"mincostTickets\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"days\",\r\n      \"type\": \"integer[]\"\r\n    },\r\n    {\r\n      \"name\": \"costs\",\r\n      \"type\": \"integer[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
