{
  "questionId": "1028",
  "questionFrontendId": "986",
  "boundTopicId": null,
  "title": "Interval List Intersections",
  "titleSlug": "interval-list-intersections",
  "categoryTitle": "Algorithms",
  "content": "<p>Given two lists&nbsp;of <strong>closed</strong> intervals, each list of intervals is pairwise disjoint and in sorted order.</p>\r\n\r\n<p>Return the intersection of these two interval lists.</p>\r\n\r\n<p><em>(Formally, a closed interval <code>[a, b]</code> (with <code>a &lt;= b</code>) denotes&nbsp;the set of real numbers <code>x</code> with <code>a &lt;= x &lt;= b</code>.&nbsp; The&nbsp;intersection of two closed intervals is a set of real numbers that is either empty, or can be represented as a closed interval.&nbsp; For example, the intersection of [1, 3] and [2, 4] is [2, 3].)</em></p>\r\n\r\n<div>\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/01/30/interval1.png\" style=\"width: 506px; height: 140px;\" /></strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-1-1\">[[0,2],[5,10],[13,23],[24,25]]</span>, B = <span id=\"example-input-1-2\">[[1,5],[8,12],[15,24],[25,26]]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[[1,2],[5,5],[8,10],[15,23],[24,24],[25,25]]</span>\r\n<strong>Reminder: </strong>The inputs and the desired output are lists of Interval&nbsp;objects, and not arrays or lists.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>0 &lt;= A.length &lt; 1000</code></li>\r\n\t<li><code>0 &lt;= B.length &lt; 1000</code></li>\r\n\t<li><code>0 &lt;= A[i].start, A[i].end, B[i].start, B[i].end &lt; 10^9</code></li>\r\n</ol>\r\n\r\n<p><strong>NOTE:</strong>&nbsp;input types have been changed on April 15, 2019. Please reset to default code definition to get new method signature.</p>\r\n</div>\r\n",
  "isPaidOnly": false,
  "difficulty": "Medium",
  "likes": 625,
  "dislikes": 26,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"Merge Intervals\", \"titleSlug\": \"merge-intervals\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Merge Sorted Array\", \"titleSlug\": \"merge-sorted-array\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Employee Free Time\", \"titleSlug\": \"employee-free-time\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
  "contributors": [
    {
      "username": "HolySofa",
      "profileUrl": "/holysofa/",
      "avatarUrl": "https://www.gravatar.com/avatar/5b1af69c2b8ed36e3fcd272dc4e2427b.png?s=200"
    }
  ],
  "topicTags": [
    {
      "name": "Two Pointers",
      "slug": "two-pointers"
    }
  ],
  "companyTagStats": "{\"1\": [{\"taggedByAdmin\": false, \"name\": \"Facebook\", \"slug\": \"facebook\", \"timesEncountered\": 15}, {\"taggedByAdmin\": false, \"name\": \"Uber\", \"slug\": \"uber\", \"timesEncountered\": 7}, {\"taggedByAdmin\": false, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 6}, {\"taggedByAdmin\": false, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 5}], \"3\": [{\"taggedByAdmin\": true, \"name\": \"DoorDash\", \"slug\": \"doordash\", \"timesEncountered\": 0}], \"2\": [{\"taggedByAdmin\": false, \"name\": \"Apple\", \"slug\": \"apple\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Snapchat\", \"slug\": \"snapchat\", \"timesEncountered\": 2}]}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\r\npublic:\r\n    vector<vector<int>> intervalIntersection(vector<vector<int>>& A, vector<vector<int>>& B) {\r\n        \r\n    }\r\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int[][] intervalIntersection(int[][] A, int[][] B) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def intervalIntersection(self, A, B):\n        \"\"\"\n        :type A: List[List[int]]\n        :type B: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def intervalIntersection(self, A: List[List[int]], B: List[List[int]]) -> List[List[int]]:\n        "
    },
    {
      "lang": "C",
      "code": "\n\n/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** intervalIntersection(int** A, int ASize, int* AColSize, int** B, int BSize, int* BColSize, int* returnSize, int** returnColumnSizes){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\r\n    public int[][] IntervalIntersection(int[][] A, int[][] B) {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number[][]} A\n * @param {number[][]} B\n * @return {number[][]}\n */\nvar intervalIntersection = function(A, B) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer[][]} a\r\n# @param {Integer[][]} b\r\n# @return {Integer[][]}\r\ndef interval_intersection(a, b)\r\n    \r\nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\r\n    func intervalIntersection(_ A: [[Int]], _ B: [[Int]]) -> [[Int]] {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Go",
      "code": "func intervalIntersection(A [][]int, B [][]int) [][]int {\r\n    \r\n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\r\n    def intervalIntersection(A: Array[Array[Int]], B: Array[Array[Int]]): Array[Array[Int]] = {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\r\n    fun intervalIntersection(A: Array<IntArray>, B: Array<IntArray>): Array<IntArray> {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn interval_intersection(a: Vec<Vec<i32>>, b: Vec<Vec<i32>>) -> Vec<Vec<i32>> {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer[][] $A\n     * @param Integer[][] $B\n     * @return Integer[][]\n     */\n    function intervalIntersection($A, $B) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"45.6K\", \"totalSubmission\": \"70.4K\", \"totalAcceptedRaw\": 45552, \"totalSubmissionRaw\": 70426, \"acRate\": \"64.7%\"}",
  "hints": [],
  "solution": {
    "id": "685",
    "canSeeDetail": true,
    "url": "/articles/interval-list-intersections/",
    "content": "[TOC]\n\n## Solution\n---\n#### Approach 1: Merge Intervals\n\n**Intuition**\n\nIn an interval `[a, b]`, call `b` the \"endpoint\".\n\nAmong the given intervals, consider the interval `A[0]` with the smallest endpoint.  (Without loss of generality, this interval occurs in array `A`.)\n\nThen, among the intervals in array `B`, `A[0]` can only intersect one such interval in array `B`.  (If two intervals in `B` intersect `A[0]`, then they both share the endpoint of `A[0]` -- but intervals in `B` are disjoint, which is a contradiction.)\n\n**Algorithm**\n\nIf `A[0]` has the smallest endpoint, it can only intersect `B[0]`.  After, we can discard `A[0]` since it cannot intersect anything else.\n\nSimilarly, if `B[0]` has the smallest endpoint, it can only intersect `A[0]`, and we can discard `B[0]` after since it cannot intersect anything else.\n\nWe use two pointers, `i` and `j`, to virtually manage \"discarding\" `A[0]` or `B[0]` repeatedly.\n\n<iframe src=\"https://leetcode.com/playground/ZoFMccAy/shared\" frameBorder=\"0\" width=\"100%\" height=\"463\" name=\"ZoFMccAy\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity:  $$O(M + N)$$, where $$M, N$$ are the lengths of `A` and `B` respectively.\n\n* Space Complexity:  $$O(M + N)$$, the maximum size of the answer.\n<br />\n<br />\n\n\n---\nAnalysis written by: [@awice](https://leetcode.com/awice).",
    "contentTypeId": "107",
    "rating": {
      "id": "670",
      "count": 28,
      "average": 4.75,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "[[0,2],[5,10],[13,23],[24,25]]\n[[1,5],[8,12],[15,24],[25,26]]",
  "metaData": "{\r\n  \"name\": \"intervalIntersection\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"A\",\r\n      \"type\": \"integer[][]\"\r\n    },\r\n    {\r\n      \"name\": \"B\",\r\n      \"type\": \"integer[][]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer[][]\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
