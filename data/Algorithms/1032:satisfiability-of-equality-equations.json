{
  "questionId": "1032",
  "questionFrontendId": "990",
  "boundTopicId": null,
  "title": "Satisfiability of Equality Equations",
  "titleSlug": "satisfiability-of-equality-equations",
  "categoryTitle": "Algorithms",
  "content": "<p>Given an array <font face=\"monospace\">equations</font>&nbsp;of strings that represent relationships between variables, each string <code>equations[i]</code>&nbsp;has length <code>4</code> and takes one of two different forms: <code>&quot;a==b&quot;</code> or <code>&quot;a!=b&quot;</code>.&nbsp; Here, <code>a</code> and <code>b</code> are lowercase letters (not necessarily different) that represent one-letter variable names.</p>\r\n\r\n<p>Return <code>true</code>&nbsp;if and only if it is possible to assign integers to variable names&nbsp;so as to satisfy all the given equations.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ol>\r\n</ol>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[&quot;a==b&quot;,&quot;b!=a&quot;]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">false</span>\r\n<strong>Explanation: </strong>If we assign say, a = 1 and b = 1, then the first equation is satisfied, but not the second.  There is no way to assign the variables to satisfy both equations.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[&quot;b==a&quot;,&quot;a==b&quot;]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">true</span>\r\n<strong>Explanation: </strong>We could assign a = 1 and b = 1 to satisfy both equations.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">[&quot;a==b&quot;,&quot;b==c&quot;,&quot;a==c&quot;]</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">true</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-4-1\">[&quot;a==b&quot;,&quot;b!=c&quot;,&quot;c==a&quot;]</span>\r\n<strong>Output: </strong><span id=\"example-output-4\">false</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 5:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-5-1\">[&quot;c==c&quot;,&quot;b==d&quot;,&quot;x!=z&quot;]</span>\r\n<strong>Output: </strong><span id=\"example-output-5\">true</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= equations.length &lt;= 500</code></li>\r\n\t<li><code>equations[i].length == 4</code></li>\r\n\t<li><code>equations[i][0]</code> and <code>equations[i][3]</code> are lowercase letters</li>\r\n\t<li><code>equations[i][1]</code> is either <code>&#39;=&#39;</code> or <code>&#39;!&#39;</code></li>\r\n\t<li><code>equations[i][2]</code> is&nbsp;<code>&#39;=&#39;</code></li>\r\n</ol>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n",
  "isPaidOnly": false,
  "difficulty": "Medium",
  "likes": 287,
  "dislikes": 3,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [
    {
      "username": "daitoe",
      "profileUrl": "/daitoe/",
      "avatarUrl": "https://www.gravatar.com/avatar/5b5b45530cab324dda9156b5d2c718c3.png?s=200"
    }
  ],
  "topicTags": [
    {
      "name": "Union Find",
      "slug": "union-find"
    },
    {
      "name": "Graph",
      "slug": "graph"
    }
  ],
  "companyTagStats": "{\"2\": [{\"taggedByAdmin\": true, \"name\": \"Sumologic\", \"slug\": \"sumologic\", \"timesEncountered\": 3}], \"1\": [], \"3\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    bool equationsPossible(vector<string>& equations) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public boolean equationsPossible(String[] equations) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def equationsPossible(self, equations):\n        \"\"\"\n        :type equations: List[str]\n        :rtype: bool\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def equationsPossible(self, equations: List[str]) -> bool:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nbool equationsPossible(char ** equations, int equationsSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public bool EquationsPossible(string[] equations) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {string[]} equations\n * @return {boolean}\n */\nvar equationsPossible = function(equations) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {String[]} equations\n# @return {Boolean}\ndef equations_possible(equations)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func equationsPossible(_ equations: [String]) -> Bool {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func equationsPossible(equations []string) bool {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def equationsPossible(equations: Array[String]): Boolean = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun equationsPossible(equations: Array<String>): Boolean {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn equations_possible(equations: Vec<String>) -> bool {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param String[] $equations\n     * @return Boolean\n     */\n    function equationsPossible($equations) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"11.8K\", \"totalSubmission\": \"28.1K\", \"totalAcceptedRaw\": 11811, \"totalSubmissionRaw\": 28147, \"acRate\": \"42.0%\"}",
  "hints": [],
  "solution": {
    "id": "687",
    "canSeeDetail": true,
    "url": "/articles/satisfiability-of-equality-equations/",
    "content": "[TOC]\n\n## Solution\n---\n#### Approach 1: Connected Components\n\n**Intuition**\n\nAll variables that are equal to each other form connected components.  For example, if `a=b, b=c, c=d` then `a, b, c, d` are in the same connected component as they all must be equal to each other.\n\n**Algorithm**\n\nFirst, we use a depth first search to color each variable by connected component based on these equality equations.\n\nAfter coloring these components, we can parse statements of the form `a != b`.  If two components have the same color, then they must be equal, so if we say they can't be equal then it is impossible to satisfy the equations.\n\nOtherwise, our coloring demonstrates a way to satisfy the equations, and thus the result is true.\n\n<iframe src=\"https://leetcode.com/playground/w97VUNhP/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"w97VUNhP\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity:  $$O(N)$$ where $$N$$ is the length of `equations`.\n\n* Space Complexity:  $$O(1)$$, assuming the size of the alphabet is $$O(1)$$.\n<br />\n<br />\n\n\n---\nAnalysis written by: [@awice](https://leetcode.com/awice).",
    "contentTypeId": "107",
    "rating": {
      "id": "672",
      "count": 12,
      "average": 4.583,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "[\"a==b\",\"b!=a\"]",
  "metaData": "{\r\n  \"name\": \"equationsPossible\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"equations\",\r\n      \"type\": \"string[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"boolean\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
