{
  "questionId": "1048",
  "questionFrontendId": "1006",
  "boundTopicId": null,
  "title": "Clumsy Factorial",
  "titleSlug": "clumsy-factorial",
  "categoryTitle": "Algorithms",
  "content": "<p>Normally, the factorial of a positive integer <code>n</code>&nbsp;is the product of all positive integers less than or equal to <code>n</code>.&nbsp; For example, <code>factorial(10) = 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1</code>.</p>\r\n\r\n<p>We instead make a <em>clumsy factorial:</em>&nbsp;using the integers in decreasing order, we&nbsp;swap out the multiply operations for a fixed rotation of operations:&nbsp;multiply (*), divide (/), add (+) and subtract (-) in this order.</p>\r\n\r\n<p>For example, <code>clumsy(10) = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1</code>.&nbsp; However, these operations are still applied using the usual order of operations of arithmetic: we do all multiplication and division steps before any addition or subtraction steps, and multiplication and division steps are processed left to right.</p>\r\n\r\n<p>Additionally, the division that we use is <em>floor division</em>&nbsp;such that&nbsp;<code>10 * 9 / 8</code>&nbsp;equals&nbsp;<code>11</code>.&nbsp; This guarantees the result is&nbsp;an integer.</p>\r\n\r\n<p><code><font face=\"sans-serif, Arial, Verdana, Trebuchet MS\">Implement the&nbsp;</font>clumsy</code>&nbsp;function&nbsp;as defined above: given an integer <code>N</code>, it returns the clumsy factorial of <code>N</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>4\r\n<strong>Output:</strong>&nbsp;7\r\n<strong>Explanation:</strong> 7 = 4 * 3 / 2 + 1\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">10\r\n</span><strong>Output: </strong><span id=\"example-output-1\">12\r\n</span><strong>Explanation: </strong>12 = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= N &lt;= 10000</code></li>\r\n\t<li><code>-2^31 &lt;= answer &lt;= 2^31 - 1</code>&nbsp; (The answer is guaranteed to fit within a 32-bit integer.)</li>\r\n</ol>\r\n",
  "isPaidOnly": false,
  "difficulty": "Medium",
  "likes": 65,
  "dislikes": 113,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [
    {
      "username": "idlezork",
      "profileUrl": "/idlezork/",
      "avatarUrl": "https://www.gravatar.com/avatar/d9f12f65f22c9da5dd95ca25c2ecb08b.png?s=200"
    }
  ],
  "topicTags": [
    {
      "name": "Math",
      "slug": "math"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"Microsoft\", \"slug\": \"microsoft\", \"timesEncountered\": 0}], \"1\": [], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    int clumsy(int N) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int clumsy(int N) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def clumsy(self, N):\n        \"\"\"\n        :type N: int\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def clumsy(self, N: int) -> int:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nint clumsy(int N){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public int Clumsy(int N) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number} N\n * @return {number}\n */\nvar clumsy = function(N) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer} n\n# @return {Integer}\ndef clumsy(n)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func clumsy(_ N: Int) -> Int {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func clumsy(N int) int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def clumsy(N: Int): Int = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun clumsy(N: Int): Int {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn clumsy(n: i32) -> i32 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer $N\n     * @return Integer\n     */\n    function clumsy($N) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"10K\", \"totalSubmission\": \"18.7K\", \"totalAcceptedRaw\": 9998, \"totalSubmissionRaw\": 18705, \"acRate\": \"53.5%\"}",
  "hints": [],
  "solution": null,
  "status": null,
  "sampleTestCase": "4",
  "metaData": "{\r\n  \"name\": \"clumsy\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"N\",\r\n      \"type\": \"integer\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
