{
  "questionId": "1050",
  "questionFrontendId": "1008",
  "boundTopicId": null,
  "title": "Construct Binary Search Tree from Preorder Traversal",
  "titleSlug": "construct-binary-search-tree-from-preorder-traversal",
  "categoryTitle": "Algorithms",
  "content": "<p>Return the root node of a binary <strong>search</strong> tree that matches the given <code>preorder</code> traversal.</p>\r\n\r\n<p><em>(Recall that a binary search tree&nbsp;is a binary tree where for every <font face=\"monospace\">node</font>, any descendant of <code>node.left</code> has a value <code>&lt;</code>&nbsp;<code>node.val</code>, and any descendant of <code>node.right</code> has a value <code>&gt;</code>&nbsp;<code>node.val</code>.&nbsp; Also recall that a preorder traversal&nbsp;displays the value of the&nbsp;<code>node</code> first, then traverses <code>node.left</code>, then traverses <code>node.right</code>.)</em></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[8,5,1,7,10,12]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[8,5,10,1,7,null,12]\r\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/03/06/1266.png\" style=\"height: 200px; width: 306px;\" /></span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong>&nbsp;</p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= preorder.length &lt;= 100</code></li>\r\n\t<li>The values of <code>preorder</code> are distinct.</li>\r\n</ol>\r\n",
  "isPaidOnly": false,
  "difficulty": "Medium",
  "likes": 474,
  "dislikes": 19,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [
    {
      "username": "shwetat",
      "profileUrl": "/shwetat/",
      "avatarUrl": "https://www.gravatar.com/avatar/2d8a80682df7a0761dd8135e48bab2e5.png?s=200"
    }
  ],
  "topicTags": [
    {
      "name": "Tree",
      "slug": "tree"
    }
  ],
  "companyTagStats": "{\"1\": [{\"taggedByAdmin\": false, \"name\": \"Facebook\", \"slug\": \"facebook\", \"timesEncountered\": 4}], \"2\": [{\"taggedByAdmin\": false, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 2}], \"3\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* bstFromPreorder(vector<int>& preorder) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public TreeNode bstFromPreorder(int[] preorder) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def bstFromPreorder(self, preorder):\n        \"\"\"\n        :type preorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def bstFromPreorder(self, preorder: List[int]) -> TreeNode:\n        "
    },
    {
      "lang": "C",
      "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n\n\nstruct TreeNode* bstFromPreorder(int* preorder, int preorderSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public TreeNode BstFromPreorder(int[] preorder) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {number[]} preorder\n * @return {TreeNode}\n */\nvar bstFromPreorder = function(preorder) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val)\n#         @val = val\n#         @left, @right = nil, nil\n#     end\n# end\n\n# @param {Integer[]} preorder\n# @return {TreeNode}\ndef bst_from_preorder(preorder)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func bstFromPreorder(_ preorder: [Int]) -> TreeNode? {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc bstFromPreorder(preorder []int) *TreeNode {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def bstFromPreorder(preorder: Array[Int]): TreeNode = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun bstFromPreorder(preorder: IntArray): TreeNode? {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn bst_from_preorder(preorder: Vec<i32>) -> Option<Rc<RefCell<TreeNode>>> {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($value) { $this->val = $value; }\n * }\n */\nclass Solution {\n\n    /**\n     * @param Integer[] $preorder\n     * @return TreeNode\n     */\n    function bstFromPreorder($preorder) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"32K\", \"totalSubmission\": \"42.9K\", \"totalAcceptedRaw\": 31953, \"totalSubmissionRaw\": 42908, \"acRate\": \"74.5%\"}",
  "hints": [],
  "solution": {
    "id": "724",
    "canSeeDetail": true,
    "url": "/articles/construct-bst-from-preorder-traversal/",
    "content": "[TOC]\r\n\r\n## Solution\r\n\r\n--- \r\n\r\n#### Approach 1: Construct binary tree from preorder and inorder traversal\r\n\r\n**Intuition**\r\n\r\nThis approach is not the optimal one because of $$\\mathcal{O}(N \\log N)$$ time complexity,\r\nbut very straightforward. \r\n\r\nLet's use here two facts:\r\n\r\n- [Binary tree could be constructed from preorder and inorder traversal](https://leetcode.com/articles/construct-binary-tree-from-preorder-and-inorder-tr/).\r\n\r\n- [Inorder traversal of BST is an array sorted in the ascending order](https://leetcode.com/articles/delete-node-in-a-bst/).\r\n\r\n**Algorithm**\r\n\r\n- Construct inorder traversal by sorting the preorder array.\r\n\r\n- [Construct binary tree from preorder and inorder traversal](https://leetcode.com/articles/construct-binary-tree-from-preorder-and-inorder-tr/):\r\nthe idea is to peek the elements one by one from the preorder array and\r\ntry to put them as a left or as a right child if it's possible. \r\nIf it's impossible - just put `null` as a child and proceed further.\r\nThe possibility to use an element as a child is checked by an inorder array: \r\nif it contains no elements for this subtree, then the element couldn't be used here,\r\nand one should use `null` as a child instead.\r\n\r\n**Implementation**\r\n\r\n![bla](../Figures/1008/preorder_inorder.png)\r\n\r\n<iframe src=\"https://leetcode.com/playground/sxJ5Ui2n/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"sxJ5Ui2n\"></iframe>\r\n\r\n**Complexity Analysis**\r\n\r\n* Time complexity : $$\\mathcal{O}(N \\log N)$$. $$\\mathcal{O}(N \\log N)$$ to sort preorder array\r\nand $$\\mathcal{O}(N)$$ to construct the binary tree.\r\n* Space complexity : $$\\mathcal{O}(N)$$ the inorder traversal and the tree.\r\n\r\n<br />\r\n<br />\r\n\r\n\r\n---\r\n#### Approach 2: Recursion\r\n\r\n**Intuition**\r\n\r\nIt's quite obvious that the best possible time complexity for this problem \r\nis $$\\mathcal{O}(N)$$ and hence the approach 1 is not the best one.\r\n \r\nBasically, the inorder traversal above was used only to check if the element\r\ncould be placed in this subtree. \r\nSince one deals with a BST here, this could be verified with the help of lower and \r\nupper limits for each element as for the [validate BST problem](https://leetcode.com/articles/validate-binary-search-tree/).\r\nThis way there is no need in inorder traversal and the time\r\ncomplexity is $$\\mathcal{O}(N)$$.\r\n\r\n**Algorithm**\r\n\r\n- Initiate the lower and upper limits as negative and positive infinity because\r\none could always place the root.\r\n\r\n- Start from the first element in the preorder array `idx = 0`.\r\n\r\n- Return `helper(lower, upper)`:\r\n\r\n    - If the preorder array is used up `idx = n` then the tree is\r\n    constructed, return null.\r\n    \r\n    - If current value `val = preorder[idx]` is smaller then lower limit,\r\n    or larger than upper limit, return null.\r\n    \r\n    - If the current value is in the limits, place it here `root = \r\n    TreeNode(val)`\r\n    and proceed to construct recursively left and right subtrees:\r\n    `root.left = helper(lower, val)` and `root.right = helper(val, upper)`.\r\n\r\n    - Return `root`.\r\n\r\n**Implementation**\r\n\r\n![bla](../Figures/1008/recursion2.png)\r\n\r\n<iframe src=\"https://leetcode.com/playground/b5KryeVG/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"b5KryeVG\"></iframe>\r\n\r\n**Complexity Analysis**\r\n\r\n* Time complexity : $$\\mathcal{O}(N)$$ since we visit each node exactly once. \r\n* Space complexity : $$\\mathcal{O}(N)$$ to keep the entire tree.\r\n<br />\r\n<br />\r\n\r\n\r\n---\r\n#### Approach 3: Iteration\r\n\r\n**Algorithm**\r\n\r\nThe recursion above could be converted into the iteration \r\nwith the help of stack.\r\n\r\n- Pick the first preorder element as a root `root = new TreeNode(preorder[0])`\r\nand push it into stack.\r\n\r\n- Use `for` loop to iterate along the elements of preorder array :\r\n\r\n    - Pick the last element of the stack as a parent node, and the \r\n    the current element of preorder as a child node.\r\n    \r\n    - Adjust the parent node : pop out of stack all elements\r\n    with the value smaller than the child value.\r\n    Change the parent node at each pop `node = stack.pop()`.\r\n    \r\n    - If `node.val < child.val` - put the child as a right \r\n    child of the node : `node.right = child`.\r\n    \r\n    - Else - as a left child : `node.left = child`.\r\n    \r\n    - Push child node into the stack.\r\n    \r\n- Return `root`.\r\n\r\n\r\n**Implementation**\r\n\r\n!?!../Documents/1008_LIS.json:1000,440!?!\r\n\r\n<iframe src=\"https://leetcode.com/playground/VYqypAf2/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"VYqypAf2\"></iframe>\r\n\r\n**Complexity Analysis**\r\n\r\n* Time complexity : $$\\mathcal{O}(N)$$ since we visit each node exactly once.\r\n \r\n* Space complexity : $$\\mathcal{O}(N)$$ to keep the stack and the tree.\r\n\r\nAnalysis written by @[liaison](https://leetcode.com/liaison/)\r\nand @[andvary](https://leetcode.com/andvary/)",
    "contentTypeId": "107",
    "rating": {
      "id": "709",
      "count": 15,
      "average": 4.867,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "[8,5,1,7,10,12]",
  "metaData": "{\r\n  \"name\": \"bstFromPreorder\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"preorder\",\r\n      \"type\": \"integer[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"TreeNode\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
