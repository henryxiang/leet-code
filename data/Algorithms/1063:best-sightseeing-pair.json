{
  "questionId": "1063",
  "questionFrontendId": "1014",
  "boundTopicId": null,
  "title": "Best Sightseeing Pair",
  "titleSlug": "best-sightseeing-pair",
  "categoryTitle": "Algorithms",
  "content": "<p>Given an array <code>A</code> of positive integers, <code>A[i]</code> represents the value of the <code>i</code>-th sightseeing spot, and two&nbsp;sightseeing spots <code>i</code> and <code>j</code>&nbsp;have distance <code>j - i</code>&nbsp;between them.</p>\r\n\r\n<p>The <em>score</em>&nbsp;of a pair (<code>i &lt; j</code>) of sightseeing spots is (<code>A[i] + A[j] + i&nbsp;- j)</code> : the sum of the values of the sightseeing spots, <strong>minus</strong> the distance between them.</p>\r\n\r\n<p>Return the maximum score of a pair of sightseeing spots.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[8,1,5,2,6]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">11\r\n<strong>Explanation:</strong> i = 0, j = 2, </span><code>A[i] + A[j] + i - j = 8 + 5 + 0 - 2 = 11</code>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>2 &lt;= A.length &lt;= 50000</code></li>\r\n\t<li><code>1 &lt;= A[i] &lt;= 1000</code></li>\r\n</ol>",
  "isPaidOnly": false,
  "difficulty": "Medium",
  "likes": 312,
  "dislikes": 19,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [
    {
      "username": "lee215",
      "profileUrl": "/lee215/",
      "avatarUrl": "https://assets.leetcode.com/users/lee215/avatar_1551541889.png"
    }
  ],
  "topicTags": [
    {
      "name": "Array",
      "slug": "array"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"Wayfair\", \"slug\": \"wayfair\", \"timesEncountered\": 0}], \"1\": [], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    int maxScoreSightseeingPair(vector<int>& A) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int maxScoreSightseeingPair(int[] A) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def maxScoreSightseeingPair(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def maxScoreSightseeingPair(self, A: List[int]) -> int:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nint maxScoreSightseeingPair(int* A, int ASize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\r\n    public int MaxScoreSightseeingPair(int[] A) {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number[]} A\n * @return {number}\n */\nvar maxScoreSightseeingPair = function(A) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer[]} a\r\n# @return {Integer}\r\ndef max_score_sightseeing_pair(a)\r\n    \r\nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\r\n    func maxScoreSightseeingPair(_ A: [Int]) -> Int {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Go",
      "code": "func maxScoreSightseeingPair(A []int) int {\r\n    \r\n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\r\n    def maxScoreSightseeingPair(A: Array[Int]): Int = {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\r\n    fun maxScoreSightseeingPair(A: IntArray): Int {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn max_score_sightseeing_pair(a: Vec<i32>) -> i32 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer[] $A\n     * @return Integer\n     */\n    function maxScoreSightseeingPair($A) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"12.3K\", \"totalSubmission\": \"24K\", \"totalAcceptedRaw\": 12322, \"totalSubmissionRaw\": 23972, \"acRate\": \"51.4%\"}",
  "hints": [
    "Can you tell the best sightseeing spot in one pass (ie. as you iterate over the input?)  What should we store or keep track of as we iterate to do this?"
  ],
  "solution": null,
  "status": null,
  "sampleTestCase": "[8,1,5,2,6]",
  "metaData": "{\r\n  \"name\": \"maxScoreSightseeingPair\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"A\",\r\n      \"type\": \"integer[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
