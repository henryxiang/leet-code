{
  "questionId": "1067",
  "questionFrontendId": "1066",
  "boundTopicId": null,
  "title": "Campus Bikes II",
  "titleSlug": "campus-bikes-ii",
  "categoryTitle": "Algorithms",
  "content": "<p>On a campus represented as a 2D grid, there are <code>N</code> workers and <code>M</code> bikes, with <code>N &lt;= M</code>. Each worker and bike is a 2D coordinate on this grid.</p>\r\n\r\n<p>We assign one unique bike to each worker so that the sum of the Manhattan distances between each worker and their assigned bike is minimized.</p>\r\n\r\n<p>The Manhattan distance between two points <code>p1</code> and <code>p2</code> is <code>Manhattan(p1, p2) = |p1.x - p2.x| + |p1.y - p2.y|</code>.</p>\r\n\r\n<p>Return the minimum possible sum of Manhattan distances between each worker and their assigned bike.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/03/06/1261_example_1_v2.png\" style=\"width: 264px; height: 264px;\" /></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>workers = <span id=\"example-input-1-1\">[[0,0],[2,1]]</span>, bikes = <span id=\"example-input-1-2\">[[1,2],[3,3]]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">6</span>\r\n<strong>Explanation: </strong>\r\nWe assign bike 0 to worker 0, bike 1 to worker 1. The Manhattan distance of both assignments is 3, so the output is 6.\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/03/06/1261_example_2_v2.png\" style=\"width: 264px; height: 264px;\" /></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>workers = <span id=\"example-input-2-1\">[[0,0],[1,1],[2,0]]</span>, bikes = <span id=\"example-input-2-2\">[[1,0],[2,2],[2,1]]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">4</span>\r\n<strong>Explanation: </strong>\r\nWe first assign bike 0 to worker 0, then assign bike 1 to worker 1 or worker 2, bike 2 to worker 2 or worker 1. Both assignments lead to sum of the Manhattan distances as 4.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>0 &lt;= workers[i][0], workers[i][1], bikes[i][0], bikes[i][1] &lt; 1000</code></li>\r\n\t<li>All worker and bike locations are distinct.</li>\r\n\t<li><code>1 &lt;= workers.length &lt;= bikes.length &lt;= 10</code></li>\r\n</ol>",
  "isPaidOnly": true,
  "difficulty": "Medium",
  "likes": 275,
  "dislikes": 22,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"Campus Bikes\", \"titleSlug\": \"campus-bikes\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
  "contributors": [],
  "topicTags": [
    {
      "name": "Dynamic Programming",
      "slug": "dynamic-programming"
    },
    {
      "name": "Backtracking",
      "slug": "backtracking"
    }
  ],
  "companyTagStats": "{\"1\": [{\"taggedByAdmin\": true, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 6}, {\"taggedByAdmin\": false, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 2}], \"2\": [], \"3\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\r\npublic:\r\n    int assignBikes(vector<vector<int>>& workers, vector<vector<int>>& bikes) {\r\n        \r\n    }\r\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int assignBikes(int[][] workers, int[][] bikes) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def assignBikes(self, workers, bikes):\n        \"\"\"\n        :type workers: List[List[int]]\n        :type bikes: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def assignBikes(self, workers: List[List[int]], bikes: List[List[int]]) -> int:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nint assignBikes(int** workers, int workersSize, int* workersColSize, int** bikes, int bikesSize, int* bikesColSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\r\n    public int AssignBikes(int[][] workers, int[][] bikes) {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number[][]} workers\n * @param {number[][]} bikes\n * @return {number}\n */\nvar assignBikes = function(workers, bikes) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer[][]} workers\r\n# @param {Integer[][]} bikes\r\n# @return {Integer}\r\ndef assign_bikes(workers, bikes)\r\n    \r\nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\r\n    func assignBikes(_ workers: [[Int]], _ bikes: [[Int]]) -> Int {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Go",
      "code": "func assignBikes(workers [][]int, bikes [][]int) int {\r\n    \r\n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\r\n    def assignBikes(workers: Array[Array[Int]], bikes: Array[Array[Int]]): Int = {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\r\n    fun assignBikes(workers: Array<IntArray>, bikes: Array<IntArray>): Int {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn assign_bikes(workers: Vec<Vec<i32>>, bikes: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer[][] $workers\n     * @param Integer[][] $bikes\n     * @return Integer\n     */\n    function assignBikes($workers, $bikes) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"14.3K\", \"totalSubmission\": \"26.8K\", \"totalAcceptedRaw\": 14295, \"totalSubmissionRaw\": 26834, \"acRate\": \"53.3%\"}",
  "hints": [
    "Model the problem with a dp(pos, mask) where pos represents the current bike to be assigned and mask the set of available workers."
  ],
  "solution": null,
  "status": null,
  "sampleTestCase": "[[0,0],[2,1]]\n[[1,2],[3,3]]",
  "metaData": "{\r\n  \"name\": \"assignBikes\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"workers\",\r\n      \"type\": \"integer[][]\"\r\n    },\r\n    {\r\n      \"name\": \"bikes\",\r\n      \"type\": \"integer[][]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
