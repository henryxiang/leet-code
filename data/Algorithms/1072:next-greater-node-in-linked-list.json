{
  "questionId": "1072",
  "questionFrontendId": "1019",
  "boundTopicId": null,
  "title": "Next Greater Node In Linked List",
  "titleSlug": "next-greater-node-in-linked-list",
  "categoryTitle": "Algorithms",
  "content": "<p>We are given a linked list with&nbsp;<code>head</code>&nbsp;as the first node.&nbsp; Let&#39;s number the&nbsp;nodes in the list: <code>node_1, node_2, node_3, ...</code> etc.</p>\r\n\r\n<p>Each node may have a <em>next larger</em> <strong>value</strong>: for <code>node_i</code>,&nbsp;<code>next_larger(node_i)</code>&nbsp;is the <code>node_j.val</code> such that <code>j &gt; i</code>, <code>node_j.val &gt; node_i.val</code>, and <code>j</code> is the smallest possible choice.&nbsp; If such a <code>j</code>&nbsp;does not exist, the next larger value is <code>0</code>.</p>\r\n\r\n<p>Return an array of integers&nbsp;<code>answer</code>, where <code>answer[i] = next_larger(node_{i+1})</code>.</p>\r\n\r\n<p>Note that in the example <strong>inputs</strong>&nbsp;(not outputs) below, arrays such as <code>[2,1,5]</code>&nbsp;represent the serialization of a linked list with a head node value of 2, second node value of 1, and third node value of 5.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[2,1,5]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[5,5,0]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[2,7,4,3,5]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">[7,0,5,5,0]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">[1,7,5,1,9,2,5,1]</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">[7,9,9,9,0,5,0,0]</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong><span>Note:</span></strong></p>\r\n\r\n<ol>\r\n\t<li><code><span>1 &lt;= node.val&nbsp;&lt;= 10^9</span></code><span>&nbsp;for each node in the linked list.</span></li>\r\n\t<li>The given list has length in the range <code>[0, 10000]</code>.</li>\r\n</ol>\r\n</div>\r\n</div>\r\n</div>",
  "isPaidOnly": false,
  "difficulty": "Medium",
  "likes": 417,
  "dislikes": 26,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [
    {
      "username": "anupkmr03",
      "profileUrl": "/anupkmr03/",
      "avatarUrl": "https://assets.leetcode.com/users/anupkmr03/avatar_1550520938.png"
    }
  ],
  "topicTags": [
    {
      "name": "Linked List",
      "slug": "linked-list"
    },
    {
      "name": "Stack",
      "slug": "stack"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"Microsoft\", \"slug\": \"microsoft\", \"timesEncountered\": 0}], \"1\": [{\"taggedByAdmin\": false, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 2}], \"2\": [{\"taggedByAdmin\": false, \"name\": \"Uber\", \"slug\": \"uber\", \"timesEncountered\": 3}]}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    vector<int> nextLargerNodes(ListNode* head) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public int[] nextLargerNodes(ListNode head) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def nextLargerNodes(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: List[int]\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def nextLargerNodes(self, head: ListNode) -> List[int]:\n        "
    },
    {
      "lang": "C",
      "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\n\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* nextLargerNodes(struct ListNode* head, int* returnSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     public int val;\r\n *     public ListNode next;\r\n *     public ListNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public int[] NextLargerNodes(ListNode head) {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number[]}\n */\nvar nextLargerNodes = function(head) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# Definition for singly-linked list.\r\n# class ListNode\r\n#     attr_accessor :val, :next\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @next = nil\r\n#     end\r\n# end\r\n\r\n# @param {ListNode} head\r\n# @return {Integer[]}\r\ndef next_larger_nodes(head)\r\n    \r\nend"
    },
    {
      "lang": "Swift",
      "code": "/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     public var val: Int\r\n *     public var next: ListNode?\r\n *     public init(_ val: Int) {\r\n *         self.val = val\r\n *         self.next = nil\r\n *     }\r\n * }\r\n */\r\nclass Solution {\r\n    func nextLargerNodes(_ head: ListNode?) -> [Int] {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Go",
      "code": "/**\r\n * Definition for singly-linked list.\r\n * type ListNode struct {\r\n *     Val int\r\n *     Next *ListNode\r\n * }\r\n */\r\nfunc nextLargerNodes(head *ListNode) []int {\r\n    \r\n}"
    },
    {
      "lang": "Scala",
      "code": "/**\r\n * Definition for singly-linked list.\r\n * class ListNode(var _x: Int = 0) {\r\n *   var next: ListNode = null\r\n *   var x: Int = _x\r\n * }\r\n */\r\nobject Solution {\r\n    def nextLargerNodes(head: ListNode): Array[Int] = {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Kotlin",
      "code": "/**\r\n * Example:\r\n * var li = ListNode(5)\r\n * var v = li.`val`\r\n * Definition for singly-linked list.\r\n * class ListNode(var `val`: Int) {\r\n *     var next: ListNode? = null\r\n * }\r\n */\r\nclass Solution {\r\n    fun nextLargerNodes(head: ListNode?): IntArray {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Rust",
      "code": "// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n// \n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nimpl Solution {\n    pub fn next_larger_nodes(head: Option<Box<ListNode>>) -> Vec<i32> {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val) { $this->val = $val; }\n * }\n */\nclass Solution {\n\n    /**\n     * @param ListNode $head\n     * @return Integer[]\n     */\n    function nextLargerNodes($head) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"25.7K\", \"totalSubmission\": \"45.4K\", \"totalAcceptedRaw\": 25740, \"totalSubmissionRaw\": 45389, \"acRate\": \"56.7%\"}",
  "hints": [
    "We can use a stack that stores nodes in monotone decreasing order of value.  When we see a node_j with a larger value, every node_i in the stack has next_larger(node_i) = node_j ."
  ],
  "solution": null,
  "status": null,
  "sampleTestCase": "[2,1,5]",
  "metaData": "{\r\n  \"name\": \"nextLargerNodes\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"head\",\r\n      \"type\": \"ListNode\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer[]\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
