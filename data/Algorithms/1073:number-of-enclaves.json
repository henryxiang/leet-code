{
  "questionId": "1073",
  "questionFrontendId": "1020",
  "boundTopicId": null,
  "title": "Number of Enclaves",
  "titleSlug": "number-of-enclaves",
  "categoryTitle": "Algorithms",
  "content": "<p>Given a 2D array <code>A</code>, each cell is 0 (representing sea) or 1 (representing land)</p>\r\n\r\n<p>A move consists of walking from one land square 4-directionally to another land square, or off the boundary of the grid.</p>\r\n\r\n<p>Return the number of land squares in the grid for which we <strong>cannot</strong> walk off the boundary of the grid in any number of moves.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[[0,0,0,0],[1,0,1,0],[0,1,1,0],[0,0,0,0]]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">3</span>\r\n<strong>Explanation: </strong>\r\nThere are three 1s that are enclosed by 0s, and one 1 that isn&#39;t enclosed because its on the boundary.</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[[0,1,1,0],[0,0,1,0],[0,0,1,0],[0,0,0,0]]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">0</span>\r\n<strong>Explanation: </strong>\r\nAll 1s are either on the boundary or can reach the boundary.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= A.length &lt;= 500</code></li>\r\n\t<li><code>1 &lt;= A[i].length &lt;= 500</code></li>\r\n\t<li><code>0 &lt;= A[i][j] &lt;= 1</code></li>\r\n\t<li>All rows have the same size.</li>\r\n</ol>",
  "isPaidOnly": false,
  "difficulty": "Medium",
  "likes": 148,
  "dislikes": 17,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [
    {
      "username": "joyxian",
      "profileUrl": "/joyxian/",
      "avatarUrl": "https://www.gravatar.com/avatar/84dcc92c50f11f4132e4898e6aed4c75.png?s=200"
    }
  ],
  "topicTags": [
    {
      "name": "Depth-first Search",
      "slug": "depth-first-search"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 0}], \"1\": [], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    int numEnclaves(vector<vector<int>>& A) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int numEnclaves(int[][] A) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def numEnclaves(self, A):\n        \"\"\"\n        :type A: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def numEnclaves(self, A: List[List[int]]) -> int:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nint numEnclaves(int** A, int ASize, int* AColSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\r\n    public int NumEnclaves(int[][] A) {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number[][]} A\n * @return {number}\n */\nvar numEnclaves = function(A) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer[][]} a\r\n# @return {Integer}\r\ndef num_enclaves(a)\r\n    \r\nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\r\n    func numEnclaves(_ A: [[Int]]) -> Int {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Go",
      "code": "func numEnclaves(A [][]int) int {\r\n    \r\n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\r\n    def numEnclaves(A: Array[Array[Int]]): Int = {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\r\n    fun numEnclaves(A: Array<IntArray>): Int {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn num_enclaves(a: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer[][] $A\n     * @return Integer\n     */\n    function numEnclaves($A) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"11.6K\", \"totalSubmission\": \"20.9K\", \"totalAcceptedRaw\": 11570, \"totalSubmissionRaw\": 20907, \"acRate\": \"55.3%\"}",
  "hints": [
    "Can you model this problem as a graph problem?  Create n * m + 1 nodes where n * m nodes represents each cell of the map and one extra node to represent the exterior of the map.",
    "In the map add edges between neighbors on land cells. And add edges between the exterior and land nodes which are in the boundary.\r\nReturn as answer the number of nodes that are not reachable from the exterior node."
  ],
  "solution": null,
  "status": null,
  "sampleTestCase": "[[0,0,0,0],[1,0,1,0],[0,1,1,0],[0,0,0,0]]",
  "metaData": "{\r\n  \"name\": \"numEnclaves\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"A\",\r\n      \"type\": \"integer[][]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
