{
  "questionId": "1094",
  "questionFrontendId": "1030",
  "boundTopicId": null,
  "title": "Matrix Cells in Distance Order",
  "titleSlug": "matrix-cells-in-distance-order",
  "categoryTitle": "Algorithms",
  "content": "<p>We are given a matrix with <code>R</code> rows and <code>C</code> columns has cells with integer coordinates&nbsp;<code>(r, c)</code>, where <code>0 &lt;= r &lt; R</code> and <code>0 &lt;= c &lt; C</code>.</p>\r\n\r\n<p>Additionally, we are given a cell in that matrix with coordinates&nbsp;<code>(r0, c0)</code>.</p>\r\n\r\n<p>Return the coordinates of&nbsp;all cells in the matrix, sorted by their distance from <code>(r0, c0)</code>&nbsp;from smallest distance to largest distance.&nbsp; Here,&nbsp;the distance between two cells <code>(r1, c1)</code> and <code>(r2, c2)</code> is the Manhattan distance,&nbsp;<code>|r1 - r2| + |c1 - c2|</code>.&nbsp; (You may return the answer in any order that satisfies this condition.)</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>R = <span id=\"example-input-1-1\">1</span>, C = <span id=\"example-input-1-2\">2</span>, r0 = <span id=\"example-input-1-3\">0</span>, c0 = <span id=\"example-input-1-4\">0</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[[0,0],[0,1]]\r\n<strong>Explanation:</strong> The distances from (r0, c0) to other cells are: [0,1]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>R = <span id=\"example-input-2-1\">2</span>, C = <span id=\"example-input-2-2\">2</span>, r0 = <span id=\"example-input-2-3\">0</span>, c0 = <span id=\"example-input-2-4\">1</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">[[0,1],[0,0],[1,1],[1,0]]\r\n</span><span id=\"example-output-1\"><strong>Explanation:</strong> The distances from (r0, c0) to other cells are:</span><span> [0,1,1,2]</span>\r\nThe answer [[0,1],[1,1],[0,0],[1,0]] would also be accepted as correct.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>R = <span id=\"example-input-3-1\">2</span>, C = <span id=\"example-input-3-2\">3</span>, r0 = <span id=\"example-input-3-3\">1</span>, c0 = <span id=\"example-input-3-4\">2</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">[[1,2],[0,2],[1,1],[0,1],[1,0],[0,0]]</span>\r\n<span id=\"example-output-1\"><strong>Explanation:</strong> The distances from (r0, c0) to other cells are:</span><span> [0,1,1,2,2,3]</span>\r\nThere are other answers that would also be accepted as correct, such as [[1,2],[1,1],[0,2],[1,0],[0,1],[0,0]].\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong><span>Note:</span></strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= R &lt;= 100</code></li>\r\n\t<li><code>1 &lt;= C &lt;= 100</code></li>\r\n\t<li><code>0 &lt;= r0 &lt; R</code></li>\r\n\t<li><code>0 &lt;= c0 &lt; C</code></li>\r\n</ol>\r\n</div>\r\n</div>\r\n</div>\r\n",
  "isPaidOnly": false,
  "difficulty": "Easy",
  "likes": 129,
  "dislikes": 68,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [
    {
      "username": "karan9nov",
      "profileUrl": "/karan9nov/",
      "avatarUrl": "https://www.gravatar.com/avatar/0bc38f245ecec2feac9e4ae2cc86b304.png?s=200"
    }
  ],
  "topicTags": [
    {
      "name": "Sort",
      "slug": "sort"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"Yahoo\", \"slug\": \"yahoo\", \"timesEncountered\": 0}], \"1\": [], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\r\npublic:\r\n    vector<vector<int>> allCellsDistOrder(int R, int C, int r0, int c0) {\r\n        \r\n    }\r\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int[][] allCellsDistOrder(int R, int C, int r0, int c0) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def allCellsDistOrder(self, R, C, r0, c0):\n        \"\"\"\n        :type R: int\n        :type C: int\n        :type r0: int\n        :type c0: int\n        :rtype: List[List[int]]\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def allCellsDistOrder(self, R: int, C: int, r0: int, c0: int) -> List[List[int]]:\n        "
    },
    {
      "lang": "C",
      "code": "\n\n/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** allCellsDistOrder(int R, int C, int r0, int c0, int* returnSize, int** returnColumnSizes){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\r\n    public int[][] AllCellsDistOrder(int R, int C, int r0, int c0) {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number} R\n * @param {number} C\n * @param {number} r0\n * @param {number} c0\n * @return {number[][]}\n */\nvar allCellsDistOrder = function(R, C, r0, c0) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer} r\r\n# @param {Integer} c\r\n# @param {Integer} r0\r\n# @param {Integer} c0\r\n# @return {Integer[][]}\r\ndef all_cells_dist_order(r, c, r0, c0)\r\n    \r\nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\r\n    func allCellsDistOrder(_ R: Int, _ C: Int, _ r0: Int, _ c0: Int) -> [[Int]] {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Go",
      "code": "func allCellsDistOrder(R int, C int, r0 int, c0 int) [][]int {\r\n    \r\n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\r\n    def allCellsDistOrder(R: Int, C: Int, r0: Int, c0: Int): Array[Array[Int]] = {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\r\n    fun allCellsDistOrder(R: Int, C: Int, r0: Int, c0: Int): Array<IntArray> {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn all_cells_dist_order(r: i32, c: i32, r0: i32, c0: i32) -> Vec<Vec<i32>> {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer $R\n     * @param Integer $C\n     * @param Integer $r0\n     * @param Integer $c0\n     * @return Integer[][]\n     */\n    function allCellsDistOrder($R, $C, $r0, $c0) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"16.6K\", \"totalSubmission\": \"25.8K\", \"totalAcceptedRaw\": 16582, \"totalSubmissionRaw\": 25758, \"acRate\": \"64.4%\"}",
  "hints": [],
  "solution": null,
  "status": null,
  "sampleTestCase": "1\n2\n0\n0",
  "metaData": "{\r\n  \"name\": \"allCellsDistOrder\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"R\",\r\n      \"type\": \"integer\"\r\n    },\r\n    {\r\n      \"name\": \"C\",\r\n      \"type\": \"integer\"\r\n    },\r\n    {\r\n      \"name\": \"r0\",\r\n      \"type\": \"integer\"\r\n    },\r\n    {\r\n      \"name\": \"c0\",\r\n      \"type\": \"integer\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer[][]\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
