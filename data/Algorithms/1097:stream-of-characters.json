{
  "questionId": "1097",
  "questionFrontendId": "1032",
  "boundTopicId": null,
  "title": "Stream of Characters",
  "titleSlug": "stream-of-characters",
  "categoryTitle": "Algorithms",
  "content": "<p>Implement the <code>StreamChecker</code> class as follows:</p>\r\n\r\n<ul>\r\n\t<li><code>StreamChecker(words)</code>: Constructor, init the data structure with the given words.</li>\r\n\t<li><code>query(letter)</code>: returns true if and only if for some <code>k &gt;= 1</code>, the last <code>k</code>&nbsp;characters queried (in order from oldest to newest, including this letter just queried) spell one of the words in the given list.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\nStreamChecker streamChecker = new StreamChecker([&quot;cd&quot;,&quot;f&quot;,&quot;kl&quot;]); // init the dictionary.\r\nstreamChecker.query(&#39;a&#39;);          // return false\r\nstreamChecker.query(&#39;b&#39;);          // return false\r\nstreamChecker.query(&#39;c&#39;);          // return false\r\nstreamChecker.query(&#39;d&#39;);          // return true, because &#39;cd&#39; is in the wordlist\r\nstreamChecker.query(&#39;e&#39;);          // return false\r\nstreamChecker.query(&#39;f&#39;);          // return true, because &#39;f&#39; is in the wordlist\r\nstreamChecker.query(&#39;g&#39;);          // return false\r\nstreamChecker.query(&#39;h&#39;);          // return false\r\nstreamChecker.query(&#39;i&#39;);          // return false\r\nstreamChecker.query(&#39;j&#39;);          // return false\r\nstreamChecker.query(&#39;k&#39;);          // return false\r\nstreamChecker.query(&#39;l&#39;);          // return true, because &#39;kl&#39; is in the wordlist\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= words.length &lt;= 2000</code></li>\r\n\t<li><code>1 &lt;= words[i].length &lt;= 2000</code></li>\r\n\t<li>Words will only consist of lowercase English letters.</li>\r\n\t<li>Queries will only consist of lowercase English letters.</li>\r\n\t<li>The number of queries is at most&nbsp;40000.</li>\r\n</ul>\r\n",
  "isPaidOnly": false,
  "difficulty": "Hard",
  "likes": 189,
  "dislikes": 46,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [
    {
      "username": "awice",
      "profileUrl": "/awice/",
      "avatarUrl": "https://assets.leetcode.com/users/awice/avatar_1576905115.png"
    }
  ],
  "topicTags": [
    {
      "name": "Trie",
      "slug": "trie"
    }
  ],
  "companyTagStats": "{\"1\": [{\"taggedByAdmin\": true, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 4}, {\"taggedByAdmin\": false, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 2}], \"2\": [{\"taggedByAdmin\": false, \"name\": \"Facebook\", \"slug\": \"facebook\", \"timesEncountered\": 2}], \"3\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class StreamChecker {\r\npublic:\r\n    StreamChecker(vector<string>& words) {\r\n        \r\n    }\r\n    \r\n    bool query(char letter) {\r\n        \r\n    }\r\n};\r\n\r\n/**\r\n * Your StreamChecker object will be instantiated and called as such:\r\n * StreamChecker* obj = new StreamChecker(words);\r\n * bool param_1 = obj->query(letter);\r\n */"
    },
    {
      "lang": "Java",
      "code": "class StreamChecker {\n\n    public StreamChecker(String[] words) {\n        \n    }\n    \n    public boolean query(char letter) {\n        \n    }\n}\n\n/**\n * Your StreamChecker object will be instantiated and called as such:\n * StreamChecker obj = new StreamChecker(words);\n * boolean param_1 = obj.query(letter);\n */"
    },
    {
      "lang": "Python",
      "code": "class StreamChecker(object):\n\n    def __init__(self, words):\n        \"\"\"\n        :type words: List[str]\n        \"\"\"\n        \n\n    def query(self, letter):\n        \"\"\"\n        :type letter: str\n        :rtype: bool\n        \"\"\"\n        \n\n\n# Your StreamChecker object will be instantiated and called as such:\n# obj = StreamChecker(words)\n# param_1 = obj.query(letter)"
    },
    {
      "lang": "Python3",
      "code": "class StreamChecker:\n\n    def __init__(self, words: List[str]):\n        \n\n    def query(self, letter: str) -> bool:\n        \n\n\n# Your StreamChecker object will be instantiated and called as such:\n# obj = StreamChecker(words)\n# param_1 = obj.query(letter)"
    },
    {
      "lang": "C",
      "code": "\n\n\ntypedef struct {\n    \n} StreamChecker;\n\n\nStreamChecker* streamCheckerCreate(char ** words, int wordsSize) {\n    \n}\n\nbool streamCheckerQuery(StreamChecker* obj, char letter) {\n  \n}\n\nvoid streamCheckerFree(StreamChecker* obj) {\n    \n}\n\n/**\n * Your StreamChecker struct will be instantiated and called as such:\n * StreamChecker* obj = streamCheckerCreate(words, wordsSize);\n * bool param_1 = streamCheckerQuery(obj, letter);\n \n * streamCheckerFree(obj);\n*/"
    },
    {
      "lang": "C#",
      "code": "public class StreamChecker {\r\n\r\n    public StreamChecker(string[] words) {\r\n        \r\n    }\r\n    \r\n    public bool Query(char letter) {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your StreamChecker object will be instantiated and called as such:\r\n * StreamChecker obj = new StreamChecker(words);\r\n * bool param_1 = obj.Query(letter);\r\n */"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {string[]} words\n */\nvar StreamChecker = function(words) {\n    \n};\n\n/** \n * @param {character} letter\n * @return {boolean}\n */\nStreamChecker.prototype.query = function(letter) {\n    \n};\n\n/** \n * Your StreamChecker object will be instantiated and called as such:\n * var obj = new StreamChecker(words)\n * var param_1 = obj.query(letter)\n */"
    },
    {
      "lang": "Ruby",
      "code": "class StreamChecker\r\n\r\n=begin\r\n    :type words: String[]\r\n=end\r\n    def initialize(words)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    :type letter: Character\r\n    :rtype: Boolean\r\n=end\r\n    def query(letter)\r\n        \r\n    end\r\n\r\n\r\nend\r\n\r\n# Your StreamChecker object will be instantiated and called as such:\r\n# obj = StreamChecker.new(words)\r\n# param_1 = obj.query(letter)"
    },
    {
      "lang": "Swift",
      "code": "\r\nclass StreamChecker {\r\n\r\n    init(_ words: [String]) {\r\n        \r\n    }\r\n    \r\n    func query(_ letter: Character) -> Bool {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your StreamChecker object will be instantiated and called as such:\r\n * let obj = StreamChecker(words)\r\n * let ret_1: Bool = obj.query(letter)\r\n */"
    },
    {
      "lang": "Go",
      "code": "type StreamChecker struct {\r\n    \r\n}\r\n\r\n\r\nfunc Constructor(words []string) StreamChecker {\r\n    \r\n}\r\n\r\n\r\nfunc (this *StreamChecker) Query(letter byte) bool {\r\n    \r\n}\r\n\r\n\r\n/**\r\n * Your StreamChecker object will be instantiated and called as such:\r\n * obj := Constructor(words);\r\n * param_1 := obj.Query(letter);\r\n */"
    },
    {
      "lang": "Scala",
      "code": "class StreamChecker(_words: Array[String]) {\r\n\r\n    def query(letter: Char): Boolean = {\r\n        \r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Your StreamChecker object will be instantiated and called as such:\r\n * var obj = new StreamChecker(words)\r\n * var param_1 = obj.query(letter)\r\n */"
    },
    {
      "lang": "Kotlin",
      "code": "class StreamChecker(words: Array<String>) {\r\n\r\n    fun query(letter: Char): Boolean {\r\n        \r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Your StreamChecker object will be instantiated and called as such:\r\n * var obj = StreamChecker(words)\r\n * var param_1 = obj.query(letter)\r\n */"
    },
    {
      "lang": "Rust",
      "code": "struct StreamChecker {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl StreamChecker {\n\n    fn new(words: Vec<String>) -> Self {\n        \n    }\n    \n    fn query(&self, letter: char) -> bool {\n        \n    }\n}\n\n/**\n * Your StreamChecker object will be instantiated and called as such:\n * let obj = StreamChecker::new(words);\n * let ret_1: bool = obj.query(letter);\n */"
    },
    {
      "lang": "PHP",
      "code": "class StreamChecker {\n    /**\n     * @param String[] $words\n     */\n    function __construct($words) {\n        \n    }\n  \n    /**\n     * @param String $letter\n     * @return Boolean\n     */\n    function query($letter) {\n        \n    }\n}\n\n/**\n * Your StreamChecker object will be instantiated and called as such:\n * $obj = StreamChecker($words);\n * $ret_1 = $obj->query($letter);\n */"
    }
  ],
  "stats": "{\"totalAccepted\": \"11.8K\", \"totalSubmission\": \"25.8K\", \"totalAcceptedRaw\": 11818, \"totalSubmissionRaw\": 25772, \"acRate\": \"45.9%\"}",
  "hints": [
    "Put the words into a trie, and manage a set of pointers within that trie."
  ],
  "solution": null,
  "status": null,
  "sampleTestCase": "[\"StreamChecker\",\"query\",\"query\",\"query\",\"query\",\"query\",\"query\",\"query\",\"query\",\"query\",\"query\",\"query\",\"query\"]\n[[[\"cd\",\"f\",\"kl\"]],[\"a\"],[\"b\"],[\"c\"],[\"d\"],[\"e\"],[\"f\"],[\"g\"],[\"h\"],[\"i\"],[\"j\"],[\"k\"],[\"l\"]]",
  "metaData": "{\r\n    \"classname\": \"StreamChecker\",\r\n    \"maxbytesperline\": 500000,\r\n    \"constructor\": {\r\n        \"params\": [\r\n            {\r\n                \"type\": \"string[]\",\r\n                \"name\": \"words\"\r\n            }]\r\n    },\r\n    \"methods\": [\r\n        {\r\n            \"name\" : \"query\",\r\n            \"params\": [\r\n                {\r\n                    \"type\": \"character\",\r\n                    \"name\": \"letter\"\r\n                }\r\n            ],\r\n            \"return\": {\r\n                \"type\": \"boolean\"\r\n            }\r\n        }\r\n    ],\r\n    \"systemdesign\": true,\r\n    \"params\": [\r\n        {\r\n            \"name\": \"starts\",\r\n            \"type\": \"integer[]\"\r\n        },\r\n        {\r\n            \"name\": \"ends\",\r\n            \"type\": \"integer[]\"\r\n        }\r\n    ],\r\n    \"return\": {\r\n        \"type\": \"list<boolean>\",\r\n        \"dealloc\": true\r\n    }\r\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
