{
  "questionId": "1099",
  "questionFrontendId": "1102",
  "boundTopicId": null,
  "title": "Path With Maximum Minimum Value",
  "titleSlug": "path-with-maximum-minimum-value",
  "categoryTitle": "Algorithms",
  "content": "<p>Given a&nbsp;matrix of integers <code>A</code>&nbsp;with&nbsp;<font face=\"monospace\">R</font>&nbsp;rows and <font face=\"monospace\">C</font>&nbsp;columns, find&nbsp;the <strong>maximum</strong>&nbsp;score&nbsp;of a path starting at&nbsp;<code>[0,0]</code>&nbsp;and ending at <code>[R-1,C-1]</code>.</p>\r\n\r\n<p>The <em>score</em> of a path is the <strong>minimum</strong> value in that path.&nbsp; For example, the value of the path 8 &rarr;&nbsp; 4 &rarr;&nbsp; 5 &rarr;&nbsp; 9 is 4.</p>\r\n\r\n<p>A <em>path</em> moves some number of times from one visited cell to any neighbouring unvisited cell in one of the 4 cardinal directions (north, east, west, south).</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/04/23/1313_ex1.JPG\" style=\"width: 70px; height: 59px;\" /></strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[[5,4,5],[1,2,6],[7,4,6]]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">4</span>\r\n<strong>Explanation: </strong>\r\nThe path with the maximum score is highlighted in yellow. \r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/04/23/1313_ex2.JPG\" style=\"width: 134px; height: 39px;\" /></strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span>[[2,2,1,2,2,2],[1,2,2,2,1,2]]</span>\r\n<strong>Output: 2</strong></pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/04/23/1313_ex3.JPG\" /></strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span>[[3,4,6,3,4],[0,2,1,1,7],[8,8,3,2,7],[3,2,4,9,8],[4,1,2,0,0],[4,6,5,4,3]]</span>\r\n<strong>Output: 3</strong></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= R, C&nbsp;&lt;= 100</code></li>\r\n\t<li><code>0 &lt;= A[i][j] &lt;= 10^9</code></li>\r\n</ol>\r\n",
  "isPaidOnly": true,
  "difficulty": "Medium",
  "likes": 195,
  "dislikes": 22,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [],
  "topicTags": [
    {
      "name": "Depth-first Search",
      "slug": "depth-first-search"
    },
    {
      "name": "Union Find",
      "slug": "union-find"
    },
    {
      "name": "Graph",
      "slug": "graph"
    }
  ],
  "companyTagStats": "{\"1\": [{\"taggedByAdmin\": true, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 9}], \"2\": [], \"3\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    int maximumMinimumPath(vector<vector<int>>& A) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int maximumMinimumPath(int[][] A) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def maximumMinimumPath(self, A):\n        \"\"\"\n        :type A: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def maximumMinimumPath(self, A: List[List[int]]) -> int:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nint maximumMinimumPath(int** A, int ASize, int* AColSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public int MaximumMinimumPath(int[][] A) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number[][]} A\n * @return {number}\n */\nvar maximumMinimumPath = function(A) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer[][]} a\n# @return {Integer}\ndef maximum_minimum_path(a)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func maximumMinimumPath(_ A: [[Int]]) -> Int {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func maximumMinimumPath(A [][]int) int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def maximumMinimumPath(A: Array[Array[Int]]): Int = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun maximumMinimumPath(A: Array<IntArray>): Int {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn maximum_minimum_path(a: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer[][] $A\n     * @return Integer\n     */\n    function maximumMinimumPath($A) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"6.8K\", \"totalSubmission\": \"14.3K\", \"totalAcceptedRaw\": 6840, \"totalSubmissionRaw\": 14278, \"acRate\": \"47.9%\"}",
  "hints": [
    "What if we sort each cell of the matrix by the value?",
    "Don't include small values in your path if you can only include large values.",
    "Let's keep adding a possible cell to use in the path incrementally with decreasing values.",
    "If the start and end cells are connected then we don't need to add more cells.",
    "Use union-find data structure to check connectivity and return as answer the value of the given cell that makes start and end cells connected."
  ],
  "solution": null,
  "status": null,
  "sampleTestCase": "[[5,4,5],[1,2,6],[7,4,6]]",
  "metaData": "{\r\n  \"name\": \"maximumMinimumPath\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"A\",\r\n      \"type\": \"integer[][]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
