{
  "questionId": "1100",
  "questionFrontendId": "1135",
  "boundTopicId": null,
  "title": "Connecting Cities With Minimum Cost",
  "titleSlug": "connecting-cities-with-minimum-cost",
  "categoryTitle": "Algorithms",
  "content": "<p>There are <code>N</code> cities numbered from 1 to <code>N</code>.</p>\n\n<p>You are given <code>connections</code>, where each <code>connections[i] = [city1, city2, cost]</code>&nbsp;represents the cost to connect <code>city1</code> and <code>city2</code> together.&nbsp; (A <em>connection</em> is bidirectional: connecting <code>city1</code> and <code>city2</code> is the same as connecting <code>city2</code> and <code>city1</code>.)</p>\n\n<p>Return the minimum cost so that for every pair of cities, there exists a path&nbsp;of connections (possibly of length 1) that connects those two cities together.&nbsp; The cost is the sum of the connection costs used. If the task is impossible, return -1.</p>\n\n<p>&nbsp;</p>\n\n<p><strong>Example 1:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/04/20/1314_ex2.png\" style=\"width: 161px; height: 141px;\" /></p>\n\n<pre>\n<strong>Input: </strong>N = 3, connections = [[1,2,5],[1,3,6],[2,3,1]]\n<strong>Output: </strong>6\n<strong>Explanation: </strong>\nChoosing any 2 edges will connect all cities so we choose the minimum 2.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/04/20/1314_ex1.png\" style=\"width: 136px; height: 91px;\" /></p>\n\n<pre>\n<strong>Input: </strong>N = 4, connections = [[1,2,3],[3,4,4]]\n<strong>Output: </strong>-1\n<strong>Explanation: </strong>\nThere is no way to connect all cities even if all edges are used.\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>Note:</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= N &lt;= 10000</code></li>\n\t<li><code>1 &lt;= connections.length &lt;= 10000</code></li>\n\t<li><code>1 &lt;= connections[i][0], connections[i][1] &lt;= N</code></li>\n\t<li><code>0 &lt;= connections[i][2] &lt;= 10^5</code></li>\n\t<li><code>connections[i][0] != connections[i][1]</code></li>\n</ol>\n",
  "isPaidOnly": true,
  "difficulty": "Medium",
  "likes": 146,
  "dislikes": 6,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [],
  "topicTags": [
    {
      "name": "Union Find",
      "slug": "union-find"
    },
    {
      "name": "Graph",
      "slug": "graph"
    }
  ],
  "companyTagStats": "{\"1\": [{\"taggedByAdmin\": true, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 3}, {\"taggedByAdmin\": false, \"name\": \"Uber\", \"slug\": \"uber\", \"timesEncountered\": 2}], \"2\": [], \"3\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    int minimumCost(int N, vector<vector<int>>& connections) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int minimumCost(int N, int[][] connections) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def minimumCost(self, N, connections):\n        \"\"\"\n        :type N: int\n        :type connections: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def minimumCost(self, N: int, connections: List[List[int]]) -> int:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nint minimumCost(int N, int** connections, int connectionsSize, int* connectionsColSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public int MinimumCost(int N, int[][] connections) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number} N\n * @param {number[][]} connections\n * @return {number}\n */\nvar minimumCost = function(N, connections) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer} n\n# @param {Integer[][]} connections\n# @return {Integer}\ndef minimum_cost(n, connections)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func minimumCost(_ N: Int, _ connections: [[Int]]) -> Int {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func minimumCost(N int, connections [][]int) int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def minimumCost(N: Int, connections: Array[Array[Int]]): Int = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun minimumCost(N: Int, connections: Array<IntArray>): Int {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn minimum_cost(n: i32, connections: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer $N\n     * @param Integer[][] $connections\n     * @return Integer\n     */\n    function minimumCost($N, $connections) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"6.9K\", \"totalSubmission\": \"12.5K\", \"totalAcceptedRaw\": 6945, \"totalSubmissionRaw\": 12511, \"acRate\": \"55.5%\"}",
  "hints": [
    "What if we model the cities as a graph?",
    "Build a graph of cities and find the minimum spanning tree.",
    "You can use a variation of the Kruskal's algorithm for that.",
    "Sort the edges by their cost and use a union-find data structure.",
    "How to check all cities are connected?",
    "At the beginning we have n connected components, each time we connect two components the number of connected components is reduced by one. At the end we should end with only a single component otherwise return -1."
  ],
  "solution": null,
  "status": null,
  "sampleTestCase": "3\n[[1,2,5],[1,3,6],[2,3,1]]",
  "metaData": "{\n  \"name\": \"minimumCost\",\n  \"params\": [\n    {\n      \"name\": \"N\",\n      \"type\": \"integer\"\n    },\n    {\n      \"name\": \"connections\",\n      \"type\": \"integer[][]\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"integer\"\n  }\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
