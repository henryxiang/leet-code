{
  "questionId": "1103",
  "questionFrontendId": "1033",
  "boundTopicId": null,
  "title": "Moving Stones Until Consecutive",
  "titleSlug": "moving-stones-until-consecutive",
  "categoryTitle": "Algorithms",
  "content": "<p>Three stones are on a number line at positions <code>a</code>, <code>b</code>, and <code>c</code>.</p>\r\n\r\n<p>Each turn, you pick up a stone at an endpoint (ie., either the lowest or highest position stone), and move it to an unoccupied position between those&nbsp;endpoints.&nbsp; Formally, let&#39;s say the stones are currently at positions <code>x, y, z</code> with <code>x &lt; y &lt; z</code>.&nbsp; You pick up the stone at either position <code>x</code> or position <code>z</code>, and move that stone to an integer position <code>k</code>, with <code>x &lt; k &lt; z</code> and <code>k != y</code>.</p>\r\n\r\n<p>The game ends when you cannot make any more moves, ie. the stones are in consecutive positions.</p>\r\n\r\n<p>When the game ends, what is the minimum and maximum number of moves that you could have made?&nbsp; Return the answer as an length 2 array: <code>answer = [minimum_moves, maximum_moves]</code></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>a = <span id=\"example-input-1-1\">1</span>, b = <span id=\"example-input-1-2\">2</span>, c = <span id=\"example-input-1-3\">5</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[1,2]</span>\r\n<strong>Explanation: </strong>Move the stone from 5 to 3, or move the stone from 5 to 4 to 3.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>a = <span id=\"example-input-2-1\">4</span>, b = <span id=\"example-input-2-2\">3</span>, c = <span id=\"example-input-2-3\">2</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">[0,0]</span>\r\n<strong>Explanation: </strong>We cannot make any moves.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>a = <span id=\"example-input-3-1\">3</span>, b = <span id=\"example-input-3-2\">5</span>, c = <span id=\"example-input-3-3\">1</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">[1,2]</span>\r\n<strong>Explanation: </strong>Move the stone from 1 to 4; or move the stone from 1 to 2 to 4.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n</div>\r\n</div>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= a &lt;= 100</code></li>\r\n\t<li><code>1 &lt;= b &lt;= 100</code></li>\r\n\t<li><code>1 &lt;= c &lt;= 100</code></li>\r\n\t<li><code>a != b, b != c, c != a</code></li>\r\n</ol>\r\n\r\n<div>\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<div>&nbsp;</div>\r\n</div>\r\n</div>\r\n",
  "isPaidOnly": false,
  "difficulty": "Easy",
  "likes": 38,
  "dislikes": 326,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [
    {
      "username": "SolaAoi",
      "profileUrl": "/solaaoi/",
      "avatarUrl": "https://assets.leetcode.com/users/solaaoi/avatar_1550477424.png"
    }
  ],
  "topicTags": [
    {
      "name": "Brainteaser",
      "slug": "brainteaser"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"Facebook\", \"slug\": \"facebook\", \"timesEncountered\": 0}], \"1\": [], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\r\npublic:\r\n    vector<int> numMovesStones(int a, int b, int c) {\r\n        \r\n    }\r\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int[] numMovesStones(int a, int b, int c) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def numMovesStones(self, a, b, c):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :type c: int\n        :rtype: List[int]\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def numMovesStones(self, a: int, b: int, c: int) -> List[int]:\n        "
    },
    {
      "lang": "C",
      "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* numMovesStones(int a, int b, int c, int* returnSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\r\n    public int[] NumMovesStones(int a, int b, int c) {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number} a\n * @param {number} b\n * @param {number} c\n * @return {number[]}\n */\nvar numMovesStones = function(a, b, c) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer} a\r\n# @param {Integer} b\r\n# @param {Integer} c\r\n# @return {Integer[]}\r\ndef num_moves_stones(a, b, c)\r\n    \r\nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\r\n    func numMovesStones(_ a: Int, _ b: Int, _ c: Int) -> [Int] {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Go",
      "code": "func numMovesStones(a int, b int, c int) []int {\r\n    \r\n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\r\n    def numMovesStones(a: Int, b: Int, c: Int): Array[Int] = {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\r\n    fun numMovesStones(a: Int, b: Int, c: Int): IntArray {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn num_moves_stones(a: i32, b: i32, c: i32) -> Vec<i32> {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer $a\n     * @param Integer $b\n     * @param Integer $c\n     * @return Integer[]\n     */\n    function numMovesStones($a, $b, $c) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"9.3K\", \"totalSubmission\": \"23.7K\", \"totalAcceptedRaw\": 9272, \"totalSubmissionRaw\": 23651, \"acRate\": \"39.2%\"}",
  "hints": [
    "For the minimum:  We can always do it in at most 2 moves, by moving one stone next to another, then the third stone next to the other two.  When can we do it in 1 move?  0 moves?\r\n\r\nFor the maximum:  Every move, the maximum position minus the minimum position must decrease by at least 1."
  ],
  "solution": null,
  "status": null,
  "sampleTestCase": "1\n2\n5",
  "metaData": "{\r\n  \"name\": \"numMovesStones\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"a\",\r\n      \"type\": \"integer\"\r\n    },\r\n    {\r\n      \"name\": \"b\",\r\n      \"type\": \"integer\"\r\n    },\r\n    {\r\n      \"name\": \"c\",\r\n      \"type\": \"integer\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer[]\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
