{
  "questionId": "1104",
  "questionFrontendId": "1034",
  "boundTopicId": null,
  "title": "Coloring A Border",
  "titleSlug": "coloring-a-border",
  "categoryTitle": "Algorithms",
  "content": "<p>Given a 2-dimensional&nbsp;<code>grid</code> of integers, each value in the grid represents the color of the grid square at that location.</p>\r\n\r\n<p>Two squares belong to the same <em>connected component</em> if and only if they have the same color and are next to each other in any of the 4 directions.</p>\r\n\r\n<p>The&nbsp;<em>border</em> of a connected component is&nbsp;all the squares in the connected component that are&nbsp;either 4-directionally adjacent to&nbsp;a square not in the component, or on the boundary of the grid (the first or last row or column).</p>\r\n\r\n<p>Given a square at location&nbsp;<code>(r0, c0)</code>&nbsp;in the grid and a <code>color</code>, color the&nbsp;border of the connected component of that square with the given <code>color</code>, and return the final <code>grid</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>grid = <span id=\"example-input-1-1\">[[1,1],[1,2]]</span>, r0 = <span id=\"example-input-1-2\">0</span>, c0 = <span id=\"example-input-1-3\">0</span>, color = <span id=\"example-input-1-4\">3</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[[3, 3], [3, 2]]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>grid = <span id=\"example-input-2-1\">[[1,2,2],[2,3,2]]</span>, r0 = <span id=\"example-input-2-2\">0</span>, c0 = <span id=\"example-input-2-3\">1</span>, color = <span id=\"example-input-2-4\">3</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">[[1, 3, 3], [2, 3, 3]]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>grid = <span id=\"example-input-3-1\">[[1,1,1],[1,1,1],[1,1,1]]</span>, r0 = <span id=\"example-input-3-2\">1</span>, c0 = <span id=\"example-input-3-3\">1</span>, color = <span id=\"example-input-3-4\">2</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">[[2, 2, 2], [2, 1, 2], [2, 2, 2]]</span></pre>\r\n</div>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= grid.length &lt;= 50</code></li>\r\n\t<li><code>1 &lt;= grid[0].length &lt;= 50</code></li>\r\n\t<li><code>1 &lt;= grid[i][j] &lt;= 1000</code></li>\r\n\t<li><code>0 &lt;= r0 &lt; grid.length</code></li>\r\n\t<li><code>0 &lt;= c0 &lt; grid[0].length</code></li>\r\n\t<li><code>1 &lt;= color &lt;= 1000</code></li>\r\n</ol>",
  "isPaidOnly": false,
  "difficulty": "Medium",
  "likes": 71,
  "dislikes": 168,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"Island Perimeter\", \"titleSlug\": \"island-perimeter\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
  "contributors": [],
  "topicTags": [
    {
      "name": "Depth-first Search",
      "slug": "depth-first-search"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"Booking\", \"slug\": \"booking\", \"timesEncountered\": 0}], \"1\": [], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\r\npublic:\r\n    vector<vector<int>> colorBorder(vector<vector<int>>& grid, int r0, int c0, int color) {\r\n        \r\n    }\r\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int[][] colorBorder(int[][] grid, int r0, int c0, int color) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def colorBorder(self, grid, r0, c0, color):\n        \"\"\"\n        :type grid: List[List[int]]\n        :type r0: int\n        :type c0: int\n        :type color: int\n        :rtype: List[List[int]]\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def colorBorder(self, grid: List[List[int]], r0: int, c0: int, color: int) -> List[List[int]]:\n        "
    },
    {
      "lang": "C",
      "code": "\n\n/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** colorBorder(int** grid, int gridSize, int* gridColSize, int r0, int c0, int color, int* returnSize, int** returnColumnSizes){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\r\n    public int[][] ColorBorder(int[][] grid, int r0, int c0, int color) {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number[][]} grid\n * @param {number} r0\n * @param {number} c0\n * @param {number} color\n * @return {number[][]}\n */\nvar colorBorder = function(grid, r0, c0, color) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer[][]} grid\r\n# @param {Integer} r0\r\n# @param {Integer} c0\r\n# @param {Integer} color\r\n# @return {Integer[][]}\r\ndef color_border(grid, r0, c0, color)\r\n    \r\nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\r\n    func colorBorder(_ grid: [[Int]], _ r0: Int, _ c0: Int, _ color: Int) -> [[Int]] {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Go",
      "code": "func colorBorder(grid [][]int, r0 int, c0 int, color int) [][]int {\r\n    \r\n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\r\n    def colorBorder(grid: Array[Array[Int]], r0: Int, c0: Int, color: Int): Array[Array[Int]] = {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\r\n    fun colorBorder(grid: Array<IntArray>, r0: Int, c0: Int, color: Int): Array<IntArray> {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn color_border(grid: Vec<Vec<i32>>, r0: i32, c0: i32, color: i32) -> Vec<Vec<i32>> {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @param Integer $r0\n     * @param Integer $c0\n     * @param Integer $color\n     * @return Integer[][]\n     */\n    function colorBorder($grid, $r0, $c0, $color) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"7.1K\", \"totalSubmission\": \"16.3K\", \"totalAcceptedRaw\": 7127, \"totalSubmissionRaw\": 16307, \"acRate\": \"43.7%\"}",
  "hints": [
    "Use a DFS to find every square in the component.  Then for each square, color it if it has a neighbor that is outside the grid or a different color."
  ],
  "solution": null,
  "status": null,
  "sampleTestCase": "[[1,1],[1,2]]\n0\n0\n3",
  "metaData": "{\r\n  \"name\": \"colorBorder\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"grid\",\r\n      \"type\": \"integer[][]\"\r\n    },\r\n    {\r\n      \"name\": \"r0\",\r\n      \"type\": \"integer\"\r\n    },\r\n    {\r\n      \"name\": \"c0\",\r\n      \"type\": \"integer\"\r\n    },\r\n    {\r\n      \"name\": \"color\",\r\n      \"type\": \"integer\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer[][]\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
