{
  "questionId": "1105",
  "questionFrontendId": "1035",
  "boundTopicId": null,
  "title": "Uncrossed Lines",
  "titleSlug": "uncrossed-lines",
  "categoryTitle": "Algorithms",
  "content": "<p>We write the integers of <code>A</code> and <code>B</code>&nbsp;(in the order they are given) on two separate horizontal lines.</p>\r\n\r\n<p>Now, we may draw <em>connecting lines</em>: a straight line connecting two numbers <code>A[i]</code> and <code>B[j]</code>&nbsp;such that:</p>\r\n\r\n<ul>\r\n\t<li><code>A[i] == B[j]</code>;</li>\r\n\t<li>The line we draw does not intersect any other connecting (non-horizontal) line.</li>\r\n</ul>\r\n\r\n<p>Note that a connecting lines cannot intersect even at the endpoints:&nbsp;each number can only belong to one connecting line.</p>\r\n\r\n<p>Return the maximum number of connecting lines we can draw in this way.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/04/26/142.png\" style=\"width: 100px; height: 72px;\" />\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-1-1\">[1,4,2]</span>, B = <span id=\"example-input-1-2\">[1,2,4]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">2</span>\r\n<strong>Explanation: </strong>We can draw 2 uncrossed lines as in the diagram.\r\nWe cannot draw 3 uncrossed lines, because the line from A[1]=4 to B[2]=4 will intersect the line from A[2]=2 to B[1]=2.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-2-1\">[2,5,1,2,5]</span>, B = <span id=\"example-input-2-2\">[10,5,2,1,5,2]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">3</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-3-1\">[1,3,7,1,7,5]</span>, B = <span id=\"example-input-3-2\">[1,9,2,5,1]</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">2</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n</div>\r\n</div>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= A.length &lt;= 500</code></li>\r\n\t<li><code>1 &lt;= B.length &lt;= 500</code></li>\r\n\t<li><code><font face=\"monospace\">1 &lt;= A[i], B[i] &lt;= 2000</font></code></li>\r\n</ol>\r\n",
  "isPaidOnly": false,
  "difficulty": "Medium",
  "likes": 303,
  "dislikes": 8,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"Edit Distance\", \"titleSlug\": \"edit-distance\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
  "contributors": [
    {
      "username": "awice",
      "profileUrl": "/awice/",
      "avatarUrl": "https://assets.leetcode.com/users/awice/avatar_1576905115.png"
    }
  ],
  "topicTags": [
    {
      "name": "Array",
      "slug": "array"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 0}], \"1\": [], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\r\npublic:\r\n    int maxUncrossedLines(vector<int>& A, vector<int>& B) {\r\n        \r\n    }\r\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int maxUncrossedLines(int[] A, int[] B) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def maxUncrossedLines(self, A, B):\n        \"\"\"\n        :type A: List[int]\n        :type B: List[int]\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def maxUncrossedLines(self, A: List[int], B: List[int]) -> int:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nint maxUncrossedLines(int* A, int ASize, int* B, int BSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\r\n    public int MaxUncrossedLines(int[] A, int[] B) {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number[]} A\n * @param {number[]} B\n * @return {number}\n */\nvar maxUncrossedLines = function(A, B) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer[]} a\r\n# @param {Integer[]} b\r\n# @return {Integer}\r\ndef max_uncrossed_lines(a, b)\r\n    \r\nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\r\n    func maxUncrossedLines(_ A: [Int], _ B: [Int]) -> Int {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Go",
      "code": "func maxUncrossedLines(A []int, B []int) int {\r\n    \r\n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\r\n    def maxUncrossedLines(A: Array[Int], B: Array[Int]): Int = {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\r\n    fun maxUncrossedLines(A: IntArray, B: IntArray): Int {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn max_uncrossed_lines(a: Vec<i32>, b: Vec<i32>) -> i32 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer[] $A\n     * @param Integer[] $B\n     * @return Integer\n     */\n    function maxUncrossedLines($A, $B) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"9.6K\", \"totalSubmission\": \"18.1K\", \"totalAcceptedRaw\": 9589, \"totalSubmissionRaw\": 18107, \"acRate\": \"53.0%\"}",
  "hints": [
    "Think dynamic programming.  Given an oracle dp(i,j) that tells us how many lines A[i:], B[j:]  [the sequence A[i], A[i+1], ... and B[j], B[j+1], ...] are uncrossed, can we write this as a recursion?"
  ],
  "solution": null,
  "status": null,
  "sampleTestCase": "[1,4,2]\n[1,2,4]",
  "metaData": "{\r\n  \"name\": \"maxUncrossedLines\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"A\",\r\n      \"type\": \"integer[]\"\r\n    },\r\n    {\r\n      \"name\": \"B\",\r\n      \"type\": \"integer[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
