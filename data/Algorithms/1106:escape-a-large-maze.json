{
  "questionId": "1106",
  "questionFrontendId": "1036",
  "boundTopicId": null,
  "title": "Escape a Large Maze",
  "titleSlug": "escape-a-large-maze",
  "categoryTitle": "Algorithms",
  "content": "<p>In a 1 million by 1 million grid, the coordinates of each grid square are <code>(x, y)</code> with <code>0 &lt;= x, y &lt; 10^6</code>.</p>\r\n\r\n<p>We start at the <code>source</code> square and want to reach the <code>target</code> square.&nbsp; Each move, we can walk to a 4-directionally adjacent square in the grid that isn&#39;t in the given list of <code>blocked</code> squares.</p>\r\n\r\n<p>Return <code>true</code> if and only if it is possible to reach the target square through a sequence of moves.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>blocked = <span id=\"example-input-1-1\">[[0,1],[1,0]]</span>, source = <span id=\"example-input-1-2\">[0,0]</span>, target = <span id=\"example-input-1-3\">[0,2]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">false</span>\r\n<strong>Explanation: </strong>\r\nThe target square is inaccessible starting from the source square, because we can&#39;t walk outside the grid.\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>blocked = <span id=\"example-input-2-1\">[]</span>, source = <span id=\"example-input-2-2\">[0,0]</span>, target = <span id=\"example-input-2-3\">[999999,999999]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">true</span>\r\n<strong>Explanation: </strong>\r\nBecause there are no blocked cells, it&#39;s possible to reach the target square.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>0 &lt;= blocked.length &lt;= 200</code></li>\r\n\t<li><code>blocked[i].length == 2</code></li>\r\n\t<li><code>0 &lt;= blocked[i][j] &lt; 10^6</code></li>\r\n\t<li><code>source.length == target.length == 2</code></li>\r\n\t<li><code>0 &lt;= source[i][j], target[i][j] &lt; 10^6</code></li>\r\n\t<li><code>source != target</code></li>\r\n</ol>\r\n",
  "isPaidOnly": false,
  "difficulty": "Hard",
  "likes": 149,
  "dislikes": 88,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [
    {
      "username": "awice",
      "profileUrl": "/awice/",
      "avatarUrl": "https://assets.leetcode.com/users/awice/avatar_1576905115.png"
    }
  ],
  "topicTags": [
    {
      "name": "Breadth-first Search",
      "slug": "breadth-first-search"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"Uipath\", \"slug\": \"uipath\", \"timesEncountered\": 0}], \"2\": [{\"taggedByAdmin\": false, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 2}], \"1\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\r\npublic:\r\n    bool isEscapePossible(vector<vector<int>>& blocked, vector<int>& source, vector<int>& target) {\r\n        \r\n    }\r\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public boolean isEscapePossible(int[][] blocked, int[] source, int[] target) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def isEscapePossible(self, blocked, source, target):\n        \"\"\"\n        :type blocked: List[List[int]]\n        :type source: List[int]\n        :type target: List[int]\n        :rtype: bool\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def isEscapePossible(self, blocked: List[List[int]], source: List[int], target: List[int]) -> bool:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nbool isEscapePossible(int** blocked, int blockedSize, int* blockedColSize, int* source, int sourceSize, int* target, int targetSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\r\n    public bool IsEscapePossible(int[][] blocked, int[] source, int[] target) {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number[][]} blocked\n * @param {number[]} source\n * @param {number[]} target\n * @return {boolean}\n */\nvar isEscapePossible = function(blocked, source, target) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer[][]} blocked\r\n# @param {Integer[]} source\r\n# @param {Integer[]} target\r\n# @return {Boolean}\r\ndef is_escape_possible(blocked, source, target)\r\n    \r\nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\r\n    func isEscapePossible(_ blocked: [[Int]], _ source: [Int], _ target: [Int]) -> Bool {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Go",
      "code": "func isEscapePossible(blocked [][]int, source []int, target []int) bool {\r\n    \r\n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\r\n    def isEscapePossible(blocked: Array[Array[Int]], source: Array[Int], target: Array[Int]): Boolean = {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\r\n    fun isEscapePossible(blocked: Array<IntArray>, source: IntArray, target: IntArray): Boolean {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn is_escape_possible(blocked: Vec<Vec<i32>>, source: Vec<i32>, target: Vec<i32>) -> bool {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer[][] $blocked\n     * @param Integer[] $source\n     * @param Integer[] $target\n     * @return Boolean\n     */\n    function isEscapePossible($blocked, $source, $target) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"7K\", \"totalSubmission\": \"20K\", \"totalAcceptedRaw\": 7047, \"totalSubmissionRaw\": 20026, \"acRate\": \"35.2%\"}",
  "hints": [
    "If we become stuck, there's either a loop around the source or around the target.",
    "If there is a loop around say, the source, what is the maximum number of squares it can have?"
  ],
  "solution": null,
  "status": null,
  "sampleTestCase": "[[0,1],[1,0]]\n[0,0]\n[0,2]",
  "metaData": "{\r\n  \"name\": \"isEscapePossible\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"blocked\",\r\n      \"type\": \"integer[][]\"\r\n    },\r\n    {\r\n      \"name\": \"source\",\r\n      \"type\": \"integer[]\"\r\n    },\r\n    {\r\n      \"name\": \"target\",\r\n      \"type\": \"integer[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"boolean\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
