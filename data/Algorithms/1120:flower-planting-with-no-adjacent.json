{
  "questionId": "1120",
  "questionFrontendId": "1042",
  "boundTopicId": null,
  "title": "Flower Planting With No Adjacent",
  "titleSlug": "flower-planting-with-no-adjacent",
  "categoryTitle": "Algorithms",
  "content": "<p>You have <code>N</code> gardens, labelled <code>1</code> to <code>N</code>.&nbsp; In each garden, you want to plant one of 4 types of flowers.</p>\r\n\r\n<p><code>paths[i] = [x, y]</code> describes the existence of a bidirectional path from garden <code>x</code> to garden <code>y</code>.</p>\r\n\r\n<p>Also, there is no garden that has more than 3 paths coming into or leaving it.</p>\r\n\r\n<p>Your task is to choose a flower type for each garden such that,&nbsp;for any two gardens connected by a path, they have different types of flowers.</p>\r\n\r\n<p>Return <strong>any</strong> such a choice as an array <code>answer</code>, where&nbsp;<code>answer[i]</code> is the type of flower&nbsp;planted in the <code>(i+1)</code>-th garden.&nbsp; The flower types are denoted&nbsp;<font face=\"monospace\">1</font>, <font face=\"monospace\">2</font>, <font face=\"monospace\">3</font>, or <font face=\"monospace\">4</font>.&nbsp; It is guaranteed an answer exists.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>N = <span id=\"example-input-1-1\">3</span>, paths = <span id=\"example-input-1-2\">[[1,2],[2,3],[3,1]]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[1,2,3]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>N = <span id=\"example-input-2-1\">4</span>, paths = <span id=\"example-input-2-2\">[[1,2],[3,4]]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">[1,2,1,2]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>N = <span id=\"example-input-3-1\">4</span>, paths = <span id=\"example-input-3-2\">[[1,2],[2,3],[3,4],[4,1],[1,3],[2,4]]</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">[1,2,3,4]</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong><span>Note:</span></strong></p>\r\n\r\n<ul>\r\n\t<li><code><span>1 &lt;= N &lt;= 10000</span></code></li>\r\n\t<li><code><span>0 &lt;= paths.size &lt;= 20000</span></code></li>\r\n\t<li>No garden has 4 or more paths coming into or leaving it.</li>\r\n\t<li>It is guaranteed an answer exists.</li>\r\n</ul>\r\n</div>\r\n</div>\r\n</div>",
  "isPaidOnly": false,
  "difficulty": "Easy",
  "likes": 163,
  "dislikes": 196,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [
    {
      "username": "SolaAoi",
      "profileUrl": "/solaaoi/",
      "avatarUrl": "https://assets.leetcode.com/users/solaaoi/avatar_1550477424.png"
    }
  ],
  "topicTags": [
    {
      "name": "Graph",
      "slug": "graph"
    }
  ],
  "companyTagStats": "{\"1\": [], \"2\": [], \"3\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\r\npublic:\r\n    vector<int> gardenNoAdj(int N, vector<vector<int>>& paths) {\r\n        \r\n    }\r\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int[] gardenNoAdj(int N, int[][] paths) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def gardenNoAdj(self, N, paths):\n        \"\"\"\n        :type N: int\n        :type paths: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def gardenNoAdj(self, N: int, paths: List[List[int]]) -> List[int]:\n        "
    },
    {
      "lang": "C",
      "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* gardenNoAdj(int N, int** paths, int pathsSize, int* pathsColSize, int* returnSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\r\n    public int[] GardenNoAdj(int N, int[][] paths) {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number} N\n * @param {number[][]} paths\n * @return {number[]}\n */\nvar gardenNoAdj = function(N, paths) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer} n\r\n# @param {Integer[][]} paths\r\n# @return {Integer[]}\r\ndef garden_no_adj(n, paths)\r\n    \r\nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\r\n    func gardenNoAdj(_ N: Int, _ paths: [[Int]]) -> [Int] {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Go",
      "code": "func gardenNoAdj(N int, paths [][]int) []int {\r\n    \r\n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\r\n    def gardenNoAdj(N: Int, paths: Array[Array[Int]]): Array[Int] = {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\r\n    fun gardenNoAdj(N: Int, paths: Array<IntArray>): IntArray {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn garden_no_adj(n: i32, paths: Vec<Vec<i32>>) -> Vec<i32> {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer $N\n     * @param Integer[][] $paths\n     * @return Integer[]\n     */\n    function gardenNoAdj($N, $paths) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"14.7K\", \"totalSubmission\": \"30.7K\", \"totalAcceptedRaw\": 14697, \"totalSubmissionRaw\": 30697, \"acRate\": \"47.9%\"}",
  "hints": [
    "Since each garden is connected to at most 3 gardens, there's always an available color for each garden.  For example, if one garden is next to gardens with colors 1, 3, 4,  then color #2 is available."
  ],
  "solution": null,
  "status": null,
  "sampleTestCase": "3\n[[1,2],[2,3],[3,1]]",
  "metaData": "{\r\n  \"name\": \"gardenNoAdj\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"N\",\r\n      \"type\": \"integer\"\r\n    },\r\n    {\r\n      \"name\": \"paths\",\r\n      \"type\": \"integer[][]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer[]\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
