{
  "questionId": "1121",
  "questionFrontendId": "1043",
  "boundTopicId": null,
  "title": "Partition Array for Maximum Sum",
  "titleSlug": "partition-array-for-maximum-sum",
  "categoryTitle": "Algorithms",
  "content": "<p>Given an integer array <code>A</code>, you partition the array into (contiguous) subarrays of length at most <code>K</code>.&nbsp; After partitioning, each subarray has their values changed to become the maximum value of that subarray.</p>\r\n\r\n<p>Return the largest sum of the given array after partitioning.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-1-1\">[1,15,7,9,2,5,10]</span>, K = <span id=\"example-input-1-2\">3</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">84\r\n</span><strong>Explanation</strong>: A becomes [15,15,15,9,10,10,10]</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= K &lt;= A.length&nbsp;&lt;= 500</code></li>\r\n\t<li><code>0 &lt;= A[i] &lt;= 10^6</code></li>\r\n</ol>\r\n",
  "isPaidOnly": false,
  "difficulty": "Medium",
  "likes": 369,
  "dislikes": 46,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [
    {
      "username": "SolaAoi",
      "profileUrl": "/solaaoi/",
      "avatarUrl": "https://assets.leetcode.com/users/solaaoi/avatar_1550477424.png"
    }
  ],
  "topicTags": [
    {
      "name": "Graph",
      "slug": "graph"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"Facebook\", \"slug\": \"facebook\", \"timesEncountered\": 0}], \"1\": [], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\r\npublic:\r\n    int maxSumAfterPartitioning(vector<int>& A, int K) {\r\n        \r\n    }\r\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int maxSumAfterPartitioning(int[] A, int K) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def maxSumAfterPartitioning(self, A, K):\n        \"\"\"\n        :type A: List[int]\n        :type K: int\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def maxSumAfterPartitioning(self, A: List[int], K: int) -> int:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nint maxSumAfterPartitioning(int* A, int ASize, int K){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\r\n    public int MaxSumAfterPartitioning(int[] A, int K) {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number[]} A\n * @param {number} K\n * @return {number}\n */\nvar maxSumAfterPartitioning = function(A, K) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer[]} a\r\n# @param {Integer} k\r\n# @return {Integer}\r\ndef max_sum_after_partitioning(a, k)\r\n    \r\nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\r\n    func maxSumAfterPartitioning(_ A: [Int], _ K: Int) -> Int {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Go",
      "code": "func maxSumAfterPartitioning(A []int, K int) int {\r\n    \r\n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\r\n    def maxSumAfterPartitioning(A: Array[Int], K: Int): Int = {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\r\n    fun maxSumAfterPartitioning(A: IntArray, K: Int): Int {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn max_sum_after_partitioning(a: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer[] $A\n     * @param Integer $K\n     * @return Integer\n     */\n    function maxSumAfterPartitioning($A, $K) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"11.3K\", \"totalSubmission\": \"17.9K\", \"totalAcceptedRaw\": 11260, \"totalSubmissionRaw\": 17866, \"acRate\": \"63.0%\"}",
  "hints": [
    "Think dynamic programming:  dp[i] will be the answer for array A[0], ..., A[i-1].",
    "For j = 1 .. k that keeps everything in bounds, dp[i] is the maximum of dp[i-j] + max(A[i-1], ..., A[i-j]) * j ."
  ],
  "solution": null,
  "status": null,
  "sampleTestCase": "[1,15,7,9,2,5,10]\n3",
  "metaData": "{\r\n  \"name\": \"maxSumAfterPartitioning\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"A\",\r\n      \"type\": \"integer[]\"\r\n    },\r\n    {\r\n      \"name\": \"K\",\r\n      \"type\": \"integer\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
