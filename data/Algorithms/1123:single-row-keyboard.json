{
  "questionId": "1123",
  "questionFrontendId": "1165",
  "boundTopicId": null,
  "title": "Single-Row Keyboard",
  "titleSlug": "single-row-keyboard",
  "categoryTitle": "Algorithms",
  "content": "<p>There is a special keyboard with <strong>all keys in a single row</strong>.</p>\n\n<p>Given a string <code>keyboard</code> of length 26 indicating the layout of the keyboard (indexed from 0 to&nbsp;25), initially your finger is at index 0. To type a character, you have to move your finger to the index of the desired character. The time taken to move your finger from index <code>i</code> to index <code>j</code> is <code>|i - j|</code>.</p>\n\n<p>You want to type a string <code>word</code>. Write a function to calculate how much time it takes to type it with one finger.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> keyboard = &quot;abcdefghijklmnopqrstuvwxyz&quot;, word = &quot;cba&quot;\n<strong>Output:</strong> 4\n<strong>Explanation: </strong>The index moves from 0 to 2 to write &#39;c&#39; then to 1 to write &#39;b&#39; then to 0 again to write &#39;a&#39;.\nTotal time = 2 + 1 + 1 = 4. \n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> keyboard = &quot;pqrstuvwxyzabcdefghijklmno&quot;, word = &quot;leetcode&quot;\n<strong>Output:</strong> 73\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>keyboard.length == 26</code></li>\n\t<li><code><font face=\"monospace\">keyboard</font></code> contains each&nbsp;English lowercase letter&nbsp;exactly once in some order.</li>\n\t<li><code>1 &lt;= word.length &lt;= 10^4</code></li>\n\t<li><code>word[i]</code>&nbsp;is an English lowercase letter.</li>\n</ul>\n",
  "isPaidOnly": true,
  "difficulty": "Easy",
  "likes": 87,
  "dislikes": 7,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [],
  "topicTags": [
    {
      "name": "String",
      "slug": "string"
    }
  ],
  "companyTagStats": "{\"1\": [{\"taggedByAdmin\": true, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 3}], \"2\": [], \"3\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    int calculateTime(string keyboard, string word) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int calculateTime(String keyboard, String word) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def calculateTime(self, keyboard, word):\n        \"\"\"\n        :type keyboard: str\n        :type word: str\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def calculateTime(self, keyboard: str, word: str) -> int:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nint calculateTime(char * keyboard, char * word){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public int CalculateTime(string keyboard, string word) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {string} keyboard\n * @param {string} word\n * @return {number}\n */\nvar calculateTime = function(keyboard, word) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {String} keyboard\n# @param {String} word\n# @return {Integer}\ndef calculate_time(keyboard, word)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func calculateTime(_ keyboard: String, _ word: String) -> Int {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func calculateTime(keyboard string, word string) int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def calculateTime(keyboard: String, word: String): Int = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun calculateTime(keyboard: String, word: String): Int {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn calculate_time(keyboard: String, word: String) -> i32 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param String $keyboard\n     * @param String $word\n     * @return Integer\n     */\n    function calculateTime($keyboard, $word) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"14.2K\", \"totalSubmission\": \"16.9K\", \"totalAcceptedRaw\": 14229, \"totalSubmissionRaw\": 16905, \"acRate\": \"84.2%\"}",
  "hints": [
    "Can be the problem divided in parts, so solving each part and sum their solutions it should return the answer? Yes, you only need to divide the problem in finger jumps.",
    "In each finger jump you need to move your finger from one character to another, you need to know its index.",
    "Map each character to it's index.",
    "Use a hash table to do that."
  ],
  "solution": null,
  "status": null,
  "sampleTestCase": "\"abcdefghijklmnopqrstuvwxyz\"\n\"cba\"",
  "metaData": "{\n  \"name\": \"calculateTime\",\n  \"params\": [\n    {\n      \"name\": \"keyboard\",\n      \"type\": \"string\"\n    },\n    {\n      \"name\": \"word\",\n      \"type\": \"string\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"integer\"\n  }\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
