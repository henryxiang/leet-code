{
  "questionId": "1125",
  "questionFrontendId": "1166",
  "boundTopicId": null,
  "title": "Design File System",
  "titleSlug": "design-file-system",
  "categoryTitle": "Algorithms",
  "content": "<p>You are asked to design a file system&nbsp;which provides two functions:</p>\n\n<ul>\n\t<li><strong>createPath(path, value):</strong>&nbsp;Creates a new path and associates a value to it if possible and returns <code>True</code>.&nbsp;Returns <code>False</code>&nbsp;if the path already exists or its parent path doesn&#39;t exist.</li>\n\t<li><strong>get(path):</strong>&nbsp;Returns the value associated with a path or returns&nbsp;<code>-1</code>&nbsp;if the path doesn&#39;t exist.</li>\n</ul>\n\n<p>The format of a path is&nbsp;one or more concatenated strings of the form:&nbsp;<code>/</code> followed by one or more lowercase English letters. For example, <code>/leetcode</code>&nbsp;and <code>/leetcode/problems</code>&nbsp;are valid paths while an empty string and <code>/</code>&nbsp;are not.</p>\n\n<p>Implement the two functions.</p>\n\n<p>Please refer to the examples for clarifications.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> \n[&quot;FileSystem&quot;,&quot;createPath&quot;,&quot;get&quot;]\n[[],[&quot;/a&quot;,1],[&quot;/a&quot;]]\n<strong>Output:</strong> \n[null,true,1]\n<strong>Explanation:</strong> \nFileSystem fileSystem = new FileSystem();\n\nfileSystem.createPath(&quot;/a&quot;, 1); // return true\nfileSystem.get(&quot;/a&quot;); // return 1\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> \n[&quot;FileSystem&quot;,&quot;createPath&quot;,&quot;createPath&quot;,&quot;get&quot;,&quot;createPath&quot;,&quot;get&quot;]\n[[],[&quot;/leet&quot;,1],[&quot;/leet/code&quot;,2],[&quot;/leet/code&quot;],[&quot;/c/d&quot;,1],[&quot;/c&quot;]]\n<strong>Output:</strong> \n[null,true,true,2,false,-1]\n<strong>Explanation:</strong> \nFileSystem fileSystem = new FileSystem();\n\nfileSystem.createPath(&quot;/leet&quot;, 1); // return true\nfileSystem.createPath(&quot;/leet/code&quot;, 2); // return true\nfileSystem.get(&quot;/leet/code&quot;); // return 2\nfileSystem.createPath(&quot;/c/d&quot;, 1); // return false because the parent path &quot;/c&quot; doesn&#39;t exist.\nfileSystem.get(&quot;/c&quot;); // return -1 because this path doesn&#39;t exist.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of&nbsp;calls to the two functions&nbsp;is less than or equal to <code>10^4</code> in total.</li>\n\t<li><code>2 &lt;= path.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= value &lt;= 10^9</code></li>\n</ul>\n\n<p><strong>NOTE:</strong>&nbsp;create method has been changed on August&nbsp;29, 2019 to createPath. Please reset to default code definition to get new method signature.</p>\n",
  "isPaidOnly": true,
  "difficulty": "Medium",
  "likes": 55,
  "dislikes": 4,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [],
  "topicTags": [
    {
      "name": "Hash Table",
      "slug": "hash-table"
    },
    {
      "name": "Design",
      "slug": "design"
    }
  ],
  "companyTagStats": "{\"1\": [{\"taggedByAdmin\": true, \"name\": \"Airbnb\", \"slug\": \"airbnb\", \"timesEncountered\": 9}], \"2\": [], \"3\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class FileSystem {\npublic:\n    FileSystem() {\n        \n    }\n    \n    bool createPath(string path, int value) {\n        \n    }\n    \n    int get(string path) {\n        \n    }\n};\n\n/**\n * Your FileSystem object will be instantiated and called as such:\n * FileSystem* obj = new FileSystem();\n * bool param_1 = obj->createPath(path,value);\n * int param_2 = obj->get(path);\n */"
    },
    {
      "lang": "Java",
      "code": "class FileSystem {\n\n    public FileSystem() {\n        \n    }\n    \n    public boolean createPath(String path, int value) {\n        \n    }\n    \n    public int get(String path) {\n        \n    }\n}\n\n/**\n * Your FileSystem object will be instantiated and called as such:\n * FileSystem obj = new FileSystem();\n * boolean param_1 = obj.createPath(path,value);\n * int param_2 = obj.get(path);\n */"
    },
    {
      "lang": "Python",
      "code": "class FileSystem(object):\n\n    def __init__(self):\n        \n\n    def createPath(self, path, value):\n        \"\"\"\n        :type path: str\n        :type value: int\n        :rtype: bool\n        \"\"\"\n        \n\n    def get(self, path):\n        \"\"\"\n        :type path: str\n        :rtype: int\n        \"\"\"\n        \n\n\n# Your FileSystem object will be instantiated and called as such:\n# obj = FileSystem()\n# param_1 = obj.createPath(path,value)\n# param_2 = obj.get(path)"
    },
    {
      "lang": "Python3",
      "code": "class FileSystem:\n\n    def __init__(self):\n        \n\n    def createPath(self, path: str, value: int) -> bool:\n        \n\n    def get(self, path: str) -> int:\n        \n\n\n# Your FileSystem object will be instantiated and called as such:\n# obj = FileSystem()\n# param_1 = obj.createPath(path,value)\n# param_2 = obj.get(path)"
    },
    {
      "lang": "C",
      "code": "\n\n\ntypedef struct {\n    \n} FileSystem;\n\n\nFileSystem* fileSystemCreate() {\n    \n}\n\nbool fileSystemCreatePath(FileSystem* obj, char * path, int value) {\n  \n}\n\nint fileSystemGet(FileSystem* obj, char * path) {\n  \n}\n\nvoid fileSystemFree(FileSystem* obj) {\n    \n}\n\n/**\n * Your FileSystem struct will be instantiated and called as such:\n * FileSystem* obj = fileSystemCreate();\n * bool param_1 = fileSystemCreatePath(obj, path, value);\n \n * int param_2 = fileSystemGet(obj, path);\n \n * fileSystemFree(obj);\n*/"
    },
    {
      "lang": "C#",
      "code": "public class FileSystem {\n\n    public FileSystem() {\n        \n    }\n    \n    public bool CreatePath(string path, int value) {\n        \n    }\n    \n    public int Get(string path) {\n        \n    }\n}\n\n/**\n * Your FileSystem object will be instantiated and called as such:\n * FileSystem obj = new FileSystem();\n * bool param_1 = obj.CreatePath(path,value);\n * int param_2 = obj.Get(path);\n */"
    },
    {
      "lang": "JavaScript",
      "code": "\nvar FileSystem = function() {\n    \n};\n\n/** \n * @param {string} path \n * @param {number} value\n * @return {boolean}\n */\nFileSystem.prototype.createPath = function(path, value) {\n    \n};\n\n/** \n * @param {string} path\n * @return {number}\n */\nFileSystem.prototype.get = function(path) {\n    \n};\n\n/** \n * Your FileSystem object will be instantiated and called as such:\n * var obj = new FileSystem()\n * var param_1 = obj.createPath(path,value)\n * var param_2 = obj.get(path)\n */"
    },
    {
      "lang": "Ruby",
      "code": "class FileSystem\n    def initialize()\n        \n    end\n\n\n=begin\n    :type path: String\n    :type value: Integer\n    :rtype: Boolean\n=end\n    def create_path(path, value)\n        \n    end\n\n\n=begin\n    :type path: String\n    :rtype: Integer\n=end\n    def get(path)\n        \n    end\n\n\nend\n\n# Your FileSystem object will be instantiated and called as such:\n# obj = FileSystem.new()\n# param_1 = obj.create_path(path, value)\n# param_2 = obj.get(path)"
    },
    {
      "lang": "Swift",
      "code": "\nclass FileSystem {\n\n    init() {\n        \n    }\n    \n    func createPath(_ path: String, _ value: Int) -> Bool {\n        \n    }\n    \n    func get(_ path: String) -> Int {\n        \n    }\n}\n\n/**\n * Your FileSystem object will be instantiated and called as such:\n * let obj = FileSystem()\n * let ret_1: Bool = obj.createPath(path, value)\n * let ret_2: Int = obj.get(path)\n */"
    },
    {
      "lang": "Go",
      "code": "type FileSystem struct {\n    \n}\n\n\nfunc Constructor() FileSystem {\n    \n}\n\n\nfunc (this *FileSystem) CreatePath(path string, value int) bool {\n    \n}\n\n\nfunc (this *FileSystem) Get(path string) int {\n    \n}\n\n\n/**\n * Your FileSystem object will be instantiated and called as such:\n * obj := Constructor();\n * param_1 := obj.CreatePath(path,value);\n * param_2 := obj.Get(path);\n */"
    },
    {
      "lang": "Scala",
      "code": "class FileSystem() {\n\n    def createPath(path: String, value: Int): Boolean = {\n        \n    }\n\n    def get(path: String): Int = {\n        \n    }\n\n}\n\n/**\n * Your FileSystem object will be instantiated and called as such:\n * var obj = new FileSystem()\n * var param_1 = obj.createPath(path,value)\n * var param_2 = obj.get(path)\n */"
    },
    {
      "lang": "Kotlin",
      "code": "class FileSystem() {\n\n    fun createPath(path: String, value: Int): Boolean {\n        \n    }\n\n    fun get(path: String): Int {\n        \n    }\n\n}\n\n/**\n * Your FileSystem object will be instantiated and called as such:\n * var obj = FileSystem()\n * var param_1 = obj.createPath(path,value)\n * var param_2 = obj.get(path)\n */"
    },
    {
      "lang": "Rust",
      "code": "struct FileSystem {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl FileSystem {\n\n    fn new() -> Self {\n        \n    }\n    \n    fn create_path(&self, path: String, value: i32) -> bool {\n        \n    }\n    \n    fn get(&self, path: String) -> i32 {\n        \n    }\n}\n\n/**\n * Your FileSystem object will be instantiated and called as such:\n * let obj = FileSystem::new();\n * let ret_1: bool = obj.create_path(path, value);\n * let ret_2: i32 = obj.get(path);\n */"
    },
    {
      "lang": "PHP",
      "code": "class FileSystem {\n    /**\n     */\n    function __construct() {\n        \n    }\n  \n    /**\n     * @param String $path\n     * @param Integer $value\n     * @return Boolean\n     */\n    function createPath($path, $value) {\n        \n    }\n  \n    /**\n     * @param String $path\n     * @return Integer\n     */\n    function get($path) {\n        \n    }\n}\n\n/**\n * Your FileSystem object will be instantiated and called as such:\n * $obj = FileSystem();\n * $ret_1 = $obj->createPath($path, $value);\n * $ret_2 = $obj->get($path);\n */"
    }
  ],
  "stats": "{\"totalAccepted\": \"4K\", \"totalSubmission\": \"6.9K\", \"totalAcceptedRaw\": 3950, \"totalSubmissionRaw\": 6930, \"acRate\": \"57.0%\"}",
  "hints": [
    "What if you think of a tree hierarchy for the files?.",
    "A path is a node in the tree.",
    "Use a hash table to store the valid paths along with their values."
  ],
  "solution": null,
  "status": null,
  "sampleTestCase": "[\"FileSystem\",\"createPath\",\"get\"]\r\n[[],[\"/a\",1],[\"/a\"]]\r",
  "metaData": "{\n  \"classname\": \"FileSystem\",\n  \"maxbytesperline\": 400000,\n  \"constructor\": {\n    \"params\": []\n  },\n  \"methods\": [\n    {\n      \"name\": \"createPath\",\n      \"params\": [\n        {\n          \"type\": \"string\",\n          \"name\": \"path\"\n        },\n        {\n          \"type\": \"integer\",\n          \"name\": \"value\"\n        }\n      ],\n      \"return\": {\n        \"type\": \"boolean\"\n      }\n    },\n    {\n      \"name\": \"get\",\n      \"params\": [\n        {\n          \"type\": \"string\",\n          \"name\": \"path\"\n        }\n      ],\n      \"return\": {\n        \"type\": \"integer\"\n      }\n    }\n  ],\n  \"systemdesign\": true,\n  \"params\": [\n    {\n      \"name\": \"inputs\",\n      \"type\": \"integer[]\"\n    },\n    {\n      \"name\": \"inputs\",\n      \"type\": \"integer[]\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"list<String>\",\n    \"dealloc\": true\n  }\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
