{
  "questionId": "1134",
  "questionFrontendId": "1182",
  "boundTopicId": null,
  "title": "Shortest Distance to Target Color",
  "titleSlug": "shortest-distance-to-target-color",
  "categoryTitle": "Algorithms",
  "content": "<p>You are given an array <code>colors</code>, in which there are three colors: <code>1</code>, <code>2</code> and&nbsp;<code>3</code>.</p>\n\n<p>You are also given some queries. Each query consists of two integers <code>i</code>&nbsp;and <code>c</code>, return&nbsp;the shortest distance between the given index&nbsp;<code>i</code> and the target color <code>c</code>. If there is no solution return <code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> colors = [1,1,2,1,3,2,2,3,3], queries = [[1,3],[2,2],[6,1]]\n<strong>Output:</strong> [3,0,3]\n<strong>Explanation: </strong>\nThe nearest 3 from index 1 is at index 4 (3 steps away).\nThe nearest 2 from index 2 is at index 2 itself (0 steps away).\nThe nearest 1 from index 6 is at index 3 (3 steps away).\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> colors = [1,2], queries = [[0,3]]\n<strong>Output:</strong> [-1]\n<strong>Explanation: </strong>There is no 3 in the array.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= colors.length &lt;= 5*10^4</code></li>\n\t<li><code>1 &lt;= colors[i] &lt;= 3</code></li>\n\t<li><code>1&nbsp;&lt;= queries.length &lt;= 5*10^4</code></li>\n\t<li><code>queries[i].length == 2</code></li>\n\t<li><code>0 &lt;= queries[i][0] &lt;&nbsp;colors.length</code></li>\n\t<li><code>1 &lt;= queries[i][1] &lt;= 3</code></li>\n</ul>\n",
  "isPaidOnly": true,
  "difficulty": "Medium",
  "likes": 65,
  "dislikes": 2,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [],
  "topicTags": [
    {
      "name": "Binary Search",
      "slug": "binary-search"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 0}], \"1\": [], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    vector<int> shortestDistanceColor(vector<int>& colors, vector<vector<int>>& queries) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public List<Integer> shortestDistanceColor(int[] colors, int[][] queries) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def shortestDistanceColor(self, colors, queries):\n        \"\"\"\n        :type colors: List[int]\n        :type queries: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def shortestDistanceColor(self, colors: List[int], queries: List[List[int]]) -> List[int]:\n        "
    },
    {
      "lang": "C",
      "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* shortestDistanceColor(int* colors, int colorsSize, int** queries, int queriesSize, int* queriesColSize, int* returnSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public IList<int> ShortestDistanceColor(int[] colors, int[][] queries) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number[]} colors\n * @param {number[][]} queries\n * @return {number[]}\n */\nvar shortestDistanceColor = function(colors, queries) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer[]} colors\n# @param {Integer[][]} queries\n# @return {Integer[]}\ndef shortest_distance_color(colors, queries)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func shortestDistanceColor(_ colors: [Int], _ queries: [[Int]]) -> [Int] {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func shortestDistanceColor(colors []int, queries [][]int) []int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def shortestDistanceColor(colors: Array[Int], queries: Array[Array[Int]]): List[Int] = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun shortestDistanceColor(colors: IntArray, queries: Array<IntArray>): List<Int> {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn shortest_distance_color(colors: Vec<i32>, queries: Vec<Vec<i32>>) -> Vec<i32> {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer[] $colors\n     * @param Integer[][] $queries\n     * @return Integer[]\n     */\n    function shortestDistanceColor($colors, $queries) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"3.3K\", \"totalSubmission\": \"6.3K\", \"totalAcceptedRaw\": 3265, \"totalSubmissionRaw\": 6342, \"acRate\": \"51.5%\"}",
  "hints": [
    "Greedy solution is too slow because of the limits.",
    "Can you solve this problem offline by doing some pre-processing?",
    "Calculate the answers for all indexes moving to their left and to their right."
  ],
  "solution": null,
  "status": null,
  "sampleTestCase": "[1,1,2,1,3,2,2,3,3]\n[[1,3],[2,2],[6,1]]",
  "metaData": "{\n  \"name\": \"shortestDistanceColor\",\n  \"params\": [\n    {\n      \"name\": \"colors\",\n      \"type\": \"integer[]\"\n    },\n    {\n      \"name\": \"queries\",\n      \"type\": \"integer[][]\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"list<integer>\"\n  }\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
