{
  "questionId": "1137",
  "questionFrontendId": "1051",
  "boundTopicId": null,
  "title": "Height Checker",
  "titleSlug": "height-checker",
  "categoryTitle": "Algorithms",
  "content": "<p>Students are asked to stand in non-decreasing order of heights for an annual photo.</p>\r\n\r\n<p>Return the minimum number of students not standing in the right positions.&nbsp; (This is the number of students that must move in order for all students to be standing in non-decreasing order of height.)</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>[1,1,4,2,1,3]\r\n<strong>Output: </strong>3\r\n<strong>Explanation: </strong>\r\nStudents with heights 4, 3 and the last 1 are not standing in the right positions.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= heights.length &lt;= 100</code></li>\r\n\t<li><code>1 &lt;= heights[i] &lt;= 100</code></li>\r\n</ol>",
  "isPaidOnly": false,
  "difficulty": "Easy",
  "likes": 122,
  "dislikes": 871,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [
    {
      "username": "abandy",
      "profileUrl": "/abandy/",
      "avatarUrl": "https://www.gravatar.com/avatar/b2fb4d787aff193b81a74571f70daedc.png?s=200"
    }
  ],
  "topicTags": [
    {
      "name": "Array",
      "slug": "array"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"Salesforce\", \"slug\": \"salesforce\", \"timesEncountered\": 0}], \"2\": [{\"taggedByAdmin\": false, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 2}], \"1\": [{\"taggedByAdmin\": false, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 2}]}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    int heightChecker(vector<int>& heights) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int heightChecker(int[] heights) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def heightChecker(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def heightChecker(self, heights: List[int]) -> int:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nint heightChecker(int* heights, int heightsSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public int HeightChecker(int[] heights) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number[]} heights\n * @return {number}\n */\nvar heightChecker = function(heights) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer[]} heights\n# @return {Integer}\ndef height_checker(heights)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func heightChecker(_ heights: [Int]) -> Int {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func heightChecker(heights []int) int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def heightChecker(heights: Array[Int]): Int = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun heightChecker(heights: IntArray): Int {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn height_checker(heights: Vec<i32>) -> i32 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer[] $heights\n     * @return Integer\n     */\n    function heightChecker($heights) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"33.3K\", \"totalSubmission\": \"48.7K\", \"totalAcceptedRaw\": 33266, \"totalSubmissionRaw\": 48706, \"acRate\": \"68.3%\"}",
  "hints": [
    "Build the correct order of heights by sorting another array, then compare the two arrays."
  ],
  "solution": null,
  "status": null,
  "sampleTestCase": "[1,1,4,2,1,3]",
  "metaData": "{\n  \"name\": \"heightChecker\",\n  \"params\": [\n    {\n      \"name\": \"heights\",\n      \"type\": \"integer[]\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"integer\"\n  }\n}\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
