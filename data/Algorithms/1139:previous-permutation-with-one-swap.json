{
  "questionId": "1139",
  "questionFrontendId": "1053",
  "boundTopicId": null,
  "title": "Previous Permutation With One Swap",
  "titleSlug": "previous-permutation-with-one-swap",
  "categoryTitle": "Algorithms",
  "content": "<p>Given an array <code>A</code> of positive integers (not necessarily distinct), return the lexicographically largest permutation that is smaller than <code>A</code>, that can be <strong>made with one swap</strong> (A <em>swap</em> exchanges the positions of two numbers <code>A[i]</code> and <code>A[j]</code>).&nbsp; If it cannot be done, then return the same array.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>[3,2,1]\r\n<strong>Output: </strong>[3,1,2]\r\n<strong>Explanation: </strong>Swapping 2 and 1.\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>[1,1,5]\r\n<strong>Output: </strong>[1,1,5]\r\n<strong>Explanation: </strong>This is already the smallest permutation.\r\n</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>[1,9,4,6,7]\r\n<strong>Output: </strong>[1,7,4,6,9]\r\n<strong>Explanation: </strong>Swapping 9 and 7.\r\n</pre>\r\n\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>[3,1,1,3]\r\n<strong>Output: </strong>[1,3,1,3]\r\n<strong>Explanation: </strong>Swapping 1 and 3.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= A.length &lt;= 10000</code></li>\r\n\t<li><code>1 &lt;= A[i] &lt;= 10000</code></li>\r\n</ol>\r\n",
  "isPaidOnly": false,
  "difficulty": "Medium",
  "likes": 77,
  "dislikes": 175,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [
    {
      "username": "raxmech06",
      "profileUrl": "/raxmech06/",
      "avatarUrl": "https://assets.leetcode.com/users/raxmech06/avatar_1556116804.png"
    }
  ],
  "topicTags": [
    {
      "name": "Array",
      "slug": "array"
    },
    {
      "name": "Greedy",
      "slug": "greedy"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"Microsoft\", \"slug\": \"microsoft\", \"timesEncountered\": 0}], \"2\": [{\"taggedByAdmin\": false, \"name\": \"Facebook\", \"slug\": \"facebook\", \"timesEncountered\": 2}], \"1\": [{\"taggedByAdmin\": false, \"name\": \"Quora\", \"slug\": \"quora\", \"timesEncountered\": 3}]}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    vector<int> prevPermOpt1(vector<int>& A) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int[] prevPermOpt1(int[] A) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def prevPermOpt1(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: List[int]\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def prevPermOpt1(self, A: List[int]) -> List[int]:\n        "
    },
    {
      "lang": "C",
      "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* prevPermOpt1(int* A, int ASize, int* returnSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public int[] PrevPermOpt1(int[] A) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number[]} A\n * @return {number[]}\n */\nvar prevPermOpt1 = function(A) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer[]} a\n# @return {Integer[]}\ndef prev_perm_opt1(a)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func prevPermOpt1(_ A: [Int]) -> [Int] {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func prevPermOpt1(A []int) []int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def prevPermOpt1(A: Array[Int]): Array[Int] = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun prevPermOpt1(A: IntArray): IntArray {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn prev_perm_opt1(a: Vec<i32>) -> Vec<i32> {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer[] $A\n     * @return Integer[]\n     */\n    function prevPermOpt1($A) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"7.8K\", \"totalSubmission\": \"16.6K\", \"totalAcceptedRaw\": 7840, \"totalSubmissionRaw\": 16571, \"acRate\": \"47.3%\"}",
  "hints": [
    "You need to swap two values, one larger than the other.  Where is the larger one located?"
  ],
  "solution": null,
  "status": null,
  "sampleTestCase": "[3,2,1]",
  "metaData": "{\n  \"name\": \"prevPermOpt1\",\n  \"params\": [\n    {\n      \"name\": \"A\",\n      \"type\": \"integer[]\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"integer[]\"\n  }\n}\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
