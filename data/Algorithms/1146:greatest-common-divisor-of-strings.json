{
  "questionId": "1146",
  "questionFrontendId": "1071",
  "boundTopicId": null,
  "title": "Greatest Common Divisor of Strings",
  "titleSlug": "greatest-common-divisor-of-strings",
  "categoryTitle": "Algorithms",
  "content": "<p>For strings <code>S</code> and <code>T</code>, we say &quot;<code>T</code> divides <code>S</code>&quot; if and only if <code>S = T + ... + T</code>&nbsp; (<code>T</code> concatenated with itself 1 or more times)</p>\n\n<p>Return the largest string <code>X</code> such that <code>X</code> divides <font face=\"monospace\">str1</font>&nbsp;and <code>X</code> divides <font face=\"monospace\">str2</font>.</p>\n\n<p>&nbsp;</p>\n\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input: </strong>str1 = <span id=\"example-input-1-1\">&quot;ABCABC&quot;</span>, str2 = <span id=\"example-input-1-2\">&quot;ABC&quot;</span>\n<strong>Output: </strong><span id=\"example-output-1\">&quot;ABC&quot;</span>\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input: </strong>str1 = <span id=\"example-input-2-1\">&quot;ABABAB&quot;</span>, str2 = <span id=\"example-input-2-2\">&quot;ABAB&quot;</span>\n<strong>Output: </strong><span id=\"example-output-2\">&quot;AB&quot;</span>\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input: </strong>str1 = <span id=\"example-input-3-1\">&quot;LEET&quot;</span>, str2 = <span id=\"example-input-3-2\">&quot;CODE&quot;</span>\n<strong>Output: </strong><span id=\"example-output-3\">&quot;&quot;</span>\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>Note:</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= str1.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= str2.length &lt;= 1000</code></li>\n\t<li><code>str1[i]</code> and <code>str2[i]</code> are English uppercase letters.</li>\n</ol>\n",
  "isPaidOnly": false,
  "difficulty": "Easy",
  "likes": 234,
  "dislikes": 70,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [],
  "topicTags": [
    {
      "name": "String",
      "slug": "string"
    }
  ],
  "companyTagStats": "{\"1\": [], \"2\": [], \"3\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    string gcdOfStrings(string str1, string str2) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public String gcdOfStrings(String str1, String str2) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def gcdOfStrings(self, str1, str2):\n        \"\"\"\n        :type str1: str\n        :type str2: str\n        :rtype: str\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def gcdOfStrings(self, str1: str, str2: str) -> str:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nchar * gcdOfStrings(char * str1, char * str2){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public string GcdOfStrings(string str1, string str2) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {string} str1\n * @param {string} str2\n * @return {string}\n */\nvar gcdOfStrings = function(str1, str2) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {String} str1\n# @param {String} str2\n# @return {String}\ndef gcd_of_strings(str1, str2)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func gcdOfStrings(_ str1: String, _ str2: String) -> String {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func gcdOfStrings(str1 string, str2 string) string {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def gcdOfStrings(str1: String, str2: String): String = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun gcdOfStrings(str1: String, str2: String): String {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn gcd_of_strings(str1: String, str2: String) -> String {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param String $str1\n     * @param String $str2\n     * @return String\n     */\n    function gcdOfStrings($str1, $str2) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"16K\", \"totalSubmission\": \"29.7K\", \"totalAcceptedRaw\": 15975, \"totalSubmissionRaw\": 29694, \"acRate\": \"53.8%\"}",
  "hints": [
    "The greatest common divisor must be a prefix of each string, so we can try all prefixes."
  ],
  "solution": null,
  "status": null,
  "sampleTestCase": "\"ABCABC\"\n\"ABC\"",
  "metaData": "{\n  \"name\": \"gcdOfStrings\",\n  \"params\": [\n    {\n      \"name\": \"str1\",\n      \"type\": \"string\"\n    },\n    {\n      \"name\": \"str2\",\n      \"type\": \"string\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"string\"\n  }\n}\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
