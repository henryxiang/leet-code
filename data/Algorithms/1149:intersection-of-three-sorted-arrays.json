{
  "questionId": "1149",
  "questionFrontendId": "1213",
  "boundTopicId": null,
  "title": "Intersection of Three Sorted Arrays",
  "titleSlug": "intersection-of-three-sorted-arrays",
  "categoryTitle": "Algorithms",
  "content": "<p>Given three integer arrays <code>arr1</code>, <code>arr2</code> and <code>arr3</code>&nbsp;<strong>sorted</strong> in <strong>strictly increasing</strong> order, return a sorted array of <strong>only</strong>&nbsp;the&nbsp;integers that appeared in <strong>all</strong> three arrays.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr1 = [1,2,3,4,5], arr2 = [1,2,5,7,9], arr3 = [1,3,4,5,8]\n<strong>Output:</strong> [1,5]\n<strong>Explanation: </strong>Only 1 and 5 appeared in the three arrays.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= arr1.length, arr2.length, arr3.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= arr1[i], arr2[i], arr3[i] &lt;= 2000</code></li>\n</ul>\n",
  "isPaidOnly": true,
  "difficulty": "Easy",
  "likes": 58,
  "dislikes": 4,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"Intersection of Two Arrays\", \"titleSlug\": \"intersection-of-two-arrays\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
  "contributors": [],
  "topicTags": [
    {
      "name": "Hash Table",
      "slug": "hash-table"
    },
    {
      "name": "Two Pointers",
      "slug": "two-pointers"
    }
  ],
  "companyTagStats": "{\"1\": [{\"taggedByAdmin\": true, \"name\": \"Facebook\", \"slug\": \"facebook\", \"timesEncountered\": 3}, {\"taggedByAdmin\": false, \"name\": \"TripAdvisor\", \"slug\": \"tripadvisor\", \"timesEncountered\": 2}], \"2\": [], \"3\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    vector<int> arraysIntersection(vector<int>& arr1, vector<int>& arr2, vector<int>& arr3) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public List<Integer> arraysIntersection(int[] arr1, int[] arr2, int[] arr3) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def arraysIntersection(self, arr1, arr2, arr3):\n        \"\"\"\n        :type arr1: List[int]\n        :type arr2: List[int]\n        :type arr3: List[int]\n        :rtype: List[int]\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def arraysIntersection(self, arr1: List[int], arr2: List[int], arr3: List[int]) -> List[int]:\n        "
    },
    {
      "lang": "C",
      "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* arraysIntersection(int* arr1, int arr1Size, int* arr2, int arr2Size, int* arr3, int arr3Size, int* returnSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public IList<int> ArraysIntersection(int[] arr1, int[] arr2, int[] arr3) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number[]} arr1\n * @param {number[]} arr2\n * @param {number[]} arr3\n * @return {number[]}\n */\nvar arraysIntersection = function(arr1, arr2, arr3) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer[]} arr1\n# @param {Integer[]} arr2\n# @param {Integer[]} arr3\n# @return {Integer[]}\ndef arrays_intersection(arr1, arr2, arr3)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func arraysIntersection(_ arr1: [Int], _ arr2: [Int], _ arr3: [Int]) -> [Int] {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func arraysIntersection(arr1 []int, arr2 []int, arr3 []int) []int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def arraysIntersection(arr1: Array[Int], arr2: Array[Int], arr3: Array[Int]): List[Int] = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun arraysIntersection(arr1: IntArray, arr2: IntArray, arr3: IntArray): List<Int> {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn arrays_intersection(arr1: Vec<i32>, arr2: Vec<i32>, arr3: Vec<i32>) -> Vec<i32> {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer[] $arr1\n     * @param Integer[] $arr2\n     * @param Integer[] $arr3\n     * @return Integer[]\n     */\n    function arraysIntersection($arr1, $arr2, $arr3) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"9K\", \"totalSubmission\": \"11.7K\", \"totalAcceptedRaw\": 8993, \"totalSubmissionRaw\": 11653, \"acRate\": \"77.2%\"}",
  "hints": [
    "Count the frequency of all elements in the three arrays.",
    "The elements that appeared in all the arrays would have a frequency of 3."
  ],
  "solution": null,
  "status": null,
  "sampleTestCase": "[1,2,3,4,5]\n[1,2,5,7,9]\n[1,3,4,5,8]",
  "metaData": "{\n  \"name\": \"arraysIntersection\",\n  \"params\": [\n    {\n      \"name\": \"arr1\",\n      \"type\": \"integer[]\"\n    },\n    {\n      \"name\": \"arr2\",\n      \"type\": \"integer[]\"\n    },\n    {\n      \"name\": \"arr3\",\n      \"type\": \"integer[]\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"list<integer>\"\n  }\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
