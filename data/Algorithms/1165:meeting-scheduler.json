{
  "questionId": "1165",
  "questionFrontendId": "1229",
  "boundTopicId": null,
  "title": "Meeting Scheduler",
  "titleSlug": "meeting-scheduler",
  "categoryTitle": "Algorithms",
  "content": "<p>Given the availability time slots arrays&nbsp;<code>slots1</code> and <code>slots2</code>&nbsp;of two people and a meeting duration <code>duration</code>, return the <strong>earliest time slot</strong> that works for both of them and is of duration <code>duration</code>.</p>\n\n<p>If there is no common time slot that satisfies the requirements, return an <strong>empty array</strong>.</p>\n\n<p>The format of a time slot is an array of two elements&nbsp;<code>[start, end]</code>&nbsp;representing an inclusive time range from <code>start</code>&nbsp;to <code>end</code>.&nbsp;&nbsp;</p>\n\n<p>It is guaranteed that no two availability slots of the same person intersect with each other. That is, for any two time slots&nbsp;<code>[start1, end1]</code>&nbsp;and&nbsp;<code>[start2, end2]</code>&nbsp;of the same person, either&nbsp;<code>start1 &gt; end2</code>&nbsp;or&nbsp;<code>start2 &gt; end1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> slots1 = [[10,50],[60,120],[140,210]], slots2 = [[0,15],[60,70]], duration = 8\n<strong>Output:</strong> [60,68]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> slots1 = [[10,50],[60,120],[140,210]], slots2 = [[0,15],[60,70]], duration = 12\n<strong>Output:</strong> []\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= slots1.length, slots2.length &lt;= 10^4</code></li>\n\t<li><code>slots1[i].length, slots2[i].length == 2</code></li>\n\t<li><code>slots1[i][0] &lt; slots1[i][1]</code></li>\n\t<li><code>slots2[i][0] &lt; slots2[i][1]</code></li>\n\t<li><code>0 &lt;= slots1[i][j], slots2[i][j] &lt;= 10^9</code></li>\n\t<li><code>1 &lt;= duration &lt;= 10^6&nbsp;</code></li>\n</ul>\n",
  "isPaidOnly": true,
  "difficulty": "Medium",
  "likes": 59,
  "dislikes": 4,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [],
  "topicTags": [
    {
      "name": "Line Sweep",
      "slug": "line-sweep"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"Paypal\", \"slug\": \"paypal\", \"timesEncountered\": 0}, {\"taggedByAdmin\": true, \"name\": \"pramp\", \"slug\": \"pramp\", \"timesEncountered\": 0}], \"1\": [], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    vector<int> minAvailableDuration(vector<vector<int>>& slots1, vector<vector<int>>& slots2, int duration) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public List<Integer> minAvailableDuration(int[][] slots1, int[][] slots2, int duration) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def minAvailableDuration(self, slots1, slots2, duration):\n        \"\"\"\n        :type slots1: List[List[int]]\n        :type slots2: List[List[int]]\n        :type duration: int\n        :rtype: List[int]\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def minAvailableDuration(self, slots1: List[List[int]], slots2: List[List[int]], duration: int) -> List[int]:\n        "
    },
    {
      "lang": "C",
      "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* minAvailableDuration(int** slots1, int slots1Size, int* slots1ColSize, int** slots2, int slots2Size, int* slots2ColSize, int duration, int* returnSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public IList<int> MinAvailableDuration(int[][] slots1, int[][] slots2, int duration) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number[][]} slots1\n * @param {number[][]} slots2\n * @param {number} duration\n * @return {number[]}\n */\nvar minAvailableDuration = function(slots1, slots2, duration) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer[][]} slots1\n# @param {Integer[][]} slots2\n# @param {Integer} duration\n# @return {Integer[]}\ndef min_available_duration(slots1, slots2, duration)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func minAvailableDuration(_ slots1: [[Int]], _ slots2: [[Int]], _ duration: Int) -> [Int] {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func minAvailableDuration(slots1 [][]int, slots2 [][]int, duration int) []int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def minAvailableDuration(slots1: Array[Array[Int]], slots2: Array[Array[Int]], duration: Int): List[Int] = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun minAvailableDuration(slots1: Array<IntArray>, slots2: Array<IntArray>, duration: Int): List<Int> {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn min_available_duration(slots1: Vec<Vec<i32>>, slots2: Vec<Vec<i32>>, duration: i32) -> Vec<i32> {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer[][] $slots1\n     * @param Integer[][] $slots2\n     * @param Integer $duration\n     * @return Integer[]\n     */\n    function minAvailableDuration($slots1, $slots2, $duration) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"3.6K\", \"totalSubmission\": \"8.3K\", \"totalAcceptedRaw\": 3610, \"totalSubmissionRaw\": 8347, \"acRate\": \"43.2%\"}",
  "hints": [
    "Assume that in the solution, the selected slot from slotsA is bigger than the respectively selected slot from slotsB.",
    "Use two pointers in order to try all the possible intersections, and check the length.",
    "Do the same in step NÂ° 1 but now assume that the selected slot from slotsB is bigger, return the minimum of the two options."
  ],
  "solution": null,
  "status": null,
  "sampleTestCase": "[[10,50],[60,120],[140,210]]\n[[0,15],[60,70]]\n8",
  "metaData": "{\n  \"name\": \"minAvailableDuration\",\n  \"params\": [\n    {\n      \"name\": \"slots1\",\n      \"type\": \"integer[][]\"\n    },\n    {\n      \"name\": \"slots2\",\n      \"type\": \"integer[][]\"\n    },\n    {\n      \"name\": \"duration\",\n      \"type\": \"integer\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"list<integer>\"\n  }\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
