{
  "questionId": "1166",
  "questionFrontendId": "1230",
  "boundTopicId": null,
  "title": "Toss Strange Coins",
  "titleSlug": "toss-strange-coins",
  "categoryTitle": "Algorithms",
  "content": "<p>You have some coins.&nbsp; The <code>i</code>-th&nbsp;coin has a probability&nbsp;<code>prob[i]</code> of facing heads when tossed.</p>\n\n<p>Return the probability that the number of coins facing heads equals <code>target</code> if you toss every coin exactly once.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> prob = [0.4], target = 1\n<strong>Output:</strong> 0.40000\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> prob = [0.5,0.5,0.5,0.5,0.5], target = 0\n<strong>Output:</strong> 0.03125\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= prob.length &lt;= 1000</code></li>\n\t<li><code>0 &lt;= prob[i] &lt;= 1</code></li>\n\t<li><code>0 &lt;= target&nbsp;</code><code>&lt;= prob.length</code></li>\n\t<li>Answers will be accepted as correct if they are within <code>10^-5</code> of the correct answer.</li>\n</ul>\n",
  "isPaidOnly": true,
  "difficulty": "Medium",
  "likes": 63,
  "dislikes": 2,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [],
  "topicTags": [
    {
      "name": "Math",
      "slug": "math"
    },
    {
      "name": "Dynamic Programming",
      "slug": "dynamic-programming"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"Twitch\", \"slug\": \"twitch\", \"timesEncountered\": 0}], \"1\": [], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\r\npublic:\r\n    double probabilityOfHeads(vector<double>& prob, int target) {\r\n        \r\n    }\r\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public double probabilityOfHeads(double[] prob, int target) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def probabilityOfHeads(self, prob, target):\n        \"\"\"\n        :type prob: List[float]\n        :type target: int\n        :rtype: float\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def probabilityOfHeads(self, prob: List[float], target: int) -> float:\n        "
    },
    {
      "lang": "C",
      "code": "\n\ndouble probabilityOfHeads(double* prob, int probSize, int target){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\r\n    public double ProbabilityOfHeads(double[] prob, int target) {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number[]} prob\n * @param {number} target\n * @return {number}\n */\nvar probabilityOfHeads = function(prob, target) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Float[]} prob\r\n# @param {Integer} target\r\n# @return {Float}\r\ndef probability_of_heads(prob, target)\r\n    \r\nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\r\n    func probabilityOfHeads(_ prob: [Double], _ target: Int) -> Double {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Go",
      "code": "func probabilityOfHeads(prob []float64, target int) float64 {\r\n    \r\n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\r\n    def probabilityOfHeads(prob: Array[Double], target: Int): Double = {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\r\n    fun probabilityOfHeads(prob: DoubleArray, target: Int): Double {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn probability_of_heads(prob: Vec<f64>, target: i32) -> f64 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Float[] $prob\n     * @param Integer $target\n     * @return Float\n     */\n    function probabilityOfHeads($prob, $target) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"2.7K\", \"totalSubmission\": \"5.9K\", \"totalAcceptedRaw\": 2654, \"totalSubmissionRaw\": 5937, \"acRate\": \"44.7%\"}",
  "hints": [
    "What about solving the problem with DP?",
    "Use DP with two states dp[pos][cnt], where pos represents the pos-th coin and cnt is the number of heads seen so far.",
    "You can do the transitions with a little bit math.",
    "For the base case, when pos == n return (cnt == target) to filter out the invalid scenarios."
  ],
  "solution": null,
  "status": null,
  "sampleTestCase": "[0.4]\n1",
  "metaData": "{\r\n  \"name\": \"probabilityOfHeads\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"prob\",\r\n      \"type\": \"double[]\"\r\n    },\r\n    {\r\n        \"name\": \"target\",\r\n        \"type\": \"integer\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"double\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
