{
  "questionId": "1175",
  "questionFrontendId": "1243",
  "boundTopicId": null,
  "title": "Array Transformation",
  "titleSlug": "array-transformation",
  "categoryTitle": "Algorithms",
  "content": "<p>Given an initial array <code>arr</code>, every day you produce a new array using the array of the previous day.</p>\n\n<p>On the <code>i</code>-th day, you do the following operations on the array of day&nbsp;<code>i-1</code>&nbsp;to produce the array of day <code>i</code>:</p>\n\n<ol>\n\t<li>If an element is smaller than both its left neighbor and its right neighbor, then this element is incremented.</li>\n\t<li>If an element is bigger than both its left neighbor and its right neighbor, then this element is decremented.</li>\n\t<li>The first&nbsp;and last elements never change.</li>\n</ol>\n\n<p>After some days, the array does not change. Return that final array.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [6,2,3,4]\n<strong>Output:</strong> [6,3,3,4]\n<strong>Explanation: </strong>\nOn the first day, the array is changed from [6,2,3,4] to [6,3,3,4].\nNo more operations can be done to this array.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [1,6,3,4,3,5]\n<strong>Output:</strong> [1,4,4,4,4,5]\n<strong>Explanation: </strong>\nOn the first day, the array is changed from [1,6,3,4,3,5] to [1,5,4,3,4,5].\nOn the second day, the array is changed from [1,5,4,3,4,5] to [1,4,4,4,4,5].\nNo more operations can be done to this array.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= arr.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= arr[i] &lt;= 100</code></li>\n</ul>\n",
  "isPaidOnly": true,
  "difficulty": "Easy",
  "likes": 27,
  "dislikes": 12,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [],
  "topicTags": [
    {
      "name": "Array",
      "slug": "array"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"Virtu Financial\", \"slug\": \"virtu\", \"timesEncountered\": 0}], \"1\": [], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    vector<int> transformArray(vector<int>& arr) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public List<Integer> transformArray(int[] arr) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def transformArray(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: List[int]\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def transformArray(self, arr: List[int]) -> List[int]:\n        "
    },
    {
      "lang": "C",
      "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* transformArray(int* arr, int arrSize, int* returnSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public IList<int> TransformArray(int[] arr) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number[]} arr\n * @return {number[]}\n */\nvar transformArray = function(arr) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer[]} arr\n# @return {Integer[]}\ndef transform_array(arr)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func transformArray(_ arr: [Int]) -> [Int] {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func transformArray(arr []int) []int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def transformArray(arr: Array[Int]): List[Int] = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun transformArray(arr: IntArray): List<Int> {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn transform_array(arr: Vec<i32>) -> Vec<i32> {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer[] $arr\n     * @return Integer[]\n     */\n    function transformArray($arr) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"3.7K\", \"totalSubmission\": \"7.1K\", \"totalAcceptedRaw\": 3741, \"totalSubmissionRaw\": 7147, \"acRate\": \"52.3%\"}",
  "hints": [
    "Try to simulate the process.",
    "For every iteration, find the new array using the old one and the given rules."
  ],
  "solution": null,
  "status": null,
  "sampleTestCase": "[6,2,3,4]\r",
  "metaData": "{\n  \"name\": \"transformArray\",\n  \"params\": [\n    {\n      \"name\": \"arr\",\n      \"type\": \"integer[]\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"list<integer>\"\n  }\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
