{
  "questionId": "1177",
  "questionFrontendId": "1245",
  "boundTopicId": null,
  "title": "Tree Diameter",
  "titleSlug": "tree-diameter",
  "categoryTitle": "Algorithms",
  "content": "<p>Given an undirected tree, return&nbsp;its diameter: the number of <strong>edges</strong> in a longest path in that tree.</p>\n\n<p>The tree is given as an array&nbsp;of&nbsp;<code>edges</code>&nbsp;where <code>edges[i] = [u, v]</code> is a bidirectional edge between nodes&nbsp;<code>u</code> and <code>v</code>.&nbsp; Each node has&nbsp;labels in the set <code>{0, 1, ..., edges.length}</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/06/14/1397_example_1.PNG\" style=\"width: 226px; height: 233px;\" /></p>\n\n<pre>\n<strong>Input:</strong> edges = [[0,1],[0,2]]\n<strong>Output:</strong> 2\n<strong>Explanation: </strong>\nA longest path of the tree is the path 1 - 0 - 2.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/06/14/1397_example_2.PNG\" style=\"width: 350px; height: 316px;\" /></p>\n\n<pre>\n<strong>Input:</strong> edges = [[0,1],[1,2],[2,3],[1,4],[4,5]]\n<strong>Output:</strong> 4\n<strong>Explanation: </strong>\nA longest path of the tree is the path 3 - 2 - 1 - 4 - 5.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= edges.length &lt;&nbsp;10^4</code></li>\n\t<li><code>edges[i][0] != edges[i][1]</code></li>\n\t<li><code>0 &lt;= edges[i][j] &lt;= edges.length</code></li>\n\t<li>The given edges form an undirected tree.</li>\n</ul>\n",
  "isPaidOnly": true,
  "difficulty": "Medium",
  "likes": 112,
  "dislikes": 3,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [],
  "topicTags": [
    {
      "name": "Tree",
      "slug": "tree"
    },
    {
      "name": "Depth-first Search",
      "slug": "depth-first-search"
    },
    {
      "name": "Breadth-first Search",
      "slug": "breadth-first-search"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 0}], \"1\": [], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    int treeDiameter(vector<vector<int>>& edges) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int treeDiameter(int[][] edges) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def treeDiameter(self, edges):\n        \"\"\"\n        :type edges: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def treeDiameter(self, edges: List[List[int]]) -> int:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nint treeDiameter(int** edges, int edgesSize, int* edgesColSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public int TreeDiameter(int[][] edges) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number[][]} edges\n * @return {number}\n */\nvar treeDiameter = function(edges) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer[][]} edges\n# @return {Integer}\ndef tree_diameter(edges)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func treeDiameter(_ edges: [[Int]]) -> Int {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func treeDiameter(edges [][]int) int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def treeDiameter(edges: Array[Array[Int]]): Int = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun treeDiameter(edges: Array<IntArray>): Int {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn tree_diameter(edges: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer[][] $edges\n     * @return Integer\n     */\n    function treeDiameter($edges) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"3.3K\", \"totalSubmission\": \"6.1K\", \"totalAcceptedRaw\": 3343, \"totalSubmissionRaw\": 6115, \"acRate\": \"54.7%\"}",
  "hints": [
    "Start at any node A and traverse the tree to find the furthest node from it, let's call it B.",
    "Having found the furthest node B, traverse the tree from B to find the furthest node from it, lets call it C.",
    "The distance between B and C is the tree diameter."
  ],
  "solution": null,
  "status": null,
  "sampleTestCase": "[[0,1],[0,2]]",
  "metaData": "{\n  \"name\": \"treeDiameter\",\n  \"params\": [\n    {\n      \"name\": \"edges\",\n      \"type\": \"integer[][]\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"integer\"\n  }\n}\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
