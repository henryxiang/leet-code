{
  "questionId": "117",
  "questionFrontendId": "117",
  "boundTopicId": null,
  "title": "Populating Next Right Pointers in Each Node II",
  "titleSlug": "populating-next-right-pointers-in-each-node-ii",
  "categoryTitle": "Algorithms",
  "content": "<p>Given a binary tree</p>\n\n<pre>\nstruct Node {\n  int val;\n  Node *left;\n  Node *right;\n  Node *next;\n}\n</pre>\n\n<p>Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to <code>NULL</code>.</p>\n\n<p>Initially, all next pointers are set to <code>NULL</code>.</p>\n\n<p>&nbsp;</p>\n\n<p><strong>Follow up:</strong></p>\n\n<ul>\n\t<li>You may only use constant extra space.</li>\n\t<li>Recursive approach is fine, you may assume implicit stack space does not count as extra space for this problem.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/02/15/117_sample.png\" style=\"width: 640px; height: 218px;\" /></p>\n\n<pre>\n<strong>Input:</strong> root = [1,2,3,4,5,null,7]\n<strong>Output:</strong> [1,#,2,3,#,4,5,7,#]\n<strong>Explanation: </strong>Given the above binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with &#39;#&#39; signifying the end of each level.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the given tree is less than <code>6000</code>.</li>\n\t<li><code>-100&nbsp;&lt;= node.val &lt;= 100</code></li>\n</ul>\n",
  "isPaidOnly": false,
  "difficulty": "Medium",
  "likes": 1177,
  "dislikes": 165,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"Populating Next Right Pointers in Each Node\", \"titleSlug\": \"populating-next-right-pointers-in-each-node\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
  "contributors": [],
  "topicTags": [
    {
      "name": "Tree",
      "slug": "tree"
    },
    {
      "name": "Depth-first Search",
      "slug": "depth-first-search"
    }
  ],
  "companyTagStats": "{\"2\": [{\"taggedByAdmin\": false, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 6}, {\"taggedByAdmin\": true, \"name\": \"Facebook\", \"slug\": \"facebook\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Oracle\", \"slug\": \"oracle\", \"timesEncountered\": 2}], \"1\": [{\"taggedByAdmin\": true, \"name\": \"Microsoft\", \"slug\": \"microsoft\", \"timesEncountered\": 5}, {\"taggedByAdmin\": true, \"name\": \"Bloomberg\", \"slug\": \"bloomberg\", \"timesEncountered\": 5}, {\"taggedByAdmin\": false, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 4}], \"3\": [{\"taggedByAdmin\": false, \"name\": \"Apple\", \"slug\": \"apple\", \"timesEncountered\": 2}]}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    Node* left;\n    Node* right;\n    Node* next;\n\n    Node() : val(0), left(NULL), right(NULL), next(NULL) {}\n\n    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}\n\n    Node(int _val, Node* _left, Node* _right, Node* _next)\n        : val(_val), left(_left), right(_right), next(_next) {}\n};\n*/\nclass Solution {\npublic:\n    Node* connect(Node* root) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "/*\n// Definition for a Node.\nclass Node {\n    public int val;\n    public Node left;\n    public Node right;\n    public Node next;\n\n    public Node() {}\n    \n    public Node(int _val) {\n        val = _val;\n    }\n\n    public Node(int _val, Node _left, Node _right, Node _next) {\n        val = _val;\n        left = _left;\n        right = _right;\n        next = _next;\n    }\n};\n*/\nclass Solution {\n    public Node connect(Node root) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "\"\"\"\n# Definition for a Node.\nclass Node(object):\n    def __init__(self, val=0, left=None, right=None, next=None):\n        self.val = val\n        self.left = left\n        self.right = right\n        self.next = next\n\"\"\"\nclass Solution(object):\n    def connect(self, root):\n        \"\"\"\n        :type root: Node\n        :rtype: Node\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "\"\"\"\n# Definition for a Node.\nclass Node:\n    def __init__(self, val: int = 0, left: 'Node' = None, right: 'Node' = None, next: 'Node' = None):\n        self.val = val\n        self.left = left\n        self.right = right\n        self.next = next\n\"\"\"\nclass Solution:\n    def connect(self, root: 'Node') -> 'Node':\n        "
    },
    {
      "lang": "C#",
      "code": "/*\n// Definition for a Node.\npublic class Node {\n    public int val;\n    public Node left;\n    public Node right;\n    public Node next;\n\n    public Node() {}\n\n    public Node(int _val) {\n        val = _val;\n    }\n\n    public Node(int _val, Node _left, Node _right, Node _next) {\n        val = _val;\n        left = _left;\n        right = _right;\n        next = _next;\n    }\n}\n*/\npublic class Solution {\n    public Node Connect(Node root) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * // Definition for a Node.\n * function Node(val, left, right, next) {\n *    this.val = val === undefined ? null : val;\n *    this.left = left === undefined ? null : left;\n *    this.right = right === undefined ? null : right;\n *    this.next = next === undefined ? null : next;\n * };\n */\n/**\n * @param {Node} root\n * @return {Node}\n */\nvar connect = function(root) {\n    \n};"
    }
  ],
  "stats": "{\"totalAccepted\": \"215.4K\", \"totalSubmission\": \"590.4K\", \"totalAcceptedRaw\": 215363, \"totalSubmissionRaw\": 590444, \"acRate\": \"36.5%\"}",
  "hints": [],
  "solution": {
    "id": "832",
    "canSeeDetail": true,
    "url": "/articles/populating-next-right-pointers-in-each-node-ii/",
    "content": "[TOC]\r\n\r\n## Solution\r\n\r\n#### Approach 1: Level Order Traversal\r\n\r\n**Intuition**\r\n\r\nThere are two basic kinds of traversals on a tree or a graph. One is where we explore the tree in a depth first manner i.e. one branch at a time. The other one is where we traverse the tree breadth-wise i.e. we explore one level of the tree before moving on to the next one. For trees, we have further classifications of the depth first traversal approach called `preorder`, `inorder`, and the `postorder` traversals. Breadth first approach to exploring a tree is based on the concept of the `level` of a node. The `level` of a node is its depth or distance from the root node. We process all the nodes on one level before moving on to the next one. \r\n\r\n<center>\r\n<img src=\"../Figures/117/img1.png\" width=\"600\"/>\r\n</center>\r\n\r\nNow that we have the basics out of the way, it's pretty evident that the problem statement strongly hints at a breadth first kind of a solution. We need to link all the nodes together which lie on the `same level` and the level order or the breadth first traversal gives us access to all such nodes which lie on the same level. \r\n\r\n**Algorithm**\r\n\r\n1. Initialize a queue, `Q` which we will be making use of during our traversal. There are multiple ways to implement the level order traversal especially when it comes to identifying the level of a particular node. \r\n    1. We can add a pair of $$(node, level)$$ to the queue and whenever we add the children of a node, we add $$\\text (node.left, \\;\\; parent\\_level + 1)$$ and $$(node.right,\\;\\; parent\\_level + 1)$$. This approach wouldn't be very efficient for our algorithm since we need *all* the nodes on the same level and we would need another data structure just for that.\r\n    \r\n        <center>\r\n        <img src=\"../Figures/117/img2.png\" width=\"600\"/>\r\n        </center>\r\n    \r\n    2. A more memory efficient way of segregating the same level nodes is to use some demarcation between the levels. Usually, we insert a `NULL` entry in the queue which marks the end of the previous level and the start of the next level. This is a great approach but again, it would still consume some memory proportional to the number of levels in the tree. \r\n\r\n        <center>\r\n        <img src=\"../Figures/117/img3.png\" width=\"600\"/>\r\n        </center>\r\n\r\n    3. The approach we will be using here would have a nested loop structure to get around the requirement of a `NULL` pointer. Essentially, at each step, we record the size of the queue and that always corresponds to ***all*** the nodes on a particular level. Once we have this size, we only process these many elements and no more. By the time we are done processing `size` number of elements, the queue would contain ***all*** the nodes on the next level. Here's a pseudocode for the same:\r\n        <pre>\r\n        while (!Q.empty())\r\n        {\r\n            size = Q.size()\r\n            for i in range 0..size\r\n            {\r\n                node = Q.pop()\r\n                Q.push(node.left)\r\n                Q.push(node.right)\r\n            }\r\n        }\r\n        </pre>\r\n\r\n2. We start off by adding the root of the tree in the queue. Since there is just one node on the level 0, we don't need to establish any connections and can move onto the `while` loop.\r\n\r\n    <center>\r\n    <img src=\"../Figures/117/img4.png\" width=\"600\"/>\r\n    </center>\r\n\r\n3. The first `while` loop from the pseudocode above essentially iterates over each level one by one and the inner for loop iterates over all the nodes on the particular level. Since we have access to all the nodes on the same level, we can establish the next pointers easily. \r\n4. When we `pop` a node inside the `for` loop from the pseudocode above, we add its children at the back of the queue. Also, the element at the head of the queue is the `next` element in order, on the current level. So, we can easily establish the new pointers.\r\n\r\n    <center>\r\n    <img src=\"../Figures/117/img5.png\" width=\"600\"/>\r\n    </center>\r\n\r\n<iframe src=\"https://leetcode.com/playground/iXHeKCmv/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"iXHeKCmv\"></iframe>\r\n\r\n**Complexity Analysis**\r\n\r\n* Time Complexity: $$O(N)$$ since we process each node exactly once. Note that processing a node in this context means popping the node from the queue and then establishing the next pointers. \r\n* Space Complexity: $$O(N)$$. This is a perfect binary tree which means the last level contains $$N/2$$ nodes. The space complexity for breadth first traversal is the maximum space occupied and the space occupied by the queue is dependent upon the maximum number of nodes in particular level. So, in this case, the space complexity would be $$O(N)$$.\r\n<br>\r\n<br>\r\n\r\n---\r\n#### Approach 2: Using previously established next pointers\r\n\r\n**Intuition**\r\n\r\nWe have to process all the nodes of the tree. So we can't reduce the time complexity any further. However, we can try and reduce the space complexity. The reason we need a queue here is because we don't have any idea about the structure of the tree and the kind of branches it has and we need to access all the nodes on a common level, together, and establish connections between them. \r\n\r\nOnce we are done establishing the `next` pointers between the nodes, don't they kind of represent a linked list? After the `next` connections are established, all the nodes on a particular level actually form a linked list via these `next` pointers. Based on this idea, we have the following intuition for our space efficient algorithm:\r\n\r\n> We only move on to the level N+1 when we are done establishing the next pointers for the level N. So, since we have access to all the nodes on a particular level via the next pointers, we can use these next pointers to establish the connections for the next level or the level containing their children.\r\n\r\n**Algorithm**\r\n\r\n1. We start at the root node. Since there are no more nodes to process on the first level or level `0`, we can establish the next pointers on the next level i.e. level 1. An important thing to remember in this algorithm is that we establish the next pointers for a level $$N$$ while we are still on level $$N-1$$ and once we are done establishing these new connections, we move on to $$N$$ and do the same thing for $$N+1$$.\r\n2. As we just said, when we go over the nodes of a particular level, their next pointers are already established. This is what helps get rid of the queue data structure from the previous approach and helps save space. To start on a particular level, we just need the `leftmost` node. From there on its just a linked list traversal.   \r\n3. Based on these ideas, our algorithm will have the following pseudocode:\r\n\r\n    <pre>\r\n    leftmost = root\r\n    while (leftmost != null)\r\n    {\r\n        curr = leftmost\r\n        prev = NULL\r\n        while (curr != null)\r\n        {\r\n            → process left child\r\n            → process right child\r\n            → set leftmost for the next level\r\n            curr = curr.next\r\n        }\r\n    }\r\n    </pre>\r\n\r\n4. Before we proceed with the steps in our algorithm, we need to understand some of the variables we have used above in the pseudocode since they will be important in understanding the implementation. \r\n    1. **leftmost:** represents the corresponding variable on each level. This node is important to discover on each level since this would act as our head of the linked list and we will start our traversal of all the nodes on a level from this node onwards. Since the structure of the tree can be anything, we don't really know what the leftmost node on a level would be. Let's look at a few tree structures and the corresponding leftmost nodes on each level. \r\n    \r\n        <center>\r\n        <img src=\"../Figures/117/img6.png\" width=\"600\"/>\r\n        </center>\r\n        \r\n        Oh, in case you are interested in a fun problem that find out all such nodes (rightmost instead of leftmost), check out [this problem](https://leetcode.com/problems/binary-tree-right-side-view/description/).    \r\n    \r\n    2. **curr:** As we can see in the pseudocode, this is just the variable we use to traverse all the nodes on the `current` level. It starts off with `leftmost` and then follows the `next` pointers all the way to the very end. \r\n    3. **prev:** This is the pointer to the `leading` node on the `next` level. We need this pointer because whenever we update the node `curr`, we assign `prev.next` to the left child of `curr` if one exists, otherwise the right child. When we do so, we also update the `prev` pointer. Let's consider an example that highlights how the `prev` pointer is updated. Namely, the following example will highlight the 4 possible scenarios for pointer updates:\r\n\r\n          - The first case is when the `prev` pointer is assigned a non-null value for the very first time i.e. when it is initialized. We start with a `null` value and when we find the first node on the *next* level i.e whenever we find the very first node on the current level that has at least one child, we assign the leftmost child to `prev`.\r\n          \r\n          <center>\r\n          <img src=\"../Figures/117/img7.png\" width=\"500\"/>\r\n          </center>\r\n        \r\n          - Next is when the node on the current level doesn't have a left child. We then point `prev` to the right child of the current node. An important thing to remember in this illustration is that the level `2, 3, 5, 9` already has their `next` pointers properly established. \r\n          \r\n          <center>\r\n          <img src=\"../Figures/117/img8.png\" width=\"500\"/>\r\n          </center>\r\n        \r\n          - Moving on, we have a node with no children. Here, we don't update the `prev` pointer. \r\n          \r\n          <center>\r\n          <img src=\"../Figures/117/img9.png\" width=\"500\"/>\r\n          </center>\r\n          \r\n          - And finally, we come across a node with 2 children. We first update `prev` to the left child and once the necessary processing is done, we update it to the right child. \r\n          \r\n          <center>\r\n          <img src=\"../Figures/117/img10.png\" width=\"500\"/>\r\n          </center>\r\n \r\n5. Once we are done with the current level, we move on to the next one. One last thing that's left here to update the `leftmost` node. We need that node to start traversal on a particular level. Think of it as the head of the linked list. This is easy to do by using the `prev` pointer. Whenever we set the value for `prev` pointer for the first time corresponding to a level i.e. whenever we set it to it's first node, we also set the head or the `leftmost` to that node. So, in the following image, `leftmost` originally was `2` and now it would change to `4`.\r\n\r\n    <center>\r\n    <img src=\"../Figures/117/img7.png\" width=\"500\"/>\r\n    </center>\r\n\r\n<iframe src=\"https://leetcode.com/playground/PArjiJoJ/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"PArjiJoJ\"></iframe>\r\n\r\n**Complexity Analysis**\r\n\r\n* Time Complexity: $$O(N)$$ since we process each node exactly once.\r\n* Space Complexity: $$O(1)$$ since we don't make use of any additional data structure for traversing nodes on a particular level like the previous approach does. \r\n<br>\r\n<br>\r\n---\r\nAnalysis written by: [@sachinmalhotra1993](https://leetcode.com/sachinmalhotra1993/).",
    "contentTypeId": "107",
    "rating": {
      "id": "796",
      "count": 6,
      "average": 4.333,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "[1,2,3,4,5,null,7]",
  "metaData": "{\n  \"name\": \"connect\",\n  \"params\": [\n    {\n      \"name\": \"root\",\n      \"type\": \"Node\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"Node\"\n  },\n  \"structures\": [\n    {\n      \"name\": \"Node\",\n      \"comment\": \"Definition for a Node.\",\n      \"members\": [\n        {\n          \"name\": \"val\",\n          \"type\": \"integer\"\n        },\n        {\n          \"name\": \"left\",\n          \"type\": \"Node\"\n        },\n        {\n          \"name\": \"right\",\n          \"type\": \"Node\"\n        },\n        {\n          \"name\": \"next\",\n          \"type\": \"Node\"\n        }\n      ]\n    }\n  ],\n  \"languages\": [\n    \"cpp\",\n    \"java\",\n    \"python\",\n    \"csharp\",\n    \"javascript\",\n    \"python3\"\n  ],\n  \"manual\": true\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
