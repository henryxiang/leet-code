{
  "questionId": "118",
  "questionFrontendId": "118",
  "boundTopicId": null,
  "title": "Pascal's Triangle",
  "titleSlug": "pascals-triangle",
  "categoryTitle": "Algorithms",
  "content": "<p>Given a non-negative integer&nbsp;<em>numRows</em>, generate the first <em>numRows</em> of Pascal&#39;s triangle.</p>\r\n\r\n<p><img alt=\"\" src=\"https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif\" style=\"height:240px; width:260px\" /><br />\r\n<small>In Pascal&#39;s triangle, each number is the sum of the two numbers directly above it.</small></p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 5\r\n<strong>Output:</strong>\r\n[\r\n     [1],\r\n    [1,1],\r\n   [1,2,1],\r\n  [1,3,3,1],\r\n [1,4,6,4,1]\r\n]\r\n</pre>\r\n",
  "isPaidOnly": false,
  "difficulty": "Easy",
  "likes": 963,
  "dislikes": 85,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"Pascal's Triangle II\", \"titleSlug\": \"pascals-triangle-ii\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
  "contributors": [],
  "topicTags": [
    {
      "name": "Array",
      "slug": "array"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": false, \"name\": \"Yelp\", \"slug\": \"yelp\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Adobe\", \"slug\": \"adobe\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Oracle\", \"slug\": \"oracle\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Cruise Automation\", \"slug\": \"cruise-automation\", \"timesEncountered\": 2}, {\"taggedByAdmin\": true, \"name\": \"Twitter\", \"slug\": \"twitter\", \"timesEncountered\": 0}, {\"taggedByAdmin\": true, \"name\": \"Apple\", \"slug\": \"apple\", \"timesEncountered\": 0}], \"1\": [{\"taggedByAdmin\": false, \"name\": \"Uber\", \"slug\": \"uber\", \"timesEncountered\": 4}, {\"taggedByAdmin\": false, \"name\": \"Microsoft\", \"slug\": \"microsoft\", \"timesEncountered\": 3}, {\"taggedByAdmin\": false, \"name\": \"Goldman Sachs\", \"slug\": \"goldman-sachs\", \"timesEncountered\": 3}, {\"taggedByAdmin\": false, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 2}], \"2\": [{\"taggedByAdmin\": false, \"name\": \"Bloomberg\", \"slug\": \"bloomberg\", \"timesEncountered\": 3}, {\"taggedByAdmin\": false, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 3}, {\"taggedByAdmin\": false, \"name\": \"Facebook\", \"slug\": \"facebook\", \"timesEncountered\": 2}]}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    vector<vector<int>> generate(int numRows) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public List<List<Integer>> generate(int numRows) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def generate(self, numRows):\n        \"\"\"\n        :type numRows: int\n        :rtype: List[List[int]]\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        "
    },
    {
      "lang": "C",
      "code": "\n\n/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** generate(int numRows, int* returnSize, int** returnColumnSizes){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public IList<IList<int>> Generate(int numRows) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number} numRows\n * @return {number[][]}\n */\nvar generate = function(numRows) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer} num_rows\n# @return {Integer[][]}\ndef generate(num_rows)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func generate(_ numRows: Int) -> [[Int]] {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func generate(numRows int) [][]int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def generate(numRows: Int): List[List[Int]] = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun generate(numRows: Int): List<List<Int>> {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn generate(num_rows: i32) -> Vec<Vec<i32>> {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer $numRows\n     * @return Integer[][]\n     */\n    function generate($numRows) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"314.4K\", \"totalSubmission\": \"639K\", \"totalAcceptedRaw\": 314354, \"totalSubmissionRaw\": 639013, \"acRate\": \"49.2%\"}",
  "hints": [],
  "solution": {
    "id": "340",
    "canSeeDetail": true,
    "url": "/articles/pascals-triangle/",
    "content": "[TOC]\n\n#### Approach 1: Dynamic Programming\n\n**Intuition**\n\nIf we have the a row of Pascal's triangle, we can easily compute the next\nrow by each pair of adjacent values.\n\n**Algorithm**\n\nAlthough the algorithm is very simple, the iterative approach to constructing\nPascal's triangle can be classified as dynamic programming because we\nconstruct each row based on the previous row.\n\nFirst, we generate the overall `triangle` list, which will store each row as\na sublist. Then, we check for the special case of $$0$$, as we would otherwise\nreturn $$[1]$$. If $$numRows > 0$$, then we initialize `triangle` with $$[1]$$\nas its first row, and proceed to fill the rows as follows:\n\n!?!../Documents/118_Pascals_Triangle.json:1280,720!?!\n\n<iframe src=\"https://leetcode.com/playground/idrxbCSN/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"idrxbCSN\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(numRows^2)$$\n\n    Although updating each value of `triangle` happens in constant time, it\n    is performed $$O(numRows^2)$$ times. To see why, consider how many\n    overall loop iterations there are. The outer loop obviously runs\n    $$numRows$$ times, but for each iteration of the outer loop, the inner\n    loop runs $$rowNum$$ times. Therefore, the overall number of `triangle` updates\n    that occur is $$1 + 2 + 3 + \\ldots + numRows$$, which, according to Gauss' formula,\n    is\n\n    $$\n    \\begin{aligned}\n        \\frac{numRows(numRows+1)}{2} &= \\frac{numRows^2 + numRows}{2} \\\\\n        &= \\frac{numRows^2}{2} + \\frac{numRows}{2} \\\\\n        &= O(numRows^2)\n    \\end{aligned}\n    $$\n\n* Space complexity : $$O(numRows^2)$$\n\n    Because we need to store each number that we update in `triangle`, the\n    space requirement is the same as the time complexity.",
    "contentTypeId": "107",
    "rating": {
      "id": "335",
      "count": 20,
      "average": 4.95,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "5",
  "metaData": "{\r\n  \"name\": \"generate\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"numRows\",\r\n      \"type\": \"integer\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"list<list<integer>>\",\r\n    \"dealloc\": true,\r\n    \"rowsize\": \"param_1\"\r\n  }\r\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
