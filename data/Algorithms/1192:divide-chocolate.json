{
  "questionId": "1192",
  "questionFrontendId": "1231",
  "boundTopicId": null,
  "title": "Divide Chocolate",
  "titleSlug": "divide-chocolate",
  "categoryTitle": "Algorithms",
  "content": "<p>You have one chocolate bar that consists of some chunks. Each chunk has its own sweetness given by the array&nbsp;<code>sweetness</code>.</p>\n\n<p>You want to share the chocolate with your <code>K</code>&nbsp;friends so you start cutting the chocolate bar into <code>K+1</code>&nbsp;pieces using&nbsp;<code>K</code>&nbsp;cuts, each piece consists of some <strong>consecutive</strong> chunks.</p>\n\n<p>Being generous, you will eat the piece with the <strong>minimum total sweetness</strong> and give the other pieces to your friends.</p>\n\n<p>Find the <strong>maximum total sweetness</strong> of the&nbsp;piece you can get by cutting the chocolate bar optimally.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> sweetness = [1,2,3,4,5,6,7,8,9], K = 5\n<strong>Output:</strong> 6\n<b>Explanation: </b>You can divide the chocolate to [1,2,3], [4,5], [6], [7], [8], [9]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> sweetness = [5,6,7,8,9,1,2,3,4], K = 8\n<strong>Output:</strong> 1\n<b>Explanation: </b>There is only one way to cut the bar into 9 pieces.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> sweetness = [1,2,2,1,2,2,1,2,2], K = 2\n<strong>Output:</strong> 5\n<b>Explanation: </b>You can divide the chocolate to [1,2,2], [1,2,2], [1,2,2]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= K &lt;&nbsp;sweetness.length &lt;= 10^4</code></li>\n\t<li><code>1 &lt;= sweetness[i] &lt;= 10^5</code></li>\n</ul>\n",
  "isPaidOnly": true,
  "difficulty": "Hard",
  "likes": 120,
  "dislikes": 3,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [],
  "topicTags": [
    {
      "name": "Binary Search",
      "slug": "binary-search"
    },
    {
      "name": "Greedy",
      "slug": "greedy"
    }
  ],
  "companyTagStats": "{\"1\": [{\"taggedByAdmin\": true, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 5}], \"2\": [], \"3\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    int maximizeSweetness(vector<int>& sweetness, int K) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int maximizeSweetness(int[] sweetness, int K) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def maximizeSweetness(self, sweetness, K):\n        \"\"\"\n        :type sweetness: List[int]\n        :type K: int\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def maximizeSweetness(self, sweetness: List[int], K: int) -> int:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nint maximizeSweetness(int* sweetness, int sweetnessSize, int K){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public int MaximizeSweetness(int[] sweetness, int K) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number[]} sweetness\n * @param {number} K\n * @return {number}\n */\nvar maximizeSweetness = function(sweetness, K) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer[]} sweetness\n# @param {Integer} k\n# @return {Integer}\ndef maximize_sweetness(sweetness, k)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func maximizeSweetness(_ sweetness: [Int], _ K: Int) -> Int {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func maximizeSweetness(sweetness []int, K int) int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def maximizeSweetness(sweetness: Array[Int], K: Int): Int = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun maximizeSweetness(sweetness: IntArray, K: Int): Int {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn maximize_sweetness(sweetness: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer[] $sweetness\n     * @param Integer $K\n     * @return Integer\n     */\n    function maximizeSweetness($sweetness, $K) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"4.1K\", \"totalSubmission\": \"8K\", \"totalAcceptedRaw\": 4058, \"totalSubmissionRaw\": 7992, \"acRate\": \"50.8%\"}",
  "hints": [
    "After dividing the array into K+1 sub-arrays, you will pick the sub-array with the minimum sum.",
    "Divide the sub-array into K+1 sub-arrays such that the minimum sub-array sum is as maximum as possible.",
    "Use binary search with greedy check."
  ],
  "solution": null,
  "status": null,
  "sampleTestCase": "[1,2,3,4,5,6,7,8,9]\n5",
  "metaData": "{\n  \"name\": \"maximizeSweetness\",\n  \"params\": [\n    {\n      \"name\": \"sweetness\",\n      \"type\": \"integer[]\"\n    },\n    {\n      \"name\": \"K\",\n      \"type\": \"integer\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"integer\"\n  }\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
