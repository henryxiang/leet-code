{
  "questionId": "1195",
  "questionFrontendId": "1103",
  "boundTopicId": null,
  "title": "Distribute Candies to People",
  "titleSlug": "distribute-candies-to-people",
  "categoryTitle": "Algorithms",
  "content": "<p>We distribute some&nbsp;number of <code>candies</code>, to a row of <strong><code>n =&nbsp;num_people</code></strong>&nbsp;people in the following way:</p>\n\n<p>We then give 1 candy to the first person, 2 candies to the second person, and so on until we give <code>n</code>&nbsp;candies to the last person.</p>\n\n<p>Then, we go back to the start of the row, giving <code>n&nbsp;+ 1</code> candies to the first person, <code>n&nbsp;+ 2</code> candies to the second person, and so on until we give <code>2 * n</code>&nbsp;candies to the last person.</p>\n\n<p>This process repeats (with us giving one more candy each time, and moving to the start of the row after we reach the end) until we run out of candies.&nbsp; The last person will receive all of our remaining candies (not necessarily one more than the previous gift).</p>\n\n<p>Return an array (of length <code>num_people</code>&nbsp;and sum <code>candies</code>) that represents the final distribution of candies.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> candies = 7, num_people = 4\n<strong>Output:</strong> [1,2,3,1]\n<strong>Explanation:</strong>\nOn the first turn, ans[0] += 1, and the array is [1,0,0,0].\nOn the second turn, ans[1] += 2, and the array is [1,2,0,0].\nOn the third turn, ans[2] += 3, and the array is [1,2,3,0].\nOn the fourth turn, ans[3] += 1 (because there is only one candy left), and the final array is [1,2,3,1].\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> candies = 10, num_people = 3\n<strong>Output:</strong> [5,2,3]\n<strong>Explanation: </strong>\nOn the first turn, ans[0] += 1, and the array is [1,0,0].\nOn the second turn, ans[1] += 2, and the array is [1,2,0].\nOn the third turn, ans[2] += 3, and the array is [1,2,3].\nOn the fourth turn, ans[0] += 4, and the final array is [5,2,3].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>1 &lt;= candies &lt;= 10^9</li>\n\t<li>1 &lt;= num_people &lt;= 1000</li>\n</ul>\n",
  "isPaidOnly": false,
  "difficulty": "Easy",
  "likes": 137,
  "dislikes": 38,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [
    {
      "username": "awice",
      "profileUrl": "/awice/",
      "avatarUrl": "https://assets.leetcode.com/users/awice/avatar_1576905115.png"
    }
  ],
  "topicTags": [
    {
      "name": "Math",
      "slug": "math"
    }
  ],
  "companyTagStats": "{\"1\": [], \"2\": [], \"3\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    vector<int> distributeCandies(int candies, int num_people) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int[] distributeCandies(int candies, int num_people) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def distributeCandies(self, candies, num_people):\n        \"\"\"\n        :type candies: int\n        :type num_people: int\n        :rtype: List[int]\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def distributeCandies(self, candies: int, num_people: int) -> List[int]:\n        "
    },
    {
      "lang": "C",
      "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* distributeCandies(int candies, int num_people, int* returnSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public int[] DistributeCandies(int candies, int num_people) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number} candies\n * @param {number} num_people\n * @return {number[]}\n */\nvar distributeCandies = function(candies, num_people) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer} candies\n# @param {Integer} num_people\n# @return {Integer[]}\ndef distribute_candies(candies, num_people)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func distributeCandies(_ candies: Int, _ num_people: Int) -> [Int] {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func distributeCandies(candies int, num_people int) []int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def distributeCandies(candies: Int, num_people: Int): Array[Int] = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun distributeCandies(candies: Int, num_people: Int): IntArray {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn distribute_candies(candies: i32, num_people: i32) -> Vec<i32> {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer $candies\n     * @param Integer $num_people\n     * @return Integer[]\n     */\n    function distributeCandies($candies, $num_people) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"16.4K\", \"totalSubmission\": \"27.3K\", \"totalAcceptedRaw\": 16378, \"totalSubmissionRaw\": 27251, \"acRate\": \"60.1%\"}",
  "hints": [
    "Give candy to everyone each \"turn\" first [until you can't], then give candy to one person per turn."
  ],
  "solution": {
    "id": "747",
    "canSeeDetail": true,
    "url": "/articles/distribute-candies-to-people/",
    "content": "[TOC]\r\n\r\n## Solution\r\n\r\n--- \r\n\r\n#### Approach 1: Sum of Arithmetic Progression\r\n\r\n**Intuition**\r\n\r\nThat sort of \"Math\" questions is to check on how far one \r\ncould simplify the problem even before starting to code.\r\n\r\nNaive idea here is to jump into code and start to give candies \r\nin a loop till the end of candies. Time complexity of such a \r\nsolution would be $$\\mathcal{O}(\\max(G, N))$$, where G is a number of gifts \r\nand N is a number of people.\r\n\r\nMore elegant way would be to notice that candies distribution \r\ncould be described by a simple formula. Using that formula \r\none could solve the problem in $$\\mathcal{O}(N)$$ time\r\nby the straightforward generation of final distribution array.\r\n\r\nLet's derive that formula step by step.\r\n\r\n**Number of persons with complete gifts**\r\n\r\nCandies gifts, except the last gift which contains the remaining,\r\nrepresent the arithmetic progression of natural numbers. \r\n\r\n![fig](../Figures/1103/arithmeti.png)\r\n\r\nLet's assume that the progression has `p` elements,\r\nthen the remaining is just a difference between number of candies $$C$$\r\nand sum of the progression elements\r\n\r\n$$\r\n\\textrm{remaining} = C - \\sum\\limits_{k = 0}^{k = p}{k}\r\n$$\r\n\r\nSum of the natural numbers progression is a \r\n[school knowledge](https://en.wikipedia.org/wiki/1_%2B_2_%2B_3_%2B_4_%2B_%E2%8B%AF),\r\nand remaining could be rewritten as\r\n\r\n$$\r\n\\textrm{remaining} = C - \\frac{p(p + 1)}{2}\r\n$$\r\n\r\nIt's known that remaining is larger or equal to 0 and smaller than \r\nthe next progression number $$p + 1$$.\r\n\r\n$$\r\n0 \\le C - \\frac{p(p + 1)}{2} < p + 1\r\n$$\r\n\r\nSimple calculations results in \r\n\r\n$$\r\n\\sqrt{2C + \\frac{1}{4}} - \\frac{3}{2} < p \\le \\sqrt{2C + \\frac{1}{4}} - \\frac{1}{2}\r\n$$\r\n\r\nThere is only one integer in this interval, and hence now\r\none knows the number of elements in the arithmetic progression\r\n\r\n$$\r\np = \\textrm{floor}\\left(\\sqrt{2C + \\frac{1}{4}} - \\frac{1}{2}\\right)\r\n$$\r\n\r\n![fig](../Figures/1103/number.png)\r\n\r\n**Candies gain during the complete turns**\r\n\r\nNow one could compute a number of complete turns when all N persons\r\nreceived a gift : `rows = p / N`. \r\n\r\nDuring complete turns person number `i` receives in total \r\n\r\n$$\r\nd[i] = i + (i + N) + (i + 2N) + ... (i + (\\textrm{rows} - 1) N) = \r\ni \\times \\textrm{rows} + N \\frac{\\textrm{rows}(\\textrm{rows} - 1)}{2}\r\n$$\r\n\r\n![fig](../Figures/1103/complete.png)\r\n\r\n**Candies gain during the incomplete turn**\r\n\r\nThe last turn could be incomplete, i.e. not all persons receive \r\ntheir gifts.\r\n\r\nOne could compute a number of persons which received a complete\r\ngift : `cols = p % N`. These persons will receive one turn more candies \r\n\r\n$$\r\nd[i] += i + N \\times \\textrm{rows}\r\n$$\r\n\r\nAnd the last person with a gift will receive all remaining candies\r\n\r\n$$\r\nd[\\textrm{cols} + 1] += \\textrm{remaining}\r\n$$\r\n\r\n![fig](../Figures/1103/incomplete.png)\r\n\r\nThat's all, all distributed candies are computed.\r\n\r\n**Algorithm**\r\n\r\n- Compute number of persons with complete gifts\r\n\r\n$$\r\np = \\textrm{floor}\\left(\\sqrt{2C + \\frac{1}{4}} - \\frac{1}{2}\\right)\r\n$$\r\n\r\nand the last gift $$\\textrm{remaining} = C - \\frac{p(p + 1)}{2}$$.\r\n\r\n- Compute the number of complete turns, when all persons receive their \r\ngifts : `rows = p // n`, and candies gain from these turns :\r\n$$\r\nd[i] = i \\times \\textrm{rows} + N \\frac{\\textrm{rows}(\\textrm{rows} - 1)}{2}\r\n$$\r\n\r\n- Add one turn more candies to first `p % N` persons participated in \r\nthe last incomplete turn : $$d[i] += i + N \\times \\textrm{rows}$$.\r\n\r\n- Add `remaining` to the person after the first `p % N` persons.\r\n\r\n- Return candies distribution `d`. \r\n\r\n**Implementation**\r\n\r\n<iframe src=\"https://leetcode.com/playground/uDauDHJU/shared\" frameBorder=\"0\" width=\"100%\" height=\"395\" name=\"uDauDHJU\"></iframe>\r\n\r\n**Complexity Analysis**\r\n\r\n* Time complexity : $$\\mathcal{O}(N)$$ to create N elements \r\nof the output array.\r\n* Space complexity : $$\\mathcal{O}(N)$$ to keep the output.  \r\n\r\nAnalysis written by @[liaison](https://leetcode.com/liaison/)\r\nand @[andvary](https://leetcode.com/andvary/)",
    "contentTypeId": "107",
    "rating": {
      "id": "732",
      "count": 4,
      "average": 5,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "7\n4",
  "metaData": "{\n  \"name\": \"distributeCandies\",\n  \"params\": [\n    {\n      \"name\": \"candies\",\n      \"type\": \"integer\"\n    },\n    {\n      \"type\": \"integer\",\n      \"name\": \"num_people\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"integer[]\"\n  }\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
