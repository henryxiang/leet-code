{
  "questionId": "1202",
  "questionFrontendId": "1246",
  "boundTopicId": null,
  "title": "Palindrome Removal",
  "titleSlug": "palindrome-removal",
  "categoryTitle": "Algorithms",
  "content": "<p>Given an integer array&nbsp;<code>arr</code>, in one move you can select a <strong>palindromic</strong>&nbsp;subarray <code>arr[i], arr[i+1], ..., arr[j]</code>&nbsp;where <code>i &lt;= j</code>, and remove that subarray from the given array. Note that after removing a subarray, the elements on the left and on the right of that subarray move to fill the gap left by the removal.</p>\n\n<p>Return the minimum number of moves needed&nbsp;to remove all numbers from the array.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [1,2]\n<strong>Output:</strong> 2\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [1,3,4,1,5]\n<strong>Output:</strong> 3\n<b>Explanation: </b>Remove [4] then remove [1,3,1] then remove [5].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= arr.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= arr[i] &lt;= 20</code></li>\n</ul>\n",
  "isPaidOnly": true,
  "difficulty": "Hard",
  "likes": 76,
  "dislikes": 0,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [],
  "topicTags": [
    {
      "name": "Dynamic Programming",
      "slug": "dynamic-programming"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"Microsoft\", \"slug\": \"microsoft\", \"timesEncountered\": 0}], \"1\": [], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    int minimumMoves(vector<int>& arr) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int minimumMoves(int[] arr) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def minimumMoves(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def minimumMoves(self, arr: List[int]) -> int:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nint minimumMoves(int* arr, int arrSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public int MinimumMoves(int[] arr) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number[]} arr\n * @return {number}\n */\nvar minimumMoves = function(arr) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer[]} arr\n# @return {Integer}\ndef minimum_moves(arr)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func minimumMoves(_ arr: [Int]) -> Int {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func minimumMoves(arr []int) int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def minimumMoves(arr: Array[Int]): Int = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun minimumMoves(arr: IntArray): Int {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn minimum_moves(arr: Vec<i32>) -> i32 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer[] $arr\n     * @return Integer\n     */\n    function minimumMoves($arr) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"1.8K\", \"totalSubmission\": \"4.1K\", \"totalAcceptedRaw\": 1803, \"totalSubmissionRaw\": 4129, \"acRate\": \"43.7%\"}",
  "hints": [
    "Use dynamic programming.",
    "Let dp[i][j] be the solution for the sub-array from index i to index j.",
    "Notice that if we have S[i] == S[j] one transition could be just dp(i + 1, j + 1) because in the last turn we would have a palindrome and we can extend this palindrome from both sides, the other transitions are not too difficult to deduce."
  ],
  "solution": null,
  "status": null,
  "sampleTestCase": "[1,2]",
  "metaData": "{\n  \"name\": \"minimumMoves\",\n  \"params\": [\n    {\n      \"name\": \"arr\",\n      \"type\": \"integer[]\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"integer\"\n  }\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
