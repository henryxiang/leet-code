{
  "questionId": "1206",
  "questionFrontendId": "1109",
  "boundTopicId": null,
  "title": "Corporate Flight Bookings",
  "titleSlug": "corporate-flight-bookings",
  "categoryTitle": "Algorithms",
  "content": "<p>There are <code>n</code> flights, and they are labeled&nbsp;from <code>1</code> to <code>n</code>.</p>\r\n\r\n<p>We have a list of flight bookings.&nbsp; The <code>i</code>-th booking&nbsp;<code>bookings[i] = [i, j, k]</code>&nbsp;means that we booked <code>k</code> seats from flights labeled <code>i</code> to <code>j</code> inclusive.</p>\r\n\r\n<p>Return an array <code>answer</code> of length <code>n</code>, representing the number of seats booked on each flight in order of their label.</p>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> bookings = [[1,2,10],[2,3,20],[2,5,25]], n = 5\r\n<strong>Output:</strong> [10,55,45,25,25]\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong>Constraints:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= bookings.length &lt;= 20000</code></li>\r\n\t<li><code>1 &lt;= bookings[i][0] &lt;= bookings[i][1] &lt;= n &lt;= 20000</code></li>\r\n\t<li><code>1 &lt;= bookings[i][2] &lt;= 10000</code></li>\r\n</ul>",
  "isPaidOnly": false,
  "difficulty": "Medium",
  "likes": 285,
  "dislikes": 53,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [
    {
      "username": "piyushbhatia993",
      "profileUrl": "/piyushbhatia993/",
      "avatarUrl": "https://assets.leetcode.com/users/piyushbhatia993/avatar_1559070747.png"
    }
  ],
  "topicTags": [
    {
      "name": "Array",
      "slug": "array"
    },
    {
      "name": "Math",
      "slug": "math"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"Goldman Sachs\", \"slug\": \"goldman-sachs\", \"timesEncountered\": 0}], \"1\": [], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    vector<int> corpFlightBookings(vector<vector<int>>& bookings, int n) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int[] corpFlightBookings(int[][] bookings, int n) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def corpFlightBookings(self, bookings, n):\n        \"\"\"\n        :type bookings: List[List[int]]\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def corpFlightBookings(self, bookings: List[List[int]], n: int) -> List[int]:\n        "
    },
    {
      "lang": "C",
      "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* corpFlightBookings(int** bookings, int bookingsSize, int* bookingsColSize, int n, int* returnSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public int[] CorpFlightBookings(int[][] bookings, int n) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number[][]} bookings\n * @param {number} n\n * @return {number[]}\n */\nvar corpFlightBookings = function(bookings, n) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer[][]} bookings\n# @param {Integer} n\n# @return {Integer[]}\ndef corp_flight_bookings(bookings, n)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func corpFlightBookings(_ bookings: [[Int]], _ n: Int) -> [Int] {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func corpFlightBookings(bookings [][]int, n int) []int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def corpFlightBookings(bookings: Array[Array[Int]], n: Int): Array[Int] = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun corpFlightBookings(bookings: Array<IntArray>, n: Int): IntArray {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn corp_flight_bookings(bookings: Vec<Vec<i32>>, n: i32) -> Vec<i32> {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer[][] $bookings\n     * @param Integer $n\n     * @return Integer[]\n     */\n    function corpFlightBookings($bookings, $n) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"11.7K\", \"totalSubmission\": \"23.3K\", \"totalAcceptedRaw\": 11690, \"totalSubmissionRaw\": 23304, \"acRate\": \"50.2%\"}",
  "hints": [],
  "solution": null,
  "status": null,
  "sampleTestCase": "[[1,2,10],[2,3,20],[2,5,25]]\n5",
  "metaData": "{\n  \"name\": \"corpFlightBookings\",\n  \"params\": [\n    {\n      \"name\": \"bookings\",\n      \"type\": \"integer[][]\"\n    },\n    {\n      \"type\": \"integer\",\n      \"name\": \"n\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"integer[]\"\n  }\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
