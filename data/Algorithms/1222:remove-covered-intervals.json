{
  "questionId": "1222",
  "questionFrontendId": "1288",
  "boundTopicId": null,
  "title": "Remove Covered Intervals",
  "titleSlug": "remove-covered-intervals",
  "categoryTitle": "Algorithms",
  "content": "<p>Given a list of intervals, remove all intervals that are covered by another interval in the list.&nbsp;Interval <code>[a,b)</code> is covered by&nbsp;interval <code>[c,d)</code> if and only if <code>c &lt;= a</code> and <code>b &lt;= d</code>.</p>\n\n<p>After doing so, return the number of remaining intervals.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> intervals = [[1,4],[3,6],[2,8]]\n<strong>Output:</strong> 2\n<b>Explanation: </b>Interval [3,6] is covered by [2,8], therefore it is removed.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= intervals.length &lt;= 1000</code></li>\n\t<li><code>0 &lt;= intervals[i][0] &lt;&nbsp;intervals[i][1] &lt;= 10^5</code></li>\n\t<li><code>intervals[i] != intervals[j]</code>&nbsp;for all&nbsp;<code>i != j</code></li>\n</ul>\n",
  "isPaidOnly": false,
  "difficulty": "Medium",
  "likes": 59,
  "dislikes": 3,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [],
  "topicTags": [
    {
      "name": "Line Sweep",
      "slug": "line-sweep"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 0}], \"1\": [], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    int removeCoveredIntervals(vector<vector<int>>& intervals) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int removeCoveredIntervals(int[][] intervals) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def removeCoveredIntervals(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def removeCoveredIntervals(self, intervals: List[List[int]]) -> int:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nint removeCoveredIntervals(int** intervals, int intervalsSize, int* intervalsColSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public int RemoveCoveredIntervals(int[][] intervals) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number[][]} intervals\n * @return {number}\n */\nvar removeCoveredIntervals = function(intervals) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer[][]} intervals\n# @return {Integer}\ndef remove_covered_intervals(intervals)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func removeCoveredIntervals(_ intervals: [[Int]]) -> Int {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func removeCoveredIntervals(intervals [][]int) int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def removeCoveredIntervals(intervals: Array[Array[Int]]): Int = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun removeCoveredIntervals(intervals: Array<IntArray>): Int {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn remove_covered_intervals(intervals: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer[][] $intervals\n     * @return Integer\n     */\n    function removeCoveredIntervals($intervals) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"3.2K\", \"totalSubmission\": \"5.5K\", \"totalAcceptedRaw\": 3230, \"totalSubmissionRaw\": 5476, \"acRate\": \"59.0%\"}",
  "hints": [
    "How to check if an interval is covered by another?",
    "Compare each interval to all others and check if it is covered by any interval."
  ],
  "solution": null,
  "status": null,
  "sampleTestCase": "[[1,4],[3,6],[2,8]]",
  "metaData": "{\n  \"name\": \"removeCoveredIntervals\",\n  \"params\": [\n    {\n      \"name\": \"intervals\",\n      \"type\": \"integer[][]\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"integer\"\n  }\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
