{
  "questionId": "1227",
  "questionFrontendId": "1128",
  "boundTopicId": null,
  "title": "Number of Equivalent Domino Pairs",
  "titleSlug": "number-of-equivalent-domino-pairs",
  "categoryTitle": "Algorithms",
  "content": "<p>Given a list of <code>dominoes</code>,&nbsp;<code>dominoes[i] = [a, b]</code>&nbsp;is <em>equivalent</em> to <code>dominoes[j] = [c, d]</code>&nbsp;if and only if either (<code>a==c</code> and <code>b==d</code>), or (<code>a==d</code> and <code>b==c</code>) - that is, one domino can be rotated to be equal to another domino.</p>\r\n\r\n<p>Return the number of pairs <code>(i, j)</code> for which <code>0 &lt;= i &lt; j &lt; dominoes.length</code>, and&nbsp;<code>dominoes[i]</code> is equivalent to <code>dominoes[j]</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong>Example 1:</strong></p>\r\n<pre><strong>Input:</strong> dominoes = [[1,2],[2,1],[3,4],[5,6]]\r\n<strong>Output:</strong> 1\r\n</pre>\r\n<p>&nbsp;</p>\r\n<p><strong>Constraints:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= dominoes.length &lt;= 40000</code></li>\r\n\t<li><code>1 &lt;= dominoes[i][j] &lt;= 9</code></li>\r\n</ul>",
  "isPaidOnly": false,
  "difficulty": "Easy",
  "likes": 101,
  "dislikes": 64,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [
    {
      "username": "awice",
      "profileUrl": "/awice/",
      "avatarUrl": "https://assets.leetcode.com/users/awice/avatar_1576905115.png"
    }
  ],
  "topicTags": [
    {
      "name": "Array",
      "slug": "array"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 0}], \"1\": [], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    int numEquivDominoPairs(vector<vector<int>>& dominoes) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int numEquivDominoPairs(int[][] dominoes) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def numEquivDominoPairs(self, dominoes):\n        \"\"\"\n        :type dominoes: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def numEquivDominoPairs(self, dominoes: List[List[int]]) -> int:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nint numEquivDominoPairs(int** dominoes, int dominoesSize, int* dominoesColSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public int NumEquivDominoPairs(int[][] dominoes) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number[][]} dominoes\n * @return {number}\n */\nvar numEquivDominoPairs = function(dominoes) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer[][]} dominoes\n# @return {Integer}\ndef num_equiv_domino_pairs(dominoes)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func numEquivDominoPairs(_ dominoes: [[Int]]) -> Int {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func numEquivDominoPairs(dominoes [][]int) int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def numEquivDominoPairs(dominoes: Array[Array[Int]]): Int = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun numEquivDominoPairs(dominoes: Array<IntArray>): Int {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn num_equiv_domino_pairs(dominoes: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer[][] $dominoes\n     * @return Integer\n     */\n    function numEquivDominoPairs($dominoes) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"14.3K\", \"totalSubmission\": \"30.9K\", \"totalAcceptedRaw\": 14322, \"totalSubmissionRaw\": 30923, \"acRate\": \"46.3%\"}",
  "hints": [
    "For each domino j, find the number of dominoes you've already seen (dominoes i with i < j) that are equivalent.",
    "You can keep track of what you've seen using a hashmap."
  ],
  "solution": null,
  "status": null,
  "sampleTestCase": "[[1,2],[2,1],[3,4],[5,6]]",
  "metaData": "{\n  \"name\": \"numEquivDominoPairs\",\n  \"params\": [\n    {\n      \"name\": \"dominoes\",\n      \"type\": \"integer[][]\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"integer\"\n  }\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
