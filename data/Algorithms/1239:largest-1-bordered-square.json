{
  "questionId": "1239",
  "questionFrontendId": "1139",
  "boundTopicId": null,
  "title": "Largest 1-Bordered Square",
  "titleSlug": "largest-1-bordered-square",
  "categoryTitle": "Algorithms",
  "content": "<p>Given a 2D <code>grid</code> of <code>0</code>s and <code>1</code>s, return the number of elements in&nbsp;the largest <strong>square</strong>&nbsp;subgrid that has all <code>1</code>s on its <strong>border</strong>, or <code>0</code> if such a subgrid&nbsp;doesn&#39;t exist in the <code>grid</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> grid = [[1,1,1],[1,0,1],[1,1,1]]\r\n<strong>Output:</strong> 9\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> grid = [[1,1,0,0]]\r\n<strong>Output:</strong> 1\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong>Constraints:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= grid.length &lt;= 100</code></li>\r\n\t<li><code>1 &lt;= grid[0].length &lt;= 100</code></li>\r\n\t<li><code>grid[i][j]</code> is <code>0</code> or <code>1</code></li>\r\n</ul>",
  "isPaidOnly": false,
  "difficulty": "Medium",
  "likes": 101,
  "dislikes": 29,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [
    {
      "username": "Lovedeep",
      "profileUrl": "/lovedeep/",
      "avatarUrl": "https://assets.leetcode.com/users/lovedeep/avatar_1577054756.png"
    }
  ],
  "topicTags": [
    {
      "name": "Dynamic Programming",
      "slug": "dynamic-programming"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"Samsung\", \"slug\": \"samsung\", \"timesEncountered\": 0}], \"1\": [], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\r\npublic:\r\n    int largest1BorderedSquare(vector<vector<int>>& grid) {\r\n        \r\n    }\r\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int largest1BorderedSquare(int[][] grid) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\r\n    def largest1BorderedSquare(self, grid):\r\n        \"\"\"\r\n        :type grid: List[List[int]]\r\n        :rtype: int\r\n        \"\"\""
    },
    {
      "lang": "Python3",
      "code": "class Solution:\r\n    def largest1BorderedSquare(self, grid: List[List[int]]) -> int:"
    },
    {
      "lang": "C",
      "code": "int largest1BorderedSquare(int** grid, int gridSize, int* gridColSize){\r\n\r\n}"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\r\n    public int Largest1BorderedSquare(int[][] grid) {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\r\n * @param {number[][]} grid\r\n * @return {number}\r\n */\r\nvar largest1BorderedSquare = function(grid) {\r\n    \r\n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer[][]} grid\r\n# @return {Integer}\r\ndef largest1_bordered_square(grid)\r\n    \r\nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\r\n    func largest1BorderedSquare(_ grid: [[Int]]) -> Int {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Go",
      "code": "func largest1BorderedSquare(grid [][]int) int {\r\n    \r\n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\r\n    def largest1BorderedSquare(grid: Array[Array[Int]]): Int = {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\r\n    fun largest1BorderedSquare(grid: Array<IntArray>): Int {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\r\n    pub fn largest1_bordered_square(grid: Vec<Vec<i32>>) -> i32 {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\r\n\r\n    /**\r\n     * @param Integer[][] $grid\r\n     * @return Integer\r\n     */\r\n    function largest1BorderedSquare($grid) {\r\n        \r\n    }\r\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"6.2K\", \"totalSubmission\": \"13.6K\", \"totalAcceptedRaw\": 6175, \"totalSubmissionRaw\": 13608, \"acRate\": \"45.4%\"}",
  "hints": [
    "For each square, know how many ones are up, left, down, and right of this square. You can find it in O(N^2) using dynamic programming.",
    "Now for each square ( O(N^3) ), we can evaluate whether that square is 1-bordered in O(1)."
  ],
  "solution": null,
  "status": null,
  "sampleTestCase": "[[1,1,1],[1,0,1],[1,1,1]]",
  "metaData": "{\n  \"name\": \"largest1BorderedSquare\",\n  \"params\": [\n    {\n      \"name\": \"grid\",\n      \"type\": \"integer[][]\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"integer\"\n  }\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
