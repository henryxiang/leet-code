{
  "questionId": "1262",
  "questionFrontendId": "1157",
  "boundTopicId": null,
  "title": "Online Majority Element In Subarray",
  "titleSlug": "online-majority-element-in-subarray",
  "categoryTitle": "Algorithms",
  "content": "<p>Implementing the class <code>MajorityChecker</code>, which has the following API:</p>\r\n\r\n<ul>\r\n\t<li><code>MajorityChecker(int[] arr)</code> constructs an instance of MajorityChecker with the given array <code>arr</code>;</li>\r\n\t<li><code>int query(int left, int right, int threshold)</code>&nbsp;has arguments&nbsp;such that:\r\n\t<ul>\r\n\t\t<li><code>0 &lt;= left&nbsp;&lt;= right&nbsp;&lt; arr.length</code> representing a subarray of <code>arr</code>;</li>\r\n\t\t<li><code>2 * threshold &gt; right - left + 1</code>, ie. the threshold is always a strict majority of the length of&nbsp;the subarray</li>\r\n\t</ul>\r\n\t</li>\r\n</ul>\r\n\r\n<p>Each&nbsp;<code>query(...)</code> returns the element in <code>arr[left], arr[left+1], ..., arr[right]</code> that occurs at least <code>threshold</code> times, or <code>-1</code> if no such element exists.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\nMajorityChecker majorityChecker = new MajorityChecker([1,1,2,2,1,1]);\r\nmajorityChecker.query(0,5,4); // returns 1\r\nmajorityChecker.query(0,3,3); // returns -1\r\nmajorityChecker.query(2,3,2); // returns 2\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong>Constraints:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= arr.length &lt;=&nbsp;20000</code></li>\r\n\t<li><code>1 &lt;= arr[i]&nbsp;&lt;=&nbsp;20000</code></li>\r\n\t<li>For each query, <code>0 &lt;= left &lt;= right &lt; len(arr)</code></li>\r\n\t<li>For each query, <code>2 * threshold &gt; right - left + 1</code></li>\r\n\t<li>The number of queries is at most <code>10000</code></li>\r\n</ul>",
  "isPaidOnly": false,
  "difficulty": "Hard",
  "likes": 116,
  "dislikes": 17,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [
    {
      "username": "pmanvi123",
      "profileUrl": "/pmanvi123/",
      "avatarUrl": "https://www.gravatar.com/avatar/75026c204fc0b2d291cfa058232e0500.png?s=200"
    }
  ],
  "topicTags": [
    {
      "name": "Array",
      "slug": "array"
    },
    {
      "name": "Binary Search",
      "slug": "binary-search"
    },
    {
      "name": "Segment Tree",
      "slug": "segment-tree"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"Nutanix\", \"slug\": \"nutanix\", \"timesEncountered\": 0}], \"1\": [{\"taggedByAdmin\": false, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 2}], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class MajorityChecker {\npublic:\n    MajorityChecker(vector<int>& arr) {\n        \n    }\n    \n    int query(int left, int right, int threshold) {\n        \n    }\n};\n\n/**\n * Your MajorityChecker object will be instantiated and called as such:\n * MajorityChecker* obj = new MajorityChecker(arr);\n * int param_1 = obj->query(left,right,threshold);\n */"
    },
    {
      "lang": "Java",
      "code": "class MajorityChecker {\n\n    public MajorityChecker(int[] arr) {\n        \n    }\n    \n    public int query(int left, int right, int threshold) {\n        \n    }\n}\n\n/**\n * Your MajorityChecker object will be instantiated and called as such:\n * MajorityChecker obj = new MajorityChecker(arr);\n * int param_1 = obj.query(left,right,threshold);\n */"
    },
    {
      "lang": "Python",
      "code": "class MajorityChecker(object):\n\n    def __init__(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        \"\"\"\n        \n\n    def query(self, left, right, threshold):\n        \"\"\"\n        :type left: int\n        :type right: int\n        :type threshold: int\n        :rtype: int\n        \"\"\"\n        \n\n\n# Your MajorityChecker object will be instantiated and called as such:\n# obj = MajorityChecker(arr)\n# param_1 = obj.query(left,right,threshold)"
    },
    {
      "lang": "Python3",
      "code": "class MajorityChecker:\n\n    def __init__(self, arr: List[int]):\n        \n\n    def query(self, left: int, right: int, threshold: int) -> int:\n        \n\n\n# Your MajorityChecker object will be instantiated and called as such:\n# obj = MajorityChecker(arr)\n# param_1 = obj.query(left,right,threshold)"
    },
    {
      "lang": "C",
      "code": "\n\n\ntypedef struct {\n    \n} MajorityChecker;\n\n\nMajorityChecker* majorityCheckerCreate(int* arr, int arrSize) {\n    \n}\n\nint majorityCheckerQuery(MajorityChecker* obj, int left, int right, int threshold) {\n  \n}\n\nvoid majorityCheckerFree(MajorityChecker* obj) {\n    \n}\n\n/**\n * Your MajorityChecker struct will be instantiated and called as such:\n * MajorityChecker* obj = majorityCheckerCreate(arr, arrSize);\n * int param_1 = majorityCheckerQuery(obj, left, right, threshold);\n \n * majorityCheckerFree(obj);\n*/"
    },
    {
      "lang": "C#",
      "code": "public class MajorityChecker {\n\n    public MajorityChecker(int[] arr) {\n        \n    }\n    \n    public int Query(int left, int right, int threshold) {\n        \n    }\n}\n\n/**\n * Your MajorityChecker object will be instantiated and called as such:\n * MajorityChecker obj = new MajorityChecker(arr);\n * int param_1 = obj.Query(left,right,threshold);\n */"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number[]} arr\n */\nvar MajorityChecker = function(arr) {\n    \n};\n\n/** \n * @param {number} left \n * @param {number} right \n * @param {number} threshold\n * @return {number}\n */\nMajorityChecker.prototype.query = function(left, right, threshold) {\n    \n};\n\n/** \n * Your MajorityChecker object will be instantiated and called as such:\n * var obj = new MajorityChecker(arr)\n * var param_1 = obj.query(left,right,threshold)\n */"
    },
    {
      "lang": "Ruby",
      "code": "class MajorityChecker\n\n=begin\n    :type arr: Integer[]\n=end\n    def initialize(arr)\n        \n    end\n\n\n=begin\n    :type left: Integer\n    :type right: Integer\n    :type threshold: Integer\n    :rtype: Integer\n=end\n    def query(left, right, threshold)\n        \n    end\n\n\nend\n\n# Your MajorityChecker object will be instantiated and called as such:\n# obj = MajorityChecker.new(arr)\n# param_1 = obj.query(left, right, threshold)"
    },
    {
      "lang": "Swift",
      "code": "\nclass MajorityChecker {\n\n    init(_ arr: [Int]) {\n        \n    }\n    \n    func query(_ left: Int, _ right: Int, _ threshold: Int) -> Int {\n        \n    }\n}\n\n/**\n * Your MajorityChecker object will be instantiated and called as such:\n * let obj = MajorityChecker(arr)\n * let ret_1: Int = obj.query(left, right, threshold)\n */"
    },
    {
      "lang": "Go",
      "code": "type MajorityChecker struct {\n    \n}\n\n\nfunc Constructor(arr []int) MajorityChecker {\n    \n}\n\n\nfunc (this *MajorityChecker) Query(left int, right int, threshold int) int {\n    \n}\n\n\n/**\n * Your MajorityChecker object will be instantiated and called as such:\n * obj := Constructor(arr);\n * param_1 := obj.Query(left,right,threshold);\n */"
    },
    {
      "lang": "Scala",
      "code": "class MajorityChecker(_arr: Array[Int]) {\n\n    def query(left: Int, right: Int, threshold: Int): Int = {\n        \n    }\n\n}\n\n/**\n * Your MajorityChecker object will be instantiated and called as such:\n * var obj = new MajorityChecker(arr)\n * var param_1 = obj.query(left,right,threshold)\n */"
    },
    {
      "lang": "Kotlin",
      "code": "class MajorityChecker(arr: IntArray) {\n\n    fun query(left: Int, right: Int, threshold: Int): Int {\n        \n    }\n\n}\n\n/**\n * Your MajorityChecker object will be instantiated and called as such:\n * var obj = MajorityChecker(arr)\n * var param_1 = obj.query(left,right,threshold)\n */"
    },
    {
      "lang": "Rust",
      "code": "struct MajorityChecker {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl MajorityChecker {\n\n    fn new(arr: Vec<i32>) -> Self {\n        \n    }\n    \n    fn query(&self, left: i32, right: i32, threshold: i32) -> i32 {\n        \n    }\n}\n\n/**\n * Your MajorityChecker object will be instantiated and called as such:\n * let obj = MajorityChecker::new(arr);\n * let ret_1: i32 = obj.query(left, right, threshold);\n */"
    },
    {
      "lang": "PHP",
      "code": "class MajorityChecker {\n    /**\n     * @param Integer[] $arr\n     */\n    function __construct($arr) {\n        \n    }\n  \n    /**\n     * @param Integer $left\n     * @param Integer $right\n     * @param Integer $threshold\n     * @return Integer\n     */\n    function query($left, $right, $threshold) {\n        \n    }\n}\n\n/**\n * Your MajorityChecker object will be instantiated and called as such:\n * $obj = MajorityChecker($arr);\n * $ret_1 = $obj->query($left, $right, $threshold);\n */"
    }
  ],
  "stats": "{\"totalAccepted\": \"4.1K\", \"totalSubmission\": \"11.9K\", \"totalAcceptedRaw\": 4102, \"totalSubmissionRaw\": 11897, \"acRate\": \"34.5%\"}",
  "hints": [
    "What's special about a majority element ?",
    "A majority element appears more than half the length of the array number of times.",
    "If we tried a random index of the array, what's the probability that this index has a majority element ?",
    "It's more than 50% if that array has a majority element.",
    "Try a random index for a proper number of times so that the probability of not finding the answer tends to zero."
  ],
  "solution": null,
  "status": null,
  "sampleTestCase": "[\"MajorityChecker\",\"query\",\"query\",\"query\"]\n[[[1,1,2,2,1,1]],[0,5,4],[0,3,3],[2,3,2]]",
  "metaData": "{\n  \"classname\": \"MajorityChecker\",\n  \"constructor\": {\n    \"params\": [\n      {\n        \"type\": \"integer[]\",\n        \"name\": \"arr\"\n      }\n    ]\n  },\n  \"methods\": [\n    {\n      \"params\": [\n        {\n          \"type\": \"integer\",\n          \"name\": \"left\"\n        },\n        {\n          \"type\": \"integer\",\n          \"name\": \"right\"\n        },\n        {\n          \"type\": \"integer\",\n          \"name\": \"threshold\"\n        }\n      ],\n      \"name\": \"query\",\n      \"return\": {\n        \"type\": \"integer\"\n      }\n    }\n  ],\n  \"return\": {\n    \"type\": \"boolean\"\n  },\n  \"systemdesign\": true\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
