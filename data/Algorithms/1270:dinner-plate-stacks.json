{
  "questionId": "1270",
  "questionFrontendId": "1172",
  "boundTopicId": null,
  "title": "Dinner Plate Stacks",
  "titleSlug": "dinner-plate-stacks",
  "categoryTitle": "Algorithms",
  "content": "<p>You have an infinite number of stacks arranged in a row and numbered (left to right) from 0, each of the stacks has the same&nbsp;maximum <code>capacity</code>.</p>\n\n<p>Implement the <code>DinnerPlates</code> class:</p>\n\n<ul>\n\t<li><code>DinnerPlates(int capacity)</code> Initializes the object with the maximum <code>capacity</code> of the stacks.</li>\n\t<li><code>void push(int val)</code>&nbsp;pushes the given positive integer <code>val</code> into the leftmost stack with size less than <code>capacity</code>.</li>\n\t<li><code>int pop()</code>&nbsp;returns the value at the top of the rightmost non-empty stack and removes it from that stack, and returns <code>-1</code> if all stacks are empty.</li>\n\t<li><code>int popAtStack(int index)</code>&nbsp;returns the value at the top of the stack with the given <code>index</code> and removes it from that stack, and returns -1 if the stack with that&nbsp;given <code>index</code> is empty.</li>\n</ul>\n\n<p><strong>Example:</strong></p>\n\n<pre>\n<b>Input: </b>\n[&quot;DinnerPlates&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;popAtStack&quot;,&quot;push&quot;,&quot;push&quot;,&quot;popAtStack&quot;,&quot;popAtStack&quot;,&quot;pop&quot;,&quot;pop&quot;,&quot;pop&quot;,&quot;pop&quot;,&quot;pop&quot;]\n[[2],[1],[2],[3],[4],[5],[0],[20],[21],[0],[2],[],[],[],[],[]]\n<b>Output: </b>\n[null,null,null,null,null,null,2,null,null,20,21,5,4,3,1,-1]\n\n<b>Explanation: </b>\nDinnerPlates D = DinnerPlates(2);  // Initialize with capacity = 2\nD.push(1);\nD.push(2);\nD.push(3);\nD.push(4);\nD.push(5);         // The stacks are now:  2 &nbsp;4\n&nbsp;                                          1 &nbsp;3 &nbsp;5\n                                           ﹈ ﹈ ﹈\nD.popAtStack(0);   // Returns 2.  The stacks are now:    &nbsp;4\n            &nbsp;                                          1 &nbsp;3 &nbsp;5\n                                                       ﹈ ﹈ ﹈\nD.push(20);        // The stacks are now: 20  4\n&nbsp;                                          1 &nbsp;3 &nbsp;5\n                                           ﹈ ﹈ ﹈\nD.push(21);        // The stacks are now: 20  4 21\n&nbsp;                                          1 &nbsp;3 &nbsp;5\n                                           ﹈ ﹈ ﹈\nD.popAtStack(0);   // Returns 20.  The stacks are now:     4 21\n             &nbsp;                                          1 &nbsp;3 &nbsp;5\n                                                        ﹈ ﹈ ﹈\nD.popAtStack(2);   // Returns 21.  The stacks are now:     4\n             &nbsp;                                          1 &nbsp;3 &nbsp;5\n                                                        ﹈ ﹈ ﹈ \nD.pop()            // Returns 5.  The stacks are now:      4\n             &nbsp;                                          1 &nbsp;3 \n                                                        ﹈ ﹈  \nD.pop()            // Returns 4.  The stacks are now:   1 &nbsp;3 \n                                                        ﹈ ﹈   \nD.pop()            // Returns 3.  The stacks are now:   1 \n                                                        ﹈   \nD.pop()            // Returns 1.  There are no stacks.\nD.pop()            // Returns -1.  There are still no stacks.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= capacity&nbsp;&lt;= 20000</code></li>\n\t<li><code>1 &lt;= val&nbsp;&lt;= 20000</code></li>\n\t<li><code>0 &lt;= index&nbsp;&lt;= 100000</code></li>\n\t<li>At most <code>200000</code>&nbsp;calls will be made to <code>push</code>, <code>pop</code>, and <code>popAtStack</code>.</li>\n</ul>\n",
  "isPaidOnly": false,
  "difficulty": "Hard",
  "likes": 81,
  "dislikes": 11,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [
    {
      "username": "tgaurav10",
      "profileUrl": "/tgaurav10/",
      "avatarUrl": "https://assets.leetcode.com/users/tejasvigaurav10/avatar_1533400443.png"
    }
  ],
  "topicTags": [
    {
      "name": "Design",
      "slug": "design"
    }
  ],
  "companyTagStats": "{\"1\": [], \"2\": [], \"3\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class DinnerPlates {\npublic:\n    DinnerPlates(int capacity) {\n        \n    }\n    \n    void push(int val) {\n        \n    }\n    \n    int pop() {\n        \n    }\n    \n    int popAtStack(int index) {\n        \n    }\n};\n\n/**\n * Your DinnerPlates object will be instantiated and called as such:\n * DinnerPlates* obj = new DinnerPlates(capacity);\n * obj->push(val);\n * int param_2 = obj->pop();\n * int param_3 = obj->popAtStack(index);\n */"
    },
    {
      "lang": "Java",
      "code": "class DinnerPlates {\n\n    public DinnerPlates(int capacity) {\n        \n    }\n    \n    public void push(int val) {\n        \n    }\n    \n    public int pop() {\n        \n    }\n    \n    public int popAtStack(int index) {\n        \n    }\n}\n\n/**\n * Your DinnerPlates object will be instantiated and called as such:\n * DinnerPlates obj = new DinnerPlates(capacity);\n * obj.push(val);\n * int param_2 = obj.pop();\n * int param_3 = obj.popAtStack(index);\n */"
    },
    {
      "lang": "Python",
      "code": "class DinnerPlates(object):\n\n    def __init__(self, capacity):\n        \"\"\"\n        :type capacity: int\n        \"\"\"\n        \n\n    def push(self, val):\n        \"\"\"\n        :type val: int\n        :rtype: None\n        \"\"\"\n        \n\n    def pop(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        \n\n    def popAtStack(self, index):\n        \"\"\"\n        :type index: int\n        :rtype: int\n        \"\"\"\n        \n\n\n# Your DinnerPlates object will be instantiated and called as such:\n# obj = DinnerPlates(capacity)\n# obj.push(val)\n# param_2 = obj.pop()\n# param_3 = obj.popAtStack(index)"
    },
    {
      "lang": "Python3",
      "code": "class DinnerPlates:\n\n    def __init__(self, capacity: int):\n        \n\n    def push(self, val: int) -> None:\n        \n\n    def pop(self) -> int:\n        \n\n    def popAtStack(self, index: int) -> int:\n        \n\n\n# Your DinnerPlates object will be instantiated and called as such:\n# obj = DinnerPlates(capacity)\n# obj.push(val)\n# param_2 = obj.pop()\n# param_3 = obj.popAtStack(index)"
    },
    {
      "lang": "C",
      "code": "\n\n\ntypedef struct {\n    \n} DinnerPlates;\n\n\nDinnerPlates* dinnerPlatesCreate(int capacity) {\n    \n}\n\nvoid dinnerPlatesPush(DinnerPlates* obj, int val) {\n  \n}\n\nint dinnerPlatesPop(DinnerPlates* obj) {\n  \n}\n\nint dinnerPlatesPopAtStack(DinnerPlates* obj, int index) {\n  \n}\n\nvoid dinnerPlatesFree(DinnerPlates* obj) {\n    \n}\n\n/**\n * Your DinnerPlates struct will be instantiated and called as such:\n * DinnerPlates* obj = dinnerPlatesCreate(capacity);\n * dinnerPlatesPush(obj, val);\n \n * int param_2 = dinnerPlatesPop(obj);\n \n * int param_3 = dinnerPlatesPopAtStack(obj, index);\n \n * dinnerPlatesFree(obj);\n*/"
    },
    {
      "lang": "C#",
      "code": "public class DinnerPlates {\n\n    public DinnerPlates(int capacity) {\n        \n    }\n    \n    public void Push(int val) {\n        \n    }\n    \n    public int Pop() {\n        \n    }\n    \n    public int PopAtStack(int index) {\n        \n    }\n}\n\n/**\n * Your DinnerPlates object will be instantiated and called as such:\n * DinnerPlates obj = new DinnerPlates(capacity);\n * obj.Push(val);\n * int param_2 = obj.Pop();\n * int param_3 = obj.PopAtStack(index);\n */"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number} capacity\n */\nvar DinnerPlates = function(capacity) {\n    \n};\n\n/** \n * @param {number} val\n * @return {void}\n */\nDinnerPlates.prototype.push = function(val) {\n    \n};\n\n/**\n * @return {number}\n */\nDinnerPlates.prototype.pop = function() {\n    \n};\n\n/** \n * @param {number} index\n * @return {number}\n */\nDinnerPlates.prototype.popAtStack = function(index) {\n    \n};\n\n/** \n * Your DinnerPlates object will be instantiated and called as such:\n * var obj = new DinnerPlates(capacity)\n * obj.push(val)\n * var param_2 = obj.pop()\n * var param_3 = obj.popAtStack(index)\n */"
    },
    {
      "lang": "Ruby",
      "code": "class DinnerPlates\n\n=begin\n    :type capacity: Integer\n=end\n    def initialize(capacity)\n        \n    end\n\n\n=begin\n    :type val: Integer\n    :rtype: Void\n=end\n    def push(val)\n        \n    end\n\n\n=begin\n    :rtype: Integer\n=end\n    def pop()\n        \n    end\n\n\n=begin\n    :type index: Integer\n    :rtype: Integer\n=end\n    def pop_at_stack(index)\n        \n    end\n\n\nend\n\n# Your DinnerPlates object will be instantiated and called as such:\n# obj = DinnerPlates.new(capacity)\n# obj.push(val)\n# param_2 = obj.pop()\n# param_3 = obj.pop_at_stack(index)"
    },
    {
      "lang": "Swift",
      "code": "\nclass DinnerPlates {\n\n    init(_ capacity: Int) {\n        \n    }\n    \n    func push(_ val: Int) {\n        \n    }\n    \n    func pop() -> Int {\n        \n    }\n    \n    func popAtStack(_ index: Int) -> Int {\n        \n    }\n}\n\n/**\n * Your DinnerPlates object will be instantiated and called as such:\n * let obj = DinnerPlates(capacity)\n * obj.push(val)\n * let ret_2: Int = obj.pop()\n * let ret_3: Int = obj.popAtStack(index)\n */"
    },
    {
      "lang": "Go",
      "code": "type DinnerPlates struct {\n    \n}\n\n\nfunc Constructor(capacity int) DinnerPlates {\n    \n}\n\n\nfunc (this *DinnerPlates) Push(val int)  {\n    \n}\n\n\nfunc (this *DinnerPlates) Pop() int {\n    \n}\n\n\nfunc (this *DinnerPlates) PopAtStack(index int) int {\n    \n}\n\n\n/**\n * Your DinnerPlates object will be instantiated and called as such:\n * obj := Constructor(capacity);\n * obj.Push(val);\n * param_2 := obj.Pop();\n * param_3 := obj.PopAtStack(index);\n */"
    },
    {
      "lang": "Scala",
      "code": "class DinnerPlates(_capacity: Int) {\n\n    def push(`val`: Int) {\n        \n    }\n\n    def pop(): Int = {\n        \n    }\n\n    def popAtStack(index: Int): Int = {\n        \n    }\n\n}\n\n/**\n * Your DinnerPlates object will be instantiated and called as such:\n * var obj = new DinnerPlates(capacity)\n * obj.push(`val`)\n * var param_2 = obj.pop()\n * var param_3 = obj.popAtStack(index)\n */"
    },
    {
      "lang": "Kotlin",
      "code": "class DinnerPlates(capacity: Int) {\n\n    fun push(`val`: Int) {\n        \n    }\n\n    fun pop(): Int {\n        \n    }\n\n    fun popAtStack(index: Int): Int {\n        \n    }\n\n}\n\n/**\n * Your DinnerPlates object will be instantiated and called as such:\n * var obj = DinnerPlates(capacity)\n * obj.push(`val`)\n * var param_2 = obj.pop()\n * var param_3 = obj.popAtStack(index)\n */"
    },
    {
      "lang": "Rust",
      "code": "struct DinnerPlates {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl DinnerPlates {\n\n    fn new(capacity: i32) -> Self {\n        \n    }\n    \n    fn push(&self, val: i32) {\n        \n    }\n    \n    fn pop(&self) -> i32 {\n        \n    }\n    \n    fn pop_at_stack(&self, index: i32) -> i32 {\n        \n    }\n}\n\n/**\n * Your DinnerPlates object will be instantiated and called as such:\n * let obj = DinnerPlates::new(capacity);\n * obj.push(val);\n * let ret_2: i32 = obj.pop();\n * let ret_3: i32 = obj.pop_at_stack(index);\n */"
    },
    {
      "lang": "PHP",
      "code": "class DinnerPlates {\n    /**\n     * @param Integer $capacity\n     */\n    function __construct($capacity) {\n        \n    }\n  \n    /**\n     * @param Integer $val\n     * @return NULL\n     */\n    function push($val) {\n        \n    }\n  \n    /**\n     * @return Integer\n     */\n    function pop() {\n        \n    }\n  \n    /**\n     * @param Integer $index\n     * @return Integer\n     */\n    function popAtStack($index) {\n        \n    }\n}\n\n/**\n * Your DinnerPlates object will be instantiated and called as such:\n * $obj = DinnerPlates($capacity);\n * $obj->push($val);\n * $ret_2 = $obj->pop();\n * $ret_3 = $obj->popAtStack($index);\n */"
    }
  ],
  "stats": "{\"totalAccepted\": \"4K\", \"totalSubmission\": \"10.1K\", \"totalAcceptedRaw\": 4004, \"totalSubmissionRaw\": 10064, \"acRate\": \"39.8%\"}",
  "hints": [
    "Use a data structure to save the plate status. You may need to operate the exact index. Maintain the leftmost vacant stack and the rightmost non-empty stack.",
    "Use a list of stack to store the plate status. Use heap to maintain the leftmost and rightmost valid stack."
  ],
  "solution": null,
  "status": null,
  "sampleTestCase": "[\"DinnerPlates\",\"push\",\"push\",\"push\",\"push\",\"push\",\"popAtStack\",\"push\",\"push\",\"popAtStack\",\"popAtStack\",\"pop\",\"pop\",\"pop\",\"pop\",\"pop\"]\n[[2],[1],[2],[3],[4],[5],[0],[20],[21],[0],[2],[],[],[],[],[]]",
  "metaData": "{\n  \"classname\": \"DinnerPlates\",\n  \"constructor\": {\n    \"params\": [\n      {\n        \"type\": \"integer\",\n        \"name\": \"capacity\"\n      }\n    ]\n  },\n  \"methods\": [\n    {\n      \"params\": [\n        {\n          \"type\": \"integer\",\n          \"name\": \"val\"\n        }\n      ],\n      \"name\": \"push\",\n      \"return\": {\n        \"type\": \"void\"\n      }\n    },\n    {\n      \"params\": [],\n      \"name\": \"pop\",\n      \"return\": {\n        \"type\": \"integer\"\n      }\n    },\n    {\n      \"params\": [\n        {\n          \"type\": \"integer\",\n          \"name\": \"index\"\n        }\n      ],\n      \"return\": {\n        \"type\": \"integer\"\n      },\n      \"name\": \"popAtStack\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"boolean\"\n  },\n  \"systemdesign\": true\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
