{
  "questionId": "1280",
  "questionFrontendId": "1176",
  "boundTopicId": null,
  "title": "Diet Plan Performance",
  "titleSlug": "diet-plan-performance",
  "categoryTitle": "Algorithms",
  "content": "<p>A dieter consumes&nbsp;<code>calories[i]</code>&nbsp;calories on the <code>i</code>-th day.&nbsp;</p>\n\n<p>Given an integer <code>k</code>, for <strong>every</strong> consecutive sequence of <code>k</code> days (<code>calories[i], calories[i+1], ..., calories[i+k-1]</code>&nbsp;for all <code>0 &lt;= i &lt;= n-k</code>), they look at <em>T</em>, the total calories consumed during that sequence of <code>k</code> days (<code>calories[i] + calories[i+1] + ... + calories[i+k-1]</code>):</p>\n\n<ul>\n\t<li>If <code>T &lt; lower</code>, they performed poorly on their diet and lose 1 point;&nbsp;</li>\n\t<li>If <code>T &gt; upper</code>, they performed well on their diet and gain 1 point;</li>\n\t<li>Otherwise, they performed normally and there is no change in points.</li>\n</ul>\n\n<p>Initially, the dieter has zero points. Return the total number of points the dieter has after dieting for <code>calories.length</code>&nbsp;days.</p>\n\n<p>Note that the total points can be negative.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> calories = [1,2,3,4,5], k = 1, lower = 3, upper = 3\n<strong>Output:</strong> 0\n<strong>Explanation</strong>: Since k = 1, we consider each element of the array separately and compare it to lower and upper.\ncalories[0] and calories[1] are less than lower so 2 points are lost.\ncalories[3] and calories[4] are greater than upper so 2 points are gained.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> calories = [3,2], k = 2, lower = 0, upper = 1\n<strong>Output:</strong> 1\n<strong>Explanation</strong>: Since k = 2, we consider subarrays of length 2.\ncalories[0] + calories[1] &gt; upper so 1 point is gained.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> calories = [6,5,0,0], k = 2, lower = 1, upper = 5\n<strong>Output:</strong> 0\n<strong>Explanation</strong>:\ncalories[0] + calories[1] &gt; upper so 1 point is gained.\nlower &lt;= calories[1] + calories[2] &lt;= upper so no change in points.\ncalories[2] + calories[3] &lt; lower so 1 point is lost.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= calories.length &lt;= 10^5</code></li>\n\t<li><code>0 &lt;= calories[i] &lt;= 20000</code></li>\n\t<li><code>0 &lt;= lower &lt;= upper</code></li>\n</ul>\n",
  "isPaidOnly": true,
  "difficulty": "Easy",
  "likes": 24,
  "dislikes": 138,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [
    {
      "username": "tamasane",
      "profileUrl": "/tamasane/",
      "avatarUrl": "https://assets.leetcode.com/users/tamasane/avatar_1564817087.png"
    }
  ],
  "topicTags": [
    {
      "name": "Array",
      "slug": "array"
    },
    {
      "name": "Sliding Window",
      "slug": "sliding-window"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 0}], \"1\": [], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    int dietPlanPerformance(vector<int>& calories, int k, int lower, int upper) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int dietPlanPerformance(int[] calories, int k, int lower, int upper) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def dietPlanPerformance(self, calories, k, lower, upper):\n        \"\"\"\n        :type calories: List[int]\n        :type k: int\n        :type lower: int\n        :type upper: int\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def dietPlanPerformance(self, calories: List[int], k: int, lower: int, upper: int) -> int:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nint dietPlanPerformance(int* calories, int caloriesSize, int k, int lower, int upper){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public int DietPlanPerformance(int[] calories, int k, int lower, int upper) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number[]} calories\n * @param {number} k\n * @param {number} lower\n * @param {number} upper\n * @return {number}\n */\nvar dietPlanPerformance = function(calories, k, lower, upper) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer[]} calories\n# @param {Integer} k\n# @param {Integer} lower\n# @param {Integer} upper\n# @return {Integer}\ndef diet_plan_performance(calories, k, lower, upper)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func dietPlanPerformance(_ calories: [Int], _ k: Int, _ lower: Int, _ upper: Int) -> Int {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func dietPlanPerformance(calories []int, k int, lower int, upper int) int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def dietPlanPerformance(calories: Array[Int], k: Int, lower: Int, upper: Int): Int = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun dietPlanPerformance(calories: IntArray, k: Int, lower: Int, upper: Int): Int {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn diet_plan_performance(calories: Vec<i32>, k: i32, lower: i32, upper: i32) -> i32 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer[] $calories\n     * @param Integer $k\n     * @param Integer $lower\n     * @param Integer $upper\n     * @return Integer\n     */\n    function dietPlanPerformance($calories, $k, $lower, $upper) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"7K\", \"totalSubmission\": \"13.6K\", \"totalAcceptedRaw\": 6957, \"totalSubmissionRaw\": 13647, \"acRate\": \"51.0%\"}",
  "hints": [
    "Use sliding window technique (aka two pointers)."
  ],
  "solution": null,
  "status": null,
  "sampleTestCase": "[1,2,3,4,5]\n1\n3\n3",
  "metaData": "{\n  \"name\": \"dietPlanPerformance\",\n  \"params\": [\n    {\n      \"name\": \"calories\",\n      \"type\": \"integer[]\"\n    },\n    {\n      \"type\": \"integer\",\n      \"name\": \"k\"\n    },\n    {\n      \"type\": \"integer\",\n      \"name\": \"lower\"\n    },\n    {\n      \"type\": \"integer\",\n      \"name\": \"upper\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"integer\"\n  }\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
