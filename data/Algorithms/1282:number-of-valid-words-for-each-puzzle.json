{
  "questionId": "1282",
  "questionFrontendId": "1178",
  "boundTopicId": null,
  "title": "Number of Valid Words for Each Puzzle",
  "titleSlug": "number-of-valid-words-for-each-puzzle",
  "categoryTitle": "Algorithms",
  "content": "With respect to a given <code>puzzle</code> string, a <code>word</code> is <em>valid</em>&nbsp;if both the following conditions are satisfied:\n<ul>\n\t<li><code>word</code> contains the first letter of <code>puzzle</code>.</li>\n\t<li>For each letter in <code>word</code>, that letter is in <code>puzzle</code>.<br />\n\tFor example, if the puzzle is &quot;abcdefg&quot;, then valid words are &quot;faced&quot;, &quot;cabbage&quot;, and &quot;baggage&quot;; while invalid words are &quot;beefed&quot; (doesn&#39;t include &quot;a&quot;) and &quot;based&quot; (includes &quot;s&quot; which isn&#39;t in the puzzle).</li>\n</ul>\nReturn an array <code>answer</code>, where <code>answer[i]</code> is the number of words in the given word list&nbsp;<code>words</code> that are valid with respect to the puzzle <code>puzzles[i]</code>.\n<p>&nbsp;</p>\n<p><strong>Example :</strong></p>\n\n<pre>\n<strong>Input:</strong> \nwords = [&quot;aaaa&quot;,&quot;asas&quot;,&quot;able&quot;,&quot;ability&quot;,&quot;actt&quot;,&quot;actor&quot;,&quot;access&quot;], \npuzzles = [&quot;aboveyz&quot;,&quot;abrodyz&quot;,&quot;abslute&quot;,&quot;absoryz&quot;,&quot;actresz&quot;,&quot;gaswxyz&quot;]\n<strong>Output:</strong> [1,1,3,2,4,0]\n<strong>Explanation:</strong>\n1 valid word&nbsp;for &quot;aboveyz&quot; : &quot;aaaa&quot; \n1 valid word&nbsp;for &quot;abrodyz&quot; : &quot;aaaa&quot;\n3 valid words for &quot;abslute&quot; : &quot;aaaa&quot;, &quot;asas&quot;, &quot;able&quot;\n2 valid words for&nbsp;&quot;absoryz&quot; : &quot;aaaa&quot;, &quot;asas&quot;\n4 valid words for&nbsp;&quot;actresz&quot; : &quot;aaaa&quot;, &quot;asas&quot;, &quot;actt&quot;, &quot;access&quot;\nThere&#39;re&nbsp;no valid words for&nbsp;&quot;gaswxyz&quot; cause none of the words in the list contains letter &#39;g&#39;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 10^5</code></li>\n\t<li><code>4 &lt;= words[i].length &lt;= 50</code></li>\n\t<li><code>1 &lt;= puzzles.length &lt;= 10^4</code></li>\n\t<li><code>puzzles[i].length == 7</code></li>\n\t<li><code>words[i][j]</code>, <code>puzzles[i][j]</code> are English lowercase letters.</li>\n\t<li>Each <code>puzzles[i] </code>doesn&#39;t contain repeated characters.</li>\n</ul>\n",
  "isPaidOnly": false,
  "difficulty": "Hard",
  "likes": 137,
  "dislikes": 10,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [],
  "topicTags": [
    {
      "name": "Hash Table",
      "slug": "hash-table"
    },
    {
      "name": "Bit Manipulation",
      "slug": "bit-manipulation"
    }
  ],
  "companyTagStats": "{\"1\": [{\"taggedByAdmin\": true, \"name\": \"Dropbox\", \"slug\": \"dropbox\", \"timesEncountered\": 3}], \"2\": [], \"3\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    vector<int> findNumOfValidWords(vector<string>& words, vector<string>& puzzles) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public List<Integer> findNumOfValidWords(String[] words, String[] puzzles) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def findNumOfValidWords(self, words, puzzles):\n        \"\"\"\n        :type words: List[str]\n        :type puzzles: List[str]\n        :rtype: List[int]\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def findNumOfValidWords(self, words: List[str], puzzles: List[str]) -> List[int]:\n        "
    },
    {
      "lang": "C",
      "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* findNumOfValidWords(char ** words, int wordsSize, char ** puzzles, int puzzlesSize, int* returnSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public IList<int> FindNumOfValidWords(string[] words, string[] puzzles) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {string[]} words\n * @param {string[]} puzzles\n * @return {number[]}\n */\nvar findNumOfValidWords = function(words, puzzles) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {String[]} words\n# @param {String[]} puzzles\n# @return {Integer[]}\ndef find_num_of_valid_words(words, puzzles)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func findNumOfValidWords(_ words: [String], _ puzzles: [String]) -> [Int] {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func findNumOfValidWords(words []string, puzzles []string) []int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def findNumOfValidWords(words: Array[String], puzzles: Array[String]): List[Int] = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun findNumOfValidWords(words: Array<String>, puzzles: Array<String>): List<Int> {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn find_num_of_valid_words(words: Vec<String>, puzzles: Vec<String>) -> Vec<i32> {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param String[] $words\n     * @param String[] $puzzles\n     * @return Integer[]\n     */\n    function findNumOfValidWords($words, $puzzles) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"4.3K\", \"totalSubmission\": \"11.6K\", \"totalAcceptedRaw\": 4282, \"totalSubmissionRaw\": 11615, \"acRate\": \"36.9%\"}",
  "hints": [
    "Exploit the fact that the length of the puzzle is only 7.",
    "Use bit-masks to represent the word and puzzle strings.",
    "For each puzzle, count the number of words whose bit-mask is a sub-mask of the puzzle's bit-mask."
  ],
  "solution": null,
  "status": null,
  "sampleTestCase": "[\"aaaa\",\"asas\",\"able\",\"ability\",\"actt\",\"actor\",\"access\"]\n[\"aboveyz\",\"abrodyz\",\"abslute\",\"absoryz\",\"actresz\",\"gaswxyz\"]",
  "metaData": "{\n  \"name\": \"findNumOfValidWords\",\n  \"params\": [\n    {\n      \"name\": \"words\",\n      \"type\": \"string[]\"\n    },\n    {\n      \"type\": \"string[]\",\n      \"name\": \"puzzles\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"list<integer>\"\n  }\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
