{
  "questionId": "1351",
  "questionFrontendId": "1234",
  "boundTopicId": null,
  "title": "Replace the Substring for Balanced String",
  "titleSlug": "replace-the-substring-for-balanced-string",
  "categoryTitle": "Algorithms",
  "content": "<p>You are given a string containing only 4&nbsp;kinds of characters <code>&#39;Q&#39;,</code> <code>&#39;W&#39;, &#39;E&#39;</code> and&nbsp;<code>&#39;R&#39;</code>.</p>\n\n<p>A string is said to be&nbsp;<strong>balanced</strong><em>&nbsp;</em>if each of its characters appears&nbsp;<code>n/4</code> times where <code>n</code> is the length of the string.</p>\n\n<p>Return the minimum length of the substring that can be replaced with <strong>any</strong> other string of the same length to make the original string <code>s</code>&nbsp;<strong>balanced</strong>.</p>\n\n<p>Return 0 if the string is already <strong>balanced</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;QWER&quot;\n<strong>Output:</strong> 0\n<strong>Explanation: </strong>s is already balanced.</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;QQWE&quot;\n<strong>Output:</strong> 1\n<strong>Explanation: </strong>We need to replace a &#39;Q&#39; to &#39;R&#39;, so that &quot;RQWE&quot; (or &quot;QRWE&quot;) is balanced.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;QQQW&quot;\n<strong>Output:</strong> 2\n<strong>Explanation: </strong>We can replace the first &quot;QQ&quot; to &quot;ER&quot;. \n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;QQQQ&quot;\n<strong>Output:</strong> 3\n<strong>Explanation: </strong>We can replace the last 3 &#39;Q&#39; to make s = &quot;QWER&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10^5</code></li>\n\t<li><code>s.length</code> is a multiple of <code>4</code></li>\n\t<li><code>s&nbsp;</code>contains only <code>&#39;Q&#39;</code>, <code>&#39;W&#39;</code>, <code>&#39;E&#39;</code> and&nbsp;<code>&#39;R&#39;</code>.</li>\n</ul>\n",
  "isPaidOnly": false,
  "difficulty": "Medium",
  "likes": 131,
  "dislikes": 25,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [
    {
      "username": "shruthib724",
      "profileUrl": "/shruthib724/",
      "avatarUrl": "https://assets.leetcode.com/users/shruthib724/avatar_1549272280.png"
    }
  ],
  "topicTags": [
    {
      "name": "Two Pointers",
      "slug": "two-pointers"
    },
    {
      "name": "String",
      "slug": "string"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"Accolite\", \"slug\": \"accolite\", \"timesEncountered\": 0}], \"1\": [], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    int balancedString(string s) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int balancedString(String s) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def balancedString(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def balancedString(self, s: str) -> int:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nint balancedString(char * s){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public int BalancedString(string s) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar balancedString = function(s) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {String} s\n# @return {Integer}\ndef balanced_string(s)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func balancedString(_ s: String) -> Int {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func balancedString(s string) int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def balancedString(s: String): Int = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun balancedString(s: String): Int {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn balanced_string(s: String) -> i32 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function balancedString($s) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"5.8K\", \"totalSubmission\": \"18.7K\", \"totalAcceptedRaw\": 5752, \"totalSubmissionRaw\": 18689, \"acRate\": \"30.8%\"}",
  "hints": [
    "Use 2-pointers algorithm to make sure all amount of characters outside the 2 pointers are smaller or equal to n/4.",
    "That means you need to count the amount of each letter and make sure the amount is enough."
  ],
  "solution": null,
  "status": null,
  "sampleTestCase": "\"QWER\"",
  "metaData": "{\n  \"name\": \"balancedString\",\n  \"params\": [\n    {\n      \"name\": \"s\",\n      \"type\": \"string\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"integer\"\n  }\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
