{
  "questionId": "1359",
  "questionFrontendId": "1238",
  "boundTopicId": null,
  "title": "Circular Permutation in Binary Representation",
  "titleSlug": "circular-permutation-in-binary-representation",
  "categoryTitle": "Algorithms",
  "content": "<p>Given 2 integers <code>n</code> and <code>start</code>. Your task is return <strong>any</strong> permutation <code>p</code>&nbsp;of <code>(0,1,2.....,2^n -1) </code>such that :</p>\n\n<ul>\n\t<li><code>p[0] = start</code></li>\n\t<li><code>p[i]</code> and <code>p[i+1]</code>&nbsp;differ by only one bit in their binary representation.</li>\n\t<li><code>p[0]</code> and <code>p[2^n -1]</code>&nbsp;must also differ by only one bit in their binary representation.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2, start = 3\n<strong>Output:</strong> [3,2,0,1]\n<strong>Explanation:</strong> The binary representation of the permutation is (11,10,00,01). \nAll the adjacent element differ by one bit. Another valid permutation is [3,1,0,2]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3, start = 2\n<strong>Output:</strong> [2,6,7,5,4,0,1,3]\n<strong>Explanation:</strong> The binary representation of the permutation is (010,110,111,101,100,000,001,011).\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 16</code></li>\n\t<li><code>0 &lt;= start&nbsp;&lt;&nbsp;2 ^ n</code></li>\n</ul>\n",
  "isPaidOnly": false,
  "difficulty": "Medium",
  "likes": 53,
  "dislikes": 75,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [
    {
      "username": "TanishqSaluja",
      "profileUrl": "/tanishqsaluja/",
      "avatarUrl": "https://assets.leetcode.com/users/tanishqsaluja/avatar_1560692079.png"
    }
  ],
  "topicTags": [
    {
      "name": "Math",
      "slug": "math"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"Walmart\", \"slug\": \"walmart\", \"timesEncountered\": 0}], \"1\": [], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    vector<int> circularPermutation(int n, int start) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public List<Integer> circularPermutation(int n, int start) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def circularPermutation(self, n, start):\n        \"\"\"\n        :type n: int\n        :type start: int\n        :rtype: List[int]\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def circularPermutation(self, n: int, start: int) -> List[int]:\n        "
    },
    {
      "lang": "C",
      "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* circularPermutation(int n, int start, int* returnSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public IList<int> CircularPermutation(int n, int start) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number} n\n * @param {number} start\n * @return {number[]}\n */\nvar circularPermutation = function(n, start) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer} n\n# @param {Integer} start\n# @return {Integer[]}\ndef circular_permutation(n, start)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func circularPermutation(_ n: Int, _ start: Int) -> [Int] {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func circularPermutation(n int, start int) []int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def circularPermutation(n: Int, start: Int): List[Int] = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun circularPermutation(n: Int, start: Int): List<Int> {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn circular_permutation(n: i32, start: i32) -> Vec<i32> {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $start\n     * @return Integer[]\n     */\n    function circularPermutation($n, $start) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"4.6K\", \"totalSubmission\": \"7.7K\", \"totalAcceptedRaw\": 4586, \"totalSubmissionRaw\": 7669, \"acRate\": \"59.8%\"}",
  "hints": [
    "Use gray code to generate a n-bit sequence.",
    "Rotate the sequence such that its first element is start."
  ],
  "solution": null,
  "status": null,
  "sampleTestCase": "2\n3",
  "metaData": "{\n  \"name\": \"circularPermutation\",\n  \"params\": [\n    {\n      \"name\": \"n\",\n      \"type\": \"integer\"\n    },\n    {\n      \"type\": \"integer\",\n      \"name\": \"start\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"list<integer>\"\n  }\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
