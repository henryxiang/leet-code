{
  "questionId": "1369",
  "questionFrontendId": "1247",
  "boundTopicId": null,
  "title": "Minimum Swaps to Make Strings Equal",
  "titleSlug": "minimum-swaps-to-make-strings-equal",
  "categoryTitle": "Algorithms",
  "content": "<p>You are given two strings&nbsp;<code>s1</code>&nbsp;and&nbsp;<code>s2</code>&nbsp;of equal length&nbsp;consisting of letters <code>&quot;x&quot;</code> and <code>&quot;y&quot;</code> <strong>only</strong>. Your task is to&nbsp;make these two strings equal to each other. You can swap any two characters that belong to <strong>different</strong> strings,&nbsp;which means: swap <code>s1[i]</code> and <code>s2[j]</code>.</p>\n\n<p>Return&nbsp;the minimum number of swaps required&nbsp;to make&nbsp;<code>s1</code>&nbsp;and <code>s2</code> equal, or return&nbsp;<code>-1</code>&nbsp;if it is&nbsp;impossible to do so.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s1 = &quot;xx&quot;, s2 = &quot;yy&quot;\n<strong>Output:</strong> 1\n<strong>Explanation: \n</strong>Swap s1[0] and s2[1], s1 = &quot;yx&quot;, s2 = &quot;yx&quot;.</pre>\n\n<p><strong>Example 2:&nbsp;</strong></p>\n\n<pre>\n<strong>Input:</strong> s1 = &quot;xy&quot;, s2 = &quot;yx&quot;\n<strong>Output:</strong> 2\n<strong>Explanation: \n</strong>Swap s1[0] and s2[0], s1 = &quot;yy&quot;, s2 = &quot;xx&quot;.\nSwap s1[0] and s2[1], s1 = &quot;xy&quot;, s2 = &quot;xy&quot;.\nNote that you can&#39;t swap s1[0] and s1[1] to make s1 equal to &quot;yx&quot;, cause we can only swap chars in different strings.</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s1 = &quot;xx&quot;, s2 = &quot;xy&quot;\n<strong>Output:</strong> -1\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> s1 = &quot;xxyyxyxyxx&quot;, s2 = &quot;xyyxyxxxyx&quot;\n<strong>Output:</strong> 4\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s1.length, s2.length &lt;= 1000</code></li>\n\t<li><code>s1, s2</code>&nbsp;only contain <code>&#39;x&#39;</code> or <code>&#39;y&#39;</code>.</li>\n</ul>\n",
  "isPaidOnly": false,
  "difficulty": "Medium",
  "likes": 88,
  "dislikes": 84,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [
    {
      "username": "poor_coder",
      "profileUrl": "/poor_coder/",
      "avatarUrl": "https://assets.leetcode.com/users/tensor08/avatar_1570939786.png"
    }
  ],
  "topicTags": [
    {
      "name": "String",
      "slug": "string"
    },
    {
      "name": "Greedy",
      "slug": "greedy"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"JP Morgan Chase\", \"slug\": \"jp-morgan-chase\", \"timesEncountered\": 0}], \"1\": [], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    int minimumSwap(string s1, string s2) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int minimumSwap(String s1, String s2) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def minimumSwap(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def minimumSwap(self, s1: str, s2: str) -> int:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nint minimumSwap(char * s1, char * s2){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public int MinimumSwap(string s1, string s2) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {string} s1\n * @param {string} s2\n * @return {number}\n */\nvar minimumSwap = function(s1, s2) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {String} s1\n# @param {String} s2\n# @return {Integer}\ndef minimum_swap(s1, s2)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func minimumSwap(_ s1: String, _ s2: String) -> Int {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func minimumSwap(s1 string, s2 string) int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def minimumSwap(s1: String, s2: String): Int = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun minimumSwap(s1: String, s2: String): Int {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn minimum_swap(s1: String, s2: String) -> i32 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param String $s1\n     * @param String $s2\n     * @return Integer\n     */\n    function minimumSwap($s1, $s2) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"6.6K\", \"totalSubmission\": \"11.4K\", \"totalAcceptedRaw\": 6599, \"totalSubmissionRaw\": 11426, \"acRate\": \"57.8%\"}",
  "hints": [
    "First, ignore all the already matched positions, they don't affect the answer at all. For the unmatched positions, there are three basic cases (already given in the examples):",
    "(\"xx\", \"yy\") => 1 swap, (\"xy\", \"yx\") => 2 swaps",
    "So the strategy is, apply case 1 as much as possible, then apply case 2 if the last two unmatched are in this case, or fall into impossible if only one pair of unmatched left. This can be done via a simple math."
  ],
  "solution": null,
  "status": null,
  "sampleTestCase": "\"xx\"\r\n\"yy\"\r",
  "metaData": "{\n  \"name\": \"minimumSwap\",\n  \"params\": [\n    {\n      \"name\": \"s1\",\n      \"type\": \"string\"\n    },\n    {\n      \"type\": \"string\",\n      \"name\": \"s2\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"integer\"\n  }\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
