{
  "questionId": "137",
  "questionFrontendId": "137",
  "boundTopicId": null,
  "title": "Single Number II",
  "titleSlug": "single-number-ii",
  "categoryTitle": "Algorithms",
  "content": "<p>Given a <strong>non-empty</strong>&nbsp;array of integers, every element appears <em>three</em> times except for one, which appears exactly once. Find that single one.</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<p>Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [2,2,3,2]\r\n<strong>Output:</strong> 3\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [0,1,0,1,0,1,99]\r\n<strong>Output:</strong> 99</pre>\r\n",
  "isPaidOnly": false,
  "difficulty": "Medium",
  "likes": 1107,
  "dislikes": 292,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"Single Number\", \"titleSlug\": \"single-number\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Single Number III\", \"titleSlug\": \"single-number-iii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
  "contributors": [],
  "topicTags": [
    {
      "name": "Bit Manipulation",
      "slug": "bit-manipulation"
    }
  ],
  "companyTagStats": "{\"1\": [{\"taggedByAdmin\": false, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Facebook\", \"slug\": \"facebook\", \"timesEncountered\": 2}], \"2\": [], \"3\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    int singleNumber(vector<int>& nums) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int singleNumber(int[] nums) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def singleNumber(self, nums: List[int]) -> int:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nint singleNumber(int* nums, int numsSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public int SingleNumber(int[] nums) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar singleNumber = function(nums) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef single_number(nums)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func singleNumber(_ nums: [Int]) -> Int {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func singleNumber(nums []int) int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def singleNumber(nums: Array[Int]): Int = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun singleNumber(nums: IntArray): Int {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn single_number(nums: Vec<i32>) -> i32 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function singleNumber($nums) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"189.6K\", \"totalSubmission\": \"395.2K\", \"totalAcceptedRaw\": 189610, \"totalSubmissionRaw\": 395250, \"acRate\": \"48.0%\"}",
  "hints": [],
  "solution": {
    "id": "758",
    "canSeeDetail": true,
    "url": "/articles/single-number-ii/",
    "content": "[TOC]\r\n\r\n## Solution\r\n\r\n--- \r\n\r\n#### Overview\r\n\r\nThe problem seems to be quite simple and one could solve it\r\nin $$\\mathcal{O}(N)$$ time and $$\\mathcal{O}(N)$$ space by using\r\nan additional data structure like set or hashmap. \r\n\r\nThe real game starts at the moment when Google interviewer \r\n(the problem is quite popular at Google the last six months)\r\nasks you to solve the problem in a constant space, \r\ntesting if you are OK with bitwise operators. \r\n\r\n![fig](../Figures/137/methods.png)\r\n\r\n<br /> \r\n<br />\r\n\r\n\r\n---\r\n#### Approach 1: HashSet\r\n\r\nThe idea is to convert an input array into hashset and then \r\nto compare the tripled sum of the set with the array sum \r\n\r\n$$\r\n3 \\times (a + b + c) - (a + a + a + b + b + b + c) = 2 c\r\n$$\r\n\r\n**Implementation**\r\n\r\n<iframe src=\"https://leetcode.com/playground/iNJZnu6A/shared\" frameBorder=\"0\" width=\"100%\" height=\"259\" name=\"iNJZnu6A\"></iframe>\r\n\r\n**Complexity Analysis**\r\n\r\n* Time complexity : $$\\mathcal{O}(N)$$ to iterate over the input array. \r\n\r\n* Space complexity : $$\\mathcal{O}(N)$$ to keep the set of $$N/3$$ elements.\r\n<br /> \r\n<br />\r\n\r\n\r\n---\r\n#### Approach 2: HashMap\r\n\r\nLet's iterate over the input array \r\nto count the frequency of each number, and then return an\r\nelement with a frequency 1.\r\n\r\n**Implementation**\r\n\r\n<iframe src=\"https://leetcode.com/playground/RtE8YAgp/shared\" frameBorder=\"0\" width=\"100%\" height=\"242\" name=\"RtE8YAgp\"></iframe>\r\n\r\n**Complexity Analysis**\r\n\r\n* Time complexity : $$\\mathcal{O}(N)$$ to iterate over the input array. \r\n\r\n* Space complexity : $$\\mathcal{O}(N)$$ to keep the hashmap of $$N/3$$ elements.\r\n<br /> \r\n<br />\r\n\r\n\r\n---\r\n#### Approach 3: Bitwise Operators : NOT, AND and XOR\r\n\r\n**Intuition**\r\n\r\nNow let's discuss $$\\mathcal{O}(1)$$ space solution by using\r\nthree [bitwise operators](https://wiki.python.org/moin/BitwiseOperators)\r\n\r\n$$\r\n\\sim x \\qquad \\textrm{that means} \\qquad \\textrm{bitwise NOT} \r\n$$\r\n\r\n$$\r\nx \\& y \\qquad \\textrm{that means} \\qquad \\textrm{bitwise AND} \r\n$$\r\n\r\n$$\r\nx \\oplus y \\qquad \\textrm{that means} \\qquad \\textrm{bitwise XOR}  \r\n$$\r\n\r\n**XOR**\r\n\r\nLet's start from XOR operator which could be used to detect \r\nthe bit which appears odd number of times: 1, 3, 5, etc.\r\n\r\nXOR of zero and a bit results in that bit\r\n\r\n$$\r\n0 \\oplus x = x  \r\n$$\r\n\r\nXOR of two equal bits (even if they are zeros) results in a zero\r\n\r\n$$\r\nx \\oplus x = 0  \r\n$$\r\n\r\nand so on and so forth, i.e. one could see the bit in a bitmask \r\nonly if it appears odd number of times.\r\n\r\n![fig](../Figures/137/xor.png)\r\n\r\nThat's already great, so one could detect the bit which \r\nappears once, and the bit which appears three times. \r\nThe problem is to distinguish between these two situations.\r\n\r\n**AND and NOT**\r\n\r\nTo separate number that appears once from a number that appears \r\nthree times let's use two bitmasks instead of one: `seen_once`\r\nand `seen_twice`. \r\n\r\nThe idea is to \r\n\r\n- change `seen_once` only if `seen_twice` is unchanged\r\n\r\n- change `seen_twice` only if `seen_once` is unchanged\r\n\r\n![fig](../Figures/137/three.png)\r\n\r\nThis way bitmask `seen_once` will keep only the number \r\nwhich appears once and not the numbers which appear three times. \r\n\r\n**Implementation**\r\n\r\n<iframe src=\"https://leetcode.com/playground/dTtDFM2S/shared\" frameBorder=\"0\" width=\"100%\" height=\"446\" name=\"dTtDFM2S\"></iframe>\r\n\r\n**Complexity Analysis**\r\n\r\n* Time complexity : $$\\mathcal{O}(N)$$ to iterate over the input\r\narray.\r\n\r\n* Space complexity : $$\\mathcal{O}(1)$$ since no additional data \r\nstructures are allocated.\r\n\r\n\r\nAnalysis written by @[liaison](https://leetcode.com/liaison/)\r\nand @[andvary](https://leetcode.com/andvary/)",
    "contentTypeId": "107",
    "rating": {
      "id": "743",
      "count": 26,
      "average": 5,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "[2,2,3,2]",
  "metaData": "{\r\n  \"name\": \"singleNumber\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"nums\",\r\n      \"type\": \"integer[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
