{
  "questionId": "1386",
  "questionFrontendId": "1260",
  "boundTopicId": null,
  "title": "Shift 2D Grid",
  "titleSlug": "shift-2d-grid",
  "categoryTitle": "Algorithms",
  "content": "<p>Given a 2D <code>grid</code> of size <code>m x n</code>&nbsp;and an integer <code>k</code>. You need to shift the <code>grid</code>&nbsp;<code>k</code> times.</p>\n\n<p>In one shift operation:</p>\n\n<ul>\n\t<li>Element at <code>grid[i][j]</code> becomes at <code>grid[i][j + 1]</code>.</li>\n\t<li>Element at <code>grid[i][n - 1]</code> becomes at <code>grid[i + 1][0]</code>.</li>\n\t<li>Element at <code>grid[n - 1][n - 1]</code> becomes at <code>grid[0][0]</code>.</li>\n</ul>\n\n<p>Return the <em>2D grid</em> after applying shift operation <code>k</code> times.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/11/05/e1.png\" style=\"width: 400px; height: 178px;\" />\n<pre>\n<strong>Input:</strong> <code>grid</code> = [[1,2,3],[4,5,6],[7,8,9]], k = 1\n<strong>Output:</strong> [[9,1,2],[3,4,5],[6,7,8]]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/11/05/e2.png\" style=\"width: 400px; height: 166px;\" />\n<pre>\n<strong>Input:</strong> <code>grid</code> = [[3,8,1,9],[19,7,2,5],[4,6,11,10],[12,0,21,13]], k = 4\n<strong>Output:</strong> [[12,0,21,13],[3,8,1,9],[19,7,2,5],[4,6,11,10]]\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> <code>grid</code> = [[1,2,3],[4,5,6],[7,8,9]], k = 9\n<strong>Output:</strong> [[1,2,3],[4,5,6],[7,8,9]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m ==&nbsp;grid.length</code></li>\n\t<li><code>n ==&nbsp;grid[i].length</code></li>\n\t<li><code>1 &lt;= m &lt;= 50</code></li>\n\t<li><code>1 &lt;= n &lt;= 50</code></li>\n\t<li><code>-1000 &lt;= grid[i][j] &lt;= 1000</code></li>\n\t<li><code>0 &lt;= k &lt;= 100</code></li>\n</ul>\n",
  "isPaidOnly": false,
  "difficulty": "Easy",
  "likes": 63,
  "dislikes": 49,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [
    {
      "username": "samueljhonson1963",
      "profileUrl": "/samueljhonson1963/",
      "avatarUrl": "https://assets.leetcode.com/users/samueljhonson1963/avatar_1530553225.png"
    }
  ],
  "topicTags": [
    {
      "name": "Array",
      "slug": "array"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 0}], \"1\": [], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    vector<vector<int>> shiftGrid(vector<vector<int>>& grid, int k) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public List<List<Integer>> shiftGrid(int[][] grid, int k) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def shiftGrid(self, grid, k):\n        \"\"\"\n        :type grid: List[List[int]]\n        :type k: int\n        :rtype: List[List[int]]\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def shiftGrid(self, grid: List[List[int]], k: int) -> List[List[int]]:\n        "
    },
    {
      "lang": "C",
      "code": "\n\n/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** shiftGrid(int** grid, int gridSize, int* gridColSize, int k, int* returnSize, int** returnColumnSizes){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public IList<IList<int>> ShiftGrid(int[][] grid, int k) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number[][]} grid\n * @param {number} k\n * @return {number[][]}\n */\nvar shiftGrid = function(grid, k) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer[][]} grid\n# @param {Integer} k\n# @return {Integer[][]}\ndef shift_grid(grid, k)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func shiftGrid(_ grid: [[Int]], _ k: Int) -> [[Int]] {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func shiftGrid(grid [][]int, k int) [][]int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def shiftGrid(grid: Array[Array[Int]], k: Int): List[List[Int]] = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun shiftGrid(grid: Array<IntArray>, k: Int): List<List<Int>> {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn shift_grid(grid: Vec<Vec<i32>>, k: i32) -> Vec<Vec<i32>> {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @param Integer $k\n     * @return Integer[][]\n     */\n    function shiftGrid($grid, $k) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"7.8K\", \"totalSubmission\": \"13K\", \"totalAcceptedRaw\": 7761, \"totalSubmissionRaw\": 13020, \"acRate\": \"59.6%\"}",
  "hints": [
    "Simulate step by step. move grid[i][j] to grid[i][j+1]. handle last column of the grid.",
    "Put the matrix row by row to a vector. take k % vector.length and move last k of the vector to the beginning. put the vector to the matrix back the same way."
  ],
  "solution": null,
  "status": null,
  "sampleTestCase": "[[1,2,3],[4,5,6],[7,8,9]]\n1",
  "metaData": "{\n  \"name\": \"shiftGrid\",\n  \"params\": [\n    {\n      \"name\": \"grid\",\n      \"type\": \"integer[][]\"\n    },\n    {\n      \"type\": \"integer\",\n      \"name\": \"k\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"list<list<integer>>\"\n  }\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
