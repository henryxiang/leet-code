{
  "questionId": "1398",
  "questionFrontendId": "1269",
  "boundTopicId": null,
  "title": "Number of Ways to Stay in the Same Place After Some Steps",
  "titleSlug": "number-of-ways-to-stay-in-the-same-place-after-some-steps",
  "categoryTitle": "Algorithms",
  "content": "<p>You have a pointer at index <code>0</code> in an array of size <code><font face=\"monospace\">arrLen</font></code>. At each step, you can move 1 position to the left, 1 position to the right&nbsp;in the array or stay in the same place&nbsp; (The pointer should not be placed outside the array at any time).</p>\n\n<p>Given two integers&nbsp;<code>steps</code> and <code>arrLen</code>, return the number of&nbsp;ways such that your pointer still at index <code>0</code> after <strong>exactly </strong><code><font face=\"monospace\">steps</font></code>&nbsp;steps.</p>\n\n<p>Since the answer&nbsp;may be too large,&nbsp;return it <strong>modulo</strong>&nbsp;<code>10^9 + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> steps = 3, arrLen = 2\n<strong>Output:</strong> 4\n<strong>Explanation: </strong>There are 4 differents ways to stay at index 0 after 3 steps.\nRight, Left, Stay\nStay, Right, Left\nRight, Stay, Left\nStay, Stay, Stay\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> steps = 2, arrLen = 4\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> There are 2 differents ways to stay at index 0 after 2 steps\nRight, Left\nStay, Stay\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> steps = 4, arrLen = 2\n<strong>Output:</strong> 8\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= steps &lt;= 500</code></li>\n\t<li><code>1 &lt;= arrLen&nbsp;&lt;= 10^6</code></li>\n</ul>\n",
  "isPaidOnly": false,
  "difficulty": "Hard",
  "likes": 113,
  "dislikes": 4,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [],
  "topicTags": [
    {
      "name": "Dynamic Programming",
      "slug": "dynamic-programming"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 0}], \"1\": [], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    int numWays(int steps, int arrLen) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int numWays(int steps, int arrLen) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def numWays(self, steps, arrLen):\n        \"\"\"\n        :type steps: int\n        :type arrLen: int\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def numWays(self, steps: int, arrLen: int) -> int:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nint numWays(int steps, int arrLen){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public int NumWays(int steps, int arrLen) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number} steps\n * @param {number} arrLen\n * @return {number}\n */\nvar numWays = function(steps, arrLen) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer} steps\n# @param {Integer} arr_len\n# @return {Integer}\ndef num_ways(steps, arr_len)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func numWays(_ steps: Int, _ arrLen: Int) -> Int {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func numWays(steps int, arrLen int) int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def numWays(steps: Int, arrLen: Int): Int = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun numWays(steps: Int, arrLen: Int): Int {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn num_ways(steps: i32, arr_len: i32) -> i32 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer $steps\n     * @param Integer $arrLen\n     * @return Integer\n     */\n    function numWays($steps, $arrLen) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"4.5K\", \"totalSubmission\": \"11.3K\", \"totalAcceptedRaw\": 4545, \"totalSubmissionRaw\": 11319, \"acRate\": \"40.2%\"}",
  "hints": [
    "Try with Dynamic programming, dp(pos,steps): number of ways to back pos = 0 using exactly \"steps\" moves.",
    "Notice that the computational complexity does not depend of \"arrlen\"."
  ],
  "solution": null,
  "status": null,
  "sampleTestCase": "3\n2",
  "metaData": "{\n  \"name\": \"numWays\",\n  \"params\": [\n    {\n      \"name\": \"steps\",\n      \"type\": \"integer\"\n    },\n    {\n      \"type\": \"integer\",\n      \"name\": \"arrLen\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"integer\"\n  }\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
