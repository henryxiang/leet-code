{
  "questionId": "1401",
  "questionFrontendId": "1276",
  "boundTopicId": null,
  "title": "Number of Burgers with No Waste of Ingredients",
  "titleSlug": "number-of-burgers-with-no-waste-of-ingredients",
  "categoryTitle": "Algorithms",
  "content": "<p>Given two integers <code>tomatoSlices</code>&nbsp;and <code>cheeseSlices</code>. The ingredients of different burgers are as follows:</p>\r\n\r\n<ul>\r\n\t<li><strong>Jumbo Burger:</strong> 4 tomato slices&nbsp;and 1 cheese slice.</li>\r\n\t<li><strong>Small Burger:</strong> 2 Tomato slices&nbsp;and 1 cheese slice.</li>\r\n</ul>\r\n\r\n<p>Return <code>[total_jumbo, total_small]</code> so that the number of remaining <code>tomatoSlices</code>&nbsp;equal to 0 and the number of remaining <code>cheeseSlices</code> equal to 0. If it is not possible to make the remaining <code>tomatoSlices</code>&nbsp;and <code>cheeseSlices</code> equal to 0 return <code>[]</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> tomatoSlices = 16, cheeseSlices = 7\r\n<strong>Output:</strong> [1,6]\r\n<strong>Explantion:</strong> To make one jumbo burger and 6 small burgers we need 4*1 + 2*6 = 16 tomato and 1 + 6 = 7 cheese. There will be no remaining ingredients.\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> tomatoSlices = 17, cheeseSlices = 4\r\n<strong>Output:</strong> []\r\n<strong>Explantion:</strong> There will be no way to use all ingredients to make small and jumbo burgers.\r\n</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> tomatoSlices = 4, cheeseSlices = 17\r\n<strong>Output:</strong> []\r\n<strong>Explantion:</strong> Making 1 jumbo burger there will be 16 cheese remaining and making 2 small burgers there will be 15 cheese remaining.\r\n</pre>\r\n\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> tomatoSlices = 0, cheeseSlices = 0\r\n<strong>Output:</strong> [0,0]\r\n</pre>\r\n\r\n<p><strong>Example 5:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> tomatoSlices = 2, cheeseSlices = 1\r\n<strong>Output:</strong> [0,1]\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong>Constraints:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>0 &lt;= tomatoSlices &lt;= 10^7</code></li>\r\n\t<li><code>0 &lt;= cheeseSlices &lt;= 10^7</code></li>\r\n</ul>",
  "isPaidOnly": false,
  "difficulty": "Medium",
  "likes": 39,
  "dislikes": 43,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [
    {
      "username": "ranjeetsinha13",
      "profileUrl": "/ranjeetsinha13/",
      "avatarUrl": "https://assets.leetcode.com/users/rslucky13/avatar_1557584231.png"
    }
  ],
  "topicTags": [
    {
      "name": "Math",
      "slug": "math"
    },
    {
      "name": "Greedy",
      "slug": "greedy"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"DeliveryHero\", \"slug\": \"deliveryhero\", \"timesEncountered\": 0}], \"1\": [], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    vector<int> numOfBurgers(int tomatoSlices, int cheeseSlices) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public List<Integer> numOfBurgers(int tomatoSlices, int cheeseSlices) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def numOfBurgers(self, tomatoSlices, cheeseSlices):\n        \"\"\"\n        :type tomatoSlices: int\n        :type cheeseSlices: int\n        :rtype: List[int]\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def numOfBurgers(self, tomatoSlices: int, cheeseSlices: int) -> List[int]:\n        "
    },
    {
      "lang": "C",
      "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* numOfBurgers(int tomatoSlices, int cheeseSlices, int* returnSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public IList<int> NumOfBurgers(int tomatoSlices, int cheeseSlices) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number} tomatoSlices\n * @param {number} cheeseSlices\n * @return {number[]}\n */\nvar numOfBurgers = function(tomatoSlices, cheeseSlices) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer} tomato_slices\n# @param {Integer} cheese_slices\n# @return {Integer[]}\ndef num_of_burgers(tomato_slices, cheese_slices)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func numOfBurgers(_ tomatoSlices: Int, _ cheeseSlices: Int) -> [Int] {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func numOfBurgers(tomatoSlices int, cheeseSlices int) []int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def numOfBurgers(tomatoSlices: Int, cheeseSlices: Int): List[Int] = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun numOfBurgers(tomatoSlices: Int, cheeseSlices: Int): List<Int> {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn num_of_burgers(tomato_slices: i32, cheese_slices: i32) -> Vec<i32> {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer $tomatoSlices\n     * @param Integer $cheeseSlices\n     * @return Integer[]\n     */\n    function numOfBurgers($tomatoSlices, $cheeseSlices) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"5.4K\", \"totalSubmission\": \"10.8K\", \"totalAcceptedRaw\": 5380, \"totalSubmissionRaw\": 10810, \"acRate\": \"49.8%\"}",
  "hints": [
    "Can we have an answer if the number of tomatoes is odd ?",
    "If we have answer will be there multiple answers or just one answer ?",
    "Let us define number of jumbo burgers as X and number of small burgers as Y\r\nWe have to find an x and y in this equation",
    "1. 4X + 2Y = tomato",
    "2. X + Y = cheese"
  ],
  "solution": null,
  "status": null,
  "sampleTestCase": "16\n7",
  "metaData": "{\n  \"name\": \"numOfBurgers\",\n  \"params\": [\n    {\n      \"name\": \"tomatoSlices\",\n      \"type\": \"integer\"\n    },\n    {\n      \"type\": \"integer\",\n      \"name\": \"cheeseSlices\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"list<integer>\"\n  }\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
