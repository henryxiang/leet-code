{
  "questionId": "1407",
  "questionFrontendId": "1282",
  "boundTopicId": null,
  "title": "Group the People Given the Group Size They Belong To",
  "titleSlug": "group-the-people-given-the-group-size-they-belong-to",
  "categoryTitle": "Algorithms",
  "content": "<p>There are <code>n</code> people whose <strong>IDs</strong> go from <code>0</code> to <code>n - 1</code> and each person belongs <strong>exactly</strong> to one&nbsp;group. Given the array&nbsp;<code>groupSizes</code> of length <code>n</code> telling the group size each person belongs to, return the groups there are and the people&#39;s&nbsp;<strong>IDs</strong> each group includes.</p>\n\n<p>You can return any solution in any order and the same applies for IDs. Also, it is guaranteed that there exists at least one solution.&nbsp;</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> groupSizes = [3,3,3,3,3,1,3]\n<strong>Output:</strong> [[5],[0,1,2],[3,4,6]]\n<b>Explanation:</b> \nOther possible solutions are [[2,1,6],[5],[0,4,3]] and [[5],[0,6,2],[4,3,1]].\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> groupSizes = [2,1,3,3,3,2]\n<strong>Output:</strong> [[1],[0,5],[2,3,4]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>groupSizes.length == n</code></li>\n\t<li><code>1 &lt;= n&nbsp;&lt;= 500</code></li>\n\t<li><code>1 &lt;=&nbsp;groupSizes[i] &lt;= n</code></li>\n</ul>\n",
  "isPaidOnly": false,
  "difficulty": "Medium",
  "likes": 79,
  "dislikes": 30,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [],
  "topicTags": [
    {
      "name": "Greedy",
      "slug": "greedy"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"Roblox\", \"slug\": \"roblox\", \"timesEncountered\": 0}], \"1\": [], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    vector<vector<int>> groupThePeople(vector<int>& groupSizes) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public List<List<Integer>> groupThePeople(int[] groupSizes) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def groupThePeople(self, groupSizes):\n        \"\"\"\n        :type groupSizes: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def groupThePeople(self, groupSizes: List[int]) -> List[List[int]]:\n        "
    },
    {
      "lang": "C",
      "code": "\n\n/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** groupThePeople(int* groupSizes, int groupSizesSize, int* returnSize, int** returnColumnSizes){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public IList<IList<int>> GroupThePeople(int[] groupSizes) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number[]} groupSizes\n * @return {number[][]}\n */\nvar groupThePeople = function(groupSizes) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer[]} group_sizes\n# @return {Integer[][]}\ndef group_the_people(group_sizes)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func groupThePeople(_ groupSizes: [Int]) -> [[Int]] {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func groupThePeople(groupSizes []int) [][]int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def groupThePeople(groupSizes: Array[Int]): List[List[Int]] = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun groupThePeople(groupSizes: IntArray): List<List<Int>> {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn group_the_people(group_sizes: Vec<i32>) -> Vec<Vec<i32>> {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer[] $groupSizes\n     * @return Integer[][]\n     */\n    function groupThePeople($groupSizes) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"8.3K\", \"totalSubmission\": \"9.8K\", \"totalAcceptedRaw\": 8318, \"totalSubmissionRaw\": 9830, \"acRate\": \"84.6%\"}",
  "hints": [
    "Put people's IDs with same groupSize into buckets, then split each bucket into groups.",
    "Greedy fill until you need a new group."
  ],
  "solution": null,
  "status": null,
  "sampleTestCase": "[3,3,3,3,3,1,3]",
  "metaData": "{\n  \"name\": \"groupThePeople\",\n  \"params\": [\n    {\n      \"name\": \"groupSizes\",\n      \"type\": \"integer[]\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"list<list<integer>>\"\n  }\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
