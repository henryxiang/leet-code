{
  "questionId": "1409",
  "questionFrontendId": "1284",
  "boundTopicId": null,
  "title": "Minimum Number of Flips to Convert Binary Matrix to Zero Matrix",
  "titleSlug": "minimum-number-of-flips-to-convert-binary-matrix-to-zero-matrix",
  "categoryTitle": "Algorithms",
  "content": "<p>Given a <code>m x n</code> binary matrix <code>mat</code>. In one step, you can choose one cell and flip it and all the four neighbours of it&nbsp;if they exist (Flip is changing 1 to 0 and 0 to 1). A pair of cells are called neighboors if they share one edge.</p>\n\n<p>Return the <em>minimum number of steps</em> required to convert <code>mat</code>&nbsp;to a zero matrix or <strong>-1</strong> if you cannot.</p>\n\n<p>Binary matrix is a matrix with all cells equal to 0 or 1 only.</p>\n\n<p>Zero matrix is a matrix with all cells equal to 0.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/11/28/matrix.png\" style=\"width: 409px; height: 86px;\" />\n<pre>\n<strong>Input:</strong> mat = [[0,0],[0,1]]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> One possible solution is to flip (1, 0) then (0, 1) and finally (1, 1) as shown.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> mat = [[0]]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> Given matrix is a zero matrix. We don&#39;t need to change it.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> mat = [[1,1,1],[1,0,1],[0,0,0]]\n<strong>Output:</strong> 6\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> mat = [[1,0,0],[1,0,0]]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> Given matrix can&#39;t be a zero matrix\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m ==&nbsp;mat.length</code></li>\n\t<li><code>n ==&nbsp;mat[0].length</code></li>\n\t<li><code>1 &lt;= m&nbsp;&lt;= 3</code></li>\n\t<li><code>1 &lt;= n&nbsp;&lt;= 3</code></li>\n\t<li><code>mat[i][j]</code> is 0 or 1.</li>\n</ul>\n",
  "isPaidOnly": false,
  "difficulty": "Hard",
  "likes": 75,
  "dislikes": 10,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [
    {
      "username": "lucifer1004",
      "profileUrl": "/lucifer1004/",
      "avatarUrl": "https://assets.leetcode.com/users/lucifer1004/avatar_1561272871.png"
    }
  ],
  "topicTags": [
    {
      "name": "Breadth-first Search",
      "slug": "breadth-first-search"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"Airbnb\", \"slug\": \"airbnb\", \"timesEncountered\": 0}], \"1\": [], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    int minFlips(vector<vector<int>>& mat) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int minFlips(int[][] mat) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def minFlips(self, mat):\n        \"\"\"\n        :type mat: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def minFlips(self, mat: List[List[int]]) -> int:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nint minFlips(int** mat, int matSize, int* matColSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public int MinFlips(int[][] mat) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number[][]} mat\n * @return {number}\n */\nvar minFlips = function(mat) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer[][]} mat\n# @return {Integer}\ndef min_flips(mat)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func minFlips(_ mat: [[Int]]) -> Int {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func minFlips(mat [][]int) int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def minFlips(mat: Array[Array[Int]]): Int = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun minFlips(mat: Array<IntArray>): Int {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn min_flips(mat: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer[][] $mat\n     * @return Integer\n     */\n    function minFlips($mat) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"3.5K\", \"totalSubmission\": \"5K\", \"totalAcceptedRaw\": 3528, \"totalSubmissionRaw\": 5044, \"acRate\": \"69.9%\"}",
  "hints": [
    "Flipping same index two times is like not flipping it at all. Each index can be flipped one time. Try all possible combinations. O(2^(n*m))."
  ],
  "solution": null,
  "status": null,
  "sampleTestCase": "[[0,0],[0,1]]\r",
  "metaData": "{\n  \"name\": \"minFlips\",\n  \"params\": [\n    {\n      \"name\": \"mat\",\n      \"type\": \"integer[][]\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"integer\"\n  }\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
