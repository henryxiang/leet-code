{
  "questionId": "1413",
  "questionFrontendId": "1292",
  "boundTopicId": null,
  "title": "Maximum Side Length of a Square with Sum Less than or Equal to Threshold",
  "titleSlug": "maximum-side-length-of-a-square-with-sum-less-than-or-equal-to-threshold",
  "categoryTitle": "Algorithms",
  "content": "<p>Given a <code>m x n</code>&nbsp;matrix <code>mat</code> and an integer <code>threshold</code>. Return the maximum side-length of a square with a sum less than or equal to <code>threshold</code> or return <strong>0</strong> if there is no such square.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/12/05/e1.png\" style=\"width: 335px; height: 186px;\" />\n<pre>\n<strong>Input:</strong> mat = [[1,1,3,2,4,3,2],[1,1,3,2,4,3,2],[1,1,3,2,4,3,2]], threshold = 4\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The maximum side length of square with sum less than 4 is 2 as shown.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> mat = [[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2]], threshold = 1\n<strong>Output:</strong> 0\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> mat = [[1,1,1,1],[1,0,0,0],[1,0,0,0],[1,0,0,0]], threshold = 6\n<strong>Output:</strong> 3\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> mat = [[18,70],[61,1],[25,85],[14,40],[11,96],[97,96],[63,45]], threshold = 40184\n<strong>Output:</strong> 2\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= m, n &lt;= 300</code></li>\n\t<li><code>m == mat.length</code></li>\n\t<li><code>n == mat[i].length</code></li>\n\t<li><code>0 &lt;= mat[i][j] &lt;= 10000</code></li>\n\t<li><code>0 &lt;= threshold&nbsp;&lt;= 10^5</code></li>\n</ul>\n",
  "isPaidOnly": false,
  "difficulty": "Medium",
  "likes": 101,
  "dislikes": 2,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [],
  "topicTags": [
    {
      "name": "Array",
      "slug": "array"
    },
    {
      "name": "Binary Search",
      "slug": "binary-search"
    }
  ],
  "companyTagStats": "{\"1\": [{\"taggedByAdmin\": true, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 3}], \"2\": [], \"3\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    int maxSideLength(vector<vector<int>>& mat, int threshold) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int maxSideLength(int[][] mat, int threshold) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def maxSideLength(self, mat, threshold):\n        \"\"\"\n        :type mat: List[List[int]]\n        :type threshold: int\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def maxSideLength(self, mat: List[List[int]], threshold: int) -> int:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nint maxSideLength(int** mat, int matSize, int* matColSize, int threshold){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public int MaxSideLength(int[][] mat, int threshold) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number[][]} mat\n * @param {number} threshold\n * @return {number}\n */\nvar maxSideLength = function(mat, threshold) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer[][]} mat\n# @param {Integer} threshold\n# @return {Integer}\ndef max_side_length(mat, threshold)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func maxSideLength(_ mat: [[Int]], _ threshold: Int) -> Int {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func maxSideLength(mat [][]int, threshold int) int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def maxSideLength(mat: Array[Array[Int]], threshold: Int): Int = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun maxSideLength(mat: Array<IntArray>, threshold: Int): Int {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn max_side_length(mat: Vec<Vec<i32>>, threshold: i32) -> i32 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer[][] $mat\n     * @param Integer $threshold\n     * @return Integer\n     */\n    function maxSideLength($mat, $threshold) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"4.1K\", \"totalSubmission\": \"9.7K\", \"totalAcceptedRaw\": 4058, \"totalSubmissionRaw\": 9748, \"acRate\": \"41.6%\"}",
  "hints": [
    "Store prefix sum of all grids in another 2D array.",
    "Try all possible solutions and if you cannot find one return -1.",
    "If x is a valid answer then any y < x is also valid answer. Use binary search to find answer."
  ],
  "solution": null,
  "status": null,
  "sampleTestCase": "[[1,1,3,2,4,3,2],[1,1,3,2,4,3,2],[1,1,3,2,4,3,2]]\r\n4\r",
  "metaData": "{\n  \"name\": \"maxSideLength\",\n  \"params\": [\n    {\n      \"name\": \"mat\",\n      \"type\": \"integer[][]\"\n    },\n    {\n      \"type\": \"integer\",\n      \"name\": \"threshold\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"integer\"\n  }\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
