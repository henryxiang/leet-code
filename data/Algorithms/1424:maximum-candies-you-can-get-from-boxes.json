{
  "questionId": "1424",
  "questionFrontendId": "1298",
  "boundTopicId": null,
  "title": "Maximum Candies You Can Get from Boxes",
  "titleSlug": "maximum-candies-you-can-get-from-boxes",
  "categoryTitle": "Algorithms",
  "content": "<p>Given <code>n</code> boxes, each box is given in the format <code>[status, candies, keys, containedBoxes]</code> where:</p>\r\n\r\n<ul>\r\n\t<li><code>status[i]</code>: an integer which is <strong>1</strong> if&nbsp;<code>box[i]</code> is open and <strong>0</strong> if&nbsp;<code>box[i]</code> is closed.</li>\r\n\t<li><code>candies[i]</code>:&nbsp;an integer representing the number of candies in <code>box[i]</code>.</li>\r\n\t<li><code>keys[i]</code>: an array contains the indices of the boxes you can open with the key in <code>box[i]</code>.</li>\r\n\t<li><code>containedBoxes[i]</code>: an array contains the indices of the boxes found in <code>box[i]</code>.</li>\r\n</ul>\r\n\r\n<p>You will start with some boxes given in <code>initialBoxes</code> array. You can take all the candies in any open&nbsp;box and you can use the keys in it to open new boxes and you also can use the boxes you find in it.</p>\r\n\r\n<p>Return <em>the maximum number of candies</em> you can get following the rules above.</p>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> status = [1,0,1,0], candies = [7,5,4,100], keys = [[],[],[1],[]], containedBoxes = [[1,2],[3],[],[]], initialBoxes = [0]\r\n<strong>Output:</strong> 16\r\n<strong>Explanation:</strong> You will be initially given box 0. You will find 7 candies in it and boxes 1 and 2. Box 1 is closed and you don&#39;t have a key for it so you will open box 2. You will find 4 candies and a key to box 1 in box 2.\r\nIn box 1, you will find 5 candies and box 3 but you will not find a key to box 3 so box 3 will remain closed.\r\nTotal number of candies collected = 7 + 4 + 5 = 16 candy.\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> status = [1,0,0,0,0,0], candies = [1,1,1,1,1,1], keys = [[1,2,3,4,5],[],[],[],[],[]], containedBoxes = [[1,2,3,4,5],[],[],[],[],[]], initialBoxes = [0]\r\n<strong>Output:</strong> 6\r\n<strong>Explanation:</strong> You have initially box 0. Opening it you can find boxes 1,2,3,4 and 5 and their keys. The total number of candies will be 6.\r\n</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> status = [1,1,1], candies = [100,1,100], keys = [[],[0,2],[]], containedBoxes = [[],[],[]], initialBoxes = [1]\r\n<strong>Output:</strong> 1\r\n</pre>\r\n\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> status = [1], candies = [100], keys = [[]], containedBoxes = [[]], initialBoxes = []\r\n<strong>Output:</strong> 0\r\n</pre>\r\n\r\n<p><strong>Example 5:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> status = [1,1,1], candies = [2,3,2], keys = [[],[],[]], containedBoxes = [[],[],[]], initialBoxes = [2,1,0]\r\n<strong>Output:</strong> 7\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong>Constraints:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= status.length &lt;= 1000</code></li>\r\n\t<li><code>status.length == candies.length == keys.length == containedBoxes.length == n</code></li>\r\n\t<li><code>status[i]</code> is <code>0</code> or <code>1</code>.</li>\r\n\t<li><code>1 &lt;= candies[i] &lt;= 1000</code></li>\r\n\t<li><code><font face=\"monospace\">0 &lt;= keys[i].length &lt;= status.length</font></code></li>\r\n\t<li><code>0 &lt;= keys[i][j] &lt; status.length</code></li>\r\n\t<li>All values in <code>keys[i]</code> are unique.</li>\r\n\t<li><code><font face=\"monospace\">0 &lt;= </font>containedBoxes<font face=\"monospace\">[i].length &lt;= status.length</font></code></li>\r\n\t<li><code>0 &lt;= containedBoxes[i][j] &lt; status.length</code></li>\r\n\t<li>All values in <code>containedBoxes[i]</code> are unique.</li>\r\n\t<li>Each box is contained in one box at most.</li>\r\n\t<li><code>0 &lt;= initialBoxes.length&nbsp;&lt;= status.length</code></li>\r\n\t<li><code><font face=\"monospace\">0 &lt;= initialBoxes[i] &lt; status.length</font></code></li>\r\n</ul>",
  "isPaidOnly": false,
  "difficulty": "Hard",
  "likes": 33,
  "dislikes": 33,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [],
  "topicTags": [
    {
      "name": "Breadth-first Search",
      "slug": "breadth-first-search"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"Airbnb\", \"slug\": \"airbnb\", \"timesEncountered\": 0}], \"1\": [], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\r\npublic:\r\n    int maxCandies(vector<int>& status, vector<int>& candies, vector<vector<int>>& keys, vector<vector<int>>& containedBoxes, vector<int>& initialBoxes) {\r\n        \r\n    }\r\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\r\n    public int maxCandies(int[] status, int[] candies, int[][] keys, int[][] containedBoxes, int[] initialBoxes) {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\r\n    def maxCandies(self, status, candies, keys, containedBoxes, initialBoxes):\r\n        \"\"\"\r\n        :type status: List[int]\r\n        :type candies: List[int]\r\n        :type keys: List[List[int]]\r\n        :type containedBoxes: List[List[int]]\r\n        :type initialBoxes: List[int]\r\n        :rtype: int\r\n        \"\"\""
    },
    {
      "lang": "Python3",
      "code": "class Solution:\r\n    def maxCandies(self, status: List[int], candies: List[int], keys: List[List[int]], containedBoxes: List[List[int]], initialBoxes: List[int]) -> int:"
    },
    {
      "lang": "C",
      "code": "int maxCandies(int* status, int statusSize, int* candies, int candiesSize, int** keys, int keysSize, int* keysColSize, int** containedBoxes, int containedBoxesSize, int* containedBoxesColSize, int* initialBoxes, int initialBoxesSize){\r\n\r\n}"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\r\n    public int MaxCandies(int[] status, int[] candies, int[][] keys, int[][] containedBoxes, int[] initialBoxes) {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\r\n * @param {number[]} status\r\n * @param {number[]} candies\r\n * @param {number[][]} keys\r\n * @param {number[][]} containedBoxes\r\n * @param {number[]} initialBoxes\r\n * @return {number}\r\n */\r\nvar maxCandies = function(status, candies, keys, containedBoxes, initialBoxes) {\r\n    \r\n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer[]} status\r\n# @param {Integer[]} candies\r\n# @param {Integer[][]} keys\r\n# @param {Integer[][]} contained_boxes\r\n# @param {Integer[]} initial_boxes\r\n# @return {Integer}\r\ndef max_candies(status, candies, keys, contained_boxes, initial_boxes)\r\n    \r\nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\r\n    func maxCandies(_ status: [Int], _ candies: [Int], _ keys: [[Int]], _ containedBoxes: [[Int]], _ initialBoxes: [Int]) -> Int {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Go",
      "code": "func maxCandies(status []int, candies []int, keys [][]int, containedBoxes [][]int, initialBoxes []int) int {\r\n    \r\n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\r\n    def maxCandies(status: Array[Int], candies: Array[Int], keys: Array[Array[Int]], containedBoxes: Array[Array[Int]], initialBoxes: Array[Int]): Int = {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\r\n    fun maxCandies(status: IntArray, candies: IntArray, keys: Array<IntArray>, containedBoxes: Array<IntArray>, initialBoxes: IntArray): Int {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\r\n    pub fn max_candies(status: Vec<i32>, candies: Vec<i32>, keys: Vec<Vec<i32>>, contained_boxes: Vec<Vec<i32>>, initial_boxes: Vec<i32>) -> i32 {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\r\n\r\n    /**\r\n     * @param Integer[] $status\r\n     * @param Integer[] $candies\r\n     * @param Integer[][] $keys\r\n     * @param Integer[][] $containedBoxes\r\n     * @param Integer[] $initialBoxes\r\n     * @return Integer\r\n     */\r\n    function maxCandies($status, $candies, $keys, $containedBoxes, $initialBoxes) {\r\n        \r\n    }\r\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"2.7K\", \"totalSubmission\": \"4.6K\", \"totalAcceptedRaw\": 2701, \"totalSubmissionRaw\": 4589, \"acRate\": \"58.9%\"}",
  "hints": [
    "Use Breadth First Search (BFS) to traverse all possible boxes you can open. Only push to the queue the boxes the you have with their keys."
  ],
  "solution": null,
  "status": null,
  "sampleTestCase": "[1,0,1,0]\n[7,5,4,100]\n[[],[],[1],[]]\n[[1,2],[3],[],[]]\n[0]",
  "metaData": "{\n  \"name\": \"maxCandies\",\n  \"params\": [\n    {\n      \"name\": \"status\",\n      \"type\": \"integer[]\"\n    },\n    {\n      \"type\": \"integer[]\",\n      \"name\": \"candies\"\n    },\n    {\n      \"type\": \"integer[][]\",\n      \"name\": \"keys\"\n    },\n    {\n      \"type\": \"integer[][]\",\n      \"name\": \"containedBoxes\"\n    },\n    {\n      \"type\": \"integer[]\",\n      \"name\": \"initialBoxes\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"integer\"\n  }\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
