{
  "questionId": "146",
  "questionFrontendId": "146",
  "boundTopicId": null,
  "title": "LRU Cache",
  "titleSlug": "lru-cache",
  "categoryTitle": "Algorithms",
  "content": "<p>Design and implement a data structure for <a href=\"https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU\" target=\"_blank\">Least Recently Used (LRU) cache</a>. It should support the following operations: <code>get</code> and <code>put</code>.</p>\r\n\r\n<p><code>get(key)</code> - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.<br />\r\n<code>put(key, value)</code> - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.</p>\r\n\r\n<p>The cache is initialized with a <strong>positive</strong> capacity.</p>\r\n\r\n<p><b>Follow up:</b><br />\r\nCould you do both operations in <b>O(1)</b> time complexity?</p>\r\n\r\n<p><b>Example:</b></p>\r\n\r\n<pre>\r\nLRUCache cache = new LRUCache( 2 /* capacity */ );\r\n\r\ncache.put(1, 1);\r\ncache.put(2, 2);\r\ncache.get(1);       // returns 1\r\ncache.put(3, 3);    // evicts key 2\r\ncache.get(2);       // returns -1 (not found)\r\ncache.put(4, 4);    // evicts key 1\r\ncache.get(1);       // returns -1 (not found)\r\ncache.get(3);       // returns 3\r\ncache.get(4);       // returns 4\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n",
  "isPaidOnly": false,
  "difficulty": "Medium",
  "likes": 4175,
  "dislikes": 176,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"LFU Cache\", \"titleSlug\": \"lfu-cache\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Design In-Memory File System\", \"titleSlug\": \"design-in-memory-file-system\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Design Compressed String Iterator\", \"titleSlug\": \"design-compressed-string-iterator\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
  "contributors": [],
  "topicTags": [
    {
      "name": "Design",
      "slug": "design"
    }
  ],
  "companyTagStats": "{\"1\": [{\"taggedByAdmin\": true, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 64}, {\"taggedByAdmin\": true, \"name\": \"Microsoft\", \"slug\": \"microsoft\", \"timesEncountered\": 23}, {\"taggedByAdmin\": true, \"name\": \"Bloomberg\", \"slug\": \"bloomberg\", \"timesEncountered\": 20}, {\"taggedByAdmin\": false, \"name\": \"Apple\", \"slug\": \"apple\", \"timesEncountered\": 15}, {\"taggedByAdmin\": true, \"name\": \"Facebook\", \"slug\": \"facebook\", \"timesEncountered\": 14}, {\"taggedByAdmin\": false, \"name\": \"Oracle\", \"slug\": \"oracle\", \"timesEncountered\": 10}, {\"taggedByAdmin\": true, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 7}, {\"taggedByAdmin\": false, \"name\": \"Twilio\", \"slug\": \"twilio\", \"timesEncountered\": 7}, {\"taggedByAdmin\": false, \"name\": \"Asana\", \"slug\": \"asana\", \"timesEncountered\": 7}, {\"taggedByAdmin\": true, \"name\": \"Uber\", \"slug\": \"uber\", \"timesEncountered\": 6}, {\"taggedByAdmin\": false, \"name\": \"Cruise Automation\", \"slug\": \"cruise-automation\", \"timesEncountered\": 5}, {\"taggedByAdmin\": false, \"name\": \"Two Sigma\", \"slug\": \"two-sigma\", \"timesEncountered\": 5}, {\"taggedByAdmin\": true, \"name\": \"Yahoo\", \"slug\": \"yahoo\", \"timesEncountered\": 5}, {\"taggedByAdmin\": false, \"name\": \"VMware\", \"slug\": \"vmware\", \"timesEncountered\": 4}, {\"taggedByAdmin\": false, \"name\": \"Yandex\", \"slug\": \"yandex\", \"timesEncountered\": 4}, {\"taggedByAdmin\": false, \"name\": \"Dropbox\", \"slug\": \"dropbox\", \"timesEncountered\": 4}, {\"taggedByAdmin\": false, \"name\": \"Expedia\", \"slug\": \"expedia\", \"timesEncountered\": 4}, {\"taggedByAdmin\": true, \"name\": \"Snapchat\", \"slug\": \"snapchat\", \"timesEncountered\": 3}, {\"taggedByAdmin\": false, \"name\": \"Salesforce\", \"slug\": \"salesforce\", \"timesEncountered\": 3}, {\"taggedByAdmin\": false, \"name\": \"Zillow\", \"slug\": \"zillow\", \"timesEncountered\": 3}, {\"taggedByAdmin\": false, \"name\": \"Spotify\", \"slug\": \"spotify\", \"timesEncountered\": 3}, {\"taggedByAdmin\": false, \"name\": \"ByteDance\", \"slug\": \"bytedance\", \"timesEncountered\": 3}, {\"taggedByAdmin\": false, \"name\": \"Cisco\", \"slug\": \"cisco\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"LinkedIn\", \"slug\": \"linkedin\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Citadel\", \"slug\": \"citadel\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Cloudera\", \"slug\": \"cloudera\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Walmart Labs\", \"slug\": \"walmart-labs\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Nutanix\", \"slug\": \"nutanix\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Morgan Stanley\", \"slug\": \"morgan-stanley\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"DoorDash\", \"slug\": \"doordash\", \"timesEncountered\": 2}], \"3\": [{\"taggedByAdmin\": true, \"name\": \"Palantir Technologies\", \"slug\": \"palantir-technologies\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Netflix\", \"slug\": \"netflix\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Affirm\", \"slug\": \"affirm\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Pinterest\", \"slug\": \"pinterest\", \"timesEncountered\": 2}, {\"taggedByAdmin\": true, \"name\": \"Twitter\", \"slug\": \"twitter\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"TripAdvisor\", \"slug\": \"tripadvisor\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"HBO\", \"slug\": \"hbo\", \"timesEncountered\": 2}, {\"taggedByAdmin\": true, \"name\": \"Zenefits\", \"slug\": \"zenefits\", \"timesEncountered\": 0}], \"2\": [{\"taggedByAdmin\": false, \"name\": \"eBay\", \"slug\": \"ebay\", \"timesEncountered\": 5}, {\"taggedByAdmin\": false, \"name\": \"Goldman Sachs\", \"slug\": \"goldman-sachs\", \"timesEncountered\": 5}, {\"taggedByAdmin\": false, \"name\": \"Adobe\", \"slug\": \"adobe\", \"timesEncountered\": 4}, {\"taggedByAdmin\": false, \"name\": \"SAP\", \"slug\": \"sap\", \"timesEncountered\": 4}, {\"taggedByAdmin\": false, \"name\": \"Alibaba\", \"slug\": \"alibaba\", \"timesEncountered\": 3}, {\"taggedByAdmin\": false, \"name\": \"Intuit\", \"slug\": \"intuit\", \"timesEncountered\": 3}, {\"taggedByAdmin\": false, \"name\": \"GoDaddy\", \"slug\": \"godaddy\", \"timesEncountered\": 3}, {\"taggedByAdmin\": false, \"name\": \"Nvidia\", \"slug\": \"nvidia\", \"timesEncountered\": 3}, {\"taggedByAdmin\": false, \"name\": \"Baidu\", \"slug\": \"baidu\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Wish\", \"slug\": \"wish\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Lyft\", \"slug\": \"lyft\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Paypal\", \"slug\": \"paypal\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Visa\", \"slug\": \"visa\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"JPMorgan\", \"slug\": \"jpmorgan\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Tesla\", \"slug\": \"tesla\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Twitch\", \"slug\": \"twitch\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Splunk\", \"slug\": \"splunk\", \"timesEncountered\": 2}]}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class LRUCache {\r\npublic:\r\n    LRUCache(int capacity) {\r\n        \r\n    }\r\n    \r\n    int get(int key) {\r\n        \r\n    }\r\n    \r\n    void put(int key, int value) {\r\n        \r\n    }\r\n};\r\n\r\n/**\r\n * Your LRUCache object will be instantiated and called as such:\r\n * LRUCache* obj = new LRUCache(capacity);\r\n * int param_1 = obj->get(key);\r\n * obj->put(key,value);\r\n */"
    },
    {
      "lang": "Java",
      "code": "class LRUCache {\n\n    public LRUCache(int capacity) {\n        \n    }\n    \n    public int get(int key) {\n        \n    }\n    \n    public void put(int key, int value) {\n        \n    }\n}\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * LRUCache obj = new LRUCache(capacity);\n * int param_1 = obj.get(key);\n * obj.put(key,value);\n */"
    },
    {
      "lang": "Python",
      "code": "class LRUCache(object):\n\n    def __init__(self, capacity):\n        \"\"\"\n        :type capacity: int\n        \"\"\"\n        \n\n    def get(self, key):\n        \"\"\"\n        :type key: int\n        :rtype: int\n        \"\"\"\n        \n\n    def put(self, key, value):\n        \"\"\"\n        :type key: int\n        :type value: int\n        :rtype: None\n        \"\"\"\n        \n\n\n# Your LRUCache object will be instantiated and called as such:\n# obj = LRUCache(capacity)\n# param_1 = obj.get(key)\n# obj.put(key,value)"
    },
    {
      "lang": "Python3",
      "code": "class LRUCache:\n\n    def __init__(self, capacity: int):\n        \n\n    def get(self, key: int) -> int:\n        \n\n    def put(self, key: int, value: int) -> None:\n        \n\n\n# Your LRUCache object will be instantiated and called as such:\n# obj = LRUCache(capacity)\n# param_1 = obj.get(key)\n# obj.put(key,value)"
    },
    {
      "lang": "C",
      "code": "\n\n\ntypedef struct {\n    \n} LRUCache;\n\n\nLRUCache* lRUCacheCreate(int capacity) {\n    \n}\n\nint lRUCacheGet(LRUCache* obj, int key) {\n  \n}\n\nvoid lRUCachePut(LRUCache* obj, int key, int value) {\n  \n}\n\nvoid lRUCacheFree(LRUCache* obj) {\n    \n}\n\n/**\n * Your LRUCache struct will be instantiated and called as such:\n * LRUCache* obj = lRUCacheCreate(capacity);\n * int param_1 = lRUCacheGet(obj, key);\n \n * lRUCachePut(obj, key, value);\n \n * lRUCacheFree(obj);\n*/"
    },
    {
      "lang": "C#",
      "code": "public class LRUCache {\r\n\r\n    public LRUCache(int capacity) {\r\n        \r\n    }\r\n    \r\n    public int Get(int key) {\r\n        \r\n    }\r\n    \r\n    public void Put(int key, int value) {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your LRUCache object will be instantiated and called as such:\r\n * LRUCache obj = new LRUCache(capacity);\r\n * int param_1 = obj.Get(key);\r\n * obj.Put(key,value);\r\n */"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number} capacity\n */\nvar LRUCache = function(capacity) {\n    \n};\n\n/** \n * @param {number} key\n * @return {number}\n */\nLRUCache.prototype.get = function(key) {\n    \n};\n\n/** \n * @param {number} key \n * @param {number} value\n * @return {void}\n */\nLRUCache.prototype.put = function(key, value) {\n    \n};\n\n/** \n * Your LRUCache object will be instantiated and called as such:\n * var obj = new LRUCache(capacity)\n * var param_1 = obj.get(key)\n * obj.put(key,value)\n */"
    },
    {
      "lang": "Ruby",
      "code": "class LRUCache\r\n\r\n=begin\r\n    :type capacity: Integer\r\n=end\r\n    def initialize(capacity)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    :type key: Integer\r\n    :rtype: Integer\r\n=end\r\n    def get(key)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    :type key: Integer\r\n    :type value: Integer\r\n    :rtype: Void\r\n=end\r\n    def put(key, value)\r\n        \r\n    end\r\n\r\n\r\nend\r\n\r\n# Your LRUCache object will be instantiated and called as such:\r\n# obj = LRUCache.new(capacity)\r\n# param_1 = obj.get(key)\r\n# obj.put(key, value)"
    },
    {
      "lang": "Swift",
      "code": "\r\nclass LRUCache {\r\n\r\n    init(_ capacity: Int) {\r\n        \r\n    }\r\n    \r\n    func get(_ key: Int) -> Int {\r\n        \r\n    }\r\n    \r\n    func put(_ key: Int, _ value: Int) {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your LRUCache object will be instantiated and called as such:\r\n * let obj = LRUCache(capacity)\r\n * let ret_1: Int = obj.get(key)\r\n * obj.put(key, value)\r\n */"
    },
    {
      "lang": "Go",
      "code": "type LRUCache struct {\r\n    \r\n}\r\n\r\n\r\nfunc Constructor(capacity int) LRUCache {\r\n    \r\n}\r\n\r\n\r\nfunc (this *LRUCache) Get(key int) int {\r\n    \r\n}\r\n\r\n\r\nfunc (this *LRUCache) Put(key int, value int)  {\r\n    \r\n}\r\n\r\n\r\n/**\r\n * Your LRUCache object will be instantiated and called as such:\r\n * obj := Constructor(capacity);\r\n * param_1 := obj.Get(key);\r\n * obj.Put(key,value);\r\n */"
    },
    {
      "lang": "Scala",
      "code": "class LRUCache(_capacity: Int) {\r\n\r\n    def get(key: Int): Int = {\r\n        \r\n    }\r\n\r\n    def put(key: Int, value: Int) {\r\n        \r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Your LRUCache object will be instantiated and called as such:\r\n * var obj = new LRUCache(capacity)\r\n * var param_1 = obj.get(key)\r\n * obj.put(key,value)\r\n */"
    },
    {
      "lang": "Kotlin",
      "code": "class LRUCache(capacity: Int) {\r\n\r\n    fun get(key: Int): Int {\r\n        \r\n    }\r\n\r\n    fun put(key: Int, value: Int) {\r\n        \r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Your LRUCache object will be instantiated and called as such:\r\n * var obj = LRUCache(capacity)\r\n * var param_1 = obj.get(key)\r\n * obj.put(key,value)\r\n */"
    },
    {
      "lang": "Rust",
      "code": "struct LRUCache {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl LRUCache {\n\n    fn new(capacity: i32) -> Self {\n        \n    }\n    \n    fn get(&self, key: i32) -> i32 {\n        \n    }\n    \n    fn put(&self, key: i32, value: i32) {\n        \n    }\n}\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * let obj = LRUCache::new(capacity);\n * let ret_1: i32 = obj.get(key);\n * obj.put(key, value);\n */"
    },
    {
      "lang": "PHP",
      "code": "class LRUCache {\n    /**\n     * @param Integer $capacity\n     */\n    function __construct($capacity) {\n        \n    }\n  \n    /**\n     * @param Integer $key\n     * @return Integer\n     */\n    function get($key) {\n        \n    }\n  \n    /**\n     * @param Integer $key\n     * @param Integer $value\n     * @return NULL\n     */\n    function put($key, $value) {\n        \n    }\n}\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * $obj = LRUCache($capacity);\n * $ret_1 = $obj->get($key);\n * $obj->put($key, $value);\n */"
    }
  ],
  "stats": "{\"totalAccepted\": \"402.6K\", \"totalSubmission\": \"1.4M\", \"totalAcceptedRaw\": 402593, \"totalSubmissionRaw\": 1389747, \"acRate\": \"29.0%\"}",
  "hints": [],
  "solution": {
    "id": "702",
    "canSeeDetail": true,
    "url": "/articles/lru-cache/",
    "content": "[TOC]\n\n## Solution\n\n---\n\n#### Approach 1: Ordered dictionary\n\n**Intuition**\n\nWe're asked to implement [the structure](https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU) \nwhich provides the following operations in $$\\mathcal{O}(1)$$ time :\n\n- Get the key / Check if the key exists \n\n- Put the key\n\n- Delete the first added key\n\nThe first two operations in $$\\mathcal{O}(1)$$ time are provided \nby the standard hashmap, and the last one - by linked list.\n\n> There is a structure called _ordered dictionary_, it combines \nbehind both hashmap and linked list. In Python this structure is called\n[_OrderedDict_](https://docs.python.org/3/library/collections.html#collections.OrderedDict)\nand in Java [_LinkedHashMap_](https://docs.oracle.com/javase/8/docs/api/java/util/LinkedHashMap.html).\n\nLet's use this structure here.\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/yfB5fJtx/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"yfB5fJtx\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$\\mathcal{O}(1)$$ both for `put`\nand `get` since all operations with\nordered dictionary : `get/in/set/move_to_end/popitem` \n(`get/containsKey/put/remove`) are done in a constant time.\n \n* Space complexity : $$\\mathcal{O}(capacity)$$ since the \nspace is used only for an ordered dictionary with at most `capacity + 1` elements.\n<br />\n<br />\n\n\n---\n#### Approach 2: Hashmap + DoubleLinkedList\n\n**Intuition**\n\nThis Java solution is an extended version of the \n[the article published on the Discuss forum](https://leetcode.com/problems/lru-cache/discuss/45911/Java-Hashtable-%2B-Double-linked-list-(with-a-touch-of-pseudo-nodes)).\n\nThe problem can be solved with a hashmap\nthat keeps track of the keys and its values in the double linked list. \nThat results in $$\\mathcal{O}(1)$$ time for `put` and `get` operations and\nallows to remove the first added node in $$\\mathcal{O}(1)$$ time as well.\n\n![compute](../Figures/146/structure.png)\n\nOne advantage of _double_ linked list is that the node can remove itself without other reference. \nIn addition, it takes constant time to add and remove nodes from the head or tail.\n\nOne particularity about the double linked list implemented here\nis that there are _pseudo head_ and _pseudo tail_ to mark the boundary, \nso that we don't need to check the `null` node during the update. \n\n![compute](../Figures/146/new_node.png)\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/s43zYbwr/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"s43zYbwr\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$\\mathcal{O}(1)$$ both for `put`\nand `get`.\n \n* Space complexity : $$\\mathcal{O}(capacity)$$ since the \nspace is used only for a hashmap and double linked list \nwith at most `capacity + 1` elements.\n\nAnalysis written by @[liaison](https://leetcode.com/liaison/)\nand @[andvary](https://leetcode.com/andvary/)",
    "contentTypeId": "107",
    "rating": {
      "id": "687",
      "count": 54,
      "average": 3.741,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "[\"LRUCache\",\"put\",\"put\",\"get\",\"put\",\"get\",\"put\",\"get\",\"get\",\"get\"]\n[[2],[1,1],[2,2],[1],[3,3],[2],[4,4],[1],[3],[4]]",
  "metaData": "{\r\n    \"classname\": \"LRUCache\",\r\n    \"maxbytesperline\": 200000,\r\n    \"constructor\": {\r\n        \"params\": [\r\n            {\r\n                \"type\": \"integer\",\r\n                \"name\": \"capacity\"\r\n            }\r\n        ]\r\n    },\r\n    \"methods\": [\r\n        {\r\n            \"name\" : \"get\",\r\n            \"params\": [\r\n                {\r\n                    \"type\": \"integer\",\r\n                    \"name\": \"key\"\r\n                }\r\n            ],\r\n            \"return\": {\r\n                \"type\": \"integer\"\r\n            }\r\n        },\r\n        {\r\n            \"name\" : \"put\",\r\n            \"params\": [\r\n                {\r\n                    \"type\": \"integer\",\r\n                    \"name\": \"key\"\r\n                },\r\n                {\r\n                    \"type\": \"integer\",\r\n                    \"name\": \"value\"\r\n                }\r\n            ],\r\n            \"return\": {\r\n                \"type\": \"void\"\r\n            }\r\n        }\r\n    ],\r\n    \"systemdesign\": true,\r\n    \"params\": [\r\n        {\r\n            \"name\": \"inputs\",\r\n            \"type\": \"integer[]\"\r\n        },\r\n        {\r\n            \"name\": \"inputs\",\r\n            \"type\": \"integer[]\"\r\n        }\r\n    ],\r\n    \"return\": {\r\n        \"type\": \"list<String>\",\r\n        \"dealloc\": true\r\n    }\r\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
