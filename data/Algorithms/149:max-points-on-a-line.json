{
  "questionId": "149",
  "questionFrontendId": "149",
  "boundTopicId": null,
  "title": "Max Points on a Line",
  "titleSlug": "max-points-on-a-line",
  "categoryTitle": "Algorithms",
  "content": "<p>Given <em>n</em> points on a 2D plane, find the maximum number of points that lie on the same straight line.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [[1,1],[2,2],[3,3]]\r\n<strong>Output:</strong> 3\r\n<strong>Explanation:</strong>\r\n^\r\n|\r\n| &nbsp; &nbsp; &nbsp; &nbsp;o\r\n| &nbsp; &nbsp; o\r\n| &nbsp;o &nbsp;\r\n+-------------&gt;\r\n0 &nbsp;1 &nbsp;2 &nbsp;3  4\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]\r\n<strong>Output:</strong> 4\r\n<strong>Explanation:</strong>\r\n^\r\n|\r\n|  o\r\n| &nbsp;&nbsp;&nbsp;&nbsp;o&nbsp;&nbsp;      o\r\n| &nbsp;&nbsp;&nbsp;&nbsp;   o\r\n| &nbsp;o &nbsp;      o\r\n+-------------------&gt;\r\n0 &nbsp;1 &nbsp;2 &nbsp;3 &nbsp;4 &nbsp;5 &nbsp;6\r\n</pre>\r\n\r\n<p><strong>NOTE:</strong>&nbsp;input types have been changed on April 15, 2019. Please reset to default code definition to get new method signature.</p>\r\n",
  "isPaidOnly": false,
  "difficulty": "Hard",
  "likes": 643,
  "dislikes": 1626,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"Line Reflection\", \"titleSlug\": \"line-reflection\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
  "contributors": [],
  "topicTags": [
    {
      "name": "Hash Table",
      "slug": "hash-table"
    },
    {
      "name": "Math",
      "slug": "math"
    }
  ],
  "companyTagStats": "{\"1\": [{\"taggedByAdmin\": true, \"name\": \"LinkedIn\", \"slug\": \"linkedin\", \"timesEncountered\": 5}, {\"taggedByAdmin\": false, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 3}, {\"taggedByAdmin\": false, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 3}, {\"taggedByAdmin\": true, \"name\": \"Apple\", \"slug\": \"apple\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Uber\", \"slug\": \"uber\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Bloomberg\", \"slug\": \"bloomberg\", \"timesEncountered\": 2}], \"3\": [{\"taggedByAdmin\": false, \"name\": \"Lyft\", \"slug\": \"lyft\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Alibaba\", \"slug\": \"alibaba\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Microsoft\", \"slug\": \"microsoft\", \"timesEncountered\": 2}, {\"taggedByAdmin\": true, \"name\": \"Twitter\", \"slug\": \"twitter\", \"timesEncountered\": 0}], \"2\": [{\"taggedByAdmin\": false, \"name\": \"TripAdvisor\", \"slug\": \"tripadvisor\", \"timesEncountered\": 3}]}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\r\npublic:\r\n    int maxPoints(vector<vector<int>>& points) {\r\n        \r\n    }\r\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int maxPoints(int[][] points) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def maxPoints(self, points):\n        \"\"\"\n        :type points: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def maxPoints(self, points: List[List[int]]) -> int:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nint maxPoints(int** points, int pointsSize, int* pointsColSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\r\n    public int MaxPoints(int[][] points) {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number[][]} points\n * @return {number}\n */\nvar maxPoints = function(points) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer[][]} points\r\n# @return {Integer}\r\ndef max_points(points)\r\n    \r\nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\r\n    func maxPoints(_ points: [[Int]]) -> Int {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Go",
      "code": "func maxPoints(points [][]int) int {\r\n    \r\n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\r\n    def maxPoints(points: Array[Array[Int]]): Int = {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\r\n    fun maxPoints(points: Array<IntArray>): Int {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn max_points(points: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer[][] $points\n     * @return Integer\n     */\n    function maxPoints($points) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"137.8K\", \"totalSubmission\": \"840.5K\", \"totalAcceptedRaw\": 137760, \"totalSubmissionRaw\": 840518, \"acRate\": \"16.4%\"}",
  "hints": [],
  "solution": {
    "id": "678",
    "canSeeDetail": true,
    "url": "/articles/max-points-on-a-line/",
    "content": "[TOC]\n\n## Solution\n\n---\n\n#### Approach 1: Enumeration\n\nLet's simplify the problem and search the maximum number of points\non a line passing through the point `i`. \n\nOne could immediately notice that it's interesting to consider only\nthe next points `i + 1 .. N - 1` because the maximum number of points\ncontaining, for example, the point `i - 2` was already found\nduring the search of the maximum number of points\non a line passing through the point `i - 2`. \n\n<img src=\"../Figures/149/149_lines_i.png\" width=\"500\">\n\nThe idea is very simple : draw the lines \npassing through the point `i` and each of the next points.\nSave these lines is a hash table with a counter `2` = two points\non this line.  \nLet's imagine now that points `i < i + k < i + l` are on the same line.\nThen drawing a line through `i` and `i + l` one would discover that this \nline is already tracked and hence one has to update a counter \nof points on this line `count++`.\n\n>How to save a line? \n\nIf the line is horizontal, i.e. `y = c`,\none could use this constant `c` as a line key in a hash table of horizontal lines.\nLet's now take into account that all lines are passing through the same point `i`\n(kudos do to [@FTWawe](https://leetcode.com/FTWawe/)).\nHence there is no need to keep `c` in a memory and one could just count\nhorizontal lines.\n\nThe other lines could be represented as `x = slope * y + c`. \nAgain, one doesn't need in `c` because all lines are passing through the same point \n`i` and `slope` could be used as a line key. \n\nThe equation for the line passing through two points `1` and `2` \n[could be written through their coordinates](https://en.wikipedia.org/wiki/Line_(geometry)#On_the_Cartesian_plane)\nas\n\n$$\n\\frac{x - x_1}{x_1 - x_2} = \\frac{y - y_1}{y_1 - y_2}\n$$\n\nthat for the representation $$x = slope \\times y + c$$ means \n\n$$\nslope = \\frac{x_1 - x_2}{y_1 - y_2}\n$$\n\nNow everything is ready to write down the algorithm:\n\n* Initiate the maximum number of points `max_count = 1`.\n* Iterate over all points `i` from `0` to `N - 2`.\n    * For each point `i` find a maximum number of points \n    `max_count_i`\n    on a line passing through the point `i` :\n        * Initiate the maximum number of points \n        on a line passing through the point `i` : `count = 1`.\n        * Iterate over next points `j` from `i + 1` to `N - 1`.\n            * If `j` is a duplicate of `i`, \n            update a number of duplicates for point `i`.\n            * If not:\n                * Save the line passing through the points `i` and `j`.\n                * Update `count` at each step.\n        * Return `max_count_i = count + duplicates`.\n            \n    * Update the result `max_count = max(max_count, max_count_i)`\n        \n!?!../Documents/149_LIS.json:1000,581!?!\n\n<iframe src=\"https://leetcode.com/playground/EZiRbHij/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"EZiRbHij\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$\\mathcal{O}(N^2)$$ since one draws \nnot more than `N - 1` lines passing through the point `0`,\nnot more than `N - 2` lines for the point `1`, and\nthe only one line for the point `N - 2`. That results in\n`(N - 1) + (N - 2) + .. + 1 = N(N - 1)/2` operations, _i.e._ $$\\mathcal{O}(N^2)$$ time complexity.\n* Space complexity : $$\\mathcal{O}(N)$$ to track down \nnot more than `N - 1` lines.\n\nAnalysis written by @[liaison](https://leetcode.com/liaison/)\nand @[andvary](https://leetcode.com/andvary/)",
    "contentTypeId": "107",
    "rating": {
      "id": "664",
      "count": 20,
      "average": 3.7,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "[[1,1],[2,2],[3,3]]",
  "metaData": "{\r\n  \"name\": \"maxPoints\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"points\",\r\n      \"type\": \"integer[][]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
