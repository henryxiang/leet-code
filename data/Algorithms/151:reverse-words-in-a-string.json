{
  "questionId": "151",
  "questionFrontendId": "151",
  "boundTopicId": null,
  "title": "Reverse Words in a String",
  "titleSlug": "reverse-words-in-a-string",
  "categoryTitle": "Algorithms",
  "content": "<p>Given an input string, reverse the string word by word.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> &quot;<code>the sky is blue</code>&quot;\r\n<strong>Output:&nbsp;</strong>&quot;<code>blue is sky the</code>&quot;\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> &quot; &nbsp;hello world! &nbsp;&quot;\r\n<strong>Output:&nbsp;</strong>&quot;world! hello&quot;\r\n<strong>Explanation:</strong> Your reversed string should not contain leading or trailing spaces.\r\n</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> &quot;a good &nbsp; example&quot;\r\n<strong>Output:&nbsp;</strong>&quot;example good a&quot;\r\n<strong>Explanation:</strong> You need to reduce multiple spaces between two words to a single space in the reversed string.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>A word is defined as a sequence of non-space characters.</li>\r\n\t<li>Input string may contain leading or trailing spaces. However, your reversed string should not contain leading or trailing spaces.</li>\r\n\t<li>You need to reduce multiple spaces between two words to a single space in the reversed string.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Follow up:</strong></p>\r\n\r\n<p>For C programmers, try to solve it <em>in-place</em> in <em>O</em>(1) extra space.</p>",
  "isPaidOnly": false,
  "difficulty": "Medium",
  "likes": 746,
  "dislikes": 2547,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"Reverse Words in a String II\", \"titleSlug\": \"reverse-words-in-a-string-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
  "contributors": [],
  "topicTags": [
    {
      "name": "String",
      "slug": "string"
    }
  ],
  "companyTagStats": "{\"1\": [{\"taggedByAdmin\": true, \"name\": \"Microsoft\", \"slug\": \"microsoft\", \"timesEncountered\": 15}, {\"taggedByAdmin\": false, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 4}, {\"taggedByAdmin\": false, \"name\": \"Facebook\", \"slug\": \"facebook\", \"timesEncountered\": 2}], \"3\": [{\"taggedByAdmin\": true, \"name\": \"Bloomberg\", \"slug\": \"bloomberg\", \"timesEncountered\": 4}, {\"taggedByAdmin\": false, \"name\": \"Paypal\", \"slug\": \"paypal\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Yandex\", \"slug\": \"yandex\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Zillow\", \"slug\": \"zillow\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Alibaba\", \"slug\": \"alibaba\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Walmart Labs\", \"slug\": \"walmart-labs\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Nvidia\", \"slug\": \"nvidia\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Huawei\", \"slug\": \"huawei\", \"timesEncountered\": 2}, {\"taggedByAdmin\": true, \"name\": \"Snapchat\", \"slug\": \"snapchat\", \"timesEncountered\": 0}, {\"taggedByAdmin\": true, \"name\": \"Yelp\", \"slug\": \"yelp\", \"timesEncountered\": 0}], \"2\": [{\"taggedByAdmin\": false, \"name\": \"Salesforce\", \"slug\": \"salesforce\", \"timesEncountered\": 3}, {\"taggedByAdmin\": true, \"name\": \"Apple\", \"slug\": \"apple\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Cisco\", \"slug\": \"cisco\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Citadel\", \"slug\": \"citadel\", \"timesEncountered\": 2}]}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    string reverseWords(string s) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public String reverseWords(String s) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def reverseWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def reverseWords(self, s: str) -> str:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nchar * reverseWords(char * s){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public string ReverseWords(string s) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {string} s\n * @return {string}\n */\nvar reverseWords = function(s) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {String} s\n# @return {String}\ndef reverse_words(s)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func reverseWords(_ s: String) -> String {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func reverseWords(s string) string {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def reverseWords(s: String): String = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun reverseWords(s: String): String {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn reverse_words(s: String) -> String {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function reverseWords($s) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"337.1K\", \"totalSubmission\": \"1.8M\", \"totalAcceptedRaw\": 337117, \"totalSubmissionRaw\": 1798221, \"acRate\": \"18.7%\"}",
  "hints": [],
  "solution": {
    "id": "828",
    "canSeeDetail": true,
    "url": "/articles/reverse-words-in-a-string/",
    "content": "[TOC]\r\n\r\n## Solution\r\n\r\n--- \r\n\r\n#### Overview\r\n\r\nDifferent interviewers would probably expect different approaches for \r\nthis problem. The holy war question is to use or not use built-in methods.\r\nAs you may notice, most of design problems on Leetcode are voted down \r\nbecause of two main reasons:\r\n\r\n1. There was no approach with built-in methods / data structures in the article.\r\n\r\n2. One of the approaches in the article did contain built-in methods / data structures.\r\n\r\nSeems like the community has no common opinion yet, and \r\nin practice that means an unpredictable interview experience for some\r\nsort of problems. \r\n \r\nHere we consider three different solutions \r\nof linear time and space complexity:\r\n\r\n1. Use built-in split and reverse.\r\nBenefits: in-place in Python (in-place, but linear space complexity!) \r\nand the simplest one to write.  \r\n\r\n2. The most straightforward one. Trim the whitespaces, reverse the\r\nwhole string and then reverse each word.  \r\nBenefits: could be done in-place for the languages with mutable strings.\r\n\r\n3. Two passes approach with a deque. \r\nMove along the string, word by word, and \r\npush each new word in front of the deque. \r\nConvert the deque back into string.\r\nBenefits: two passes.\r\n\r\n#### Approach 1: Built-in Split + Reverse\r\n\r\n![fig](../Figures/151/fun2.png)\r\n\r\n**Implementation**\r\n\r\n<iframe src=\"https://leetcode.com/playground/HdsGsvyp/shared\" frameBorder=\"0\" width=\"100%\" height=\"225\" name=\"HdsGsvyp\"></iframe>\r\n\r\n**Complexity Analysis**\r\n\r\n* Time complexity: $$\\mathcal{O}(N)$$, where N is a number of characters\r\nin the input string.\r\n\r\n* Space complexity: $$\\mathcal{O}(N)$$, to store the result of split\r\nby spaces.\r\n\r\n<br /> \r\n<br />\r\n\r\n\r\n---\r\n#### Approach 2: Reverse the Whole String and Then Reverse Each Word\r\n\r\nThe implementation of this approach will be different for \r\nJava/Python (= immutable strings) and C++ (= mutable strings). \r\n\r\nIn the case of immutable strings one has first to convert string into\r\nmutable data structure, and hence it makes sense to trim all spaces during\r\nthat conversion. \r\n\r\n![fig](../Figures/151/reverse_whole2.png)\r\n\r\nIn the case of _mutable_ strings, there is no need to allocate \r\nan additional data structure, one could make all job done in-place.\r\nIn such a case it makes sense to reverse words and trim spaces at the \r\nsame time.\r\n\r\n![fig](../Figures/151/mutable2.png)\r\n\r\n**Implementation**\r\n\r\n<iframe src=\"https://leetcode.com/playground/6yjFDgyw/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"6yjFDgyw\"></iframe>\r\n\r\n**Complexity Analysis**\r\n\r\n* Time complexity: $$\\mathcal{O}(N)$$.\r\n\r\n* Space complexity: $$\\mathcal{O}(N)$$.\r\n<br /> \r\n<br />\r\n\r\n\r\n---\r\n#### Approach 3: Deque of Words\r\n\r\n![fig](../Figures/151/deque2.png)\r\n\r\n**Implementation**\r\n\r\n<iframe src=\"https://leetcode.com/playground/9WRd52G7/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"9WRd52G7\"></iframe>\r\n\r\n**Complexity Analysis**\r\n\r\n* Time complexity: $$\\mathcal{O}(N)$$.\r\n\r\n* Space complexity: $$\\mathcal{O}(N)$$.\r\n\r\n\r\nAnalysis written by @[liaison](https://leetcode.com/liaison/)\r\nand @[andvary](https://leetcode.com/andvary/)",
    "contentTypeId": "107",
    "rating": {
      "id": "792",
      "count": 16,
      "average": 4.938,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "\"the sky is blue\"",
  "metaData": "{\r\n  \"name\": \"reverseWords\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"s\",\r\n      \"type\": \"string\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"string\"\r\n  }\r\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
