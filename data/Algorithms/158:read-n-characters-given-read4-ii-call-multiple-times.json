{
  "questionId": "158",
  "questionFrontendId": "158",
  "boundTopicId": null,
  "title": "Read N Characters Given Read4 II - Call multiple times",
  "titleSlug": "read-n-characters-given-read4-ii-call-multiple-times",
  "categoryTitle": "Algorithms",
  "content": "<p>Given a file and assume that you can only read the file using a given method&nbsp;<code>read4</code>, implement a method <code>read</code> to read <em>n</em> characters. <strong>Your method <code>read</code> may be called multiple times.</strong></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Method read4: </b></p>\r\n\r\n<p>The API&nbsp;<code>read4</code> reads 4 consecutive characters from the file, then writes those characters into the buffer array <code>buf</code>.</p>\r\n\r\n<p>The return value is the number of actual characters read.</p>\r\n\r\n<p>Note that&nbsp;<code>read4()</code> has its own file pointer, much like <code>FILE *fp</code> in C.</p>\r\n\r\n<p><b>Definition of read4:</b></p>\r\n\r\n<pre>\r\n    Parameter:  char[] buf\r\n    Returns:    int\r\n\r\nNote: buf[] is destination not source, the results from read4 will be copied to buf[]\r\n</pre>\r\n\r\n<p>Below is a high level example of how <code>read4</code> works:</p>\r\n\r\n<pre>\r\n<code>File file(&quot;abcdefghijk&quot;); // File is &quot;abcdefghijk&quot;, initially file pointer (fp) points to &#39;a&#39;\r\nchar[] buf = new char[4]; // Create buffer with enough space to store characters\r\nread4(buf); // read4 returns 4. Now buf = &quot;abcd&quot;, fp points to &#39;e&#39;\r\nread4(buf); // read4 returns 4. Now buf = &quot;efgh&quot;, fp points to &#39;i&#39;\r\nread4(buf); // read4 returns 3. Now buf = &quot;ijk&quot;, fp points to end of file</code>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Method read:</strong></p>\r\n\r\n<p>By using the <code>read4</code> method, implement the method&nbsp;<code>read</code> that reads <i>n</i> characters from the file and store it in the&nbsp;buffer array&nbsp;<code>buf</code>. Consider that you <strong>cannot</strong> manipulate the file directly.</p>\r\n\r\n<p>The return value is the number of actual characters read.</p>\r\n\r\n<p><b>Definition of read: </b></p>\r\n\r\n<pre>\r\n    Parameters:\tchar[] buf, int n\r\n    Returns:\tint\r\n\r\nNote: buf[] is destination not source, you will need to write the results to buf[]\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\nFile file(&quot;abc&quot;);\r\nSolution sol;\r\n// Assume buf is allocated and guaranteed to have enough space for storing all characters from the file.\r\nsol.read(buf, 1); // After calling your read method, buf should contain &quot;a&quot;. We read a total of 1 character from the file, so return 1.\r\nsol.read(buf, 2); // Now buf should contain &quot;bc&quot;. We read a total of 2 characters from the file, so return 2.\r\nsol.read(buf, 1); // We have reached the end of file, no more characters can be read. So return 0.\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\nFile file(&quot;abc&quot;);\r\nSolution sol;\r\nsol.read(buf, 4); // After calling your read method, buf should contain &quot;abc&quot;. We read a total of 3 characters from the file, so return 3.\r\nsol.read(buf, 1); // We have reached the end of file, no more characters can be read. So return 0.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li>Consider that you <strong>cannot</strong> manipulate the file directly, the file is only accesible for <code>read4</code> but&nbsp;<strong>not</strong> for <code>read</code>.</li>\r\n\t<li>The <code>read</code> function may be called <strong>multiple times</strong>.</li>\r\n\t<li>Please remember to <b>RESET</b> your class variables declared in Solution, as static/class variables are <b>persisted across multiple test cases</b>. Please see <a href=\"https://leetcode.com/faq/\" target=\"_blank\">here</a> for more details.</li>\r\n\t<li>You may assume the destination buffer array,&nbsp;<code>buf</code>,&nbsp;is guaranteed to have enough&nbsp;space for storing&nbsp;<em>n</em>&nbsp;characters.</li>\r\n\t<li>It is guaranteed that in a given test case the same buffer <code>buf</code> is called by <code>read</code>.</li>\r\n</ol>\r\n",
  "isPaidOnly": true,
  "difficulty": "Hard",
  "likes": 388,
  "dislikes": 891,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"Read N Characters Given Read4\", \"titleSlug\": \"read-n-characters-given-read4\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
  "contributors": [],
  "topicTags": [
    {
      "name": "String",
      "slug": "string"
    }
  ],
  "companyTagStats": "{\"1\": [{\"taggedByAdmin\": true, \"name\": \"Facebook\", \"slug\": \"facebook\", \"timesEncountered\": 18}, {\"taggedByAdmin\": false, \"name\": \"Lyft\", \"slug\": \"lyft\", \"timesEncountered\": 7}, {\"taggedByAdmin\": true, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 4}, {\"taggedByAdmin\": false, \"name\": \"Microsoft\", \"slug\": \"microsoft\", \"timesEncountered\": 3}], \"2\": [{\"taggedByAdmin\": false, \"name\": \"Uber\", \"slug\": \"uber\", \"timesEncountered\": 2}], \"3\": [{\"taggedByAdmin\": false, \"name\": \"Pinterest\", \"slug\": \"pinterest\", \"timesEncountered\": 3}, {\"taggedByAdmin\": true, \"name\": \"Bloomberg\", \"slug\": \"bloomberg\", \"timesEncountered\": 0}]}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "// Forward declaration of the read4 API.\nint read4(char *buf);\n\nclass Solution {\npublic:\n    /**\n     * @param buf Destination buffer\n     * @param n   Number of characters to read\n     * @return    The number of actual characters read\n     */\n    int read(char *buf, int n) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "/**\n * The read4 API is defined in the parent class Reader4.\n *     int read4(char[] buf); \n */\npublic class Solution extends Reader4 {\n    /**\n     * @param buf Destination buffer\n     * @param n   Number of characters to read\n     * @return    The number of actual characters read\n     */\n    public int read(char[] buf, int n) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "\"\"\"\nThe read4 API is already defined for you.\n\n    @param buf, a list of characters\n    @return an integer\n    def read4(buf):\n\n# Below is an example of how the read4 API can be called.\nfile = File(\"abcdefghijk\") # File is \"abcdefghijk\", initially file pointer (fp) points to 'a'\nbuf = [' '] * 4 # Create buffer with enough space to store characters\nread4(buf) # read4 returns 4. Now buf = ['a','b','c','d'], fp points to 'e'\nread4(buf) # read4 returns 4. Now buf = ['e','f','g','h'], fp points to 'i'\nread4(buf) # read4 returns 3. Now buf = ['i','j','k',...], fp points to end of file\n\"\"\"\nclass Solution(object):\n    def read(self, buf, n):\n        \"\"\"\n        :type buf: Destination buffer (List[str])\n        :type n: Number of characters to read (int)\n        :rtype: The number of actual characters read (int)\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "\"\"\"\nThe read4 API is already defined for you.\n\n    @param buf, a list of characters\n    @return an integer\n    def read4(buf):\n\n# Below is an example of how the read4 API can be called.\nfile = File(\"abcdefghijk\") # File is \"abcdefghijk\", initially file pointer (fp) points to 'a'\nbuf = [' '] * 4 # Create buffer with enough space to store characters\nread4(buf) # read4 returns 4. Now buf = ['a','b','c','d'], fp points to 'e'\nread4(buf) # read4 returns 4. Now buf = ['e','f','g','h'], fp points to 'i'\nread4(buf) # read4 returns 3. Now buf = ['i','j','k',...], fp points to end of file\n\"\"\"\nclass Solution:\n    def read(self, buf, n):\n        \"\"\"\n        :type buf: Destination buffer (List[str])\n        :type n: Number of characters to read (int)\n        :rtype: The number of actual characters read (int)\n        \"\"\"\n        "
    },
    {
      "lang": "C#",
      "code": "/**\n * The Read4 API is defined in the parent class Reader4.\n *     int Read4(char[] buf);\n */\npublic class Solution : Reader4 {\n    /**\n     * @param buf Destination buffer\n     * @param n   Number of characters to read\n     * @return    The number of actual characters read\n     */\n    public int Read(char[] buf, int n) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * Definition for read4()\n * \n * @param {character[]} buf Destination buffer\n * @return {number} The number of characters read\n * read4 = function(buf) {\n *     ...\n * };\n */\n\n/**\n * @param {function} read4()\n * @return {function}\n */\nvar solution = function(read4) {\n    /**\n     * @param {character[]} buf Destination buffer\n     * @param {number} n Number of characters to read\n     * @return {number} The number of actual characters read\n     */\n    return function(buf, n) {\n        \n    };\n};"
    },
    {
      "lang": "Go",
      "code": "/**\n * The read4 API is already defined for you.\n *\n *     read4 := func(buf []byte) int\n *\n * // Below is an example of how the read4 API can be called.\n * file := File(\"abcdefghijk\") // File is \"abcdefghijk\", initially file pointer (fp) points to 'a'\n * buf := make([]byte, 4) // Create buffer with enough space to store characters\n * read4(buf) // read4 returns 4. Now buf = ['a','b','c','d'], fp points to 'e'\n * read4(buf) // read4 returns 4. Now buf = ['e','f','g','h'], fp points to 'i'\n * read4(buf) // read4 returns 3. Now buf = ['i','j','k',...], fp points to end of file\n */\nvar solution = func(read4 func([]byte) int) func([]byte, int) int {\n    // implement read below.\n    return func(buf []byte, n int) int {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"82.2K\", \"totalSubmission\": \"276.6K\", \"totalAcceptedRaw\": 82245, \"totalSubmissionRaw\": 276637, \"acRate\": \"29.7%\"}",
  "hints": [],
  "solution": null,
  "status": null,
  "sampleTestCase": "\"abc\"\n[1,2,1]",
  "metaData": "{\n  \"name\": \"read\",\n  \"params\": [\n    {\n      \"name\": \"s\",\n      \"type\": \"string\"\n    },\n    {\n      \"name\": \"inputs\",\n      \"type\": \"integer[]\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"list<string>\",\n    \"dealloc\": true\n  },\n  \"languages\": [\n    \"cpp\",\n    \"java\",\n    \"python\",\n    \"csharp\",\n    \"javascript\",\n    \"golang\",\n    \"python3\"\n  ],\n  \"manual\": true\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
