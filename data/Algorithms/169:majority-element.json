{
  "questionId": "169",
  "questionFrontendId": "169",
  "boundTopicId": null,
  "title": "Majority Element",
  "titleSlug": "majority-element",
  "categoryTitle": "Algorithms",
  "content": "<p>Given an array of size <i>n</i>, find the majority element. The majority element is the element that appears <b>more than</b> <code>&lfloor; n/2 &rfloor;</code> times.</p>\r\n\r\n<p>You may assume that the array is non-empty and the majority element always exist in the array.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [3,2,3]\r\n<strong>Output:</strong> 3</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [2,2,1,1,1,2,2]\r\n<strong>Output:</strong> 2\r\n</pre>\r\n",
  "isPaidOnly": false,
  "difficulty": "Easy",
  "likes": 2252,
  "dislikes": 191,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"Majority Element II\", \"titleSlug\": \"majority-element-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Check If a Number Is Majority Element in a Sorted Array\", \"titleSlug\": \"check-if-a-number-is-majority-element-in-a-sorted-array\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
  "contributors": [
    {
      "username": "shtian",
      "profileUrl": "/shtian/",
      "avatarUrl": "https://www.gravatar.com/avatar/258979a79ee1a54a2a14ce2db5389ca1.png?s=200"
    }
  ],
  "topicTags": [
    {
      "name": "Array",
      "slug": "array"
    },
    {
      "name": "Divide and Conquer",
      "slug": "divide-and-conquer"
    },
    {
      "name": "Bit Manipulation",
      "slug": "bit-manipulation"
    }
  ],
  "companyTagStats": "{\"1\": [{\"taggedByAdmin\": false, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 6}, {\"taggedByAdmin\": false, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Apple\", \"slug\": \"apple\", \"timesEncountered\": 2}], \"3\": [{\"taggedByAdmin\": false, \"name\": \"Tencent\", \"slug\": \"tencent\", \"timesEncountered\": 3}, {\"taggedByAdmin\": false, \"name\": \"NetEase\", \"slug\": \"netease\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Yahoo\", \"slug\": \"yahoo\", \"timesEncountered\": 2}, {\"taggedByAdmin\": true, \"name\": \"Adobe\", \"slug\": \"adobe\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Twitter\", \"slug\": \"twitter\", \"timesEncountered\": 2}, {\"taggedByAdmin\": true, \"name\": \"Zenefits\", \"slug\": \"zenefits\", \"timesEncountered\": 0}], \"2\": [{\"taggedByAdmin\": false, \"name\": \"Snapchat\", \"slug\": \"snapchat\", \"timesEncountered\": 2}]}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    int majorityElement(vector<int>& nums) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int majorityElement(int[] nums) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def majorityElement(self, nums: List[int]) -> int:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nint majorityElement(int* nums, int numsSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public int MajorityElement(int[] nums) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar majorityElement = function(nums) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef majority_element(nums)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func majorityElement(_ nums: [Int]) -> Int {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func majorityElement(nums []int) int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def majorityElement(nums: Array[Int]): Int = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun majorityElement(nums: IntArray): Int {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn majority_element(nums: Vec<i32>) -> i32 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function majorityElement($nums) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"477.2K\", \"totalSubmission\": \"864.6K\", \"totalAcceptedRaw\": 477226, \"totalSubmissionRaw\": 864618, \"acRate\": \"55.2%\"}",
  "hints": [],
  "solution": {
    "id": "293",
    "canSeeDetail": true,
    "url": "/articles/majority-element/",
    "content": "[TOC]\n\n#### Approach 1: Brute Force\n\n**Intuition**\n\nWe can exhaust the search space in quadratic time by checking whether each\nelement is the majority element.\n\n**Algorithm**\n\nThe brute force algorithm iterates over the array, and then iterates again\nfor each number to count its occurrences. As soon as a number is found to\nhave appeared more than any other can possibly have appeared, return it.\n\n<iframe src=\"https://leetcode.com/playground/TXAGvfu4/shared\" frameBorder=\"0\" width=\"100%\" height=\"412\" name=\"TXAGvfu4\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n^2)$$\n\n    The brute force algorithm contains two nested `for` loops that each run\n    for $$n$$ iterations, adding up to quadratic time complexity.\n\n* Space complexity : $$O(1)$$\n\n    The brute force solution does not allocate additional space proportional\n    to the input size.\n\n<br />\n\n---\n#### Approach 2: HashMap\n\n**Intuition**\n\nWe know that the majority element occurs more than $$\\lfloor \\dfrac{n}{2} \\rfloor$$\ntimes, and a `HashMap` allows us to count element occurrences efficiently.\n\n**Algorithm**\n\nWe can use a `HashMap` that maps elements to counts in order to count\noccurrences in linear time by looping over `nums`. Then, we simply return the\nkey with maximum value.\n\n<iframe src=\"https://leetcode.com/playground/8UD2i82e/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"8UD2i82e\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n)$$\n\n    We iterate over `nums` once and make a constant time `HashMap` insertion\n    on each iteration. Therefore, the algorithm runs in $$O(n)$$ time.\n\n* Space complexity : $$O(n)$$\n\n    At most, the `HashMap` can contain $$n - \\lfloor \\dfrac{n}{2} \\rfloor$$\n    associations, so it occupies $$O(n)$$ space. This is because an arbitrary\n    array of length $$n$$ can contain $$n$$ distinct values, but `nums` is\n    guaranteed to contain a majority element, which will occupy (at minimum)\n    $$\\lfloor \\dfrac{n}{2} \\rfloor + 1$$ array indices. Therefore,\n    $$n - (\\lfloor \\dfrac{n}{2} \\rfloor + 1)$$ indices can be occupied by\n    distinct, non-majority elements (plus 1 for the majority element itself),\n    leaving us with (at most) $$n - \\lfloor \\dfrac{n}{2} \\rfloor$$ distinct\n    elements.\n\n<br />\n\n---\n#### Approach 3: Sorting\n\n**Intuition**\n\nIf the elements are sorted in monotonically increasing (or decreasing) order,\nthe majority element can be found at index\n$$\\lfloor \\dfrac{n}{2} \\rfloor$$ (and $$\\lfloor \\dfrac{n}{2} \\rfloor + 1$$,\nincidentally, if $$n$$ is even).\n\n**Algorithm**\n\nFor this algorithm, we simply do exactly what is described: sort `nums`, and\nreturn the element in question. To see why this will always return the\nmajority element (given that the array has one), consider the figure below\n(the top example is for an odd-length array and the bottom is for an\neven-length array):\n\n\n![Sorting middle index overlap](../Figures/169/sorting.png)\n{:align=\"center\"}\n\nFor each example, the line below the array denotes the range of indices that\nare covered by a majority element that happens to be the array minimum. As\nyou might expect, the line above the array is similar, but for the case where\nthe majority element is also the array maximum. In all other cases, this line\nwill lie somewhere between these two, but notice that even in these two most\nextreme cases, they overlap at index $$\\lfloor \\dfrac{n}{2} \\rfloor$$ for both\neven- and odd-length arrays. Therefore, no matter what value the majority\nelement has in relation to the rest of the array, returning the value at\n$$\\lfloor \\dfrac{n}{2} \\rfloor$$ will never be wrong.\n\n<iframe src=\"https://leetcode.com/playground/863hrGWL/shared\" frameBorder=\"0\" width=\"100%\" height=\"157\" name=\"863hrGWL\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(nlgn)$$\n\n    Sorting the array costs $$O(nlgn)$$ time in Python and Java, so it\n    dominates the overall runtime.\n\n* Space complexity : $$O(1)$$ or ($$O(n)$$)\n\n    We sorted `nums` in place here - if that is not allowed, then we must\n    spend linear additional space on a copy of `nums` and sort the copy\n    instead.\n\n<br />\n\n---\n#### Approach 4: Randomization\n\n**Intuition**\n\nBecause more than $$\\lfloor \\dfrac{n}{2} \\rfloor$$ array indices are occupied\nby the majority element, a random array index is likely to contain the\nmajority element.\n\n**Algorithm**\n\nBecause a given index is likely to have the majority element, we can just\nselect a random index, check whether its value is the majority element,\nreturn if it is, and repeat if it is not. The algorithm is verifiably correct\nbecause we ensure that the randomly chosen value is the majority element\nbefore ever returning.\n\n<iframe src=\"https://leetcode.com/playground/hUXRqk6X/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"hUXRqk6X\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(\\infty)$$\n\n    It is technically possible for this algorithm to run indefinitely (if we\n    never manage to randomly select the majority element), so the worst\n    possible runtime is unbounded. However, the expected runtime is far\n    better - linear, in fact. For ease of analysis, convince yourself that\n    because the majority element is guaranteed to occupy _more_ than half of\n    the array, the expected number of iterations will be less than it would\n    be if the element we sought occupied exactly _half_ of the array.\n    Therefore, we can calculate the expected number of iterations for this\n    modified version of the problem and assert that our version is easier.\n\n    $$\n    \\begin{aligned}\n        EV(iters_{prob}) &\\leq EV(iters_{mod}) \\\\\n                         &= \\lim_{n\\to\\infty} \\sum_{i=1}^{n} i \\cdot \\frac{1}{2^i} \\\\\n                         &= 2\n    \\end{aligned}\n    $$\n\n    Because the series converges, the expected number of iterations for the\n    modified problem is constant. Based on an expected-constant number of\n    iterations in which we perform linear work, the expected runtime is\n    linear for the modifed problem. Therefore, the expected runtime for our\n    problem is also linear, as the runtime of the modifed problem serves as\n    an upper bound for it.\n\n* Space complexity : $$O(1)$$\n\n    Much like the brute force solution, the randomized approach runs with\n    constant additional space.\n\n<br />\n\n---\n#### Approach 5: Divide and Conquer\n\n**Intuition**\n\nIf we know the majority element in the left and right halves of an array, we\ncan determine which is the global majority element in linear time.\n\n**Algorithm**\n\nHere, we apply a classical divide & conquer approach that recurses on the\nleft and right halves of an array until an answer can be trivially achieved\nfor a length-1 array. Note that because actually passing copies of subarrays\ncosts time and space, we instead pass `lo` and `hi` indices that describe the\nrelevant slice of the overall array. In this case, the majority element for a\nlength-1 slice is trivially its only element, so the recursion stops there.\nIf the current slice is longer than length-1, we must combine the answers for\nthe slice's left and right halves. If they agree on the majority element,\nthen the majority element for the overall slice is obviously the same[^1]. If\nthey disagree, only one of them can be \"right\", so we need to count the\noccurrences of the left and right majority elements to determine which\nsubslice's answer is globally correct. The overall answer for the array is\nthus the majority element between indices 0 and $$n$$.\n\n<iframe src=\"https://leetcode.com/playground/C722UMRw/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"C722UMRw\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(nlgn)$$\n\n    Each recursive call to `majority_element_rec` performs two recursive\n    calls on subslices of size $$\\frac{n}{2}$$ and two linear scans of length\n    $$n$$. Therefore, the time complexity of the divide & conquer approach\n    can be represented by the following recurrence relation:\n\n    $$\n        T(n) = 2T(\\frac{n}{2}) + 2n\n    $$\n\n    By the [master theorem](https://en.wikipedia.org/wiki/Master_theorem_(analysis_of_algorithms)),\n    the recurrence satisfies case 2, so the complexity can be analyzed as such:\n\n    $$\n    \\begin{aligned}\n        T(n) &= \\Theta(n^{log_{b}a}\\log n) \\\\\n             &= \\Theta(n^{log_{2}2}\\log n) \\\\\n             &= \\Theta(n \\log n) \\\\\n    \\end{aligned}\n    $$\n\n* Space complexity : $$O(lgn)$$\n\n    Although the divide & conquer does not explicitly allocate any additional\n    memory, it uses a non-constant amount of additional memory in stack\n    frames due to recursion. Because the algorithm \"cuts\" the array in half\n    at each level of recursion, it follows that there can only be $$O(lgn)$$\n    \"cuts\" before the base case of 1 is reached. It follows from this fact\n    that the resulting recursion tree is balanced, and therefore all paths\n    from the root to a leaf are of length $$O(lgn)$$. Because the recursion\n    tree is traversed in a depth-first manner, the space complexity is\n    therefore equivalent to the length of the longest path, which is, of\n    course, $$O(lgn)$$.\n\n<br />\n\n---\n#### Approach 6: Boyer-Moore Voting Algorithm\n\n**Intuition**\n\nIf we had some way of counting instances of the majority element as $$+1$$\nand instances of any other element as $$-1$$, summing them would make it\nobvious that the majority element is indeed the majority element.\n\n**Algorithm**\n\nEssentially, what Boyer-Moore does is look for a suffix $$suf$$ of `nums`\nwhere $$suf[0]$$ is the majority element in that suffix. To do this, we\nmaintain a count, which is incremented whenever we see an instance of our\ncurrent candidate for majority element and decremented whenever we see\nanything else. Whenever `count` equals 0, we effectively forget about\neverything in `nums` up to the current index and consider the current number\nas the candidate for majority element. It is not immediately obvious why we can\nget away with forgetting prefixes of `nums` - consider the following\nexamples (pipes are inserted to separate runs of nonzero `count`).\n\n[7, 7, 5, 7, 5, 1 | 5, 7 | 5, 5, 7, 7 | 7, 7, 7, 7]\n\nHere, the `7` at index 0 is selected to be the first candidate for majority\nelement. `count` will eventually reach 0 after index 5 is processed, so the\n`5` at index 6 will be the next candidate. In this case, `7` is the true\nmajority element, so by disregarding this prefix, we are ignoring an equal\nnumber of majority and minority elements - therefore, `7` will still be the\nmajority element in the suffix formed by throwing away the first prefix.\n\n[7, 7, 5, 7, 5, 1 | 5, 7 | 5, 5, 7, 7 | **5, 5, 5, 5**]\n\nNow, the majority element is `5` (we changed the last run of the array from\n`7`s to `5`s), but our first candidate is still `7`. In this case, our\ncandidate is not the true majority element, but we still cannot discard more\nmajority elements than minority elements (this would imply that `count` could\nreach -1 before we reassign `candidate`, which is obviously false).\n\nTherefore, given that it is impossible (in both cases) to discard more\nmajority elements than minority elements, we are safe in discarding the\nprefix and attempting to recursively solve the majority element problem for the\nsuffix. Eventually, a suffix will be found for which `count` does not hit\n`0`, and the majority element of that suffix will necessarily be the same as\nthe majority element of the overall array.\n\n<iframe src=\"https://leetcode.com/playground/TdqCU8YV/shared\" frameBorder=\"0\" width=\"100%\" height=\"310\" name=\"TdqCU8YV\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n)$$\n\n    Boyer-Moore performs constant work exactly $$n$$ times, so the algorithm\n    runs in linear time.\n\n* Space complexity : $$O(1)$$\n\n    Boyer-Moore allocates only constant additional memory.\n\n<br />\n\n**Footnotes**\n\n[^1]: This is a constant optimization that could be excluded without hurting our\n      overall runtime.",
    "contentTypeId": "107",
    "rating": {
      "id": "288",
      "count": 108,
      "average": 4.944,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "[3,2,3]",
  "metaData": "{\r\n  \"name\": \"majorityElement\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"nums\",\r\n      \"type\": \"integer[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
