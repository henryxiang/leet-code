{
  "questionId": "201",
  "questionFrontendId": "201",
  "boundTopicId": null,
  "title": "Bitwise AND of Numbers Range",
  "titleSlug": "bitwise-and-of-numbers-range",
  "categoryTitle": "Algorithms",
  "content": "<p>Given a range [m, n] where 0 &lt;= m &lt;= n &lt;= 2147483647, return the bitwise AND of all numbers in this range, inclusive.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [5,7]\r\n<strong>Output:</strong> 4\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [0,1]\r\n<strong>Output:</strong> 0</pre>",
  "isPaidOnly": false,
  "difficulty": "Medium",
  "likes": 539,
  "dislikes": 74,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [
    {
      "username": "amrsaqr",
      "profileUrl": "/amrsaqr/",
      "avatarUrl": "https://www.gravatar.com/avatar/91a28f7e213b78c901eb28b56a665225.png?s=200"
    }
  ],
  "topicTags": [
    {
      "name": "Bit Manipulation",
      "slug": "bit-manipulation"
    }
  ],
  "companyTagStats": "{\"1\": [], \"2\": [], \"3\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    int rangeBitwiseAnd(int m, int n) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int rangeBitwiseAnd(int m, int n) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def rangeBitwiseAnd(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def rangeBitwiseAnd(self, m: int, n: int) -> int:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nint rangeBitwiseAnd(int m, int n){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public int RangeBitwiseAnd(int m, int n) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number} m\n * @param {number} n\n * @return {number}\n */\nvar rangeBitwiseAnd = function(m, n) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer} m\n# @param {Integer} n\n# @return {Integer}\ndef range_bitwise_and(m, n)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func rangeBitwiseAnd(_ m: Int, _ n: Int) -> Int {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func rangeBitwiseAnd(m int, n int) int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def rangeBitwiseAnd(m: Int, n: Int): Int = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun rangeBitwiseAnd(m: Int, n: Int): Int {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn range_bitwise_and(m: i32, n: i32) -> i32 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer $m\n     * @param Integer $n\n     * @return Integer\n     */\n    function rangeBitwiseAnd($m, $n) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"92.7K\", \"totalSubmission\": \"251.2K\", \"totalAcceptedRaw\": 92663, \"totalSubmissionRaw\": 251205, \"acRate\": \"36.9%\"}",
  "hints": [],
  "solution": null,
  "status": null,
  "sampleTestCase": "5\n7",
  "metaData": "{\r\n  \"name\": \"rangeBitwiseAnd\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"m\",\r\n      \"type\": \"integer\"\r\n    },\r\n    {\r\n      \"name\": \"n\",\r\n      \"type\": \"integer\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
