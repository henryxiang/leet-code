{
  "questionId": "203",
  "questionFrontendId": "203",
  "boundTopicId": null,
  "title": "Remove Linked List Elements",
  "titleSlug": "remove-linked-list-elements",
  "categoryTitle": "Algorithms",
  "content": "<p>Remove all elements from a linked list of integers that have value <b><i>val</i></b>.</p>\r\n\r\n<p><b>Example:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b>  1-&gt;2-&gt;6-&gt;3-&gt;4-&gt;5-&gt;6, <em><b>val</b></em> = 6\r\n<b>Output:</b> 1-&gt;2-&gt;3-&gt;4-&gt;5\r\n</pre>\r\n",
  "isPaidOnly": false,
  "difficulty": "Easy",
  "likes": 1100,
  "dislikes": 61,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"Remove Element\", \"titleSlug\": \"remove-element\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Delete Node in a Linked List\", \"titleSlug\": \"delete-node-in-a-linked-list\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
  "contributors": [
    {
      "username": "mithmatt",
      "profileUrl": "/mithmatt/",
      "avatarUrl": "https://assets.leetcode.com/users/mithmatt/avatar_1538278871.png"
    }
  ],
  "topicTags": [
    {
      "name": "Linked List",
      "slug": "linked-list"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": false, \"name\": \"Facebook\", \"slug\": \"facebook\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Microsoft\", \"slug\": \"microsoft\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Paypal\", \"slug\": \"paypal\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Uber\", \"slug\": \"uber\", \"timesEncountered\": 2}], \"1\": [{\"taggedByAdmin\": false, \"name\": \"Pure Storage\", \"slug\": \"pure-storage\", \"timesEncountered\": 6}, {\"taggedByAdmin\": false, \"name\": \"Apple\", \"slug\": \"apple\", \"timesEncountered\": 3}], \"2\": [{\"taggedByAdmin\": false, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 4}, {\"taggedByAdmin\": false, \"name\": \"Bloomberg\", \"slug\": \"bloomberg\", \"timesEncountered\": 4}]}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* removeElements(ListNode* head, int val) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode removeElements(ListNode head, int val) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def removeElements(self, head, val):\n        \"\"\"\n        :type head: ListNode\n        :type val: int\n        :rtype: ListNode\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def removeElements(self, head: ListNode, val: int) -> ListNode:\n        "
    },
    {
      "lang": "C",
      "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\n\n\nstruct ListNode* removeElements(struct ListNode* head, int val){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public ListNode RemoveElements(ListNode head, int val) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} val\n * @return {ListNode}\n */\nvar removeElements = function(head, val) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val)\n#         @val = val\n#         @next = nil\n#     end\n# end\n\n# @param {ListNode} head\n# @param {Integer} val\n# @return {ListNode}\ndef remove_elements(head, val)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.next = nil\n *     }\n * }\n */\nclass Solution {\n    func removeElements(_ head: ListNode?, _ val: Int) -> ListNode? {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc removeElements(head *ListNode, val int) *ListNode {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "/**\n * Definition for singly-linked list.\n * class ListNode(var _x: Int = 0) {\n *   var next: ListNode = null\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def removeElements(head: ListNode, `val`: Int): ListNode = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution {\n    fun removeElements(head: ListNode?, `val`: Int): ListNode? {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n// \n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nimpl Solution {\n    pub fn remove_elements(head: Option<Box<ListNode>>, val: i32) -> Option<Box<ListNode>> {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val) { $this->val = $val; }\n * }\n */\nclass Solution {\n\n    /**\n     * @param ListNode $head\n     * @param Integer $val\n     * @return ListNode\n     */\n    function removeElements($head, $val) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"269.4K\", \"totalSubmission\": \"731.7K\", \"totalAcceptedRaw\": 269364, \"totalSubmissionRaw\": 731708, \"acRate\": \"36.8%\"}",
  "hints": [],
  "solution": {
    "id": "773",
    "canSeeDetail": true,
    "url": "/articles/remove-linked-list-elements/",
    "content": "[TOC]\r\n\r\n## Solution\r\n\r\n---\r\n\r\n#### Approach 1: Sentinel Node\r\n\r\n**Intuition**\r\n\r\nThe problem seems to be very easy if one has to delete a node in the middle:\r\n\r\n- Pick the node-predecessor `prev` of the node to delete. \r\n\r\n- Set its next pointer to point to the node next to the one to delete.\r\n\r\n![bla](../Figures/203/middle2.png)\r\n\r\nThe things are more complicated when the node or nodes to delete\r\nare in the head of linked list. \r\n\r\n![bla](../Figures/203/head_delete.png)\r\n\r\n> How to deal with that? To reduce the problem \r\nto the deletion of middle nodes with the help of [sentinel node](https://en.wikipedia.org/wiki/Sentinel_node).\r\n\r\nSentinel nodes are widely used in trees and linked lists \r\nas pseudo-heads, pseudo-tails, markers of level end, etc.\r\nThey are purely functional, and usually does not hold any data.\r\nTheir main purpose is to standardize the situation, for example,\r\nmake linked list to be never empty and never headless and hence\r\nsimplify insert and delete.\r\n\r\nHere are two standard examples: \r\n\r\n- [LRU Cache](https://leetcode.com/articles/lru-cache/),\r\nsentinel nodes are used as pseudo-head and pseudo-tail.\r\n\r\n- [Tree Level Order Traversal](https://leetcode.com/articles/maximum-level-sum-of-a-binary-tree/),\r\nsentinel nodes are used to mark level end.\r\n\r\n![bla](../Figures/203/to_delete2.png)\r\n\r\nHere sentinel node will be used as pseudo-head. \r\n\r\n**Algorithm**\r\n\r\n- Initiate sentinel node as `ListNode(0)` and set it to be the new head:\r\n`sentinel.next = head`. \r\n\r\n- Initiate two pointers to track the current node and its predecessor:\r\n`curr` and `prev`.\r\n\r\n- While `curr` is not a null pointer:\r\n\r\n    - Compare the value of the current node with the value to delete.\r\n    \r\n        - In the values are equal, delete the current node:\r\n        `prev.next = curr.next`.\r\n        \r\n        - Otherwise, set predecessor to be equal to the current node.\r\n        \r\n    - Move to the next node: `curr = curr.next`.\r\n    \r\n- Return `sentinel.next`.\r\n            \r\n**Implementation**\r\n\r\n<iframe src=\"https://leetcode.com/playground/pfTV6ECM/shared\" frameBorder=\"0\" width=\"100%\" height=\"497\" name=\"pfTV6ECM\"></iframe>\r\n\r\n**Complexity Analysis**\r\n\r\n* Time complexity: $$\\mathcal{O}(N)$$, it's one pass solution. \r\n \r\n* Space complexity: $$\\mathcal{O}(1)$$, it's a constant space\r\nsolution.\r\n\r\nAnalysis written by @[liaison](https://leetcode.com/liaison/)\r\nand @[andvary](https://leetcode.com/andvary/)",
    "contentTypeId": "107",
    "rating": {
      "id": "758",
      "count": 12,
      "average": 4.917,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "[1,2,6,3,4,5,6]\n6",
  "metaData": "{\r\n  \"name\": \"removeElements\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"head\",\r\n      \"type\": \"ListNode\",\r\n      \"dealloc\": false\r\n    },\r\n    {\r\n      \"name\": \"val\",\r\n      \"type\": \"integer\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"ListNode\",\r\n     \"dealloc\": true\r\n  }\r\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
