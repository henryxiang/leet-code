{
  "questionId": "216",
  "questionFrontendId": "216",
  "boundTopicId": null,
  "title": "Combination Sum III",
  "titleSlug": "combination-sum-iii",
  "categoryTitle": "Algorithms",
  "content": "<div>\r\n<p>Find all possible combinations of <i><b>k</b></i> numbers that add up to a number <i><b>n</b></i>, given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>All numbers will be positive integers.</li>\r\n\t<li>The solution set must not contain duplicate combinations.</li>\r\n</ul>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> <i><b>k</b></i> = 3, <i><b>n</b></i> = 7\r\n<strong>Output:</strong> [[1,2,4]]\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> <i><b>k</b></i> = 3, <i><b>n</b></i> = 9\r\n<strong>Output:</strong> [[1,2,6], [1,3,5], [2,3,4]]\r\n</pre>\r\n</div>",
  "isPaidOnly": false,
  "difficulty": "Medium",
  "likes": 792,
  "dislikes": 44,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"Combination Sum\", \"titleSlug\": \"combination-sum\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
  "contributors": [
    {
      "username": "mithmatt",
      "profileUrl": "/mithmatt/",
      "avatarUrl": "https://assets.leetcode.com/users/mithmatt/avatar_1538278871.png"
    }
  ],
  "topicTags": [
    {
      "name": "Array",
      "slug": "array"
    },
    {
      "name": "Backtracking",
      "slug": "backtracking"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": false, \"name\": \"Microsoft\", \"slug\": \"microsoft\", \"timesEncountered\": 2}], \"1\": [], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    vector<vector<int>> combinationSum3(int k, int n) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public List<List<Integer>> combinationSum3(int k, int n) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def combinationSum3(self, k, n):\n        \"\"\"\n        :type k: int\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def combinationSum3(self, k: int, n: int) -> List[List[int]]:\n        "
    },
    {
      "lang": "C",
      "code": "\n\n/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** combinationSum3(int k, int n, int* returnSize, int** returnColumnSizes){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public IList<IList<int>> CombinationSum3(int k, int n) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number} k\n * @param {number} n\n * @return {number[][]}\n */\nvar combinationSum3 = function(k, n) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer} k\n# @param {Integer} n\n# @return {Integer[][]}\ndef combination_sum3(k, n)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func combinationSum3(_ k: Int, _ n: Int) -> [[Int]] {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func combinationSum3(k int, n int) [][]int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def combinationSum3(k: Int, n: Int): List[List[Int]] = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun combinationSum3(k: Int, n: Int): List<List<Int>> {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn combination_sum3(k: i32, n: i32) -> Vec<Vec<i32>> {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer $k\n     * @param Integer $n\n     * @return Integer[][]\n     */\n    function combinationSum3($k, $n) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"143.4K\", \"totalSubmission\": \"265.9K\", \"totalAcceptedRaw\": 143384, \"totalSubmissionRaw\": 265861, \"acRate\": \"53.9%\"}",
  "hints": [],
  "solution": null,
  "status": null,
  "sampleTestCase": "3\n7",
  "metaData": "{\r\n  \"name\": \"combinationSum3\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"k\",\r\n      \"type\": \"integer\"\r\n    },\r\n    {\r\n      \"name\": \"n\",\r\n      \"type\": \"integer\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"list<list<integer>>\",\r\n    \"dealloc\": true\r\n  }\r\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
