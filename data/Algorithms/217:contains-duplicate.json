{
  "questionId": "217",
  "questionFrontendId": "217",
  "boundTopicId": null,
  "title": "Contains Duplicate",
  "titleSlug": "contains-duplicate",
  "categoryTitle": "Algorithms",
  "content": "<p>Given an array of integers, find if the array contains any duplicates.</p>\r\n\r\n<p>Your function should return true if any value appears at least twice in the array, and it should return false if every element is distinct.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [1,2,3,1]\r\n<strong>Output:</strong> true</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>[1,2,3,4]\r\n<strong>Output:</strong> false</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>[1,1,1,3,3,4,3,2,4,2]\r\n<strong>Output:</strong> true</pre>\r\n",
  "isPaidOnly": false,
  "difficulty": "Easy",
  "likes": 552,
  "dislikes": 608,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"Contains Duplicate II\", \"titleSlug\": \"contains-duplicate-ii\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Contains Duplicate III\", \"titleSlug\": \"contains-duplicate-iii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
  "contributors": [],
  "topicTags": [
    {
      "name": "Array",
      "slug": "array"
    },
    {
      "name": "Hash Table",
      "slug": "hash-table"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": false, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 2}, {\"taggedByAdmin\": true, \"name\": \"Yahoo\", \"slug\": \"yahoo\", \"timesEncountered\": 0}, {\"taggedByAdmin\": true, \"name\": \"Airbnb\", \"slug\": \"airbnb\", \"timesEncountered\": 0}, {\"taggedByAdmin\": true, \"name\": \"Palantir Technologies\", \"slug\": \"palantir-technologies\", \"timesEncountered\": 0}], \"1\": [{\"taggedByAdmin\": false, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 5}, {\"taggedByAdmin\": false, \"name\": \"Adobe\", \"slug\": \"adobe\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Microsoft\", \"slug\": \"microsoft\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Oracle\", \"slug\": \"oracle\", \"timesEncountered\": 2}], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    bool containsDuplicate(vector<int>& nums) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public boolean containsDuplicate(int[] nums) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def containsDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def containsDuplicate(self, nums: List[int]) -> bool:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nbool containsDuplicate(int* nums, int numsSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public bool ContainsDuplicate(int[] nums) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar containsDuplicate = function(nums) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer[]} nums\n# @return {Boolean}\ndef contains_duplicate(nums)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func containsDuplicate(_ nums: [Int]) -> Bool {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func containsDuplicate(nums []int) bool {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def containsDuplicate(nums: Array[Int]): Boolean = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun containsDuplicate(nums: IntArray): Boolean {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn contains_duplicate(nums: Vec<i32>) -> bool {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Boolean\n     */\n    function containsDuplicate($nums) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"436.1K\", \"totalSubmission\": \"803.8K\", \"totalAcceptedRaw\": 436091, \"totalSubmissionRaw\": 803837, \"acRate\": \"54.3%\"}",
  "hints": [],
  "solution": {
    "id": "23",
    "canSeeDetail": true,
    "url": "/articles/contains-duplicate/",
    "content": "[TOC]\r\n\r\n## Summary\r\nThis article is for beginners. It introduces the following ideas:\r\nLoop Invariant, Linear Search, Sorting and Hash Table.\r\n\r\n## Solution\r\n\r\n#### Approach #1 (Naive Linear Search) [Time Limit Exceeded]\r\n\r\n**Intuition**\r\n\r\nFor an array of $$n$$ integers, there are $$C(n,2) = \\frac{n(n+1)}{2}$$ pairs of integers. Thus, we may check all $$\\frac{n(n+1)}{2}$$ pairs and see if there is any pair with duplicates.\r\n\r\n**Algorithm**\r\n\r\nTo apply this idea, we employ the linear search algorithm which is the simplest search algorithm. Linear search is a method of finding if a particular value is in a list by checking each of its elements, one at a time and in sequence until the desired one is found.\r\n\r\nFor our problem, we loop through all $$n$$ integers. For the $$i$$th integer `nums[i]`, we search in the previous `i-1` integers for the duplicate of `nums[i]`. If we find one, we return true; if not, we continue. Return false at the end of the program.\r\n\r\nTo prove the correctness of the algorithm, we define the loop invariant. A loop invariant is a property that holds before (and after) each iteration. Knowing its invariant(s) is essential for understanding the effect of a loop. Here is the *loop invariant*:\r\n\r\n> Before the next search, there are no duplicate integers in the searched integers.\r\n\r\nThe loop invariant holds true before the loop because there is no searched integer.\r\nEach time through the loop we look for any any possible duplicate of the current element.\r\nIf we found a duplicate, the function exits by returning true; If not, the invariant still holds true.\r\n\r\nTherefore, if the loop finishes, the invariant tells us that there is no duplicate in all $$n$$ integers.\r\n\r\n**Java**\r\n\r\n```java\r\npublic boolean containsDuplicate(int[] nums) {\r\n    for (int i = 0; i < nums.length; ++i) {\r\n        for (int j = 0; j < i; ++j) {\r\n            if (nums[j] == nums[i]) return true;  \r\n        }\r\n    }\r\n    return false;\r\n}\r\n// Time Limit Exceeded\r\n```\r\n**Complexity Analysis**\r\n\r\n* Time complexity : $$O(n^2)$$. In the worst case, there are $$\\frac{n(n+1)}{2}$$ pairs of integers to check. Therefore, the time complexity is $$O(n^2)$$.\r\n\r\n* Space complexity : $$O(1)$$.\r\nWe only used constant extra space.\r\n\r\n**Note**\r\n\r\nThis approach will get Time Limit Exceeded on LeetCode. Usually, if an algorithm is $$O(n^2)$$, it can handle $$n$$ up to around $$10^4$$. It gets Time Limit Exceeded when $$n \\geq 10^5$$.\r\n\r\n---\r\n#### Approach #2 (Sorting) [Accepted]\r\n\r\n**Intuition**\r\n\r\nIf there are any duplicate integers, they will be consecutive after sorting.\r\n\r\n**Algorithm**\r\n\r\nThis approach employs sorting algorithm. Since comparison sorting algorithm like *heapsort* is known to provide $$O(n \\log n)$$ worst-case performance, sorting is often a good preprocessing step. After sorting, we can sweep the sorted array to find if there are any two consecutive duplicate elements.\r\n\r\n**Java**\r\n\r\n```java\r\npublic boolean containsDuplicate(int[] nums) {\r\n    Arrays.sort(nums);\r\n    for (int i = 0; i < nums.length - 1; ++i) {\r\n        if (nums[i] == nums[i + 1]) return true;\r\n    }\r\n    return false;\r\n}\r\n```\r\n\r\n**Complexity Analysis**\r\n\r\n* Time complexity : $$O(n \\log n)$$.\r\nSorting is $$O(n \\log n)$$ and the sweeping is $$O(n)$$. The entire algorithm is dominated by the sorting step, which is $$O(n \\log n)$$.\r\n\r\n* Space complexity : $$O(1)$$.\r\nSpace depends on the sorting implementation which, usually, costs $$O(1)$$ auxiliary space if `heapsort` is used.\r\n\r\n**Note**\r\n\r\nThe implementation here modifies the original array by sorting it. In general, it is not a good practice to modify the input unless it is clear to the caller that the input will be modified. One may make a copy of `nums` and operate on the copy instead.\r\n\r\n---\r\n#### Approach #3 (Hash Table) [Accepted]\r\n\r\n**Intuition**\r\n\r\nUtilize a dynamic data structure that supports fast search and insert operations.\r\n\r\n**Algorithm**\r\n\r\nFrom [Approach #1](#approach-1-naive-linear-search-time-limit-exceeded) we know that search operations is $$O(n)$$ in an unsorted array and we did so repeatedly. Utilizing a data structure with faster search time will speed up the entire algorithm.\r\n\r\nThere are many data structures commonly used as dynamic sets such as Binary Search Tree and Hash Table. The operations we need to support here are `search()` and `insert()`. For a self-balancing Binary Search Tree (TreeSet or TreeMap in Java), `search()` and `insert()` are both $$O(\\log n)$$ time. For a Hash Table (HashSet or HashMap in Java), `search()` and `insert()` are both $$O(1)$$ on average. Therefore, by using hash table, we can achieve linear time complexity for finding the duplicate in an unsorted array.\r\n\r\n**Java**\r\n\r\n```java\r\npublic boolean containsDuplicate(int[] nums) {\r\n    Set<Integer> set = new HashSet<>(nums.length);\r\n    for (int x: nums) {\r\n        if (set.contains(x)) return true;\r\n        set.add(x);\r\n    }\r\n    return false;\r\n}\r\n```\r\n\r\n**Complexity Analysis**\r\n\r\n* Time complexity : $$O(n)$$.\r\nWe do `search()` and `insert()` for $$n$$ times and each operation takes constant time.\r\n\r\n* Space complexity : $$O(n)$$.\r\nThe space used by a hash table is linear with the number of elements in it.\r\n\r\n**Note**\r\n\r\nFor certain test cases with not very large $$n$$, the runtime of this method can be slower than [Approach #2](#approach-2-sorting-accepted). The reason is hash table has some overhead in maintaining its property. One should keep in mind that real world performance can be different from what the Big-O notation says. The Big-O notation only tells us that for *sufficiently* large input, one will be faster than the other. Therefore, when $$n$$ is not sufficiently large, an $$O(n)$$ algorithm can be slower than an $$O(n \\log n)$$ algorithm.\r\n\r\n## See Also\r\n\r\n* [Problem 219 Contains Duplicate II](https://leetcode.com/articles/contains-duplicate-ii/)\r\n* [Problem 220 Contains Duplicate III](https://leetcode.com/articles/contains-duplicate-iii/)",
    "contentTypeId": "107",
    "rating": {
      "id": "21",
      "count": 63,
      "average": 4.635,
      "userRating": null
    }
  },
  "status": "ac",
  "sampleTestCase": "[1,2,3,1]",
  "metaData": "{\r\n  \"name\": \"containsDuplicate\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"nums\",\r\n      \"type\": \"integer[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"boolean\"\r\n  }\r\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
