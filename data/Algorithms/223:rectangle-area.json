{
  "questionId": "223",
  "questionFrontendId": "223",
  "boundTopicId": null,
  "title": "Rectangle Area",
  "titleSlug": "rectangle-area",
  "categoryTitle": "Algorithms",
  "content": "<p>Find the total area covered by two <strong>rectilinear</strong> rectangles in a <strong>2D</strong> plane.</p>\r\n\r\n<p>Each rectangle is defined by its bottom left corner and top right corner as shown in the figure.</p>\r\n\r\n<p><img alt=\"Rectangle Area\" src=\"https://assets.leetcode.com/uploads/2018/10/22/rectangle_area.png\" style=\"width: 542px; height: 304px;\" /></p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-1-1\">-3</span>, B = <span id=\"example-input-1-2\">0</span>, C = <span id=\"example-input-1-3\">3</span>, D = <span id=\"example-input-1-4\">4</span>, E = <span id=\"example-input-1-5\">0</span>, F = <span id=\"example-input-1-6\">-1</span>, G = <span id=\"example-input-1-7\">9</span>, H = <span id=\"example-input-1-8\">2</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">45</span></pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<p>Assume that the total area is never beyond the maximum possible value of <strong>int</strong>.</p>\r\n",
  "isPaidOnly": false,
  "difficulty": "Medium",
  "likes": 312,
  "dislikes": 589,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"Rectangle Overlap\", \"titleSlug\": \"rectangle-overlap\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
  "contributors": [
    {
      "username": "mithmatt",
      "profileUrl": "/mithmatt/",
      "avatarUrl": "https://assets.leetcode.com/users/mithmatt/avatar_1538278871.png"
    }
  ],
  "topicTags": [
    {
      "name": "Math",
      "slug": "math"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": false, \"name\": \"Microsoft\", \"slug\": \"microsoft\", \"timesEncountered\": 3}], \"2\": [{\"taggedByAdmin\": false, \"name\": \"Facebook\", \"slug\": \"facebook\", \"timesEncountered\": 2}], \"1\": [{\"taggedByAdmin\": false, \"name\": \"Apple\", \"slug\": \"apple\", \"timesEncountered\": 2}]}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    int computeArea(int A, int B, int C, int D, int E, int F, int G, int H) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int computeArea(int A, int B, int C, int D, int E, int F, int G, int H) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def computeArea(self, A, B, C, D, E, F, G, H):\n        \"\"\"\n        :type A: int\n        :type B: int\n        :type C: int\n        :type D: int\n        :type E: int\n        :type F: int\n        :type G: int\n        :type H: int\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def computeArea(self, A: int, B: int, C: int, D: int, E: int, F: int, G: int, H: int) -> int:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nint computeArea(int A, int B, int C, int D, int E, int F, int G, int H){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public int ComputeArea(int A, int B, int C, int D, int E, int F, int G, int H) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number} A\n * @param {number} B\n * @param {number} C\n * @param {number} D\n * @param {number} E\n * @param {number} F\n * @param {number} G\n * @param {number} H\n * @return {number}\n */\nvar computeArea = function(A, B, C, D, E, F, G, H) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer} a\n# @param {Integer} b\n# @param {Integer} c\n# @param {Integer} d\n# @param {Integer} e\n# @param {Integer} f\n# @param {Integer} g\n# @param {Integer} h\n# @return {Integer}\ndef compute_area(a, b, c, d, e, f, g, h)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func computeArea(_ A: Int, _ B: Int, _ C: Int, _ D: Int, _ E: Int, _ F: Int, _ G: Int, _ H: Int) -> Int {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func computeArea(A int, B int, C int, D int, E int, F int, G int, H int) int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def computeArea(A: Int, B: Int, C: Int, D: Int, E: Int, F: Int, G: Int, H: Int): Int = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun computeArea(A: Int, B: Int, C: Int, D: Int, E: Int, F: Int, G: Int, H: Int): Int {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn compute_area(a: i32, b: i32, c: i32, d: i32, e: i32, f: i32, g: i32, h: i32) -> i32 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer $A\n     * @param Integer $B\n     * @param Integer $C\n     * @param Integer $D\n     * @param Integer $E\n     * @param Integer $F\n     * @param Integer $G\n     * @param Integer $H\n     * @return Integer\n     */\n    function computeArea($A, $B, $C, $D, $E, $F, $G, $H) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"96.8K\", \"totalSubmission\": \"263.1K\", \"totalAcceptedRaw\": 96844, \"totalSubmissionRaw\": 263098, \"acRate\": \"36.8%\"}",
  "hints": [],
  "solution": null,
  "status": null,
  "sampleTestCase": "-3\n0\n3\n4\n0\n-1\n9\n2",
  "metaData": "{\r\n  \"name\": \"computeArea\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"A\",\r\n      \"type\": \"integer\"\r\n    },\r\n    {\r\n      \"name\": \"B\",\r\n      \"type\": \"integer\"\r\n    },\r\n    {\r\n      \"name\": \"C\",\r\n      \"type\": \"integer\"\r\n    },\r\n    {\r\n      \"name\": \"D\",\r\n      \"type\": \"integer\"\r\n    },\r\n    {\r\n      \"name\": \"E\",\r\n      \"type\": \"integer\"\r\n    },\r\n    {\r\n      \"name\": \"F\",\r\n      \"type\": \"integer\"\r\n    },\r\n    {\r\n      \"name\": \"G\",\r\n      \"type\": \"integer\"\r\n    },\r\n    {\r\n      \"name\": \"H\",\r\n      \"type\": \"integer\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
