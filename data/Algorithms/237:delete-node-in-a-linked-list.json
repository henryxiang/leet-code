{
  "questionId": "237",
  "questionFrontendId": "237",
  "boundTopicId": null,
  "title": "Delete Node in a Linked List",
  "titleSlug": "delete-node-in-a-linked-list",
  "categoryTitle": "Algorithms",
  "content": "<p>Write a function to delete a node (except the tail) in a singly linked list, given only access to that node.</p>\r\n\r\n<p>Given linked list --&nbsp;head =&nbsp;[4,5,1,9], which looks like following:</p>\r\n\r\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/28/237_example.png\" style=\"margin-top: 5px; margin-bottom: 5px; width: 300px; height: 49px;\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> head = [4,5,1,9], node = 5\r\n<strong>Output:</strong> [4,1,9]\r\n<strong>Explanation: </strong>You are given the second node with value 5, the linked list should become 4 -&gt; 1 -&gt; 9 after calling your function.\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> head = [4,5,1,9], node = 1\r\n<strong>Output:</strong> [4,5,9]\r\n<strong>Explanation: </strong>You are given the third node with value 1, the linked list should become 4 -&gt; 5 -&gt; 9 after calling your function.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>The linked list will have at least two elements.</li>\r\n\t<li>All of the nodes&#39; values will be unique.</li>\r\n\t<li>The given node&nbsp;will not be the tail and it will always be a valid node of the linked list.</li>\r\n\t<li>Do not return anything from your function.</li>\r\n</ul>\r\n",
  "isPaidOnly": false,
  "difficulty": "Easy",
  "likes": 1017,
  "dislikes": 4964,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"Remove Linked List Elements\", \"titleSlug\": \"remove-linked-list-elements\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
  "contributors": [],
  "topicTags": [
    {
      "name": "Linked List",
      "slug": "linked-list"
    }
  ],
  "companyTagStats": "{\"1\": [{\"taggedByAdmin\": true, \"name\": \"Apple\", \"slug\": \"apple\", \"timesEncountered\": 2}], \"2\": [{\"taggedByAdmin\": false, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 3}, {\"taggedByAdmin\": false, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 2}, {\"taggedByAdmin\": true, \"name\": \"Microsoft\", \"slug\": \"microsoft\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Cisco\", \"slug\": \"cisco\", \"timesEncountered\": 2}], \"3\": [{\"taggedByAdmin\": false, \"name\": \"Paypal\", \"slug\": \"paypal\", \"timesEncountered\": 4}, {\"taggedByAdmin\": false, \"name\": \"VMware\", \"slug\": \"vmware\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Oracle\", \"slug\": \"oracle\", \"timesEncountered\": 2}, {\"taggedByAdmin\": true, \"name\": \"Adobe\", \"slug\": \"adobe\", \"timesEncountered\": 0}]}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "/**\r\n * Definition for singly-linked list.\r\n * struct ListNode {\r\n *     int val;\r\n *     ListNode *next;\r\n *     ListNode(int x) : val(x), next(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    void deleteNode(ListNode* node) {\r\n        \r\n    }\r\n};"
    },
    {
      "lang": "Java",
      "code": "/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     int val;\r\n *     ListNode next;\r\n *     ListNode(int x) { val = x; }\r\n * }\r\n */\r\nclass Solution {\r\n    public void deleteNode(ListNode node) {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Python",
      "code": "# Definition for singly-linked list.\r\n# class ListNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.next = None\r\n\r\nclass Solution(object):\r\n    def deleteNode(self, node):\r\n        \"\"\"\r\n        :type node: ListNode\r\n        :rtype: void Do not return anything, modify node in-place instead.\r\n        \"\"\"\r\n        "
    },
    {
      "lang": "Python3",
      "code": "# Definition for singly-linked list.\r\n# class ListNode:\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.next = None\r\n\r\nclass Solution:\r\n    def deleteNode(self, node):\r\n        \"\"\"\r\n        :type node: ListNode\r\n        :rtype: void Do not return anything, modify node in-place instead.\r\n        \"\"\"\r\n        "
    },
    {
      "lang": "C",
      "code": "/**\r\n * Definition for singly-linked list.\r\n * struct ListNode {\r\n *     int val;\r\n *     struct ListNode *next;\r\n * };\r\n */\r\nvoid deleteNode(struct ListNode* node) {\r\n    \r\n}"
    },
    {
      "lang": "C#",
      "code": "/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     public int val;\r\n *     public ListNode next;\r\n *     public ListNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public void DeleteNode(ListNode node) {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\r\n * Definition for singly-linked list.\r\n * function ListNode(val) {\r\n *     this.val = val;\r\n *     this.next = null;\r\n * }\r\n */\r\n/**\r\n * @param {ListNode} node\r\n * @return {void} Do not return anything, modify node in-place instead.\r\n */\r\nvar deleteNode = function(node) {\r\n    \r\n};"
    },
    {
      "lang": "Ruby",
      "code": "# Definition for singly-linked list.\r\n# class ListNode\r\n#     attr_accessor :val, :next\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @next = nil\r\n#     end\r\n# end\r\n\r\n# @param {ListNode} node\r\n# @return {Void} Do not return anything, modify node in-place instead.\r\ndef delete_node(node)\r\n    \r\nend"
    },
    {
      "lang": "Go",
      "code": "/**\r\n * Definition for singly-linked list.\r\n * type ListNode struct {\r\n *     Val int\r\n *     Next *ListNode\r\n * }\r\n */\r\nfunc deleteNode(node *ListNode) {\r\n    \r\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"340.2K\", \"totalSubmission\": \"595.9K\", \"totalAcceptedRaw\": 340202, \"totalSubmissionRaw\": 595933, \"acRate\": \"57.1%\"}",
  "hints": [],
  "solution": {
    "id": "32",
    "canSeeDetail": true,
    "url": "/articles/delete-node-linked-list/",
    "content": "## Solution\r\n\r\n#### Approach: Swap with Next Node [Accepted]\r\n\r\nThe usual way of deleting a node `node` from a linked list is to modify the `next` pointer of the node *before* it, to point to the node *after* it.\r\n\r\n<img src= \"https://leetcode.com/media/original_images/237_LinkedList.png\" width=\"400\" />\r\n\r\nSince we do not have access to the node *before* the one we want to delete, we cannot modify the `next` pointer of that node in any way. Instead, we have to replace the value of the node we want to delete with the value in the node after it, and then delete the node after it.\r\n\r\n<img src=\"https://leetcode.com/media/original_images/237_LinkedList2.png\" width=\"400\" />\r\n\r\n<img src=\"https://leetcode.com/media/original_images/237_LinkedList3.png\" width=\"400\" />\r\n\r\n<img src=\"https://leetcode.com/media/original_images/237_LinkedList4.png\" width=\"330\" />\r\n\r\nBecause we know that the node we want to delete is not the tail of the list, we can guarantee that this approach is possible.\r\n\r\n**Java**\r\n\r\n```java\r\npublic void deleteNode(ListNode node) {\r\n    node.val = node.next.val;\r\n    node.next = node.next.next;\r\n}\r\n```\r\n\r\n**Complexity Analysis**\r\n\r\nTime and space complexity are both $$O(1)$$.\r\n\r\nAnalysis written by: @noran",
    "contentTypeId": "107",
    "rating": {
      "id": "29",
      "count": 164,
      "average": 3.646,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "[4,5,1,9]\n5",
  "metaData": "{\n  \"name\": \"deleteNode\",\n  \"params\": [\n    {\n      \"name\": \"node\",\n      \"type\": \"ListNode\"\n    },\n    {\n      \"name\": \"n\",\n      \"type\": \"integer\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"void\"\n  },\n  \"output\": {\n    \"paramindex\": 0\n  },\n  \"languages\": [\n    \"cpp\",\n    \"java\",\n    \"python\",\n    \"c\",\n    \"csharp\",\n    \"javascript\",\n    \"ruby\",\n    \"golang\",\n    \"python3\"\n  ],\n  \"manual\": true\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
