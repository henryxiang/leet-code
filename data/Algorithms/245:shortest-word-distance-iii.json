{
  "questionId": "245",
  "questionFrontendId": "245",
  "boundTopicId": null,
  "title": "Shortest Word Distance III",
  "titleSlug": "shortest-word-distance-iii",
  "categoryTitle": "Algorithms",
  "content": "<p>Given a list of words and two words <em>word1</em> and <em>word2</em>, return the shortest distance between these two words in the list.</p>\r\n\r\n<p><em>word1</em> and <em>word2</em> may be the same and they represent two individual words in the list.</p>\r\n\r\n<p><strong>Example:</strong><br />\r\nAssume that words = <code>[&quot;practice&quot;, &quot;makes&quot;, &quot;perfect&quot;, &quot;coding&quot;, &quot;makes&quot;]</code>.</p>\r\n\r\n<pre>\r\n<b>Input:</b> <em>word1</em> = <code>&ldquo;makes&rdquo;</code>, <em>word2</em> = <code>&ldquo;coding&rdquo;</code>\r\n<b>Output:</b> 1\r\n</pre>\r\n\r\n<pre>\r\n<b>Input:</b> <em>word1</em> = <code>&quot;makes&quot;</code>, <em>word2</em> = <code>&quot;makes&quot;</code>\r\n<b>Output:</b> 3\r\n</pre>\r\n\r\n<p><strong>Note:</strong><br />\r\nYou may assume <em>word1</em> and <em>word2</em> are both in the list.</p>\r\n",
  "isPaidOnly": true,
  "difficulty": "Medium",
  "likes": 155,
  "dislikes": 64,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"Shortest Word Distance\", \"titleSlug\": \"shortest-word-distance\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Shortest Word Distance II\", \"titleSlug\": \"shortest-word-distance-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
  "contributors": [],
  "topicTags": [
    {
      "name": "Array",
      "slug": "array"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"LinkedIn\", \"slug\": \"linkedin\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Microsoft\", \"slug\": \"microsoft\", \"timesEncountered\": 2}], \"1\": [], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    int shortestWordDistance(vector<string>& words, string word1, string word2) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int shortestWordDistance(String[] words, String word1, String word2) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def shortestWordDistance(self, words, word1, word2):\n        \"\"\"\n        :type words: List[str]\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def shortestWordDistance(self, words: List[str], word1: str, word2: str) -> int:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nint shortestWordDistance(char ** words, int wordsSize, char * word1, char * word2){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public int ShortestWordDistance(string[] words, string word1, string word2) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {string[]} words\n * @param {string} word1\n * @param {string} word2\n * @return {number}\n */\nvar shortestWordDistance = function(words, word1, word2) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {String[]} words\n# @param {String} word1\n# @param {String} word2\n# @return {Integer}\ndef shortest_word_distance(words, word1, word2)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func shortestWordDistance(_ words: [String], _ word1: String, _ word2: String) -> Int {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func shortestWordDistance(words []string, word1 string, word2 string) int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def shortestWordDistance(words: Array[String], word1: String, word2: String): Int = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun shortestWordDistance(words: Array<String>, word1: String, word2: String): Int {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn shortest_word_distance(words: Vec<String>, word1: String, word2: String) -> i32 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param String[] $words\n     * @param String $word1\n     * @param String $word2\n     * @return Integer\n     */\n    function shortestWordDistance($words, $word1, $word2) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"44.5K\", \"totalSubmission\": \"81.5K\", \"totalAcceptedRaw\": 44464, \"totalSubmissionRaw\": 81540, \"acRate\": \"54.5%\"}",
  "hints": [],
  "solution": null,
  "status": null,
  "sampleTestCase": "[\"practice\", \"makes\", \"perfect\", \"coding\", \"makes\"]\n\"makes\"\n\"coding\"",
  "metaData": "{\r\n  \"name\": \"shortestWordDistance\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"words\",\r\n      \"type\": \"string[]\"\r\n    },\r\n    {\r\n      \"name\": \"word1\",\r\n      \"type\": \"string\"\r\n    },\r\n    {\r\n      \"name\": \"word2\",\r\n      \"type\": \"string\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
