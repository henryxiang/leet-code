{
  "questionId": "247",
  "questionFrontendId": "247",
  "boundTopicId": null,
  "title": "Strobogrammatic Number II",
  "titleSlug": "strobogrammatic-number-ii",
  "categoryTitle": "Algorithms",
  "content": "<p>A strobogrammatic number is a number that looks the same when rotated 180 degrees (looked at upside down).</p>\r\n\r\n<p>Find all strobogrammatic numbers that are of length = n.</p>\r\n\r\n<p><b>Example:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b>  n = 2\r\n<b>Output:</b> <code>[&quot;11&quot;,&quot;69&quot;,&quot;88&quot;,&quot;96&quot;]</code>\r\n</pre>\r\n",
  "isPaidOnly": true,
  "difficulty": "Medium",
  "likes": 320,
  "dislikes": 97,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"Strobogrammatic Number\", \"titleSlug\": \"strobogrammatic-number\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Strobogrammatic Number III\", \"titleSlug\": \"strobogrammatic-number-iii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
  "contributors": [],
  "topicTags": [
    {
      "name": "Math",
      "slug": "math"
    },
    {
      "name": "Recursion",
      "slug": "recursion"
    }
  ],
  "companyTagStats": "{\"1\": [{\"taggedByAdmin\": false, \"name\": \"Facebook\", \"slug\": \"facebook\", \"timesEncountered\": 6}, {\"taggedByAdmin\": true, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 2}], \"2\": [{\"taggedByAdmin\": false, \"name\": \"Cisco\", \"slug\": \"cisco\", \"timesEncountered\": 2}], \"3\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    vector<string> findStrobogrammatic(int n) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public List<String> findStrobogrammatic(int n) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def findStrobogrammatic(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def findStrobogrammatic(self, n: int) -> List[str]:\n        "
    },
    {
      "lang": "C",
      "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar ** findStrobogrammatic(int n, int* returnSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public IList<string> FindStrobogrammatic(int n) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number} n\n * @return {string[]}\n */\nvar findStrobogrammatic = function(n) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer} n\n# @return {String[]}\ndef find_strobogrammatic(n)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func findStrobogrammatic(_ n: Int) -> [String] {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func findStrobogrammatic(n int) []string {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def findStrobogrammatic(n: Int): List[String] = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun findStrobogrammatic(n: Int): List<String> {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn find_strobogrammatic(n: i32) -> Vec<String> {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return String[]\n     */\n    function findStrobogrammatic($n) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"60.8K\", \"totalSubmission\": \"132.1K\", \"totalAcceptedRaw\": 60793, \"totalSubmissionRaw\": 132063, \"acRate\": \"46.0%\"}",
  "hints": [
    "Try to use recursion and notice that it should recurse with <i>n</i> - 2 instead of <i>n</i> - 1."
  ],
  "solution": null,
  "status": null,
  "sampleTestCase": "2",
  "metaData": "{\r\n  \"name\": \"findStrobogrammatic\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"n\",\r\n      \"type\": \"integer\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"list<string>\"\r\n  }\r\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
