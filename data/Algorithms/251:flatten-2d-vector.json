{
  "questionId": "251",
  "questionFrontendId": "251",
  "boundTopicId": null,
  "title": "Flatten 2D Vector",
  "titleSlug": "flatten-2d-vector",
  "categoryTitle": "Algorithms",
  "content": "<p>Design and implement an iterator to flatten a 2d vector. It should support the following operations: <code>next</code> and <code>hasNext</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example:</b></p>\r\n\r\n<pre>\r\nVector2D iterator = new Vector2D([[1,2],[3],[4]]);\r\n\r\niterator.next(); // return 1\r\niterator.next(); // return 2\r\niterator.next(); // return 3\r\niterator.hasNext(); // return true\r\niterator.hasNext(); // return true\r\niterator.next(); // return 4\r\niterator.hasNext(); // return false\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Notes:</strong></p>\r\n\r\n<ol>\r\n\t<li>Please remember to <b>RESET</b> your class variables declared in Vector2D, as static/class variables are <b>persisted across multiple test cases</b>. Please see <a href=\"https://leetcode.com/faq/\" target=\"_blank\">here</a> for more details.</li>\r\n\t<li>You may assume that <code>next()</code> call will always be valid, that is, there will be at least a next element in the 2d vector when <code>next()</code> is called.</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Follow up:</b></p>\r\n\r\n<p>As an added challenge, try to code it using only <a href=\"http://www.cplusplus.com/reference/iterator/iterator/\" target=\"_blank\">iterators in C++</a> or <a href=\"http://docs.oracle.com/javase/7/docs/api/java/util/Iterator.html\" target=\"_blank\">iterators in Java</a>.</p>\r\n",
  "isPaidOnly": true,
  "difficulty": "Medium",
  "likes": 307,
  "dislikes": 159,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"Binary Search Tree Iterator\", \"titleSlug\": \"binary-search-tree-iterator\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Zigzag Iterator\", \"titleSlug\": \"zigzag-iterator\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Peeking Iterator\", \"titleSlug\": \"peeking-iterator\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Flatten Nested List Iterator\", \"titleSlug\": \"flatten-nested-list-iterator\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
  "contributors": [],
  "topicTags": [
    {
      "name": "Design",
      "slug": "design"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": false, \"name\": \"Facebook\", \"slug\": \"facebook\", \"timesEncountered\": 6}, {\"taggedByAdmin\": false, \"name\": \"Apple\", \"slug\": \"apple\", \"timesEncountered\": 3}, {\"taggedByAdmin\": false, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Salesforce\", \"slug\": \"salesforce\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Lyft\", \"slug\": \"lyft\", \"timesEncountered\": 2}, {\"taggedByAdmin\": true, \"name\": \"Twitter\", \"slug\": \"twitter\", \"timesEncountered\": 0}, {\"taggedByAdmin\": true, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 0}, {\"taggedByAdmin\": true, \"name\": \"Zenefits\", \"slug\": \"zenefits\", \"timesEncountered\": 0}], \"1\": [{\"taggedByAdmin\": true, \"name\": \"Airbnb\", \"slug\": \"airbnb\", \"timesEncountered\": 6}], \"2\": [{\"taggedByAdmin\": false, \"name\": \"Uber\", \"slug\": \"uber\", \"timesEncountered\": 2}]}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Vector2D {\npublic:\n    Vector2D(vector<vector<int>>& v) {\n        \n    }\n    \n    int next() {\n        \n    }\n    \n    bool hasNext() {\n        \n    }\n};\n\n/**\n * Your Vector2D object will be instantiated and called as such:\n * Vector2D* obj = new Vector2D(v);\n * int param_1 = obj->next();\n * bool param_2 = obj->hasNext();\n */"
    },
    {
      "lang": "Java",
      "code": "class Vector2D {\n\n    public Vector2D(int[][] v) {\n        \n    }\n    \n    public int next() {\n        \n    }\n    \n    public boolean hasNext() {\n        \n    }\n}\n\n/**\n * Your Vector2D object will be instantiated and called as such:\n * Vector2D obj = new Vector2D(v);\n * int param_1 = obj.next();\n * boolean param_2 = obj.hasNext();\n */"
    },
    {
      "lang": "Python",
      "code": "class Vector2D(object):\n\n    def __init__(self, v):\n        \"\"\"\n        :type v: List[List[int]]\n        \"\"\"\n        \n\n    def next(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        \n\n    def hasNext(self):\n        \"\"\"\n        :rtype: bool\n        \"\"\"\n        \n\n\n# Your Vector2D object will be instantiated and called as such:\n# obj = Vector2D(v)\n# param_1 = obj.next()\n# param_2 = obj.hasNext()"
    },
    {
      "lang": "Python3",
      "code": "class Vector2D:\n\n    def __init__(self, v: List[List[int]]):\n        \n\n    def next(self) -> int:\n        \n\n    def hasNext(self) -> bool:\n        \n\n\n# Your Vector2D object will be instantiated and called as such:\n# obj = Vector2D(v)\n# param_1 = obj.next()\n# param_2 = obj.hasNext()"
    },
    {
      "lang": "C",
      "code": "\n\n\ntypedef struct {\n    \n} Vector2D;\n\n\nVector2D* vector2DCreate(int** v, int vSize, int* vColSize) {\n    \n}\n\nint vector2DNext(Vector2D* obj) {\n  \n}\n\nbool vector2DHasNext(Vector2D* obj) {\n  \n}\n\nvoid vector2DFree(Vector2D* obj) {\n    \n}\n\n/**\n * Your Vector2D struct will be instantiated and called as such:\n * Vector2D* obj = vector2DCreate(v, vSize, vColSize);\n * int param_1 = vector2DNext(obj);\n \n * bool param_2 = vector2DHasNext(obj);\n \n * vector2DFree(obj);\n*/"
    },
    {
      "lang": "C#",
      "code": "public class Vector2D {\n\n    public Vector2D(int[][] v) {\n        \n    }\n    \n    public int Next() {\n        \n    }\n    \n    public bool HasNext() {\n        \n    }\n}\n\n/**\n * Your Vector2D object will be instantiated and called as such:\n * Vector2D obj = new Vector2D(v);\n * int param_1 = obj.Next();\n * bool param_2 = obj.HasNext();\n */"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number[][]} v\n */\nvar Vector2D = function(v) {\n    \n};\n\n/**\n * @return {number}\n */\nVector2D.prototype.next = function() {\n    \n};\n\n/**\n * @return {boolean}\n */\nVector2D.prototype.hasNext = function() {\n    \n};\n\n/** \n * Your Vector2D object will be instantiated and called as such:\n * var obj = new Vector2D(v)\n * var param_1 = obj.next()\n * var param_2 = obj.hasNext()\n */"
    },
    {
      "lang": "Ruby",
      "code": "class Vector2D\n\n=begin\n    :type v: Integer[][]\n=end\n    def initialize(v)\n        \n    end\n\n\n=begin\n    :rtype: Integer\n=end\n    def next()\n        \n    end\n\n\n=begin\n    :rtype: Boolean\n=end\n    def has_next()\n        \n    end\n\n\nend\n\n# Your Vector2D object will be instantiated and called as such:\n# obj = Vector2D.new(v)\n# param_1 = obj.next()\n# param_2 = obj.has_next()"
    },
    {
      "lang": "Swift",
      "code": "\nclass Vector2D {\n\n    init(_ v: [[Int]]) {\n        \n    }\n    \n    func next() -> Int {\n        \n    }\n    \n    func hasNext() -> Bool {\n        \n    }\n}\n\n/**\n * Your Vector2D object will be instantiated and called as such:\n * let obj = Vector2D(v)\n * let ret_1: Int = obj.next()\n * let ret_2: Bool = obj.hasNext()\n */"
    },
    {
      "lang": "Go",
      "code": "type Vector2D struct {\n    \n}\n\n\nfunc Constructor(v [][]int) Vector2D {\n    \n}\n\n\nfunc (this *Vector2D) Next() int {\n    \n}\n\n\nfunc (this *Vector2D) HasNext() bool {\n    \n}\n\n\n/**\n * Your Vector2D object will be instantiated and called as such:\n * obj := Constructor(v);\n * param_1 := obj.Next();\n * param_2 := obj.HasNext();\n */"
    },
    {
      "lang": "Scala",
      "code": "class Vector2D(_v: Array[Array[Int]]) {\n\n    def next(): Int = {\n        \n    }\n\n    def hasNext(): Boolean = {\n        \n    }\n\n}\n\n/**\n * Your Vector2D object will be instantiated and called as such:\n * var obj = new Vector2D(v)\n * var param_1 = obj.next()\n * var param_2 = obj.hasNext()\n */"
    },
    {
      "lang": "Kotlin",
      "code": "class Vector2D(v: Array<IntArray>) {\n\n    fun next(): Int {\n        \n    }\n\n    fun hasNext(): Boolean {\n        \n    }\n\n}\n\n/**\n * Your Vector2D object will be instantiated and called as such:\n * var obj = Vector2D(v)\n * var param_1 = obj.next()\n * var param_2 = obj.hasNext()\n */"
    },
    {
      "lang": "Rust",
      "code": "struct Vector2D {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl Vector2D {\n\n    fn new(v: Vec<Vec<i32>>) -> Self {\n        \n    }\n    \n    fn next(&self) -> i32 {\n        \n    }\n    \n    fn has_next(&self) -> bool {\n        \n    }\n}\n\n/**\n * Your Vector2D object will be instantiated and called as such:\n * let obj = Vector2D::new(v);\n * let ret_1: i32 = obj.next();\n * let ret_2: bool = obj.has_next();\n */"
    },
    {
      "lang": "PHP",
      "code": "class Vector2D {\n    /**\n     * @param Integer[][] $v\n     */\n    function __construct($v) {\n        \n    }\n  \n    /**\n     * @return Integer\n     */\n    function next() {\n        \n    }\n  \n    /**\n     * @return Boolean\n     */\n    function hasNext() {\n        \n    }\n}\n\n/**\n * Your Vector2D object will be instantiated and called as such:\n * $obj = Vector2D($v);\n * $ret_1 = $obj->next();\n * $ret_2 = $obj->hasNext();\n */"
    }
  ],
  "stats": "{\"totalAccepted\": \"67.7K\", \"totalSubmission\": \"151K\", \"totalAcceptedRaw\": 67694, \"totalSubmissionRaw\": 151008, \"acRate\": \"44.8%\"}",
  "hints": [
    "How many variables do you need to keep track?",
    "Two variables is all you need. Try with <code>x</code> and <code>y</code>.",
    "Beware of empty rows. It could be the first few rows.",
    "To write correct code, think about the <a href=\"https://en.wikipedia.org/wiki/Invariant_(computer_science)\" target=\"_blank\">invariant</a> to maintain. What is it?",
    "The invariant is <code>x</code> and <code>y</code> must always point to a valid point in the 2d vector. Should you maintain your invariant <i>ahead of time</i> or <i>right when you need it</i>?",
    "Not sure? Think about how you would implement <code>hasNext()</code>. Which is more complex?",
    "Common logic in two different places should be refactored into a common method."
  ],
  "solution": null,
  "status": null,
  "sampleTestCase": "[\"Vector2D\",\"next\",\"next\",\"next\",\"hasNext\",\"hasNext\",\"next\",\"hasNext\"]\n[[[[1,2],[3],[4]]],[null],[null],[null],[null],[null],[null],[null]]",
  "metaData": "{\r\n    \"classname\": \"Vector2D\",\r\n    \"maxbytesperline\": 200000,\r\n    \"constructor\": {\r\n        \"params\": [\r\n            {\r\n            \"type\": \"integer[][]\",\r\n            \"name\": \"v\"\r\n            }\r\n        ]\r\n    },\r\n    \"methods\": [\r\n        {\r\n            \"name\" : \"next\",\r\n            \"params\": [\r\n            ],\r\n            \"return\": {\r\n                \"type\": \"integer\"\r\n            }\r\n        },\r\n        {\r\n            \"name\" : \"hasNext\",\r\n            \"params\": [\r\n            ],\r\n            \"return\": {\r\n                \"type\": \"boolean\"\r\n            }\r\n        }\r\n    ],\r\n    \"systemdesign\": true,\r\n    \"params\": [\r\n        {\r\n            \"name\": \"inputs\",\r\n            \"type\": \"integer[]\"\r\n        },\r\n        {\r\n            \"name\": \"inputs\",\r\n            \"type\": \"integer[]\"\r\n        }\r\n    ],\r\n    \"return\": {\r\n        \"type\": \"integer[]\",\r\n        \"dealloc\": true\r\n    }\r\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
