{
  "questionId": "254",
  "questionFrontendId": "254",
  "boundTopicId": null,
  "title": "Factor Combinations",
  "titleSlug": "factor-combinations",
  "categoryTitle": "Algorithms",
  "content": "<p>Numbers can be regarded as product of its factors. For example,</p>\r\n\r\n<pre>\r\n8 = 2 x 2 x 2;\r\n  = 2 x 4.\r\n</pre>\r\n\r\n<p>Write a function that takes an integer <i>n</i> and return all possible combinations of its factors.</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ol>\r\n\t<li>You may assume that <i>n</i> is always positive.</li>\r\n\t<li>Factors should be greater than 1 and less than <i>n</i>.</li>\r\n</ol>\r\n\r\n<p><b>Example&nbsp;1: </b></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> <code>1</code>\r\n<strong>Output:</strong> []\r\n</pre>\r\n\r\n<p><b>Example&nbsp;2: </b></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> <code>37</code>\r\n<strong>Output:</strong>[]</pre>\r\n\r\n<p><b>Example&nbsp;3: </b></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> <code>12</code>\r\n<strong>Output:</strong>\r\n[\r\n  [2, 6],\r\n  [2, 2, 3],\r\n  [3, 4]\r\n]</pre>\r\n\r\n<p><b>Example&nbsp;4: </b></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> <code>32</code>\r\n<strong>Output:</strong>\r\n[\r\n  [2, 16],\r\n  [2, 2, 8],\r\n  [2, 2, 2, 4],\r\n  [2, 2, 2, 2, 2],\r\n  [2, 4, 4],\r\n  [4, 8]\r\n]\r\n</pre>\r\n",
  "isPaidOnly": true,
  "difficulty": "Medium",
  "likes": 485,
  "dislikes": 22,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"Combination Sum\", \"titleSlug\": \"combination-sum\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
  "contributors": [],
  "topicTags": [
    {
      "name": "Backtracking",
      "slug": "backtracking"
    }
  ],
  "companyTagStats": "{\"1\": [{\"taggedByAdmin\": true, \"name\": \"LinkedIn\", \"slug\": \"linkedin\", \"timesEncountered\": 4}], \"2\": [{\"taggedByAdmin\": false, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 2}], \"3\": [{\"taggedByAdmin\": true, \"name\": \"Uber\", \"slug\": \"uber\", \"timesEncountered\": 0}]}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    vector<vector<int>> getFactors(int n) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public List<List<Integer>> getFactors(int n) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def getFactors(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def getFactors(self, n: int) -> List[List[int]]:\n        "
    },
    {
      "lang": "C",
      "code": "\n\n/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** getFactors(int n, int* returnSize, int** returnColumnSizes){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public IList<IList<int>> GetFactors(int n) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number} n\n * @return {number[][]}\n */\nvar getFactors = function(n) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer} n\n# @return {Integer[][]}\ndef get_factors(n)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func getFactors(_ n: Int) -> [[Int]] {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func getFactors(n int) [][]int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def getFactors(n: Int): List[List[Int]] = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun getFactors(n: Int): List<List<Int>> {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn get_factors(n: i32) -> Vec<Vec<i32>> {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer[][]\n     */\n    function getFactors($n) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"63.1K\", \"totalSubmission\": \"138.3K\", \"totalAcceptedRaw\": 63095, \"totalSubmissionRaw\": 138255, \"acRate\": \"45.6%\"}",
  "hints": [],
  "solution": null,
  "status": null,
  "sampleTestCase": "1",
  "metaData": "{\r\n  \"name\": \"getFactors\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"n\",\r\n      \"type\": \"integer\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"list<list<integer>>\"\r\n  }\r\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
