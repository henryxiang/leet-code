{
  "questionId": "257",
  "questionFrontendId": "257",
  "boundTopicId": null,
  "title": "Binary Tree Paths",
  "titleSlug": "binary-tree-paths",
  "categoryTitle": "Algorithms",
  "content": "<p>Given a binary tree, return all root-to-leaf paths.</p>\r\n\r\n<p><strong>Note:</strong>&nbsp;A leaf is a node with no children.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>\r\n\r\n   1\r\n /   \\\r\n2     3\r\n \\\r\n  5\r\n\r\n<strong>Output:</strong> [&quot;1-&gt;2-&gt;5&quot;, &quot;1-&gt;3&quot;]\r\n\r\n<strong>Explanation:</strong> All root-to-leaf paths are: 1-&gt;2-&gt;5, 1-&gt;3\r\n</pre>",
  "isPaidOnly": false,
  "difficulty": "Easy",
  "likes": 1173,
  "dislikes": 82,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"Path Sum II\", \"titleSlug\": \"path-sum-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Smallest String Starting From Leaf\", \"titleSlug\": \"smallest-string-starting-from-leaf\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
  "contributors": [
    {
      "username": "jianchao-li",
      "profileUrl": "/jianchao-li/",
      "avatarUrl": "https://assets.leetcode.com/users/jianchaolifighter/avatar_1529298385.png"
    }
  ],
  "topicTags": [
    {
      "name": "Tree",
      "slug": "tree"
    },
    {
      "name": "Depth-first Search",
      "slug": "depth-first-search"
    }
  ],
  "companyTagStats": "{\"1\": [{\"taggedByAdmin\": true, \"name\": \"Facebook\", \"slug\": \"facebook\", \"timesEncountered\": 5}, {\"taggedByAdmin\": false, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 2}], \"3\": [{\"taggedByAdmin\": false, \"name\": \"Yandex\", \"slug\": \"yandex\", \"timesEncountered\": 2}, {\"taggedByAdmin\": true, \"name\": \"Apple\", \"slug\": \"apple\", \"timesEncountered\": 0}], \"2\": [{\"taggedByAdmin\": true, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Microsoft\", \"slug\": \"microsoft\", \"timesEncountered\": 2}]}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    vector<string> binaryTreePaths(TreeNode* root) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public List<String> binaryTreePaths(TreeNode root) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def binaryTreePaths(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[str]\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def binaryTreePaths(self, root: TreeNode) -> List[str]:\n        "
    },
    {
      "lang": "C",
      "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar ** binaryTreePaths(struct TreeNode* root, int* returnSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public IList<string> BinaryTreePaths(TreeNode root) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {string[]}\n */\nvar binaryTreePaths = function(root) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val)\n#         @val = val\n#         @left, @right = nil, nil\n#     end\n# end\n\n# @param {TreeNode} root\n# @return {String[]}\ndef binary_tree_paths(root)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func binaryTreePaths(_ root: TreeNode?) -> [String] {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc binaryTreePaths(root *TreeNode) []string {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def binaryTreePaths(root: TreeNode): List[String] = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun binaryTreePaths(root: TreeNode?): List<String> {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn binary_tree_paths(root: Option<Rc<RefCell<TreeNode>>>) -> Vec<String> {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($value) { $this->val = $value; }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $root\n     * @return String[]\n     */\n    function binaryTreePaths($root) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"265.7K\", \"totalSubmission\": \"550.1K\", \"totalAcceptedRaw\": 265667, \"totalSubmissionRaw\": 550051, \"acRate\": \"48.3%\"}",
  "hints": [],
  "solution": {
    "id": "617",
    "canSeeDetail": true,
    "url": "/articles/binary-tree-paths/",
    "content": "[TOC]\n\n## Solution\n\n---\n\n#### Binary tree definition\n\nFirst of all, here is the definition of the ```TreeNode``` which we would use\nin the following implementation.\n\n<iframe src=\"https://leetcode.com/playground/puD5b67v/shared\" frameBorder=\"0\" width=\"100%\" height=\"225\" name=\"puD5b67v\"></iframe>\n<br />\n<br />\n\n\n---\n#### Approach 1: Recursion\n\nThe most intuitive way is to use a recursion here.\nOne is going through the tree \nby considering at each step the node itself and its children.\nIf node *is not* a leaf, one extends the current path by a node value and\ncalls recursively the path construction for its children.\nIf node *is* a leaf, one closes the current path and adds it into \nthe list of paths.\n\n<iframe src=\"https://leetcode.com/playground/t78f23Wq/shared\" frameBorder=\"0\" width=\"100%\" height=\"395\" name=\"t78f23Wq\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : we visit each node exactly once, \nthus the time complexity is $$\\mathcal{O}(N)$$,\nwhere $$N$$ is the number of nodes.\n* Space complexity : $$\\mathcal{O}(N)$$. Here we use the space for a stack call and for a \n`paths` list to store the answer. `paths` contains as many elements as leafs in the tree and \nhence couldn't be larger than $$\\log N$$ for the trees containing more than one element. \nHence the space complexity is determined by a stack call.\nIn the worst case, when the tree is completely unbalanced,\n*e.g.* each node has only one child node, the recursion call would occur\n$$N$$ times (the height of the tree), therefore the storage to keep the call stack would be $$\\mathcal{O}(N)$$.\nBut in the best case (the tree is balanced), the height of the tree would be $$\\log(N)$$.\nTherefore, the space complexity in this case would be $$\\mathcal{O}(\\log(N))$$.\n<br/>\n<br/>\n\n\n---\n#### Approach 2: Iterations\n\nThe approach above could be rewritten with the help of iterations. \nThis way we initiate the stack by a root node and then at each step\nwe pop out one node and its path.\nIf the poped node *is* a leaf, one update the list of all paths.\nIf not, one pushes its child nodes and\ncorresponding paths into stack till all nodes are checked.\n\n<!--![LIS](../Figures/257/257_tr.gif)-->\n!?!../Documents/257_LIS.json:1000,491!?!\n\n<iframe src=\"https://leetcode.com/playground/NzAmWfMP/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"NzAmWfMP\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$\\mathcal{O}(N)$$ since each node is visited exactly once. \n* Space complexity : $$\\mathcal{O}(N)$$ as we could keep up to the entire tree.\n\nAnalysis written by @[liaison](https://leetcode.com/liaison/)\nand @[andvary](https://leetcode.com/andvary/)",
    "contentTypeId": "107",
    "rating": {
      "id": "603",
      "count": 9,
      "average": 4.444,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "[1,2,3,null,5]",
  "metaData": "{\r\n  \"name\": \"binaryTreePaths\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"root\",\r\n      \"type\": \"TreeNode\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"list<string>\",\r\n    \"dealloc\": true\r\n  }\r\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
