{
  "questionId": "259",
  "questionFrontendId": "259",
  "boundTopicId": null,
  "title": "3Sum Smaller",
  "titleSlug": "3sum-smaller",
  "categoryTitle": "Algorithms",
  "content": "<p>Given an array of <i>n</i> integers <i>nums</i> and a <i>target</i>, find the number of index triplets <code>i, j, k</code> with <code>0 &lt;= i &lt; j &lt; k &lt; n</code> that satisfy the condition <code>nums[i] + nums[j] + nums[k] &lt; target</code>.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> <i>nums</i> = <code>[-2,0,1,3]</code>, and <i>target</i> = 2\r\n<strong>Output:</strong> 2 \r\n<strong>Explanation:</strong>&nbsp;Because there are two triplets which sums are less than 2:\r\n&nbsp;            [-2,0,1]\r\n             [-2,0,3]\r\n</pre>\r\n\r\n<p><b style=\"font-family: sans-serif, Arial, Verdana, &quot;Trebuchet MS&quot;;\">Follow up:</b> Could you solve it in <i>O</i>(<i>n</i><sup>2</sup>) runtime?</p>\r\n",
  "isPaidOnly": true,
  "difficulty": "Medium",
  "likes": 467,
  "dislikes": 37,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"3Sum\", \"titleSlug\": \"3sum\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"3Sum Closest\", \"titleSlug\": \"3sum-closest\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Valid Triangle Number\", \"titleSlug\": \"valid-triangle-number\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Two Sum Less Than K\", \"titleSlug\": \"two-sum-less-than-k\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
  "contributors": [],
  "topicTags": [
    {
      "name": "Array",
      "slug": "array"
    },
    {
      "name": "Two Pointers",
      "slug": "two-pointers"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": false, \"name\": \"Coursera\", \"slug\": \"coursera\", \"timesEncountered\": 2}], \"2\": [{\"taggedByAdmin\": true, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 2}], \"1\": [{\"taggedByAdmin\": false, \"name\": \"IBM\", \"slug\": \"ibm\", \"timesEncountered\": 2}]}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    int threeSumSmaller(vector<int>& nums, int target) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int threeSumSmaller(int[] nums, int target) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def threeSumSmaller(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def threeSumSmaller(self, nums: List[int], target: int) -> int:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nint threeSumSmaller(int* nums, int numsSize, int target){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public int ThreeSumSmaller(int[] nums, int target) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */\nvar threeSumSmaller = function(nums, target) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer[]} nums\n# @param {Integer} target\n# @return {Integer}\ndef three_sum_smaller(nums, target)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func threeSumSmaller(_ nums: [Int], _ target: Int) -> Int {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func threeSumSmaller(nums []int, target int) int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def threeSumSmaller(nums: Array[Int], target: Int): Int = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun threeSumSmaller(nums: IntArray, target: Int): Int {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn three_sum_smaller(nums: Vec<i32>, target: i32) -> i32 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $target\n     * @return Integer\n     */\n    function threeSumSmaller($nums, $target) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"58.1K\", \"totalSubmission\": \"125.7K\", \"totalAcceptedRaw\": 58075, \"totalSubmissionRaw\": 125698, \"acRate\": \"46.2%\"}",
  "hints": [],
  "solution": {
    "id": "13",
    "canSeeDetail": true,
    "url": "/articles/3sum-smaller/",
    "content": "[TOC]\r\n\r\n## Solution\r\n---\r\n#### Approach #1 (Brute Force) [Time Limit Exceeded]\r\n\r\nThe brute force approach is to find every possible triplets $$(i, j, k)$$ subjected to $$i < j < k$$ and test for the condition.\r\n\r\n**Complexity analysis**\r\n\r\n* Time complexity : $$O(n^3)$$.\r\nThe total number of such triplets is $$\\binom{n}{3}$$, which is $$\\frac{n!}{(n - 3)! \\times 3!} = \\frac{n \\times (n - 1) \\times (n - 2)}{6}$$. Therefore, the time complexity of the brute force approach is $$O(n^3)$$.\r\n\r\n* Space complexity : $$O(1)$$.\r\n\r\n---\r\n#### Approach #2 (Binary Search) [Accepted]\r\n\r\nBefore we solve this problem, it is helpful to first solve this simpler *twoSum* version.\r\n\r\n>Given a $$nums$$ array, find the number of index pairs $$i$$, $$j$$ with $$0 \\leq i < j < n$$ that satisfy the condition $$nums[i] + nums[j] < target$$\r\n\r\nIf we sort the array first, then we could apply binary search to find the largest index $$j$$ such that $$nums[i] + nums[j] < target$$ for each $$i$$. Once we found that largest index $$j$$, we know there must be $$j-i$$ pairs that satisfy the above condition with $$i$$'s value fixed.\r\n\r\nFinally, we can now apply the *twoSum* solution to *threeSum* directly by wrapping an outer for-loop around it.\r\n\r\n```java\r\npublic int threeSumSmaller(int[] nums, int target) {\r\n    Arrays.sort(nums);\r\n    int sum = 0;\r\n    for (int i = 0; i < nums.length - 2; i++) {\r\n        sum += twoSumSmaller(nums, i + 1, target - nums[i]);\r\n    }\r\n    return sum;\r\n}\r\n\r\nprivate int twoSumSmaller(int[] nums, int startIndex, int target) {\r\n    int sum = 0;\r\n    for (int i = startIndex; i < nums.length - 1; i++) {\r\n        int j = binarySearch(nums, i, target - nums[i]);\r\n        sum += j - i;\r\n    }\r\n    return sum;\r\n}\r\n\r\nprivate int binarySearch(int[] nums, int startIndex, int target) {\r\n    int left = startIndex;\r\n    int right = nums.length - 1;\r\n    while (left < right) {\r\n        int mid = (left + right + 1) / 2;\r\n        if (nums[mid] < target) {\r\n            left = mid;\r\n        } else {\r\n            right = mid - 1;\r\n        }\r\n    }\r\n    return left;\r\n}\r\n```\r\n\r\nNote that in the above binary search we choose the upper middle element $$(\\frac{left+right+1}{2})$$ instead of the lower middle element $$(\\frac{left+right}{2})$$. The reason is due to the terminating condition when there are two elements left. If we chose the lower middle element and the condition $$nums[mid] < target$$ evaluates to true, then the loop will never terminate. Choosing the upper middle element will guarantee termination.\r\n\r\n**Complexity analysis**\r\n\r\n* Time complexity : $$O(n^2 \\log n)$$.\r\nThe *binarySearch* function takes $$O(\\log n)$$ time, therefore the *twoSumSmaller* takes $$O(n \\log n)$$ time. The *threeSumSmaller* wraps with another for-loop, and therefore is $$O(n^2 \\log n)$$ time.\r\n\r\n* Space complexity : $$O(1)$$.\r\n\r\n---\r\n#### Approach #3 (Two Pointers) [Accepted]\r\n\r\nLet us try sorting the array first. For example, $$nums = [3,5,2,8,1]$$ becomes $$[1,2,3,5,8]$$.\r\n\r\nLet us look at an example $$nums = [1,2,3,5,8]$$, and $$target = 7$$.\r\n\r\n    [1, 2, 3, 5, 8]\r\n     ↑           ↑\r\n    left       right\r\n\r\nLet us initialize two indices, $$left$$ and $$right$$ pointing to the first and last element respectively.\r\n\r\nWhen we look at the sum of first and last element, it is $$1 + 8 = 9$$, which is $$\\geq target$$. That tells us no index pair will ever contain the index $$right$$. So the next logical step is to move the right pointer one step to its left.\r\n\r\n    [1, 2, 3, 5, 8]\r\n     ↑        ↑\r\n    left    right\r\n\r\nNow the pair sum is $$1 + 5 = 6$$, which is $$< target$$. How many pairs with one of the $$index = left$$ that satisfy the condition? You can tell by the difference between $$right$$ and $$left$$ which is $$3$$, namely $$(1,2), (1,3),$$ and $$(1,5)$$. Therefore, we move $$left$$ one step to its right.\r\n\r\n```java\r\npublic int threeSumSmaller(int[] nums, int target) {\r\n    Arrays.sort(nums);\r\n    int sum = 0;\r\n    for (int i = 0; i < nums.length - 2; i++) {\r\n        sum += twoSumSmaller(nums, i + 1, target - nums[i]);\r\n    }\r\n    return sum;\r\n}\r\n\r\nprivate int twoSumSmaller(int[] nums, int startIndex, int target) {\r\n    int sum = 0;\r\n    int left = startIndex;\r\n    int right = nums.length - 1;\r\n    while (left < right) {\r\n        if (nums[left] + nums[right] < target) {\r\n            sum += right - left;\r\n            left++;\r\n        } else {\r\n            right--;\r\n        }\r\n    }\r\n    return sum;\r\n}\r\n```\r\n\r\n**Complexity analysis**\r\n\r\n* Time complexity : $$O(n^2)$$.\r\nThe *twoSumSmaller* function takes $$O(n)$$ time because both *left* and *right* traverse at most *n* steps. Therefore, the overall time complexity is $$O(n^2)$$.\r\n\r\n* Space complexity : $$O(1)$$.",
    "contentTypeId": "107",
    "rating": {
      "id": "5",
      "count": 22,
      "average": 4.454,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "[-2,0,1,3]\n2",
  "metaData": "{\r\n  \"name\": \"threeSumSmaller\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"nums\",\r\n      \"type\": \"integer[]\"\r\n    },\r\n    {\r\n        \"name\": \"target\",\r\n        \"type\": \"integer\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
