{
  "questionId": "271",
  "questionFrontendId": "271",
  "boundTopicId": null,
  "title": "Encode and Decode Strings",
  "titleSlug": "encode-and-decode-strings",
  "categoryTitle": "Algorithms",
  "content": "<p>Design an algorithm to encode <b>a list of strings</b> to <b>a string</b>. The encoded string is then sent over the network and is decoded back to the original list of strings.</p>\r\n\r\n<p>Machine 1 (sender) has the function:</p>\r\n\r\n<pre>\r\nstring encode(vector&lt;string&gt; strs) {\r\n  // ... your code\r\n  return encoded_string;\r\n}</pre>\r\nMachine 2 (receiver) has the function:\r\n\r\n<pre>\r\nvector&lt;string&gt; decode(string s) {\r\n  //... your code\r\n  return strs;\r\n}\r\n</pre>\r\n\r\n<p>So Machine 1 does:</p>\r\n\r\n<pre>\r\nstring encoded_string = encode(strs);\r\n</pre>\r\n\r\n<p>and Machine 2 does:</p>\r\n\r\n<pre>\r\nvector&lt;string&gt; strs2 = decode(encoded_string);\r\n</pre>\r\n\r\n<p><code>strs2</code> in Machine 2 should be the same as <code>strs</code> in Machine 1.</p>\r\n\r\n<p>Implement the <code>encode</code> and <code>decode</code> methods.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ul>\r\n\t<li>The string may contain any possible characters out of 256 valid ascii characters. Your algorithm should be generalized enough to work on any possible characters.</li>\r\n\t<li>Do not use class member/global/static variables to store states. Your encode and decode algorithms should be stateless.</li>\r\n\t<li>Do not rely on any library method such as <code>eval</code> or serialize methods. You should implement your own encode/decode algorithm.</li>\r\n</ul>\r\n",
  "isPaidOnly": true,
  "difficulty": "Medium",
  "likes": 328,
  "dislikes": 121,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"Count and Say\", \"titleSlug\": \"count-and-say\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Serialize and Deserialize Binary Tree\", \"titleSlug\": \"serialize-and-deserialize-binary-tree\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"String Compression\", \"titleSlug\": \"string-compression\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Count Binary Substrings\", \"titleSlug\": \"count-binary-substrings\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
  "contributors": [],
  "topicTags": [
    {
      "name": "String",
      "slug": "string"
    }
  ],
  "companyTagStats": "{\"1\": [{\"taggedByAdmin\": true, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 6}], \"3\": [{\"taggedByAdmin\": false, \"name\": \"Bloomberg\", \"slug\": \"bloomberg\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Twitter\", \"slug\": \"twitter\", \"timesEncountered\": 2}], \"2\": [{\"taggedByAdmin\": false, \"name\": \"Square\", \"slug\": \"square\", \"timesEncountered\": 3}, {\"taggedByAdmin\": false, \"name\": \"Microsoft\", \"slug\": \"microsoft\", \"timesEncountered\": 2}]}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Codec {\npublic:\n\n    // Encodes a list of strings to a single string.\n    string encode(vector<string>& strs) {\n        \n    }\n\n    // Decodes a single string to a list of strings.\n    vector<string> decode(string s) {\n        \n    }\n};\n\n// Your Codec object will be instantiated and called as such:\n// Codec codec;\n// codec.decode(codec.encode(strs));"
    },
    {
      "lang": "Java",
      "code": "public class Codec {\n\n    // Encodes a list of strings to a single string.\n    public String encode(List<String> strs) {\n        \n    }\n\n    // Decodes a single string to a list of strings.\n    public List<String> decode(String s) {\n        \n    }\n}\n\n// Your Codec object will be instantiated and called as such:\n// Codec codec = new Codec();\n// codec.decode(codec.encode(strs));"
    },
    {
      "lang": "Python",
      "code": "class Codec:\n\n    def encode(self, strs):\n        \"\"\"Encodes a list of strings to a single string.\n        \n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        \n\n    def decode(self, s):\n        \"\"\"Decodes a single string to a list of strings.\n        \n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        \n\n# Your Codec object will be instantiated and called as such:\n# codec = Codec()\n# codec.decode(codec.encode(strs))"
    },
    {
      "lang": "Python3",
      "code": "class Codec:\n    def encode(self, strs: [str]) -> str:\n        \"\"\"Encodes a list of strings to a single string.\n        \"\"\"\n        \n\n    def decode(self, s: str) -> [str]:\n        \"\"\"Decodes a single string to a list of strings.\n        \"\"\"\n        \n\n\n# Your Codec object will be instantiated and called as such:\n# codec = Codec()\n# codec.decode(codec.encode(strs))"
    },
    {
      "lang": "C",
      "code": "/** Encodes a list of strings to a single string */\nchar* encode(char** strs, int strsSize) {\n    \n}\n\n/**\n * Decodes a single string to a list of strings.\n *\n * Return an array of size *returnSize.\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar** decode(char* s, int* returnSize) {\n    \n}\n\n// Your functions will be called as such:\n// char* s = encode(strs, strsSize);\n// decode(s, &returnSize);"
    },
    {
      "lang": "C#",
      "code": "public class Codec {\n\n    // Encodes a list of strings to a single string.\n    public string encode(IList<string> strs) {\n        \n    }\n\n    // Decodes a single string to a list of strings.\n    public IList<string> decode(string s) {\n        \n    }\n}\n\n// Your Codec object will be instantiated and called as such:\n// Codec codec = new Codec();\n// codec.decode(codec.encode(strs));"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * Encodes a list of strings to a single string.\n *\n * @param {string[]} strs\n * @return {string}\n */\nvar encode = function(strs) {\n    \n};\n\n/**\n * Decodes a single string to a list of strings.\n *\n * @param {string} s\n * @return {string[]}\n */\nvar decode = function(s) {\n    \n};\n\n/**\n * Your functions will be called as such:\n * decode(encode(strs));\n */"
    },
    {
      "lang": "Ruby",
      "code": "# Encodes a list of strings to a single string.\n#\n# @param {string[]} strs\n# @return {string}\ndef encode(strs)\n    \nend\n\n# Decodes a single string to a list of strings.\n#\n# @param {string} s\n# @return {string[]}\ndef decode(s)\n    \nend\n\n\n# Your functions will be called as such:\n# decode(encode(strs))"
    },
    {
      "lang": "Go",
      "code": "type Codec struct {\n    \n}\n\n// Encodes a list of strings to a single string.\nfunc (codec *Codec) Encode(strs []string) string {\n    \n}\n\n// Decodes a single string to a list of strings.\nfunc (codec *Codec) Decode(strs string) []string {\n    \n}\n\n// Your Codec object will be instantiated and called as such:\n// var codec Codec\n// codec.Decode(codec.Encode(strs));"
    }
  ],
  "stats": "{\"totalAccepted\": \"49.5K\", \"totalSubmission\": \"169.3K\", \"totalAcceptedRaw\": 49530, \"totalSubmissionRaw\": 169328, \"acRate\": \"29.3%\"}",
  "hints": [],
  "solution": {
    "id": "748",
    "canSeeDetail": true,
    "url": "/articles/encode-and-decode-strings/",
    "content": "[TOC]\r\n\r\n## Solution\r\n\r\n--- \r\n\r\n#### Approach 1: Non-ASCII Delimiter\r\n\r\n**Intuition**\r\n\r\nNaive solution here is to join strings using delimiters.\r\n\r\n> What to use as a delimiter? Each string may contain \r\nany possible characters out of 256 valid ascii characters.\r\n\r\nSeems like one has to use non-ASCII unichar character, \r\nfor example `unichr(257)` in Python and\r\n`Character.toString((char)257)` in Java (it's character `ƒÅ`). \r\n\r\n![fig](../Figures/271/delimiter.png)\r\n\r\nHere it's convenient to use two different non-ASCII characters,\r\nto distinguish between situations of \"empty array\" and \r\nof \"array of empty strings\". \r\n\r\n**Implementation**\r\n\r\nUse `split` in Java with a second argument `-1` to \r\nmake it work as `split` in Python.\r\n\r\n<iframe src=\"https://leetcode.com/playground/AEezBdQn/shared\" frameBorder=\"0\" width=\"100%\" height=\"463\" name=\"AEezBdQn\"></iframe>\r\n\r\n**Complexity Analysis**\r\n\r\n* Time complexity : $$\\mathcal{O}(N)$$ both for encode and decode,\r\nwhere N is a number of strings in the input array.\r\n\r\n* Space complexity : $$\\mathcal{O}(1)$$ for encode to keep the output,\r\nsince the output is one string.\r\n$$\\mathcal{O}(N)$$ for decode keep the output,\r\nsince the output is an array of strings.\r\n<br /> \r\n<br />\r\n\r\n\r\n---\r\n#### Approach 2: Chunked Transfer Encoding\r\n\r\nPay attention to this approach because last year Google likes\r\nto ask that sort of low-level optimisation. \r\n[Serialize and deserialize BST problem](https://leetcode.com/articles/serialize-and-deserialize-bst/)\r\nis a similar example. \r\n\r\nThis approach is based on the \r\n[encoding used in HTTP v1.1](https://en.wikipedia.org/wiki/Chunked_transfer_encoding).\r\nIt doesn't depend on the set of input characters, and hence\r\nis more versatile and effective than Approach 1.\r\n\r\n> Data stream is divided into chunks.\r\nEach chunk is preceded by its size in bytes.\r\n\r\n**Encoding Algorithm**\r\n\r\n![fig](../Figures/271/encodin.png)\r\n\r\n- Iterate over the array of chunks, i.e. strings. \r\n\r\n    - For each chunk compute its length, and convert that length into\r\n    4-bytes string.\r\n    \r\n    - Append to encoded string :\r\n     \r\n        - 4-bytes string with information about chunk size in bytes.\r\n        \r\n        - Chunk itself.\r\n        \r\n- Return encoded string.\r\n\r\n**Decoding Algorithm**\r\n\r\n![fig](../Figures/271/decodin.png)\r\n\r\n- Iterate over the encoded string with a pointer `i` initiated as 0.\r\nWhile `i < n`:\r\n\r\n    - Read 4 bytes `s[i: i + 4]`. It's chunk size in bytes. \r\n    Convert this 4-bytes string to integer `length`.\r\n    \r\n    - Move the pointer by 4 bytes `i += 4`.\r\n    \r\n    - Append to the decoded array string `s[i: i + length]`.\r\n    \r\n    - Move the pointer by `length` bytes `i += length`.\r\n    \r\n- Return decoded array of strings.\r\n\r\n**Implementation**\r\n\r\n<iframe src=\"https://leetcode.com/playground/qezzWC9J/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"qezzWC9J\"></iframe>\r\n\r\n**Complexity Analysis**\r\n\r\n* Time complexity : $$\\mathcal{O}(N)$$ both for encode and decode,\r\nwhere N is a number of strings in the input array.\r\n\r\n* Space complexity : $$\\mathcal{O}(1)$$ for encode to keep the output,\r\nsince the output is one string.\r\n$$\\mathcal{O}(N)$$ for decode keep the output,\r\nsince the output is an array of strings.\r\n\r\nAnalysis written by @[liaison](https://leetcode.com/liaison/)\r\nand @[andvary](https://leetcode.com/andvary/)",
    "contentTypeId": "107",
    "rating": {
      "id": "733",
      "count": 8,
      "average": 4.75,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "[\"Hello\",\"World\"]",
  "metaData": "{\n  \"name\": \"encode\",\n  \"params\": [\n    {\n      \"name\": \"dummy_input\",\n      \"type\": \"list<string>\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"list<string>\"\n  },\n  \"languages\": [\n    \"cpp\",\n    \"java\",\n    \"python\",\n    \"c\",\n    \"csharp\",\n    \"ruby\",\n    \"golang\",\n    \"javascript\",\n    \"python3\"\n  ],\n  \"manual\": true\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
