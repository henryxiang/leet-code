{
  "questionId": "273",
  "questionFrontendId": "273",
  "boundTopicId": null,
  "title": "Integer to English Words",
  "titleSlug": "integer-to-english-words",
  "categoryTitle": "Algorithms",
  "content": "<p>Convert a non-negative integer to its english words representation. Given input is guaranteed to be less than 2<sup>31</sup> - 1.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> 123\r\n<b>Output:</b> &quot;One Hundred Twenty Three&quot;\r\n</pre>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> 12345\r\n<b>Output:</b> &quot;Twelve Thousand Three Hundred Forty Five&quot;</pre>\r\n\r\n<p><b>Example 3:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> 1234567\r\n<b>Output:</b> &quot;One Million Two Hundred Thirty Four Thousand Five Hundred Sixty Seven&quot;\r\n</pre>\r\n\r\n<p><b>Example 4:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> 1234567891\r\n<b>Output:</b> &quot;One Billion Two Hundred Thirty Four Million Five Hundred Sixty Seven Thousand Eight Hundred Ninety One&quot;\r\n</pre>\r\n",
  "isPaidOnly": false,
  "difficulty": "Hard",
  "likes": 711,
  "dislikes": 2017,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"Integer to Roman\", \"titleSlug\": \"integer-to-roman\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
  "contributors": [],
  "topicTags": [
    {
      "name": "Math",
      "slug": "math"
    },
    {
      "name": "String",
      "slug": "string"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": false, \"name\": \"Yelp\", \"slug\": \"yelp\", \"timesEncountered\": 6}, {\"taggedByAdmin\": false, \"name\": \"Palantir Technologies\", \"slug\": \"palantir-technologies\", \"timesEncountered\": 4}, {\"taggedByAdmin\": false, \"name\": \"Tableau\", \"slug\": \"tableau\", \"timesEncountered\": 3}, {\"taggedByAdmin\": false, \"name\": \"JPMorgan\", \"slug\": \"jpmorgan\", \"timesEncountered\": 3}, {\"taggedByAdmin\": false, \"name\": \"IBM\", \"slug\": \"ibm\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Paypal\", \"slug\": \"paypal\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Yahoo\", \"slug\": \"yahoo\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Coupang\", \"slug\": \"coupang\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"SAP\", \"slug\": \"sap\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Visa\", \"slug\": \"visa\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Citrix\", \"slug\": \"citrix\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Barclays\", \"slug\": \"barclays\", \"timesEncountered\": 2}], \"1\": [{\"taggedByAdmin\": true, \"name\": \"Facebook\", \"slug\": \"facebook\", \"timesEncountered\": 31}, {\"taggedByAdmin\": false, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 13}, {\"taggedByAdmin\": true, \"name\": \"Microsoft\", \"slug\": \"microsoft\", \"timesEncountered\": 11}, {\"taggedByAdmin\": false, \"name\": \"LinkedIn\", \"slug\": \"linkedin\", \"timesEncountered\": 5}, {\"taggedByAdmin\": false, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 3}, {\"taggedByAdmin\": false, \"name\": \"Apple\", \"slug\": \"apple\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Splunk\", \"slug\": \"splunk\", \"timesEncountered\": 2}], \"2\": [{\"taggedByAdmin\": false, \"name\": \"Uber\", \"slug\": \"uber\", \"timesEncountered\": 3}, {\"taggedByAdmin\": false, \"name\": \"Bloomberg\", \"slug\": \"bloomberg\", \"timesEncountered\": 3}, {\"taggedByAdmin\": false, \"name\": \"Zillow\", \"slug\": \"zillow\", \"timesEncountered\": 3}, {\"taggedByAdmin\": false, \"name\": \"Oracle\", \"slug\": \"oracle\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Capital One\", \"slug\": \"capital-one\", \"timesEncountered\": 2}]}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    string numberToWords(int num) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public String numberToWords(int num) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def numberToWords(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def numberToWords(self, num: int) -> str:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nchar * numberToWords(int num){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public string NumberToWords(int num) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number} num\n * @return {string}\n */\nvar numberToWords = function(num) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer} num\n# @return {String}\ndef number_to_words(num)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func numberToWords(_ num: Int) -> String {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func numberToWords(num int) string {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def numberToWords(num: Int): String = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun numberToWords(num: Int): String {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn number_to_words(num: i32) -> String {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer $num\n     * @return String\n     */\n    function numberToWords($num) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"132.6K\", \"totalSubmission\": \"520.7K\", \"totalAcceptedRaw\": 132592, \"totalSubmissionRaw\": 520687, \"acRate\": \"25.5%\"}",
  "hints": [
    "Did you see a pattern in dividing the number into chunk of words? For example, 123 and 123000.",
    "Group the number by thousands (3 digits). You can write a helper function that takes a number less than 1000 and convert just that chunk to words.",
    "There are many edge cases. What are some good test cases? Does your code work with input such as 0? Or 1000010? (middle chunk is zero and should not be printed out)"
  ],
  "solution": {
    "id": "627",
    "canSeeDetail": true,
    "url": "/articles/integer-to-english-words/",
    "content": "[TOC]\r\n\r\n## Solution\r\n\r\n---\r\n\r\n#### Approach 1: Divide and conquer \r\n\r\nLet's simplify the problem by representing it as a set of simple sub-problems.\r\nOne could split the initial integer `1234567890` on the groups \r\ncontaining not more than three digits `1.234.567.890`.\r\nThat results in representation `1 Billion 234 Million 567 Thousand 890` and \r\nreduces the initial problem to how to convert 3-digit integer to English word. \r\nOne could split further `234` -> `2 Hundred 34` into two sub-problems :\r\nconvert 1-digit integer and convert 2-digit integer. The first one is trivial. \r\nThe second one could be reduced to the first one for all 2-digit integers \r\nbut the ones from `10` to `19` which should be considered separately.\r\n\r\n<!--![LIS](../Figures/273/273_tr.gif)-->\r\n!?!../Documents/273_LIS.json:1000,632!?!\r\n\r\n<iframe src=\"https://leetcode.com/playground/wpAaWJCm/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"wpAaWJCm\"></iframe>\r\n\r\n**Complexity Analysis**\r\n\r\n* Time complexity :  $$\\mathcal{O}(N)$$. \r\nIntuitively the output is proportional\r\nto the number `N` of digits in the input. \r\n* Space complexity : $$\\mathcal{O}(1)$$ since the output is just a string. \r\n\r\nAnalysis written by @[liaison](https://leetcode.com/liaison/)\r\nand @[andvary](https://leetcode.com/andvary/)",
    "contentTypeId": "107",
    "rating": {
      "id": "613",
      "count": 27,
      "average": 4.259,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "123",
  "metaData": "{\r\n  \"name\": \"numberToWords\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"num\",\r\n      \"type\": \"integer\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"string\"\r\n  }\r\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
