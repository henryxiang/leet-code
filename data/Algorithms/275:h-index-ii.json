{
  "questionId": "275",
  "questionFrontendId": "275",
  "boundTopicId": null,
  "title": "H-Index II",
  "titleSlug": "h-index-ii",
  "categoryTitle": "Algorithms",
  "content": "<p>Given an array of citations <strong>sorted&nbsp;in ascending order </strong>(each citation is a non-negative integer) of a researcher, write a function to compute the researcher&#39;s h-index.</p>\r\n\r\n<p>According to the&nbsp;<a href=\"https://en.wikipedia.org/wiki/H-index\" target=\"_blank\">definition of h-index on Wikipedia</a>: &quot;A scientist has index&nbsp;<i>h</i>&nbsp;if&nbsp;<i>h</i>&nbsp;of his/her&nbsp;<i>N</i>&nbsp;papers have&nbsp;<b>at least</b>&nbsp;<i>h</i>&nbsp;citations each, and the other&nbsp;<i>N &minus; h</i>&nbsp;papers have&nbsp;<b>no more than</b>&nbsp;<i>h&nbsp;</i>citations each.&quot;</p>\r\n\r\n<p><b>Example:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> <code>citations = [0,1,3,5,6]</code>\r\n<b>Output:</b> 3 \r\n<strong>Explanation: </strong><code>[0,1,3,5,6] </code>means the researcher has <code>5</code> papers in total and each of them had \r\n             received 0<code>, 1, 3, 5, 6</code> citations respectively. \r\n&nbsp;            Since the researcher has <code>3</code> papers with <b>at least</b> <code>3</code> citations each and the remaining \r\n&nbsp;            two with <b>no more than</b> <code>3</code> citations each, her h-index is <code>3</code>.</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<p>If there are several possible values for&nbsp;<em>h</em>, the maximum one is taken as the h-index.</p>\r\n\r\n<p><strong>Follow up:</strong></p>\r\n\r\n<ul>\r\n\t<li>This is a follow up problem to&nbsp;<a href=\"/problems/h-index/description/\">H-Index</a>, where <code>citations</code> is now guaranteed to be sorted in ascending order.</li>\r\n\t<li>Could you solve it in logarithmic time complexity?</li>\r\n</ul>\r\n",
  "isPaidOnly": false,
  "difficulty": "Medium",
  "likes": 260,
  "dislikes": 437,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"H-Index\", \"titleSlug\": \"h-index\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
  "contributors": [],
  "topicTags": [
    {
      "name": "Binary Search",
      "slug": "binary-search"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"Facebook\", \"slug\": \"facebook\", \"timesEncountered\": 0}], \"1\": [], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    int hIndex(vector<int>& citations) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int hIndex(int[] citations) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def hIndex(self, citations):\n        \"\"\"\n        :type citations: List[int]\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def hIndex(self, citations: List[int]) -> int:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nint hIndex(int* citations, int citationsSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public int HIndex(int[] citations) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number[]} citations\n * @return {number}\n */\nvar hIndex = function(citations) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer[]} citations\n# @return {Integer}\ndef h_index(citations)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func hIndex(_ citations: [Int]) -> Int {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func hIndex(citations []int) int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def hIndex(citations: Array[Int]): Int = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun hIndex(citations: IntArray): Int {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn h_index(citations: Vec<i32>) -> i32 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer[] $citations\n     * @return Integer\n     */\n    function hIndex($citations) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"89.8K\", \"totalSubmission\": \"249.8K\", \"totalAcceptedRaw\": 89785, \"totalSubmissionRaw\": 249801, \"acRate\": \"35.9%\"}",
  "hints": [
    "Expected runtime complexity is in <i>O</i>(log <i>n</i>) and the input is sorted."
  ],
  "solution": {
    "id": "751",
    "canSeeDetail": true,
    "url": "/articles/h-index-ii/",
    "content": "[TOC]\r\n\r\n## Solution\r\n\r\n--- \r\n\r\n#### Approach 1: Linear search, O(k) time\r\n\r\n**Intuition**\r\n\r\nThanks to the fact that the list of citation numbers is sorted in the ascending order,\r\none could solve the problem in a single pass of iteration.\r\n\r\nLet's consider an article whose citation number `c` is index at `i`,\r\n_i.e_ `c = citations[i]`. We would know that the number of articles \r\nwhose citation number is higher than `c` would be `n - i - 1`.  \r\nAnd together with the current article, there are `n - i` articles that are cited \r\nat least `c` times.\r\n\r\nGiven the definition of H-Index, we just need to find the first article at `i` \r\nwhose citation number `c = citation[i]` is greater or equal to `n - i `,\r\n_i.e._ `c >= n - i`.\r\nAs we know that all the articles following `i` would be cited at least `c` times,\r\nso in total _there are `n - i` articles that are cited at least `c` times_.\r\nAs a result, according to the definition, the H-Index of the author should be `n - i`.\r\n\r\n![pic](../Figures/275/dia.png)\r\n\r\nFollowing the above intuition, it is straightforward to implement the algorithm.\r\nWe give some examples in the following.\r\n\r\n**Implementation**\r\n\r\n<iframe src=\"https://leetcode.com/playground/e4dWibsj/shared\" frameBorder=\"0\" width=\"100%\" height=\"242\" name=\"e4dWibsj\"></iframe>\r\n\r\n**Complexity Analysis**\r\n\r\n* Time complexity : $$\\mathcal{O}(N)$$ where N is the length of the input list,\r\nsince in the worse case we would iterate the entire list.\r\n\r\n* Space complexity : $$\\mathcal{O}(1)$$, it's a constant space solution.\r\n<br /> \r\n<br />\r\n\r\n\r\n---\r\n#### Approach 2: Binary Search, O(log N) time\r\n\r\n**Intuition**\r\n\r\nFollowing in the intuition we elaborated in the Approach 1,\r\nthe problem is actually boiled down to the following task:\r\n\r\n> Given a sorted list `citations` of size `n` in ascending order, \r\none is asked to find the *first* number `citations[i]`\r\nwhich meets the constraint of `citations[i] >= n - i`. \r\n\r\nWith the above formulation of the problem, \r\nit becomes clear that one could apply the *binary search* \r\nalgorithm to solve the problem.\r\nIn binary search algorithm, we recursively \r\nreduce the searching scope into half, \r\nwhich leads to a more optimal $$\\mathcal{O}(\\log N)$$ \r\ntime complexity comparing to the $$\\mathcal{O}(N)$$ of the linear search.\r\n\r\n![pic](../Figures/275/binary.png)\r\n\r\n**Algorithm**\r\n\r\nFirst we pick a pivot element that is in the middle of the list, \r\n_i.e._ `citations[pivot]`,\r\nwhich would divide the original list into two sublists:\r\n`citations[0 : pivot - 1]` and `citations[pivot + 1 : n]`.\r\n\r\nThen comparing between the values of `n - pivot` \r\nand `citations[pivot]` element,\r\nour binary search algorithm breaks down to the following 3 cases:\r\n\r\n- `citations[pivot] == n - pivot`: We found the desired element !\r\n\r\n- `citations[pivot] < n - pivot`: \r\nSince the desired element should be greater or equal to `n - pivot`,\r\nwe then further look into the sublist on the right hand side, \r\n_i.e._ `citations[pivot + 1 : n]`.\r\n\r\n- `citations[pivot] > n - pivot`: \r\nWe should look into the sublist on the left hand side, \r\n_i.e._ `citations[0 : pivot-1]`.\r\n\r\nA minor difference to the typical binary search algorithm, \r\nis that in this case we return the value of `n - pivot` as the result, \r\nrather than the value of the desired element.\r\n\r\n**Implementation**\r\n\r\n<iframe src=\"https://leetcode.com/playground/ACTJd3wD/shared\" frameBorder=\"0\" width=\"100%\" height=\"361\" name=\"ACTJd3wD\"></iframe>\r\n\r\n**Complexity Analysis**\r\n\r\n* Time complexity : $$\\mathcal{O}(\\log N)$$ since we apply binary search\r\nalgorithm here. \r\n\r\n* Space complexity : $$\\mathcal{O}(1)$$, it's a constant space solution.\r\n\r\nAnalysis written by @[liaison](https://leetcode.com/liaison/)\r\nand @[andvary](https://leetcode.com/andvary/)",
    "contentTypeId": "107",
    "rating": {
      "id": "736",
      "count": 4,
      "average": 4.5,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "[0,1,3,5,6]",
  "metaData": "{\r\n  \"name\": \"hIndex\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"citations\",\r\n      \"type\": \"integer[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
