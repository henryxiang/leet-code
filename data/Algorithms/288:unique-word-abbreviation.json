{
  "questionId": "288",
  "questionFrontendId": "288",
  "boundTopicId": null,
  "title": "Unique Word Abbreviation",
  "titleSlug": "unique-word-abbreviation",
  "categoryTitle": "Algorithms",
  "content": "<p>An abbreviation of a word follows the form &lt;first letter&gt;&lt;number&gt;&lt;last letter&gt;. Below are some examples of word abbreviations:</p>\r\n\r\n<pre>\r\na) it                      --&gt; it    (no abbreviation)\r\n\r\n     1\r\n     &darr;\r\nb) d|o|g                   --&gt; d1g\r\n\r\n              1    1  1\r\n     1---5----0----5--8\r\n     &darr;   &darr;    &darr;    &darr;  &darr;    \r\nc) i|nternationalizatio|n  --&gt; i18n\r\n\r\n              1\r\n     1---5----0\r\n&nbsp;    &darr;   &darr;    &darr;\r\nd) l|ocalizatio|n          --&gt; l10n\r\n</pre>\r\n\r\n<p>Assume you have a dictionary and given a word, find whether its abbreviation is unique in the dictionary. A word&#39;s abbreviation is unique if no <i>other</i> word from the dictionary has the same abbreviation.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\nGiven dictionary = [ &quot;deer&quot;, &quot;door&quot;, &quot;cake&quot;, &quot;card&quot; ]\r\n\r\nisUnique(&quot;dear&quot;) -&gt; <code>false</code>\r\nisUnique(&quot;cart&quot;) -&gt; <code>true</code>\r\nisUnique(&quot;cane&quot;) -&gt; <code>false</code>\r\nisUnique(&quot;make&quot;) -&gt; <code>true</code>\r\n</pre>\r\n",
  "isPaidOnly": true,
  "difficulty": "Medium",
  "likes": 82,
  "dislikes": 1098,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"Two Sum III - Data structure design\", \"titleSlug\": \"two-sum-iii-data-structure-design\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Generalized Abbreviation\", \"titleSlug\": \"generalized-abbreviation\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
  "contributors": [],
  "topicTags": [
    {
      "name": "Hash Table",
      "slug": "hash-table"
    },
    {
      "name": "Design",
      "slug": "design"
    }
  ],
  "companyTagStats": "{\"1\": [{\"taggedByAdmin\": true, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 2}], \"2\": [], \"3\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class ValidWordAbbr {\npublic:\n    ValidWordAbbr(vector<string>& dictionary) {\n        \n    }\n    \n    bool isUnique(string word) {\n        \n    }\n};\n\n/**\n * Your ValidWordAbbr object will be instantiated and called as such:\n * ValidWordAbbr* obj = new ValidWordAbbr(dictionary);\n * bool param_1 = obj->isUnique(word);\n */"
    },
    {
      "lang": "Java",
      "code": "class ValidWordAbbr {\n\n    public ValidWordAbbr(String[] dictionary) {\n        \n    }\n    \n    public boolean isUnique(String word) {\n        \n    }\n}\n\n/**\n * Your ValidWordAbbr object will be instantiated and called as such:\n * ValidWordAbbr obj = new ValidWordAbbr(dictionary);\n * boolean param_1 = obj.isUnique(word);\n */"
    },
    {
      "lang": "Python",
      "code": "class ValidWordAbbr(object):\n\n    def __init__(self, dictionary):\n        \"\"\"\n        :type dictionary: List[str]\n        \"\"\"\n        \n\n    def isUnique(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n\n\n# Your ValidWordAbbr object will be instantiated and called as such:\n# obj = ValidWordAbbr(dictionary)\n# param_1 = obj.isUnique(word)"
    },
    {
      "lang": "Python3",
      "code": "class ValidWordAbbr:\n\n    def __init__(self, dictionary: List[str]):\n        \n\n    def isUnique(self, word: str) -> bool:\n        \n\n\n# Your ValidWordAbbr object will be instantiated and called as such:\n# obj = ValidWordAbbr(dictionary)\n# param_1 = obj.isUnique(word)"
    },
    {
      "lang": "C",
      "code": "\n\n\ntypedef struct {\n    \n} ValidWordAbbr;\n\n\nValidWordAbbr* validWordAbbrCreate(char ** dictionary, int dictionarySize) {\n    \n}\n\nbool validWordAbbrIsUnique(ValidWordAbbr* obj, char * word) {\n  \n}\n\nvoid validWordAbbrFree(ValidWordAbbr* obj) {\n    \n}\n\n/**\n * Your ValidWordAbbr struct will be instantiated and called as such:\n * ValidWordAbbr* obj = validWordAbbrCreate(dictionary, dictionarySize);\n * bool param_1 = validWordAbbrIsUnique(obj, word);\n \n * validWordAbbrFree(obj);\n*/"
    },
    {
      "lang": "C#",
      "code": "public class ValidWordAbbr {\n\n    public ValidWordAbbr(string[] dictionary) {\n        \n    }\n    \n    public bool IsUnique(string word) {\n        \n    }\n}\n\n/**\n * Your ValidWordAbbr object will be instantiated and called as such:\n * ValidWordAbbr obj = new ValidWordAbbr(dictionary);\n * bool param_1 = obj.IsUnique(word);\n */"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {string[]} dictionary\n */\nvar ValidWordAbbr = function(dictionary) {\n    \n};\n\n/** \n * @param {string} word\n * @return {boolean}\n */\nValidWordAbbr.prototype.isUnique = function(word) {\n    \n};\n\n/** \n * Your ValidWordAbbr object will be instantiated and called as such:\n * var obj = new ValidWordAbbr(dictionary)\n * var param_1 = obj.isUnique(word)\n */"
    },
    {
      "lang": "Ruby",
      "code": "class ValidWordAbbr\n\n=begin\n    :type dictionary: String[]\n=end\n    def initialize(dictionary)\n        \n    end\n\n\n=begin\n    :type word: String\n    :rtype: Boolean\n=end\n    def is_unique(word)\n        \n    end\n\n\nend\n\n# Your ValidWordAbbr object will be instantiated and called as such:\n# obj = ValidWordAbbr.new(dictionary)\n# param_1 = obj.is_unique(word)"
    },
    {
      "lang": "Swift",
      "code": "\nclass ValidWordAbbr {\n\n    init(_ dictionary: [String]) {\n        \n    }\n    \n    func isUnique(_ word: String) -> Bool {\n        \n    }\n}\n\n/**\n * Your ValidWordAbbr object will be instantiated and called as such:\n * let obj = ValidWordAbbr(dictionary)\n * let ret_1: Bool = obj.isUnique(word)\n */"
    },
    {
      "lang": "Go",
      "code": "type ValidWordAbbr struct {\n    \n}\n\n\nfunc Constructor(dictionary []string) ValidWordAbbr {\n    \n}\n\n\nfunc (this *ValidWordAbbr) IsUnique(word string) bool {\n    \n}\n\n\n/**\n * Your ValidWordAbbr object will be instantiated and called as such:\n * obj := Constructor(dictionary);\n * param_1 := obj.IsUnique(word);\n */"
    },
    {
      "lang": "Scala",
      "code": "class ValidWordAbbr(_dictionary: Array[String]) {\n\n    def isUnique(word: String): Boolean = {\n        \n    }\n\n}\n\n/**\n * Your ValidWordAbbr object will be instantiated and called as such:\n * var obj = new ValidWordAbbr(dictionary)\n * var param_1 = obj.isUnique(word)\n */"
    },
    {
      "lang": "Kotlin",
      "code": "class ValidWordAbbr(dictionary: Array<String>) {\n\n    fun isUnique(word: String): Boolean {\n        \n    }\n\n}\n\n/**\n * Your ValidWordAbbr object will be instantiated and called as such:\n * var obj = ValidWordAbbr(dictionary)\n * var param_1 = obj.isUnique(word)\n */"
    },
    {
      "lang": "Rust",
      "code": "struct ValidWordAbbr {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl ValidWordAbbr {\n\n    fn new(dictionary: Vec<String>) -> Self {\n        \n    }\n    \n    fn is_unique(&self, word: String) -> bool {\n        \n    }\n}\n\n/**\n * Your ValidWordAbbr object will be instantiated and called as such:\n * let obj = ValidWordAbbr::new(dictionary);\n * let ret_1: bool = obj.is_unique(word);\n */"
    },
    {
      "lang": "PHP",
      "code": "class ValidWordAbbr {\n    /**\n     * @param String[] $dictionary\n     */\n    function __construct($dictionary) {\n        \n    }\n  \n    /**\n     * @param String $word\n     * @return Boolean\n     */\n    function isUnique($word) {\n        \n    }\n}\n\n/**\n * Your ValidWordAbbr object will be instantiated and called as such:\n * $obj = ValidWordAbbr($dictionary);\n * $ret_1 = $obj->isUnique($word);\n */"
    }
  ],
  "stats": "{\"totalAccepted\": \"46.3K\", \"totalSubmission\": \"221.5K\", \"totalAcceptedRaw\": 46343, \"totalSubmissionRaw\": 221500, \"acRate\": \"20.9%\"}",
  "hints": [],
  "solution": {
    "id": "17",
    "canSeeDetail": true,
    "url": "/articles/unique-word-abbreviation/",
    "content": "[TOC]\r\n\r\n## Summary\r\n\r\nThis problem has a low acceptance rate for a reason. The logic in `isUnique` can be a little tricky to get right due to the number of cases you need to consider. We highly recommend that you practice this similar but easier problem first - [Two Sum III - Data structure design](https://leetcode.com/problems/two-sum-iii-data-structure-design/).\r\n\r\n## Solution\r\n---\r\n#### Approach #1 (Brute Force)\r\n\r\nLet us begin by storing the dictionary first in the constructor. To determine if a word's abbreviation is unique with respect to a word in the dictionary, we check if all the following conditions are met:\r\n\r\n1. <a name=\"condition-1\"></a>They are not the same word.\r\n2. They both have equal lengths.\r\n3. They both share the same first and last letter.\r\n\r\nNote that [Condition #1](#condition-1) is implicit because from the problem statement:\r\n\r\n>A word's abbreviation is unique if no ***other*** word from the dictionary has the same abbreviation.\r\n\r\n```java\r\npublic class ValidWordAbbr {\r\n    private final String[] dict;\r\n\r\n    public ValidWordAbbr(String[] dictionary) {\r\n        dict = dictionary;\r\n    }\r\n\r\n    public boolean isUnique(String word) {\r\n        int n = word.length();\r\n        for (String s : dict) {\r\n            if (word.equals(s)) {\r\n                continue;\r\n            }\r\n            int m = s.length();\r\n            if (m == n\r\n                && s.charAt(0) == word.charAt(0)\r\n                && s.charAt(m - 1) == word.charAt(n - 1)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}\r\n```\r\n\r\n**Complexity analysis**\r\n\r\n* Time complexity : $$O(n)$$ for each `isUnique` call.\r\nAssume that $$n$$ is the number of words in the dictionary, each `isUnique` call takes $$O(n)$$ time.\r\n\r\n---\r\n#### Approach #2 (Hash Table) [Accepted]\r\n\r\nNote that `isUnique` is called repeatedly for the same set of words in the dictionary each time. We should pre-process the dictionary to speed it up.\r\n\r\nIdeally, a hash table supports constant time look up. What should the key-value pair be?\r\n\r\nWell, the idea is to *group* the words that fall under the same abbreviation together. For the value, we use a Set instead of a List to guarantee uniqueness.\r\n\r\nThe logic in `isUnique(word)` is tricky. You need to consider the following cases:\r\n\r\n1. Does the word's abbreviation exists in the dictionary? If not, then it must be unique.\r\n2. If above is yes, then it can only be unique if the grouping of the abbreviation contains no other words except *word*.\r\n\r\n```java\r\npublic class ValidWordAbbr {\r\n    private final Map<String, Set<String>> abbrDict = new HashMap<>();\r\n\r\n    public ValidWordAbbr(String[] dictionary) {\r\n        for (String s : dictionary) {\r\n            String abbr = toAbbr(s);\r\n            Set<String> words = abbrDict.containsKey(abbr)\r\n                ? abbrDict.get(abbr) : new HashSet<>();\r\n            words.add(s);\r\n            abbrDict.put(abbr, words);\r\n        }\r\n    }\r\n\r\n    public boolean isUnique(String word) {\r\n        String abbr = toAbbr(word);\r\n        Set<String> words = abbrDict.get(abbr);\r\n        return words == null || (words.size() == 1 && words.contains(word));\r\n    }\r\n\r\n    private String toAbbr(String s) {\r\n        int n = s.length();\r\n        if (n <= 2) {\r\n            return s;\r\n        }\r\n        return s.charAt(0) + Integer.toString(n - 2) + s.charAt(n - 1);\r\n    }\r\n}\r\n```\r\n\r\n---\r\n#### Approach #3 (Hash Table) [Accepted]\r\n\r\nLet us consider another approach using a counter as the table's value. For example, assume the dictionary = `[\"door\", \"deer\"]`, we have the mapping of `{\"d2r\" -> 2}`. However, this mapping alone is not enough, because we need to consider whether the word exists in the dictionary. This can be easily overcome by inserting the entire dictionary into a set.\r\n\r\nWhen an abbreviation's counter exceeds one, we know this abbreviation must not be unique because at least two different words share the same abbreviation. Therefore, we can further simplify the counter to just a boolean.\r\n\r\n```java\r\npublic class ValidWordAbbr {\r\n    private final Map<String, Boolean> abbrDict = new HashMap<>();\r\n    private final Set<String> dict;\r\n\r\n    public ValidWordAbbr(String[] dictionary) {\r\n        dict = new HashSet<>(Arrays.asList(dictionary));\r\n        for (String s : dict) {\r\n            String abbr = toAbbr(s);\r\n            abbrDict.put(abbr, !abbrDict.containsKey(abbr));\r\n        }\r\n    }\r\n\r\n    public boolean isUnique(String word) {\r\n        String abbr = toAbbr(word);\r\n        Boolean hasAbbr = abbrDict.get(abbr);\r\n        return hasAbbr == null || (hasAbbr && dict.contains(word));\r\n    }\r\n\r\n    private String toAbbr(String s) {\r\n        int n = s.length();\r\n        if (n <= 2) {\r\n            return s;\r\n        }\r\n        return s.charAt(0) + Integer.toString(n - 2) + s.charAt(n - 1);\r\n    }\r\n}\r\n```\r\n\r\n**Complexity analysis**\r\n\r\n* Time complexity : $$O(n)$$ pre-processing, $$O(1)$$ for each `isUnique` call.\r\nBoth [Approach #2](#approach-2) and [Approach #3](#approach-3) above take $$O(n)$$ pre-processing time in the constructor. This is totally worth it if `isUnique` is called repeatedly.\r\n\r\n* Space complexity : $$O(n)$$.\r\nWe traded the extra $$O(n)$$ space storing the table to reduce the time complexity in `isUnique`.",
    "contentTypeId": "107",
    "rating": {
      "id": "13",
      "count": 18,
      "average": 4.278,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "[\"ValidWordAbbr\",\"isUnique\",\"isUnique\",\"isUnique\",\"isUnique\"]\n[[[\"deer\",\"door\",\"cake\",\"card\"]],[\"dear\"],[\"cart\"],[\"cane\"],[\"make\"]]",
  "metaData": "{\r\n  \"classname\": \"ValidWordAbbr\",\r\n  \"maxbytesperline\": 470000,\r\n  \"constructor\": {\r\n      \"params\": [\r\n        {\r\n            \"type\": \"string[]\",\r\n            \"name\": \"dictionary\"\r\n        },\r\n        {\r\n            \"type\": \"integer\",\r\n            \"name\": \"dictionarySize\",\r\n            \"lang\": \"c\",\r\n            \"value\": \"size_1\"\r\n        }\r\n      ]\r\n  },\r\n  \"methods\": [\r\n      { \"name\" : \"isUnique\",\r\n        \"params\": [\r\n            {\r\n                \"type\": \"string\",\r\n                \"name\": \"word\"\r\n            }\r\n        ],\r\n        \"return\": {\r\n            \"type\": \"boolean\"\r\n        }\r\n      }\r\n  ],\r\n  \"systemdesign\": true,\r\n  \"params\": [\r\n        {\r\n            \"name\": \"inputs\",\r\n            \"type\": \"integer[]\"\r\n        },\r\n        {\r\n            \"name\": \"inputs\",\r\n            \"type\": \"integer[]\"\r\n        }\r\n    ],\r\n    \"return\": {\r\n        \"type\": \"list<String>\",\r\n        \"dealloc\": true\r\n    }\r\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
