{
  "questionId": "294",
  "questionFrontendId": "294",
  "boundTopicId": null,
  "title": "Flip Game II",
  "titleSlug": "flip-game-ii",
  "categoryTitle": "Algorithms",
  "content": "<p>You are playing the following Flip Game with your friend: Given a string that contains only these two characters: <code>+</code> and <code>-</code>, you and your friend take turns to flip two <b>consecutive</b> <code>&quot;++&quot;</code> into <code>&quot;--&quot;</code>. The game ends when a person can no longer make a move and therefore the other person will be the winner.</p>\r\n\r\n<p>Write a function to determine if the starting player can guarantee a win.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> <code>s = &quot;++++&quot;</code>\r\n<strong>Output:</strong> true \r\n<strong>Explanation: </strong>The starting player can guarantee a win by flipping the middle <code>&quot;++&quot;</code> to become <code>&quot;+--+&quot;</code>.\r\n</pre>\r\n\r\n<p><b>Follow up:</b><br />\r\nDerive your algorithm&#39;s runtime complexity.</p>",
  "isPaidOnly": true,
  "difficulty": "Medium",
  "likes": 323,
  "dislikes": 28,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"Nim Game\", \"titleSlug\": \"nim-game\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Flip Game\", \"titleSlug\": \"flip-game\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Guess Number Higher or Lower II\", \"titleSlug\": \"guess-number-higher-or-lower-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Can I Win\", \"titleSlug\": \"can-i-win\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
  "contributors": [],
  "topicTags": [
    {
      "name": "Backtracking",
      "slug": "backtracking"
    },
    {
      "name": "Minimax",
      "slug": "minimax"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 0}], \"1\": [], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    bool canWin(string s) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public boolean canWin(String s) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def canWin(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def canWin(self, s: str) -> bool:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nbool canWin(char * s){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public bool CanWin(string s) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {string} s\n * @return {boolean}\n */\nvar canWin = function(s) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {String} s\n# @return {Boolean}\ndef can_win(s)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func canWin(_ s: String) -> Bool {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func canWin(s string) bool {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def canWin(s: String): Boolean = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun canWin(s: String): Boolean {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn can_win(s: String) -> bool {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Boolean\n     */\n    function canWin($s) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"48.3K\", \"totalSubmission\": \"98.1K\", \"totalAcceptedRaw\": 48341, \"totalSubmissionRaw\": 98126, \"acRate\": \"49.3%\"}",
  "hints": [],
  "solution": null,
  "status": null,
  "sampleTestCase": "\"++++\"",
  "metaData": "{\r\n  \"name\": \"canWin\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"s\",\r\n      \"type\": \"string\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"boolean\"\r\n  }\r\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
