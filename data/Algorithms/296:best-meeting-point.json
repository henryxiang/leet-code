{
  "questionId": "296",
  "questionFrontendId": "296",
  "boundTopicId": null,
  "title": "Best Meeting Point",
  "titleSlug": "best-meeting-point",
  "categoryTitle": "Algorithms",
  "content": "<p>A group of two or more people wants to meet and minimize the total travel distance. You are given a 2D grid of values 0 or 1, where each 1 marks the home of someone in the group. The distance is calculated using <a href=\"http://en.wikipedia.org/wiki/Taxicab_geometry\" target=\"_blank\">Manhattan Distance</a>, where distance(p1, p2) = <code>|p2.x - p1.x| + |p2.y - p1.y|</code>.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> \r\n\r\n1 - 0 - 0 - 0 - 1\r\n|   |   |   |   |\r\n0 - 0 - 0 - 0 - 0\r\n|   |   |   |   |\r\n0 - 0 - 1 - 0 - 0\r\n\r\n<strong>Output: 6 \r\n\r\nExplanation: </strong>Given three people living at <code>(0,0)</code>, <code>(0,4)</code>, and <code>(2,2)</code>:\r\n&nbsp;            The point <code>(0,2)</code> is an ideal meeting point, as the total travel distance \r\n&nbsp;            of 2+2+2=6 is minimal. So return 6.</pre>\r\n",
  "isPaidOnly": true,
  "difficulty": "Hard",
  "likes": 366,
  "dislikes": 25,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"Shortest Distance from All Buildings\", \"titleSlug\": \"shortest-distance-from-all-buildings\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Minimum Moves to Equal Array Elements II\", \"titleSlug\": \"minimum-moves-to-equal-array-elements-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
  "contributors": [],
  "topicTags": [
    {
      "name": "Math",
      "slug": "math"
    },
    {
      "name": "Sort",
      "slug": "sort"
    }
  ],
  "companyTagStats": "{\"2\": [{\"taggedByAdmin\": false, \"name\": \"Snapchat\", \"slug\": \"snapchat\", \"timesEncountered\": 4}, {\"taggedByAdmin\": false, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Facebook\", \"slug\": \"facebook\", \"timesEncountered\": 2}], \"3\": [{\"taggedByAdmin\": true, \"name\": \"Twitter\", \"slug\": \"twitter\", \"timesEncountered\": 0}], \"1\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    int minTotalDistance(vector<vector<int>>& grid) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int minTotalDistance(int[][] grid) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def minTotalDistance(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def minTotalDistance(self, grid: List[List[int]]) -> int:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nint minTotalDistance(int** grid, int gridSize, int* gridColSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public int MinTotalDistance(int[][] grid) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar minTotalDistance = function(grid) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer[][]} grid\n# @return {Integer}\ndef min_total_distance(grid)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func minTotalDistance(_ grid: [[Int]]) -> Int {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func minTotalDistance(grid [][]int) int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def minTotalDistance(grid: Array[Array[Int]]): Int = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun minTotalDistance(grid: Array<IntArray>): Int {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn min_total_distance(grid: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer\n     */\n    function minTotalDistance($grid) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"30.6K\", \"totalSubmission\": \"54.1K\", \"totalAcceptedRaw\": 30563, \"totalSubmissionRaw\": 54080, \"acRate\": \"56.5%\"}",
  "hints": [
    "Try to solve it in one dimension first. How can this solution apply to the two dimension case?"
  ],
  "solution": {
    "id": "16",
    "canSeeDetail": true,
    "url": "/articles/best-meeting-point/",
    "content": "[TOC]\r\n\r\n## Solution\r\n\r\n---\r\n#### Approach #1 (Breadth-first Search) [Time Limit Exceeded]\r\n\r\nA brute force approach is to evaluate all possible meeting points in the grid. We could apply breadth-first search originating from each of the point.\r\n\r\nWhile inserting a point into the queue, we need to record the distance of that point from the meeting point.  Also, we need an extra `visited` table to record which point had already been visited to avoid being inserted into the queue again.\r\n\r\n```java\r\npublic int minTotalDistance(int[][] grid) {\r\n    int minDistance = Integer.MAX_VALUE;\r\n    for (int row = 0; row < grid.length; row++) {\r\n        for (int col = 0; col < grid[0].length; col++) {\r\n            int distance = search(grid, row, col);\r\n            minDistance = Math.min(distance, minDistance);\r\n        }\r\n    }\r\n    return minDistance;\r\n}\r\n\r\nprivate int search(int[][] grid, int row, int col) {\r\n    Queue<Point> q = new LinkedList<>();\r\n    int m = grid.length;\r\n    int n = grid[0].length;\r\n    boolean[][] visited = new boolean[m][n];\r\n    q.add(new Point(row, col, 0));\r\n    int totalDistance = 0;\r\n    while (!q.isEmpty()) {\r\n        Point point = q.poll();\r\n        int r = point.row;\r\n        int c = point.col;\r\n        int d = point.distance;\r\n        if (r < 0 || c < 0 || r >= m || c >= n || visited[r][c]) {\r\n            continue;\r\n        }\r\n        if (grid[r][c] == 1) {\r\n            totalDistance += d;\r\n        }\r\n        visited[r][c] = true;\r\n        q.add(new Point(r + 1, c, d + 1));\r\n        q.add(new Point(r - 1, c, d + 1));\r\n        q.add(new Point(r, c + 1, d + 1));\r\n        q.add(new Point(r, c - 1, d + 1));\r\n    }\r\n    return totalDistance;\r\n}\r\n\r\npublic class Point {\r\n    int row;\r\n    int col;\r\n    int distance;\r\n    public Point(int row, int col, int distance) {\r\n        this.row = row;\r\n        this.col = col;\r\n        this.distance = distance;\r\n    }\r\n}\r\n```\r\n\r\n**Complexity analysis**\r\n\r\n* Time complexity : $$O(m^2n^2)$$.\r\nFor each point in the $$m \\times n$$ size grid, the breadth-first search takes at most $$m \\times n$$ steps to reach all points. Therefore the time complexity is $$O(m^2n^2)$$.\r\n\r\n* Space complexity : $$O(mn)$$.\r\nThe `visited` table consists of $$m \\times n$$ elements map to each point in the grid. We insert at most $$m \\times n$$ points into the queue.\r\n\r\n---\r\n#### Approach #2 (Manhattan Distance Formula) [Time Limit Exceeded]\r\n\r\nYou may notice that breadth-first search is unnecessary. You can just calculate the Manhattan distance using the formula:\r\n\r\n$$\r\ndistance(p1, p2) = \\left | p2.x - p1.x \\right | + \\left | p2.y - p1.y \\right |\r\n$$\r\n\r\n```java\r\npublic int minTotalDistance(int[][] grid) {\r\n    List<Point> points = getAllPoints(grid);\r\n    int minDistance = Integer.MAX_VALUE;\r\n    for (int row = 0; row < grid.length; row++) {\r\n        for (int col = 0; col < grid[0].length; col++) {\r\n            int distance = calculateDistance(points, row, col);\r\n            minDistance = Math.min(distance, minDistance);\r\n        }\r\n    }\r\n    return minDistance;\r\n}\r\n\r\nprivate int calculateDistance(List<Point> points, int row, int col) {\r\n    int distance = 0;\r\n    for (Point point : points) {\r\n        distance += Math.abs(point.row - row) + Math.abs(point.col - col);\r\n    }\r\n    return distance;\r\n}\r\n\r\nprivate List<Point> getAllPoints(int[][] grid) {\r\n    List<Point> points = new ArrayList<>();\r\n    for (int row = 0; row < grid.length; row++) {\r\n        for (int col = 0; col < grid[0].length; col++) {\r\n            if (grid[row][col] == 1) {\r\n                points.add(new Point(row, col));\r\n            }\r\n        }\r\n    }\r\n    return points;\r\n}\r\n\r\npublic class Point {\r\n    int row;\r\n    int col;\r\n    public Point(int row, int col) {\r\n        this.row = row;\r\n        this.col = col;\r\n    }\r\n}\r\n```\r\n\r\n**Complexity analysis**\r\n\r\n* Time complexity : $$O(m^2n^2)$$.\r\nAssume that $$k$$ is the total number of houses. For each point in the $$m \\times n$$ size grid, we calculate the manhattan distance in $$O(k)$$. Therefore the time complexity is $$O(mnk)$$. But do note that there could be up to $$m \\times n$$ houses, making the worst case time complexity to be $$O(m^2n^2)$$.\r\n\r\n* Space complexity : $$O(mn)$$.\r\n\r\n---\r\n#### Approach #3 (Sorting) [Accepted]\r\n\r\nFinding the best meeting point in a 2D grid seems difficult. Let us take a step back and solve the 1D case which is much simpler. Notice that the Manhattan distance is the sum of two independent variables. Therefore, once we solve the 1D case, we can solve the 2D case as two independent 1D problems.\r\n\r\nLet us look at some 1D examples below:\r\n\r\n    Case #1: 1-0-0-0-1\r\n\r\n    Case #2: 0-1-0-1-0\r\n\r\nWe know the best meeting point must locate somewhere between the left-most and right-most point. For the above two cases, we would select the center point at $$x = 2$$ as the best meeting point. How about choosing the mean of all points as the meeting point?\r\n\r\nConsider this case:\r\n\r\n    Case #3: 1-0-0-0-0-0-0-1-1\r\n\r\n\r\n\r\nUsing the mean gives us $$\\bar{x} = \\frac{0 + 7 + 8}{3} = 5$$ as the meeting point. The total distance is $$10$$.\r\n\r\nBut the best meeting point should be at $$x = 7$$ and the total distance is $$8$$.\r\n\r\nYou may argue that the mean is *close* to the optimal point. But imagine a larger case with many 1's congregating on the right side and just a single 1 on the left-most side. Using the mean as the meeting point would be far from optimal.\r\n\r\nBesides mean, what is a better way to represent the distribution of points? Would median be a better representation? Indeed. In fact, the median *must* be the optimal meeting point.\r\n\r\n    Case #4: 1-1-0-0-1\r\n\r\nTo see why this is so, let us look at case #4 above and choose the median $$x = 1$$ as our initial meeting point. Assume that the total distance traveled is *d*. Note that we have equal number of points distributed to its left and to its right. Now let us move one step to its right where $$x = 2$$ and notice how the distance changes accordingly.\r\n\r\nSince there are two points to the left of $$x = 2$$, we add $$2 * (+1)$$ to *d*. And *d* is offset by –1 since there is one point to the right. This means the distance had overall increased by 1.\r\n\r\nTherefore, it is clear that:\r\n\r\n>As long as there is equal number of points to the left and right of the meeting point, the total distance is minimized.\r\n\r\n    Case #5: 1-1-0-0-1-1\r\n\r\nOne may think that the optimal meeting point must fall on one of the 1's. This is true for cases with odd number of 1's, but not necessarily true when there are even number of 1's, just like case #5 does. You can choose any of the $$x = 1$$ to $$x = 4$$ points and the total distance is minimized. Why?\r\n\r\nThe implementation is direct. First we collect both the row and column coordinates, sort them and select their middle elements. Then we calculate the total distance as the sum of two independent 1D problems.\r\n\r\n```java\r\npublic int minTotalDistance(int[][] grid) {\r\n    List<Integer> rows = new ArrayList<>();\r\n    List<Integer> cols = new ArrayList<>();\r\n    for (int row = 0; row < grid.length; row++) {\r\n        for (int col = 0; col < grid[0].length; col++) {\r\n            if (grid[row][col] == 1) {\r\n                rows.add(row);\r\n                cols.add(col);\r\n            }\r\n        }\r\n    }\r\n    int row = rows.get(rows.size() / 2);\r\n    Collections.sort(cols);\r\n    int col = cols.get(cols.size() / 2);\r\n    return minDistance1D(rows, row) + minDistance1D(cols, col);\r\n}\r\n\r\nprivate int minDistance1D(List<Integer> points, int origin) {\r\n    int distance = 0;\r\n    for (int point : points) {\r\n        distance += Math.abs(point - origin);\r\n    }\r\n    return distance;\r\n}\r\n```\r\n\r\nNote that in the code above we do not need to sort *rows*, why?\r\n\r\n**Complexity analysis**\r\n\r\n* Time complexity : $$O(mn \\log mn)$$.\r\nSince there could be at most $$m \\times n$$ points, therefore the time complexity is $$O(mn \\log mn)$$ due to sorting.\r\n\r\n* Space complexity : $$O(mn)$$.\r\n\r\n---\r\n#### Approach #4 (Collect Coordinates in Sorted Order) [Accepted]\r\n\r\nWe could use the [Selection algorithm](https://en.wikipedia.org/wiki/Selection_algorithm) to select the median in $$O(mn)$$ time, but there is an easier way. Notice that we can collect both the row and column coordinates in sorted order.\r\n\r\n```java\r\npublic int minTotalDistance(int[][] grid) {\r\n    List<Integer> rows = collectRows(grid);\r\n    List<Integer> cols = collectCols(grid);\r\n    int row = rows.get(rows.size() / 2);\r\n    int col = cols.get(cols.size() / 2);\r\n    return minDistance1D(rows, row) + minDistance1D(cols, col);\r\n}\r\n\r\nprivate int minDistance1D(List<Integer> points, int origin) {\r\n    int distance = 0;\r\n    for (int point : points) {\r\n        distance += Math.abs(point - origin);\r\n    }\r\n    return distance;\r\n}\r\n\r\nprivate List<Integer> collectRows(int[][] grid) {\r\n    List<Integer> rows = new ArrayList<>();\r\n    for (int row = 0; row < grid.length; row++) {\r\n        for (int col = 0; col < grid[0].length; col++) {\r\n            if (grid[row][col] == 1) {\r\n                rows.add(row);\r\n            }\r\n        }\r\n    }\r\n    return rows;\r\n}\r\n\r\nprivate List<Integer> collectCols(int[][] grid) {\r\n    List<Integer> cols = new ArrayList<>();\r\n    for (int col = 0; col < grid[0].length; col++) {\r\n        for (int row = 0; row < grid.length; row++) {\r\n            if (grid[row][col] == 1) {\r\n                cols.add(col);\r\n            }\r\n        }\r\n    }\r\n    return cols;\r\n}\r\n```\r\n\r\n<br>\r\nYou can calculate the distance without knowing the median using a two pointer approach. This neat approach is inspired by [@larrywang2014's solution](https://leetcode.com/discuss/65336/14ms-java-solution).\r\n\r\n```java\r\npublic int minTotalDistance(int[][] grid) {\r\n    List<Integer> rows = collectRows(grid);\r\n    List<Integer> cols = collectCols(grid);\r\n    return minDistance1D(rows) + minDistance1D(cols);\r\n}\r\n\r\nprivate int minDistance1D(List<Integer> points) {\r\n    int distance = 0;\r\n    int i = 0;\r\n    int j = points.size() - 1;\r\n    while (i < j) {\r\n        distance += points.get(j) - points.get(i);\r\n        i++;\r\n        j--;\r\n    }\r\n    return distance;\r\n}\r\n```\r\n\r\n**Complexity analysis**\r\n\r\n* Time complexity : $$O(mn)$$.\r\n\r\n* Space complexity : $$O(mn)$$.",
    "contentTypeId": "107",
    "rating": {
      "id": "6",
      "count": 39,
      "average": 4.795,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "[[1,0,0,0,1],[0,0,0,0,0],[0,0,1,0,0]]",
  "metaData": "{\r\n  \"name\": \"minTotalDistance\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"grid\",\r\n      \"type\": \"integer[][]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
