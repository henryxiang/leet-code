{
  "questionId": "306",
  "questionFrontendId": "306",
  "boundTopicId": null,
  "title": "Additive Number",
  "titleSlug": "additive-number",
  "categoryTitle": "Algorithms",
  "content": "<p>Additive number is a string whose digits can form additive sequence.</p>\n\n<p>A valid additive sequence should contain <b>at least</b> three numbers. Except for the first two numbers, each subsequent number in the sequence must be the sum of the preceding two.</p>\n\n<p>Given a string containing only digits <code>&#39;0&#39;-&#39;9&#39;</code>, write a function to determine if it&#39;s an additive number.</p>\n\n<p><b>Note:</b> Numbers in the additive sequence <b>cannot</b> have leading zeros, so sequence <code>1, 2, 03</code> or <code>1, 02, 3</code> is invalid.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> &quot;112358&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> The digits can form an additive sequence: 1, 1, 2, 3, 5, 8. \n&nbsp;            1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> &quot;199100199&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> The additive sequence is: 1, 99, 100, 199.&nbsp;\n&nbsp;            1 + 99 = 100, 99 + 100 = 199\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><font face=\"monospace\"><code>num</code>&nbsp;</font>consists only of digits <code>&#39;0&#39;-&#39;9&#39;</code>.</li>\n\t<li><code>1 &lt;= num.length &lt;= 35</code></li>\n</ul>\n\n<p><b>Follow up:</b><br />\nHow would you handle overflow for very large input integers?</p>\n",
  "isPaidOnly": false,
  "difficulty": "Medium",
  "likes": 268,
  "dislikes": 346,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"Split Array into Fibonacci Sequence\", \"titleSlug\": \"split-array-into-fibonacci-sequence\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
  "contributors": [
    {
      "username": "jeantimex",
      "profileUrl": "/jeantimex/",
      "avatarUrl": "https://www.gravatar.com/avatar/647f6db67906ba406fe92b62782d401e.png?s=200"
    }
  ],
  "topicTags": [
    {
      "name": "Backtracking",
      "slug": "backtracking"
    }
  ],
  "companyTagStats": "{\"1\": [{\"taggedByAdmin\": true, \"name\": \"Epic Systems\", \"slug\": \"epic-systems\", \"timesEncountered\": 2}], \"2\": [], \"3\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    bool isAdditiveNumber(string num) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public boolean isAdditiveNumber(String num) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def isAdditiveNumber(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: bool\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def isAdditiveNumber(self, num: str) -> bool:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nbool isAdditiveNumber(char * num){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public bool IsAdditiveNumber(string num) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {string} num\n * @return {boolean}\n */\nvar isAdditiveNumber = function(num) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {String} num\n# @return {Boolean}\ndef is_additive_number(num)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func isAdditiveNumber(_ num: String) -> Bool {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func isAdditiveNumber(num string) bool {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def isAdditiveNumber(num: String): Boolean = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun isAdditiveNumber(num: String): Boolean {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn is_additive_number(num: String) -> bool {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param String $num\n     * @return Boolean\n     */\n    function isAdditiveNumber($num) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"45.9K\", \"totalSubmission\": \"159K\", \"totalAcceptedRaw\": 45899, \"totalSubmissionRaw\": 159017, \"acRate\": \"28.9%\"}",
  "hints": [],
  "solution": null,
  "status": null,
  "sampleTestCase": "\"112358\"",
  "metaData": "{ \r\n  \"name\": \"isAdditiveNumber\",\r\n  \"params\": [\r\n    { \r\n      \"name\": \"num\",\r\n      \"type\": \"string\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"boolean\"\r\n  }\r\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
