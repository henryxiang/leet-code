{
  "questionId": "310",
  "questionFrontendId": "310",
  "boundTopicId": null,
  "title": "Minimum Height Trees",
  "titleSlug": "minimum-height-trees",
  "categoryTitle": "Algorithms",
  "content": "<p>For an undirected graph with tree characteristics, we can choose any node as the root. The result graph is then a rooted tree. Among all possible rooted trees, those with minimum height are called minimum height trees (MHTs). Given such a graph, write a function to find all the MHTs and return a list of their root labels.</p>\r\n\r\n<p><b>Format</b><br />\r\nThe graph contains <code>n</code> nodes which are labeled from <code>0</code> to <code>n - 1</code>. You will be given the number <code>n</code> and a list of undirected <code>edges</code> (each edge is a pair of labels).</p>\r\n\r\n<p>You can assume that no duplicate edges will appear in <code>edges</code>. Since all edges are undirected, <code>[0, 1]</code> is the same as <code>[1, 0]</code> and thus will not appear together in <code>edges</code>.</p>\r\n\r\n<p><b>Example 1 :</b></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> <code>n = 4</code>, <code>edges = [[1, 0], [1, 2], [1, 3]]</code>\r\n\r\n        0\r\n        |\r\n        1\r\n       / \\\r\n      2   3 \r\n\r\n<strong>Output:</strong> <code>[1]</code>\r\n</pre>\r\n\r\n<p><b>Example 2 :</b></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> <code>n = 6</code>, <code>edges = [[0, 3], [1, 3], [2, 3], [4, 3], [5, 4]]</code>\r\n\r\n     0  1  2\r\n      \\ | /\r\n        3\r\n        |\r\n        4\r\n        |\r\n        5 \r\n\r\n<strong>Output:</strong> <code>[3, 4]</code></pre>\r\n\r\n<p><b>Note</b>:</p>\r\n\r\n<ul>\r\n\t<li>According to the <a href=\"https://en.wikipedia.org/wiki/Tree_(graph_theory)\" target=\"_blank\">definition of tree on Wikipedia</a>: &ldquo;a tree is an undirected graph in which any two vertices are connected by <i>exactly</i> one path. In other words, any connected graph without simple cycles is a tree.&rdquo;</li>\r\n\t<li>The height of a rooted tree is the number of edges on the longest downward path between the root and a leaf.</li>\r\n</ul>\r\n",
  "isPaidOnly": false,
  "difficulty": "Medium",
  "likes": 1338,
  "dislikes": 81,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"Course Schedule\", \"titleSlug\": \"course-schedule\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Course Schedule II\", \"titleSlug\": \"course-schedule-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
  "contributors": [
    {
      "username": "dietpepsi",
      "profileUrl": "/dietpepsi/",
      "avatarUrl": "https://www.gravatar.com/avatar/5db7cd8986dd0171d1682b730ce85555.png?s=200"
    }
  ],
  "topicTags": [
    {
      "name": "Breadth-first Search",
      "slug": "breadth-first-search"
    },
    {
      "name": "Graph",
      "slug": "graph"
    }
  ],
  "companyTagStats": "{\"1\": [{\"taggedByAdmin\": true, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 2}], \"2\": [], \"3\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    vector<int> findMinHeightTrees(int n, vector<vector<int>>& edges) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public List<Integer> findMinHeightTrees(int n, int[][] edges) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def findMinHeightTrees(self, n, edges):\n        \"\"\"\n        :type n: int\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def findMinHeightTrees(self, n: int, edges: List[List[int]]) -> List[int]:\n        "
    },
    {
      "lang": "C",
      "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* findMinHeightTrees(int n, int** edges, int edgesSize, int* edgesColSize, int* returnSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\r\n    public IList<int> FindMinHeightTrees(int n, int[][] edges) {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number} n\n * @param {number[][]} edges\n * @return {number[]}\n */\nvar findMinHeightTrees = function(n, edges) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer} n\r\n# @param {Integer[][]} edges\r\n# @return {Integer[]}\r\ndef find_min_height_trees(n, edges)\r\n    \r\nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\r\n    func findMinHeightTrees(_ n: Int, _ edges: [[Int]]) -> [Int] {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Go",
      "code": "func findMinHeightTrees(n int, edges [][]int) []int {\r\n    \r\n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\r\n    def findMinHeightTrees(n: Int, edges: Array[Array[Int]]): List[Int] = {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\r\n    fun findMinHeightTrees(n: Int, edges: Array<IntArray>): List<Int> {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn find_min_height_trees(n: i32, edges: Vec<Vec<i32>>) -> Vec<i32> {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $edges\n     * @return Integer[]\n     */\n    function findMinHeightTrees($n, $edges) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"78.6K\", \"totalSubmission\": \"252.1K\", \"totalAcceptedRaw\": 78568, \"totalSubmissionRaw\": 252068, \"acRate\": \"31.2%\"}",
  "hints": [
    "How many MHTs can a graph have at most?"
  ],
  "solution": null,
  "status": null,
  "sampleTestCase": "4\n[[1,0],[1,2],[1,3]]",
  "metaData": "{\r\n  \"name\": \"findMinHeightTrees\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"n\",\r\n      \"type\": \"integer\"\r\n    },\r\n    {\r\n      \"name\": \"edges\",\r\n      \"type\": \"integer[][]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"list<integer>\"\r\n  }\r\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
