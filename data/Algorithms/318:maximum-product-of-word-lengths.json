{
  "questionId": "318",
  "questionFrontendId": "318",
  "boundTopicId": null,
  "title": "Maximum Product of Word Lengths",
  "titleSlug": "maximum-product-of-word-lengths",
  "categoryTitle": "Algorithms",
  "content": "<p>Given a string array <code>words</code>, find the maximum value of <code>length(word[i]) * length(word[j])</code> where the two words do not share common letters. You may assume that each word will contain only lower case letters. If no such two words exist, return 0.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> <code>[&quot;abcw&quot;,&quot;baz&quot;,&quot;foo&quot;,&quot;bar&quot;,&quot;xtfn&quot;,&quot;abcdef&quot;]</code>\r\n<b>Output: </b><code>16 \r\n<strong>Explanation: </strong></code>The two words can be <code>&quot;abcw&quot;, &quot;xtfn&quot;</code><span style=\"font-family: sans-serif, Arial, Verdana, &quot;Trebuchet MS&quot;;\">.</span></pre>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> <code>[&quot;a&quot;,&quot;ab&quot;,&quot;abc&quot;,&quot;d&quot;,&quot;cd&quot;,&quot;bcd&quot;,&quot;abcd&quot;]</code>\r\n<b>Output: </b><code>4 \r\n<strong>Explanation: </strong></code>The two words can be <code>&quot;ab&quot;, &quot;cd&quot;</code><span style=\"font-family: sans-serif, Arial, Verdana, &quot;Trebuchet MS&quot;;\">.</span></pre>\r\n\r\n<p><b>Example 3:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> <code>[&quot;a&quot;,&quot;aa&quot;,&quot;aaa&quot;,&quot;aaaa&quot;]</code>\r\n<b>Output: </b><code>0 \r\n<strong>Explanation: </strong></code>No such pair of words.\r\n</pre>\r\n",
  "isPaidOnly": false,
  "difficulty": "Medium",
  "likes": 657,
  "dislikes": 52,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [
    {
      "username": "dietpepsi",
      "profileUrl": "/dietpepsi/",
      "avatarUrl": "https://www.gravatar.com/avatar/5db7cd8986dd0171d1682b730ce85555.png?s=200"
    }
  ],
  "topicTags": [
    {
      "name": "Bit Manipulation",
      "slug": "bit-manipulation"
    }
  ],
  "companyTagStats": "{\"2\": [{\"taggedByAdmin\": true, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 3}], \"1\": [], \"3\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\r\npublic:\r\n    int maxProduct(vector<string>& words) {\r\n        \r\n    }\r\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int maxProduct(String[] words) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def maxProduct(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def maxProduct(self, words: List[str]) -> int:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nint maxProduct(char ** words, int wordsSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\r\n    public int MaxProduct(string[] words) {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {string[]} words\n * @return {number}\n */\nvar maxProduct = function(words) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {String[]} words\r\n# @return {Integer}\r\ndef max_product(words)\r\n    \r\nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\r\n    func maxProduct(_ words: [String]) -> Int {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Go",
      "code": "func maxProduct(words []string) int {\r\n    \r\n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\r\n    def maxProduct(words: Array[String]): Int = {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\r\n    fun maxProduct(words: Array<String>): Int {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn max_product(words: Vec<String>) -> i32 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param String[] $words\n     * @return Integer\n     */\n    function maxProduct($words) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"88.3K\", \"totalSubmission\": \"177.4K\", \"totalAcceptedRaw\": 88293, \"totalSubmissionRaw\": 177363, \"acRate\": \"49.8%\"}",
  "hints": [],
  "solution": {
    "id": "763",
    "canSeeDetail": true,
    "url": "/articles/maximum-product-of-word-lengths/",
    "content": "[TOC]\r\n\r\n## Solution\r\n\r\n--- \r\n\r\n#### Overview\r\n\r\nLet's start from the naive straightforward solution.\r\n\r\n> Compare each word with all the following words one by one.\r\nIf two words have no common letters, update the maximum product `maxProd`.\r\n\r\nLet's omit for the moment the implementation of \r\n`noCommonLetters` function.\r\n\r\n<iframe src=\"https://leetcode.com/playground/Q9SSeU49/shared\" frameBorder=\"0\" width=\"100%\" height=\"344\" name=\"Q9SSeU49\"></iframe>\r\n\r\nThe number of operations performed in the nested loops is\r\n \r\n$$(N - 1) + (N - 2) + ... + 2 + 1 = \\frac{N(N - 1)}{2}$$\r\n\r\nthat results in $$\\mathcal{O}(N^2 \\times f(L_1, L_2))$$ time\r\ncomplexity. Here $$f(L_1, L_2)$$ is a complexity \r\nof function `noCommonLetters(String s1, String s2)`,\r\ni.e. the price to compare two words of lengths $$L_1$$\r\nand $$L_2$$.\r\n\r\n> What could be done here?\r\n\r\n![fig](../Figures/318/methods2.png)\r\n\r\n- Approach 1: minimize time complexity $$f(L_1, L_2)$$ of \r\n`noCommonLetters` function.\r\n\r\n- Approach 2: minimize the number of word comparisons.\r\nThere is no need to always perform $$\\mathcal{O}(N^2)$$\r\ncomparisons. Among all the strings with the same set of letters\r\n($$ab$$, $$aaaaabaabaaabb$$, $$bbabbabba$$) \r\nit's enough to keep the longest one ($$aaaaabaabaaabb$$). \r\n<br /> \r\n<br />\r\n\r\n\r\n---\r\n#### Approach 1: Optimize noCommonLetters function : Bitmasks + Precomputation\r\n\r\nThe idea is to minimize first the time complexity \r\n$$f(L_1, L_2)$$ of word comparison.\r\n\r\n![fig](../Figures/318/methods.png)\r\n\r\n**Naive Solution : $$\\mathcal{O}(L_1 \\times L_2)$$ time**\r\n\r\nThis naive solution is simple but not optimal.\r\nCheck the characters in the first word one by one. \r\nFor each character ensure that this character is _not_ in the second word.\r\n\r\n<iframe src=\"https://leetcode.com/playground/z88RBv3w/shared\" frameBorder=\"0\" width=\"100%\" height=\"140\" name=\"z88RBv3w\"></iframe>\r\n \r\n**Bitmasks : $$\\mathcal{O}(L_1 + L_2)$$ time**\r\n\r\nMore elegant and fast solution would be to use bitmasks.\r\n\r\nWords contain only lower case letters and hence \r\nan absence or presence of each letter in a word could be encoded \r\nwith a bitmask of 26 elements. \r\nLet's set bit number 0 equal to 1 if character `a` is present in \r\nthe word, and to 0 otherwise.\r\nNow bit number 1. Let's set it equal to 1 if character `b` is present in \r\nthe word, and to 0 otherwise. And so on and so forth, till\r\nthe bit number 26 which is equal to 1 if `z` is present in the word.\r\n\r\n![fig](../Figures/318/n_th.png)\r\n\r\n> How to set n-th bit? Use standard bitwise trick : `n_th_bit = 1 << n`.\r\n\r\n> How to compute bitmask for a word? Iterate over the word, letter by letter,\r\ncompute bit number corresponding to that letter `n = (int)ch - (int)'a'`,\r\nand add this n-th bit `n_th_bit = 1 << n` into bitmask \r\n`bitmask |= n_th_bit`.\r\n\r\n![fig](../Figures/318/bitmask.png)\r\n\r\nThis way one could compute two bitmasks, character by character, in \r\n$$\\mathcal{O}(L_1 + L_2)$$ time. Then the word comparison itself could be done\r\nin one operation and in a constant time.\r\n\r\n<iframe src=\"https://leetcode.com/playground/ezGTGFkG/shared\" frameBorder=\"0\" width=\"100%\" height=\"276\" name=\"ezGTGFkG\"></iframe>\r\n\r\n**Bitmasks + Precomputation : Comparison in $$\\mathcal{O}(1)$$ time**\r\n\r\nIn the previous approach one computes a bitmask of\r\neach word N times. In fact, each bitmask could be precomputed just once, \r\nmemorised and then used for the runtime comparison \r\nin a constant time.\r\n\r\nLet's use two integer arrays to store bitmasks and string lengths. \r\nThat's Java-optimised way, since in general Java works faster with \r\narrays than with hashmaps. \r\n\r\n**Algorithm**\r\n\r\n- Precompute bitmasks for all words and save them in the array `masks`.\r\nUse array `lens` to keep the lengths for all words.\r\n\r\n- Compare each word with all the following words one by one.\r\nIf two words have no common letters, update the maximum product `maxProd`.\r\nPerform \"no common letters\" check in a constant time with the help of\r\nprecomputed `masks` array: \r\n`(masks[i] & masks[j]) == 0`.\r\n\r\n- Return `maxProd`.\r\n\r\n**Implementation**\r\n\r\n<iframe src=\"https://leetcode.com/playground/uetDMkny/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"uetDMkny\"></iframe>\r\n\r\n**Complexity Analysis**\r\n\r\n* Time complexity : $$\\mathcal{O}(N^2 + L)$$ where $$N$$ is a number of words\r\nand $$L$$ is a total length of all words together. The precomputation takes\r\n$$\\mathcal{O}(L)$$ time because we iterate over all characters\r\nin all words. \r\nThe runtime word comparison takes $$\\mathcal{O}(N^2)$$ time.\r\nIn total, that results in $$\\mathcal{O}(N^2 + L)$$ time complexity.\r\n\r\n* Space complexity : $$\\mathcal{O}(N)$$ to keep two arrays of N elements.\r\n<br /> \r\n<br />\r\n\r\n\r\n---\r\n#### Approach 2: Optimise Number of Comparisons : Bitmasks + Precomputation + Hashmap\r\n\r\nNow, when the comparison itself is optimised, one could optimise the number \r\nof comparisons.\r\nThere is no need to always perform $$\\mathcal{O}(N^2)$$\r\ncomparisons. Among all the strings with the same set of letters\r\n($$ab$$, $$aaaaabaabaaabb$$, $$bbabbabba$$) \r\nit's enough to keep the longest one ($$aaaaabaabaaabb$$). \r\n\r\nFor that, instead of two arrays of length $$N$$ as in the Approach 1, one\r\ncould use a hashmap : bitmask -> max word length with that bitmask.\r\n\r\n![fig](../Figures/318/same.png)\r\n\r\nThis way the total number of word comparisons could be reduced,\r\nthat speeds up the solution in Python.\r\nNote, that for Java this way is not the optimal one \r\nbecause of known problems with \r\n[HashMap performance](https://github.com/vavr-io/vavr/issues/571).  \r\n\r\n**Algorithm**\r\n\r\n- Precompute bitmasks for all words and save them in the hashmap\r\nbitmask -> max word length with such a bitmask. (There could be\r\nseveral words with the same bitmask, for example, \"a\" and \"aaaaaaa\").\r\n\r\n- Compare each word with all the following words one by one.\r\nIf two words have no common letters, update the maximum product `maxProd`.\r\nPerform \"no common letters\" check in a constant time with the help of\r\nprecomputed hashmap of bitmasks: \r\n`(x & y) == 0`.\r\n\r\n- Return `maxProd`.\r\n\r\n**Implementation**\r\n\r\n<iframe src=\"https://leetcode.com/playground/FNtQWtT6/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"FNtQWtT6\"></iframe>\r\n\r\n**Complexity Analysis**\r\n\r\n* Time complexity : $$\\mathcal{O}(N^2 + L)$$ where N is a number of words\r\nand L is a total length of all words together. If you want to have some fun,\r\nhere is a [bloody discussion](https://leetcode.com/problems/maximum-product-of-word-lengths/discuss/76976/Bit-shorter-C++/80869) \r\nthat all this is for \"small\" N only, when \r\n$$N < 2^{26}$$. The idea is that the number of bitmasks is not more than\r\n$$2^{26}$$ and hence for $$N > 2^{26}$$ the complexity is \r\n$$\\mathcal{O}(L)$$. \r\n\r\n* Space complexity : $$\\mathcal{O}(N)$$ to keep a hashmap of N elements\r\nif $$N < 2^{26}$$. Otherwise, it's $$\\mathcal{O}(2^{26})$$ = $$\\mathcal{O}(1)$$.\r\n\r\n\r\nAnalysis written by @[liaison](https://leetcode.com/liaison/)\r\nand @[andvary](https://leetcode.com/andvary/)",
    "contentTypeId": "107",
    "rating": {
      "id": "748",
      "count": 11,
      "average": 4.818,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "[\"abcw\",\"baz\",\"foo\",\"bar\",\"xtfn\",\"abcdef\"]",
  "metaData": "{\r\n  \"name\": \"maxProduct\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"words\",\r\n      \"type\": \"string[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
