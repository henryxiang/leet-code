{
  "questionId": "330",
  "questionFrontendId": "330",
  "boundTopicId": null,
  "title": "Patching Array",
  "titleSlug": "patching-array",
  "categoryTitle": "Algorithms",
  "content": "<p>Given a sorted positive integer array <i>nums</i> and an integer <i>n</i>, add/patch elements to the array such that any number in range <code>[1, n]</code> inclusive can be formed by the sum of some elements in the array. Return the minimum number of patches required.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><i>nums</i> = <code>[1,3]</code>, <i>n</i> = <code>6</code>\r\n<strong>Output: </strong>1 \r\n<strong>Explanation:</strong>\r\nCombinations of <i>nums</i> are <code>[1], [3], [1,3]</code>, which form possible sums of: <code>1, 3, 4</code>.\r\nNow if we add/patch <code>2</code> to <i>nums</i>, the combinations are: <code>[1], [2], [3], [1,3], [2,3], [1,2,3]</code>.\r\nPossible sums are <code>1, 2, 3, 4, 5, 6</code>, which now covers the range <code>[1, 6]</code>.\r\nSo we only need <code>1</code> patch.</pre>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><i>nums</i> = <code>[1,5,10]</code>, <i>n</i> = <code>20</code>\r\n<strong>Output:</strong> 2\r\n<strong>Explanation: </strong>The two patches can be <code>[2, 4]</code>.\r\n</pre>\r\n\r\n<p><b>Example 3:</b></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><i>nums</i> = <code>[1,2,2]</code>, <i>n</i> = <code>5</code>\r\n<strong>Output:</strong> 0\r\n</pre>",
  "isPaidOnly": false,
  "difficulty": "Hard",
  "likes": 388,
  "dislikes": 68,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [
    {
      "username": "dietpepsi",
      "profileUrl": "/dietpepsi/",
      "avatarUrl": "https://www.gravatar.com/avatar/5db7cd8986dd0171d1682b730ce85555.png?s=200"
    }
  ],
  "topicTags": [
    {
      "name": "Greedy",
      "slug": "greedy"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 0}], \"1\": [], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    int minPatches(vector<int>& nums, int n) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int minPatches(int[] nums, int n) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def minPatches(self, nums, n):\n        \"\"\"\n        :type nums: List[int]\n        :type n: int\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def minPatches(self, nums: List[int], n: int) -> int:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nint minPatches(int* nums, int numsSize, int n){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public int MinPatches(int[] nums, int n) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number[]} nums\n * @param {number} n\n * @return {number}\n */\nvar minPatches = function(nums, n) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer[]} nums\n# @param {Integer} n\n# @return {Integer}\ndef min_patches(nums, n)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func minPatches(_ nums: [Int], _ n: Int) -> Int {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func minPatches(nums []int, n int) int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def minPatches(nums: Array[Int], n: Int): Int = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun minPatches(nums: IntArray, n: Int): Int {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn min_patches(nums: Vec<i32>, n: i32) -> i32 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $n\n     * @return Integer\n     */\n    function minPatches($nums, $n) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"33.8K\", \"totalSubmission\": \"99.7K\", \"totalAcceptedRaw\": 33823, \"totalSubmissionRaw\": 99726, \"acRate\": \"33.9%\"}",
  "hints": [],
  "solution": {
    "id": "71",
    "canSeeDetail": true,
    "url": "/articles/patching-array/",
    "content": "## Solution\n\n**Intuition**\n\nFor any missing number, if we want to cover it, we have to add at least one number smaller or equal to that number. Otherwise, it will not be covered.\nImagine you want to give someone change of $$x$$ cents, and you don't have enough coins. You will need to ask for coin less than or equal to $$x$$.\n\n**Algorithm**\n\nSuppose `miss` is the smallest missing number, then we know that `[1, miss)` (left-closed, right-open) is already covered . In order to cover `miss`, we have to add something smaller than or equal to `miss`. Otherwise, there is no way we can cover it.\n\nFor example, you have any array `nums = [1,2,3,8]` and `n = 16`. The numbers already covered is in the ranges `[1, 6]` and `[8, 14]`. In other words, `7, 15, 16` are missing. If you add patches larger than `7`, then `7` is still missing.\n\nSuppose the number we added is $$x$$ then, the ranges `[1, miss)` and `[x, x + miss)` are both covered. And since we know that `x <= miss`, the two ranges will cover the range `[1, x + miss)`. We want to choose $$x$$ as large as possible so that the range can cover as large as possible. Therefore, the best option is `x = miss`.\n\nAfter we covered `miss`, we can recalculate the coverage and see what's the new smallest missing number. We then patch that number. We do this repeatedly until no missing number.  \n\nHere is the recipe of this greedy algorithm:\n\n* Initialize the range `[1, miss)` = `[1, 1)` = empty\n* While n is not covered yet\n  * if the current element `nums[i]` is less than or equal to `miss`\n    * extends the range to `[1, miss + nums[i])`\n    * increase `i` by 1\n  * otherwise\n    * patch the array with `miss`, extends the range to `[1, miss + miss)`\n    * increase the number of patches\n* Return the number of patches  \n\n**Example:**\n\n`nums = [1,2,3,8]` and `n = 80`\n\n| iteration | `miss` | covered range | `i` | `nums[i]` | patches | comment  |\n|:---------:|:------:|:-------------:|:-:|:-------:|:-------:|----------|\n|     0     |    1   |     [1, 1)    | 0 |    1    |    0    |          |\n|     1     |    2   |     [1, 2)    | 1 |    2    |    0    |          |\n|     2     |    4   |     [1, 4)    | 2 |    3    |    0    |          |\n|     3     |    7   |     [1, 7)    | 3 |    8    |    0    |          |\n|     4     |   14   |    [1, 14)    | 3 |    8    |    1    | patch 7  |\n|     5     |   22   |    [1, 22)    | 4 |   none  |    1    |          |\n|     6     |   44   |    [1, 44)    | 4 |   none  |    2    | patch 22 |\n|     7     |   88   |    [1, 88)    | 4 |   none  |    3    | patch 44 |\n\n\n**Correctness**\n\nOne may ask how do you know this is correct? In this section, we will prove that the greedy algorithm always gives the smallest possible number of patches:\n\n*Lemma*\n\n> If the greedy algorithm needs to patch $$k$$ numbers to cover $$[1, n]$$, it is impossible to patch less than $$k$$ numbers to do the same.\n\n*Proof by contradiction*\n\n For a given number $$n$$ and array $$\\mathrm{nums}$$, suppose the $$k$$ patches found by greedy algorithm is $$X_1 \\lt X_2 \\lt \\ldots \\lt X_k \\leq n$$. If there is another set of patches $$Y_1 \\leq Y_2 \\leq \\ldots \\leq Y_{k'} \\leq n$$, with $$k' \\lt k$$, then we have $$Y_1 \\leq X_1$$, otherwise $$X_1$$ is not covered. And since adding $$X_1$$ cannot cover $$X_2$$ which means the sum of all the elements including $$X_1$$ is smaller than $$X_2$$. Thus adding $$Y_1$$ will also not cover $$X_2$$. And so we have:\n\n$$\nY_2 \\leq X_2\n$$\n\notherwise $$X_2$$ will not be covered and so on so forth.\n\n$$\nY_i \\leq X_i, i = 1, 2, \\ldots k'\n$$\n\nFinally, we can see that since $$X_1, X_2, \\ldots X_{k'}$$ is not enough to cover $$X_k$$, therefore $$Y_1, Y_2, \\ldots, Y_{k'}$$ is also not enough to cover $$X_k \\leq n$$. This contradicts the fact that $$Y_1 \\leq Y_2 \\leq \\ldots \\leq Y_{k'} \\leq n$$ covers $$[1, n]$$. **This completes the proof.**\n\n\n\nThus, the greedy algorithm will always return the fewest patches possible. Even through for particular cases, there could be many different ways to patch. But none of them will have fewer patches than the greedy algorithm does.\n\n\n\n<iframe src=\"https://leetcode.com/playground/mWaJh5cz/shared\" frameBorder=\"0\" name=\"mWaJh5cz\" width=\"100%\" height=\"309\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(m + \\log n)$$. In each iteration, we either increase the index `i` or we double the variable `miss`. The total number of increment for index `i` is $$m$$ and the total number of doubling `miss` is $$\\log n$$\n\n* Space complexity : $$O(1)$$. We only need three variables, `patches`, `i` and `miss`.",
    "contentTypeId": "107",
    "rating": {
      "id": "69",
      "count": 18,
      "average": 4.778,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "[1,3]\n6",
  "metaData": "{\r\n  \"name\": \"minPatches\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"nums\",\r\n      \"type\": \"integer[]\"\r\n    },\r\n    {\r\n      \"name\": \"n\",\r\n      \"type\": \"integer\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
