{
  "questionId": "338",
  "questionFrontendId": "338",
  "boundTopicId": null,
  "title": "Counting Bits",
  "titleSlug": "counting-bits",
  "categoryTitle": "Algorithms",
  "content": "<p>Given a non negative integer number <b>num</b>. For every numbers <b>i</b> in the range <b>0 &le; i &le; num</b> calculate the number of 1&#39;s in their binary representation and return them as an array.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">2</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[0,1,1]</span></pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">5</span>\r\n<strong>Output: </strong><code>[0,1,1,2,1,2]</code>\r\n</pre>\r\n\r\n<p><b>Follow up:</b></p>\r\n\r\n<ul>\r\n\t<li>It is very easy to come up with a solution with run time <b>O(n*sizeof(integer))</b>. But can you do it in linear time <b>O(n)</b> /possibly in a single pass?</li>\r\n\t<li>Space complexity should be <b>O(n)</b>.</li>\r\n\t<li>Can you do it like a boss? Do it without using any builtin function like <b>__builtin_popcount</b> in c++ or in any other language.</li>\r\n</ul>",
  "isPaidOnly": false,
  "difficulty": "Medium",
  "likes": 1819,
  "dislikes": 127,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"Number of 1 Bits\", \"titleSlug\": \"number-of-1-bits\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
  "contributors": [
    {
      "username": "syedee",
      "profileUrl": "/syedee/",
      "avatarUrl": "https://assets.leetcode.com/users/syedee/avatar_1521639464.png"
    }
  ],
  "topicTags": [
    {
      "name": "Dynamic Programming",
      "slug": "dynamic-programming"
    },
    {
      "name": "Bit Manipulation",
      "slug": "bit-manipulation"
    }
  ],
  "companyTagStats": "{\"2\": [{\"taggedByAdmin\": false, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Mathworks\", \"slug\": \"mathworks\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Apple\", \"slug\": \"apple\", \"timesEncountered\": 2}], \"1\": [], \"3\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    vector<int> countBits(int num) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int[] countBits(int num) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def countBits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: List[int]\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def countBits(self, num: int) -> List[int]:\n        "
    },
    {
      "lang": "C",
      "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* countBits(int num, int* returnSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public int[] CountBits(int num) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number} num\n * @return {number[]}\n */\nvar countBits = function(num) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer} num\n# @return {Integer[]}\ndef count_bits(num)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func countBits(_ num: Int) -> [Int] {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func countBits(num int) []int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def countBits(num: Int): Array[Int] = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun countBits(num: Int): IntArray {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn count_bits(num: i32) -> Vec<i32> {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer $num\n     * @return Integer[]\n     */\n    function countBits($num) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"207.4K\", \"totalSubmission\": \"312.9K\", \"totalAcceptedRaw\": 207435, \"totalSubmissionRaw\": 312938, \"acRate\": \"66.3%\"}",
  "hints": [
    "You should make use of what you have produced already.",
    "Divide the numbers in ranges like [2-3], [4-7], [8-15] and so on. And try to generate new range from previous.",
    "Or does the odd/even status of the number help you in calculating the number of 1s?"
  ],
  "solution": {
    "id": "73",
    "canSeeDetail": true,
    "url": "/articles/counting-bits/",
    "content": "[TOC]\n\n## Summary\n\nThis article is for intermediate readers. It relates to the following ideas:\nPop Count, Most Significant Bit, Least Significant Bit, Last Set Bit and Dynamic Programming.\n\n## Solutions\n---\n#### Approach #1 Pop Count [Accepted]\n\n**Intuition**\n\nSolve the problem for one number and applies that for all.\n\n**Algorithm**\n\nThis problem can be seen as a follow-up of the [Problem 191 The number of 1 bits](https://leetcode.com/problems/number-of-1-bits/). It counts the bits for an unsigned integer. The number is often called pop count or [Hamming weight](https://en.wikipedia.org/wiki/Hamming_weight). See the editorial of [Problem 191 The number of 1 bits](https://leetcode.com/problems/number-of-1-bits/) for a detailed explanation of different approaches.\n\nNow we just take that for granted. And suppose we have the function `int popcount(int x)` which will return the count of the bits for a given non-negative integer. We just loop through the numbers in range `[0, num]` and put the results in a list.\n\n<iframe src=\"https://leetcode.com/playground/huXmPZY7/shared\" frameBorder=\"0\" name=\"huXmPZY7\" width=\"100%\" height=\"292\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(nk)$$. For each integer $$x$$, we need $$O(k)$$ operations where $$k$$ is the number of bits in $$x$$.\n\n* Space complexity : $$O(n)$$. We need $$O(n)$$ space to store the count results. If we exclude that, it costs only constant space.\n\n----\n#### Approach #2 DP + Most Significant Bit [Accepted]\n\n**Intuition**\n\nUse previous count results to generate the count for a new integer.\n\n**Algorithm**\n\nSuppose we have an integer:\n\n$$\nx = (1001011101)_2 = (605)_{10}\n$$\n\nand we already calculated and stored all the results of $$0$$ to $$x - 1$$.\n\nThen we know that $$x$$ is differ by one bit with a number we already calculated:\n\n$$\nx' = (1011101)_2 = (93)_{10}\n$$\n\nThey are different only in the most significant bit.\n\nLet's exam the range $$[0, 3]$$ in the binary form:\n\n$$\n(0) = (0)_2\n$$\n\n$$\n(1) = (1)_2\n$$\n\n$$\n(2) = (10)_2\n$$\n\n$$\n(3) = (11)_2\n$$\n\nOne can see that the binary form of 2 and 3 can be generated by adding 1 bit in front of 0 and 1. Thus, they are different only by 1 regarding pop count.\n\nSimilarly, we can generate the results for $$[4, 7]$$ using $$[0, 3]$$ as blueprints.\n\nIn general, we have the following transition function for popcount $$P(x)$$:\n\n$$\nP(x + b) = P(x) + 1, b = 2^m > x\n$$\n\nWith this transition function, we can then apply Dynamic Programming to generate all the pop counts starting from $$0$$.\n\n\n\n```\npublic class Solution {\n    public int[] countBits(int num) {\n        int[] ans = new int[num + 1];\n        int i = 0, b = 1;\n        // [0, b) is calculated\n        while (b <= num) {\n            // generate [b, 2b) or [b, num) from [0, b)\n            while(i < b && i + b <= num){\n                ans[i + b] = ans[i] + 1;\n                ++i;\n            }\n            i = 0;   // reset i\n            b <<= 1; // b = 2b\n        }\n        return ans;\n    }\n}\n```\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n)$$. For each integer $$x$$ we need constant operations which do not depend on the number of bits in $$x$$.\n\n* Space complexity : $$O(n)$$. We need $$O(n)$$ space to store the count results. If we exclude that, it costs only constant space.\n\n---\n\n#### Approach #3 DP + Least Significant Bit [Accepted]\n\n**Intuition**\n\nWe can have different transition functions, as long as $$x'$$ is smaller than $$x$$ and their pop counts have a function.\n\n**Algorithm**\n\nFollowing the same principle of the previous approach, we can also have a transition function by playing with the least significant bit.\n\nLet look at the relation between $$x$$ and $$x' = x / 2$$\n\n$$\nx = (1001011101)_2 = (605)_{10}\n$$\n\n$$\nx' = (100101110)_2 = (302)_{10}\n$$\n\nWe can see that $$x'$$ is differ than $$x$$ by one bit, because $$x'$$ can be considered as the result of removing the least significant bit of $$x$$.\n\nThus, we have the following transition function of pop count $$P(x)$$:\n\n$$\nP(x) = P(x / 2) + (x \\mod 2)\n$$\n\n\n<iframe src=\"https://leetcode.com/playground/bDREyCKV/shared\" frameBorder=\"0\" name=\"bDREyCKV\" width=\"100%\" height=\"190\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n)$$. For each integer $$x$$ we need constant operations which do not depend on the number of bits in $$x$$.\n\n* Space complexity : $$O(n)$$.  Same as approach #2.\n\n---\n#### Approach #4 DP + Last Set Bit [Accepted]\n\n**Algorithm**\n\nWith the same logic as previous approaches, we can also manipulate the last set bit.\n\nLast set bit is the rightmost set bit. Setting that bit to zero with the bit trick, `x &= x - 1`, leads to the following transition function:\n\n$$\nP(x) = P(x \\mathrel{\\&} (x - 1)) + 1;\n$$\n\n\n<iframe src=\"https://leetcode.com/playground/Bj47Y4ha/shared\" frameBorder=\"0\" name=\"Bj47Y4ha\" width=\"100%\" height=\"190\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n)$$. Same as approach #3.\n\n* Space complexity : $$O(n)$$. Same as approach #3.",
    "contentTypeId": "107",
    "rating": {
      "id": "71",
      "count": 20,
      "average": 4.9,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "2",
  "metaData": "{\r\n  \"name\": \"countBits\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"num\",\r\n      \"type\": \"integer\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer[]\"\r\n  }\r\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
