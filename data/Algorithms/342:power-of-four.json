{
  "questionId": "342",
  "questionFrontendId": "342",
  "boundTopicId": null,
  "title": "Power of Four",
  "titleSlug": "power-of-four",
  "categoryTitle": "Algorithms",
  "content": "<p>Given an integer (signed 32 bits), write a function to check whether it is a power of 4.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">16</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">true</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">5</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">false</span></pre>\r\n</div>\r\n\r\n<p><b>Follow up</b>: Could you solve it without loops/recursion?</p>",
  "isPaidOnly": false,
  "difficulty": "Easy",
  "likes": 376,
  "dislikes": 170,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"Power of Two\", \"titleSlug\": \"power-of-two\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Power of Three\", \"titleSlug\": \"power-of-three\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
  "contributors": [
    {
      "username": "yukuairoy",
      "profileUrl": "/yukuairoy/",
      "avatarUrl": "https://www.gravatar.com/avatar/41a4952b65464337f349128b4d021e84.png?s=200"
    }
  ],
  "topicTags": [
    {
      "name": "Bit Manipulation",
      "slug": "bit-manipulation"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": false, \"name\": \"Uber\", \"slug\": \"uber\", \"timesEncountered\": 2}, {\"taggedByAdmin\": true, \"name\": \"Two Sigma\", \"slug\": \"two-sigma\", \"timesEncountered\": 0}], \"1\": [], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    bool isPowerOfFour(int num) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public boolean isPowerOfFour(int num) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def isPowerOfFour(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def isPowerOfFour(self, num: int) -> bool:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nbool isPowerOfFour(int num){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public bool IsPowerOfFour(int num) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number} num\n * @return {boolean}\n */\nvar isPowerOfFour = function(num) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer} num\n# @return {Boolean}\ndef is_power_of_four(num)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func isPowerOfFour(_ num: Int) -> Bool {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func isPowerOfFour(num int) bool {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def isPowerOfFour(num: Int): Boolean = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun isPowerOfFour(num: Int): Boolean {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn is_power_of_four(num: i32) -> bool {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer $num\n     * @return Boolean\n     */\n    function isPowerOfFour($num) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"130.6K\", \"totalSubmission\": \"318.6K\", \"totalAcceptedRaw\": 130639, \"totalSubmissionRaw\": 318643, \"acRate\": \"41.0%\"}",
  "hints": [],
  "solution": {
    "id": "767",
    "canSeeDetail": true,
    "url": "/articles/power-of-four/",
    "content": "[TOC]\n\n## Solution\n\n---\n\n#### Overview\n\n**Prerequisites**\n\nThis bitwise trick will be used as something already known:\n\n- How to check if the number is a power of two : `x > 0 and x & (x - 1) == 0`.\n\n    Please check the article [Power of Two](https://leetcode.com/articles/power-of-two/)\n    for the detailed explanation.\n\n**Intuition**\n\nThere is an obvious $$\\mathcal{O}(\\log N)$$ time solution\nand we're not going to discuss it here.\n\n<iframe src=\"https://leetcode.com/playground/G8FWMSN8/shared\" frameBorder=\"0\" width=\"100%\" height=\"174\" name=\"G8FWMSN8\"></iframe>\n\nLet's discuss $$\\mathcal{O}(1)$$ time and $$\\mathcal{O}(1)$$ space solutions only.\n<br />\n<br />\n\n\n---\n#### Approach 1: Brute Force + Precomputations\n\nLet's precompute all possible answers, as we once did for the problem \n[Nth Tribonacci Number](https://leetcode.com/articles/n-th-tribonacci-number/).\n\nInput number is known to be [signed 32 bits integer](https://en.wikipedia.org/wiki/Integer_(computer_science)#Common_long_integer_sizes),\ni.e. $$x \\le 2^{31} - 1$$. Hence the max power of four to be considered is\n$$[\\log_4\\left(2^{31} - 1\\right)] = 15$$. \nVoila, here is all 16 possible \nanswers: $$4^0$$, $$4^1$$, $$4^2$$, ..., $$4^{15}$$. Let's precompute them all,\nand then during the runtime just check if input number is in the list of answers. \n\n<iframe src=\"https://leetcode.com/playground/Gm3iK5zi/shared\" frameBorder=\"0\" width=\"100%\" height=\"378\" name=\"Gm3iK5zi\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity: $$\\mathcal{O}(1)$$.\n\n* Space complexity: $$\\mathcal{O}(1)$$.\n<br />\n<br />\n\n\n---\n#### Approach 2: Math\n\nIf num is a power of four $$x = 4^a$$, then \n$$a = \\log_4 x = \\frac{1}{2}\\log_2 x$$ is an integer. \nHence let's simply check if $$\\log_2 x$$ is an even number.\n\n<iframe src=\"https://leetcode.com/playground/9VgfiGKQ/shared\" frameBorder=\"0\" width=\"100%\" height=\"140\" name=\"9VgfiGKQ\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$\\mathcal{O}(1)$$.\n\n* Space complexity : $$\\mathcal{O}(1)$$.\n<br />\n<br />\n\n\n---\n#### Approach 3: Bit Manipulation\n\nLet's first check if num is a power of two: \n`x > 0 and x & (x - 1) == 0`. \n\nNow the problem is to distinguish between even powers of two (when $$x$$ \nis a power of four) and odd powers of two (when $$x$$ is _not_ a power of four).\nIn binary representation both cases are single 1-bit followed by zeros.\n\n> What is the difference? In the first case (power of four), \n1-bit is at even position: bit 0, bit 2, bit 4, etc. In the\nsecond case, at odd position. \n  \n![fig](../Figures/342/odd_even.png)\n\nHence power of four would make a zero in a bitwise AND with number \n$$(101010...10)_2$$:\n\n$$4^a \\land (101010...10)_2 == 0$$\n\n> How long should be $$(101010...10)_2$$ if $$x$$ is a signed integer?\n32 bits. To write shorter, in 8 charaters instead of 32, it's common to use \n[hexadecimal](https://en.wikipedia.org/wiki/Hexadecimal) representation:\n$$(101010...10)_2 = (aaaaaaaa)_{16}$$.\n\n$$x \\land (aaaaaaaa)_{16} == 0$$\n\n<iframe src=\"https://leetcode.com/playground/yXtpbocv/shared\" frameBorder=\"0\" width=\"100%\" height=\"140\" name=\"yXtpbocv\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$\\mathcal{O}(1)$$.\n\n* Space complexity : $$\\mathcal{O}(1)$$.\n<br />\n<br />\n\n\n---\n#### Approach 4: Bit Manipulation + Math\n\nLet's first check if $$x$$ is a power of two: \n`x > 0 and x & (x - 1) == 0`. \nNow one could be sure that $$x = 2^a$$.\nThough $$x$$ is a power of four only if $$a$$ is even.\n\nNext step is to consider both cases $$a = 2k$$ and $$a = 2k + 1$$,\nand to compute $$x$$ modulo after division by three:\n\n$$(2^{2k} \\mod 3) = (4^k \\mod 3) = ((3 + 1)^k \\mod 3) = 1$$\n\n$$((2^{2k + 1}) \\mod 3) = ((2 \\times 4^k) \\mod 3) = ((2 \\times(3 + 1)^k) \\mod 3) = 2$$\n\n> If $$x$$ is a power of two and `x % 3 == 1`, then $$x$$ _is_ a power of four.\n\n<iframe src=\"https://leetcode.com/playground/4gwRX4Qb/shared\" frameBorder=\"0\" width=\"100%\" height=\"140\" name=\"4gwRX4Qb\"></iframe>\n\n**How this works: mod arithmetic**\n\nTo show the idea, let's compute $$x = 2^{2k} \\mod 3$$.\n\nFirst, $$2^{2k} = {2^2}^k = 4^k$$. Second, since $$4 = 3 + 1$$, $$x$$\ncould be rewritten as \n\n$$x = ((3 + 1)^k \\mod 3)$$\n\nLet's decompose \n\n$$(3 + 1)^k = (3 + 1) \\times (3 + 1)^{k - 1} = 3 \\times (3 + 1)^{k - 1} + (3 + 1)^{k - 1}$$. \n\nThe first term is divisible by 3, i.e. $$(3 \\times (3 + 1)^{k - 1}) \\mod 3 = 0$$. Hence\n\n$$x = ((3 + 1)^{k - 1} \\mod 3)$$\n\nOne could continue like this k -> k - 1 -> k - 2 -> ... -> 1 and finally rewrite $$x$$ as\n\n$$x = ((3 + 1)^1 \\mod 3) = 1$$. \n\nThe job is done. Now $$y = 2^{2k + 1} \\mod 3$$ is simple, because if $$x \\mod 3 = 1$$,\nthen $$y \\mod 3 = 2x \\mod 3 = 2$$.\n\n**Complexity Analysis**\n\n* Time complexity : $$\\mathcal{O}(1)$$.\n\n* Space complexity : $$\\mathcal{O}(1)$$.\n\n\n\nAnalysis written by @[liaison](https://leetcode.com/liaison/)\nand @[andvary](https://leetcode.com/andvary/)",
    "contentTypeId": "107",
    "rating": {
      "id": "752",
      "count": 8,
      "average": 4.875,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "16",
  "metaData": "{ \r\n  \"name\": \"isPowerOfFour\",\r\n  \"params\": [\r\n    { \r\n      \"name\": \"num\",\r\n      \"type\": \"integer\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"boolean\"\r\n  }\r\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
