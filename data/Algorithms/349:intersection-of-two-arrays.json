{
  "questionId": "349",
  "questionFrontendId": "349",
  "boundTopicId": null,
  "title": "Intersection of Two Arrays",
  "titleSlug": "intersection-of-two-arrays",
  "categoryTitle": "Algorithms",
  "content": "<p>Given two arrays, write a function to compute their intersection.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>nums1 = <span id=\"example-input-1-1\">[1,2,2,1]</span>, nums2 = <span id=\"example-input-1-2\">[2,2]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[2]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>nums1 = <span id=\"example-input-2-1\">[4,9,5]</span>, nums2 = <span id=\"example-input-2-2\">[9,4,9,8,4]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">[9,4]</span></pre>\r\n</div>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ul>\r\n\t<li>Each element in the result must be unique.</li>\r\n\t<li>The result can be in any order.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n",
  "isPaidOnly": false,
  "difficulty": "Easy",
  "likes": 543,
  "dislikes": 960,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"Intersection of Two Arrays II\", \"titleSlug\": \"intersection-of-two-arrays-ii\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Intersection of Three Sorted Arrays\", \"titleSlug\": \"intersection-of-three-sorted-arrays\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
  "contributors": [],
  "topicTags": [
    {
      "name": "Hash Table",
      "slug": "hash-table"
    },
    {
      "name": "Two Pointers",
      "slug": "two-pointers"
    },
    {
      "name": "Binary Search",
      "slug": "binary-search"
    },
    {
      "name": "Sort",
      "slug": "sort"
    }
  ],
  "companyTagStats": "{\"1\": [{\"taggedByAdmin\": false, \"name\": \"Facebook\", \"slug\": \"facebook\", \"timesEncountered\": 20}, {\"taggedByAdmin\": false, \"name\": \"Oracle\", \"slug\": \"oracle\", \"timesEncountered\": 4}, {\"taggedByAdmin\": false, \"name\": \"LinkedIn\", \"slug\": \"linkedin\", \"timesEncountered\": 3}, {\"taggedByAdmin\": false, \"name\": \"Lyft\", \"slug\": \"lyft\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Microsoft\", \"slug\": \"microsoft\", \"timesEncountered\": 2}], \"2\": [{\"taggedByAdmin\": false, \"name\": \"Apple\", \"slug\": \"apple\", \"timesEncountered\": 3}, {\"taggedByAdmin\": false, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Indeed\", \"slug\": \"indeed\", \"timesEncountered\": 2}], \"3\": [{\"taggedByAdmin\": false, \"name\": \"Yelp\", \"slug\": \"yelp\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Uber\", \"slug\": \"uber\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"JPMorgan\", \"slug\": \"jpmorgan\", \"timesEncountered\": 2}, {\"taggedByAdmin\": true, \"name\": \"Two Sigma\", \"slug\": \"two-sigma\", \"timesEncountered\": 0}]}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int[] intersection(int[] nums1, int[] nums2) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def intersection(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def intersection(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        "
    },
    {
      "lang": "C",
      "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* intersection(int* nums1, int nums1Size, int* nums2, int nums2Size, int* returnSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public int[] Intersection(int[] nums1, int[] nums2) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number[]}\n */\nvar intersection = function(nums1, nums2) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer[]} nums1\n# @param {Integer[]} nums2\n# @return {Integer[]}\ndef intersection(nums1, nums2)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func intersection(_ nums1: [Int], _ nums2: [Int]) -> [Int] {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func intersection(nums1 []int, nums2 []int) []int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def intersection(nums1: Array[Int], nums2: Array[Int]): Array[Int] = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun intersection(nums1: IntArray, nums2: IntArray): IntArray {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn intersection(nums1: Vec<i32>, nums2: Vec<i32>) -> Vec<i32> {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums1\n     * @param Integer[] $nums2\n     * @return Integer[]\n     */\n    function intersection($nums1, $nums2) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"282.5K\", \"totalSubmission\": \"483.8K\", \"totalAcceptedRaw\": 282511, \"totalSubmissionRaw\": 483819, \"acRate\": \"58.4%\"}",
  "hints": [],
  "solution": {
    "id": "704",
    "canSeeDetail": true,
    "url": "/articles/intersection-of-two-arrays/",
    "content": "[TOC]\n\n## Solution\n\n---\n\n#### Approach 1: Two Sets\n\n**Intuition**\n\nThe naive approach would be to iterate along the first array `nums1`\nand to check for each value if this value in `nums2` or not. \nIf yes - add the value to output. Such an approach would result \nin a pretty bad\n$$\\mathcal{O}(n \\times m)$$ time complexity, where `n` and `m` are \narrays' lengths.\n\n> To solve the problem in linear time, let's use the structure `set`,\nwhich provides `in/contains` operation in $$\\mathcal{O}(1)$$ time in\naverage case.\n\nThe idea is to convert both arrays into sets, and then iterate over \nthe smallest set checking the presence of each element in the larger set.\nTime complexity of this approach is $$\\mathcal{O}(n + m)$$ in the average case.\n\n!?!../Documents/349_LIS.json:1000,352!?!\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/i5eLapjz/shared\" frameBorder=\"0\" width=\"100%\" height=\"395\" name=\"i5eLapjz\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$\\mathcal{O}(n + m)$$, where `n` and `m` are \narrays' lengths. $$\\mathcal{O}(n)$$ time is used to convert `nums1`\ninto set, $$\\mathcal{O}(m)$$ time is used to convert `nums2`, and\n`contains/in` operations are $$\\mathcal{O}(1)$$ in the average case.\n \n* Space complexity : $$\\mathcal{O}(m + n)$$ in the worst case when\nall elements in the arrays are different.\n<br />\n<br />\n\n\n---\n#### Approach 2: Built-in Set Intersection\n\n**Intuition**\n\nThere are built-in intersection facilities,\nwhich provide $$\\mathcal{O}(n + m)$$ time complexity in the \naverage case and $$\\mathcal{O}(n \\times m)$$ time complexity in the \nworst case. \n\n> In Python it's [intersection operator](https://wiki.python.org/moin/TimeComplexity#set), \nin Java - [retainAll() function](https://docs.oracle.com/javase/8/docs/api/java/util/AbstractCollection.html#retainAll-java.util.Collection-).\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/fYrF2xVt/shared\" frameBorder=\"0\" width=\"100%\" height=\"310\" name=\"fYrF2xVt\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$\\mathcal{O}(n + m)$$ in the average case \n and $$\\mathcal{O}(n \\times m)$$ [in the worst case\n when load factor is high enough](https://wiki.python.org/moin/TimeComplexity#set).\n \n* Space complexity : $$\\mathcal{O}(n + m)$$ in the worst case when\nall elements in the arrays are different.\n\nAnalysis written by @[liaison](https://leetcode.com/liaison/)\nand @[andvary](https://leetcode.com/andvary/)",
    "contentTypeId": "107",
    "rating": {
      "id": "689",
      "count": 35,
      "average": 4,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "[1,2,2,1]\n[2,2]",
  "metaData": "{\r\n  \"name\": \"intersection\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"nums1\",\r\n      \"type\": \"integer[]\"\r\n    },\r\n    {\r\n      \"name\": \"nums2\",\r\n      \"type\": \"integer[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer[]\"\r\n  }\r\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
