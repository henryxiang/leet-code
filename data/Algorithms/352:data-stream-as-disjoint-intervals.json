{
  "questionId": "352",
  "questionFrontendId": "352",
  "boundTopicId": null,
  "title": "Data Stream as Disjoint Intervals",
  "titleSlug": "data-stream-as-disjoint-intervals",
  "categoryTitle": "Algorithms",
  "content": "<p>Given a data stream input of non-negative integers a<sub>1</sub>, a<sub>2</sub>, ..., a<sub>n</sub>, ..., summarize the numbers seen so far as a list of disjoint intervals.</p>\n\n<p>For example, suppose the integers from the data stream are 1, 3, 7, 2, 6, ..., then the summary will be:</p>\n\n<pre>\n[1, 1]\n[1, 1], [3, 3]\n[1, 1], [3, 3], [7, 7]\n[1, 3], [7, 7]\n[1, 3], [6, 7]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><b>Follow up:</b></p>\n\n<p>What if there are lots of merges and the number of disjoint intervals are small compared to the data stream&#39;s size?</p>\n",
  "isPaidOnly": false,
  "difficulty": "Hard",
  "likes": 240,
  "dislikes": 70,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"Summary Ranges\", \"titleSlug\": \"summary-ranges\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find Right Interval\", \"titleSlug\": \"find-right-interval\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Range Module\", \"titleSlug\": \"range-module\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
  "contributors": [
    {
      "username": "yunhong",
      "profileUrl": "/yunhong/",
      "avatarUrl": "https://www.gravatar.com/avatar/57203c51319403dd4b433508b094135e.png?s=200"
    }
  ],
  "topicTags": [
    {
      "name": "Binary Search",
      "slug": "binary-search"
    },
    {
      "name": "Ordered Map",
      "slug": "ordered-map"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": false, \"name\": \"LinkedIn\", \"slug\": \"linkedin\", \"timesEncountered\": 2}], \"2\": [{\"taggedByAdmin\": false, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 3}], \"1\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class SummaryRanges {\r\npublic:\r\n    /** Initialize your data structure here. */\r\n    SummaryRanges() {\r\n        \r\n    }\r\n    \r\n    void addNum(int val) {\r\n        \r\n    }\r\n    \r\n    vector<vector<int>> getIntervals() {\r\n        \r\n    }\r\n};\r\n\r\n/**\r\n * Your SummaryRanges object will be instantiated and called as such:\r\n * SummaryRanges* obj = new SummaryRanges();\r\n * obj->addNum(val);\r\n * vector<vector<int>> param_2 = obj->getIntervals();\r\n */"
    },
    {
      "lang": "Java",
      "code": "class SummaryRanges {\n\n    /** Initialize your data structure here. */\n    public SummaryRanges() {\n        \n    }\n    \n    public void addNum(int val) {\n        \n    }\n    \n    public int[][] getIntervals() {\n        \n    }\n}\n\n/**\n * Your SummaryRanges object will be instantiated and called as such:\n * SummaryRanges obj = new SummaryRanges();\n * obj.addNum(val);\n * int[][] param_2 = obj.getIntervals();\n */"
    },
    {
      "lang": "Python",
      "code": "class SummaryRanges(object):\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        \n\n    def addNum(self, val):\n        \"\"\"\n        :type val: int\n        :rtype: None\n        \"\"\"\n        \n\n    def getIntervals(self):\n        \"\"\"\n        :rtype: List[List[int]]\n        \"\"\"\n        \n\n\n# Your SummaryRanges object will be instantiated and called as such:\n# obj = SummaryRanges()\n# obj.addNum(val)\n# param_2 = obj.getIntervals()"
    },
    {
      "lang": "Python3",
      "code": "class SummaryRanges:\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        \n\n    def addNum(self, val: int) -> None:\n        \n\n    def getIntervals(self) -> List[List[int]]:\n        \n\n\n# Your SummaryRanges object will be instantiated and called as such:\n# obj = SummaryRanges()\n# obj.addNum(val)\n# param_2 = obj.getIntervals()"
    },
    {
      "lang": "C",
      "code": "\n\n\ntypedef struct {\n    \n} SummaryRanges;\n\n/** Initialize your data structure here. */\n\nSummaryRanges* summaryRangesCreate() {\n    \n}\n\nvoid summaryRangesAddNum(SummaryRanges* obj, int val) {\n  \n}\n\nint** summaryRangesGetIntervals(SummaryRanges* obj, int* retSize, int** retColSize) {\n  \n}\n\nvoid summaryRangesFree(SummaryRanges* obj) {\n    \n}\n\n/**\n * Your SummaryRanges struct will be instantiated and called as such:\n * SummaryRanges* obj = summaryRangesCreate();\n * summaryRangesAddNum(obj, val);\n \n * int** param_2 = summaryRangesGetIntervals(obj, retSize, retColSize);\n \n * summaryRangesFree(obj);\n*/"
    },
    {
      "lang": "C#",
      "code": "public class SummaryRanges {\r\n\r\n    /** Initialize your data structure here. */\r\n    public SummaryRanges() {\r\n        \r\n    }\r\n    \r\n    public void AddNum(int val) {\r\n        \r\n    }\r\n    \r\n    public int[][] GetIntervals() {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your SummaryRanges object will be instantiated and called as such:\r\n * SummaryRanges obj = new SummaryRanges();\r\n * obj.AddNum(val);\r\n * int[][] param_2 = obj.GetIntervals();\r\n */"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * Initialize your data structure here.\n */\nvar SummaryRanges = function() {\n    \n};\n\n/** \n * @param {number} val\n * @return {void}\n */\nSummaryRanges.prototype.addNum = function(val) {\n    \n};\n\n/**\n * @return {number[][]}\n */\nSummaryRanges.prototype.getIntervals = function() {\n    \n};\n\n/** \n * Your SummaryRanges object will be instantiated and called as such:\n * var obj = new SummaryRanges()\n * obj.addNum(val)\n * var param_2 = obj.getIntervals()\n */"
    },
    {
      "lang": "Ruby",
      "code": "class SummaryRanges\r\n\r\n=begin\r\n    Initialize your data structure here.\r\n=end\r\n    def initialize()\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    :type val: Integer\r\n    :rtype: Void\r\n=end\r\n    def add_num(val)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    :rtype: Integer[][]\r\n=end\r\n    def get_intervals()\r\n        \r\n    end\r\n\r\n\r\nend\r\n\r\n# Your SummaryRanges object will be instantiated and called as such:\r\n# obj = SummaryRanges.new()\r\n# obj.add_num(val)\r\n# param_2 = obj.get_intervals()"
    },
    {
      "lang": "Swift",
      "code": "\r\nclass SummaryRanges {\r\n\r\n    /** Initialize your data structure here. */\r\n    init() {\r\n        \r\n    }\r\n    \r\n    func addNum(_ val: Int) {\r\n        \r\n    }\r\n    \r\n    func getIntervals() -> [[Int]] {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your SummaryRanges object will be instantiated and called as such:\r\n * let obj = SummaryRanges()\r\n * obj.addNum(val)\r\n * let ret_2: [[Int]] = obj.getIntervals()\r\n */"
    },
    {
      "lang": "Go",
      "code": "type SummaryRanges struct {\r\n    \r\n}\r\n\r\n\r\n/** Initialize your data structure here. */\r\nfunc Constructor() SummaryRanges {\r\n    \r\n}\r\n\r\n\r\nfunc (this *SummaryRanges) AddNum(val int)  {\r\n    \r\n}\r\n\r\n\r\nfunc (this *SummaryRanges) GetIntervals() [][]int {\r\n    \r\n}\r\n\r\n\r\n/**\r\n * Your SummaryRanges object will be instantiated and called as such:\r\n * obj := Constructor();\r\n * obj.AddNum(val);\r\n * param_2 := obj.GetIntervals();\r\n */"
    },
    {
      "lang": "Scala",
      "code": "class SummaryRanges() {\r\n\r\n    /** Initialize your data structure here. */\r\n    \r\n\r\n    def addNum(`val`: Int) {\r\n        \r\n    }\r\n\r\n    def getIntervals(): Array[Array[Int]] = {\r\n        \r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Your SummaryRanges object will be instantiated and called as such:\r\n * var obj = new SummaryRanges()\r\n * obj.addNum(`val`)\r\n * var param_2 = obj.getIntervals()\r\n */"
    },
    {
      "lang": "Kotlin",
      "code": "class SummaryRanges() {\r\n\r\n    /** Initialize your data structure here. */\r\n    \r\n\r\n    fun addNum(`val`: Int) {\r\n        \r\n    }\r\n\r\n    fun getIntervals(): Array<IntArray> {\r\n        \r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Your SummaryRanges object will be instantiated and called as such:\r\n * var obj = SummaryRanges()\r\n * obj.addNum(`val`)\r\n * var param_2 = obj.getIntervals()\r\n */"
    },
    {
      "lang": "Rust",
      "code": "struct SummaryRanges {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl SummaryRanges {\n\n    /** Initialize your data structure here. */\n    fn new() -> Self {\n        \n    }\n    \n    fn add_num(&self, val: i32) {\n        \n    }\n    \n    fn get_intervals(&self) -> Vec<Vec<i32>> {\n        \n    }\n}\n\n/**\n * Your SummaryRanges object will be instantiated and called as such:\n * let obj = SummaryRanges::new();\n * obj.add_num(val);\n * let ret_2: Vec<Vec<i32>> = obj.get_intervals();\n */"
    },
    {
      "lang": "PHP",
      "code": "class SummaryRanges {\n    /**\n     * Initialize your data structure here.\n     */\n    function __construct() {\n        \n    }\n  \n    /**\n     * @param Integer $val\n     * @return NULL\n     */\n    function addNum($val) {\n        \n    }\n  \n    /**\n     * @return Integer[][]\n     */\n    function getIntervals() {\n        \n    }\n}\n\n/**\n * Your SummaryRanges object will be instantiated and called as such:\n * $obj = SummaryRanges();\n * $obj->addNum($val);\n * $ret_2 = $obj->getIntervals();\n */"
    }
  ],
  "stats": "{\"totalAccepted\": \"28.3K\", \"totalSubmission\": \"63.4K\", \"totalAcceptedRaw\": 28325, \"totalSubmissionRaw\": 63423, \"acRate\": \"44.7%\"}",
  "hints": [],
  "solution": null,
  "status": null,
  "sampleTestCase": "[\"SummaryRanges\",\"addNum\",\"getIntervals\",\"addNum\",\"getIntervals\",\"addNum\",\"getIntervals\",\"addNum\",\"getIntervals\",\"addNum\",\"getIntervals\"]\n[[],[1],[],[3],[],[7],[],[2],[],[6],[]]",
  "metaData": "{\r\n    \"classname\": \"SummaryRanges\",\r\n    \"constructor\": {\r\n        \"params\": [\r\n        ],\r\n        \"comment\": \"Initialize your data structure here.\"\r\n    },\r\n    \"methods\": [\r\n        {\r\n            \"name\" : \"addNum\",\r\n            \"params\": [\r\n                {\r\n                    \"type\": \"integer\",\r\n                    \"name\": \"val\"\r\n                }\r\n            ],\r\n            \"return\": {\r\n                \"type\": \"void\"\r\n            }\r\n        },\r\n        {\r\n            \"name\" : \"getIntervals\",\r\n            \"params\": [],\r\n            \"return\": {\r\n                \"type\": \"integer[][]\"\r\n            }\r\n        }\r\n    ],\r\n    \"systemdesign\": true,\r\n    \"params\": [\r\n        {\r\n            \"name\": \"inputs\",\r\n            \"type\": \"integer[]\"\r\n        },\r\n        {\r\n            \"name\": \"inputs\",\r\n            \"type\": \"integer[]\"\r\n        }\r\n    ],\r\n    \"return\": {\r\n        \"type\": \"list<String>\",\r\n        \"dealloc\": true\r\n    }\r\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
