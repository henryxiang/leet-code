{
  "questionId": "354",
  "questionFrontendId": "354",
  "boundTopicId": null,
  "title": "Russian Doll Envelopes",
  "titleSlug": "russian-doll-envelopes",
  "categoryTitle": "Algorithms",
  "content": "<p>You have a number of envelopes with widths and heights given as a pair of integers <code>(w, h)</code>. One envelope can fit into another if and only if both the width and height of one envelope is greater than the width and height of the other envelope.</p>\r\n\r\n<p>What is the maximum number of envelopes can you Russian doll? (put one inside other)</p>\r\n\r\n<p><b>Note:</b><br />\r\nRotation is not allowed.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<div>\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[[5,4],[6,4],[6,7],[2,3]]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">3 \r\n<strong>Explanation: T</strong></span>he maximum number of envelopes you can Russian doll is <code>3</code> ([2,3] =&gt; [5,4] =&gt; [6,7]).\r\n</pre>\r\n</div>\r\n",
  "isPaidOnly": false,
  "difficulty": "Hard",
  "likes": 767,
  "dislikes": 31,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"Longest Increasing Subsequence\", \"titleSlug\": \"longest-increasing-subsequence\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
  "contributors": [],
  "topicTags": [
    {
      "name": "Binary Search",
      "slug": "binary-search"
    },
    {
      "name": "Dynamic Programming",
      "slug": "dynamic-programming"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": false, \"name\": \"Uber\", \"slug\": \"uber\", \"timesEncountered\": 2}], \"1\": [{\"taggedByAdmin\": true, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Microsoft\", \"slug\": \"microsoft\", \"timesEncountered\": 2}], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    int maxEnvelopes(vector<vector<int>>& envelopes) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int maxEnvelopes(int[][] envelopes) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def maxEnvelopes(self, envelopes):\n        \"\"\"\n        :type envelopes: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def maxEnvelopes(self, envelopes: List[List[int]]) -> int:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nint maxEnvelopes(int** envelopes, int envelopesSize, int* envelopesColSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public int MaxEnvelopes(int[][] envelopes) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number[][]} envelopes\n * @return {number}\n */\nvar maxEnvelopes = function(envelopes) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer[][]} envelopes\n# @return {Integer}\ndef max_envelopes(envelopes)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func maxEnvelopes(_ envelopes: [[Int]]) -> Int {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func maxEnvelopes(envelopes [][]int) int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def maxEnvelopes(envelopes: Array[Array[Int]]): Int = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun maxEnvelopes(envelopes: Array<IntArray>): Int {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn max_envelopes(envelopes: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer[][] $envelopes\n     * @return Integer\n     */\n    function maxEnvelopes($envelopes) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"54.4K\", \"totalSubmission\": \"156.6K\", \"totalAcceptedRaw\": 54439, \"totalSubmissionRaw\": 156611, \"acRate\": \"34.8%\"}",
  "hints": [],
  "solution": {
    "id": "821",
    "canSeeDetail": true,
    "url": "/articles/russian-doll-envelopes/",
    "content": "[TOC]\n\n## Solution\n\n---\n\n#### Intuition\n\nThe problem boils down to a two dimensional version of the longest increasing subsequence problem (LIS).\n\nWe must find the longest sequence `seq` such that the elements in `seq[i+1]` are greater than the corresponding elements in `seq[i]` (this means that `seq[i]` can fit into `seq[i+1]`).\n\nThe problem we run into is that the items we are given come in arbitrary order - we can't just run a standard LIS algorithm because we're allowed to rearrange our data. How can we order our data in a way such that our LIS algorithm will always find the best answer?\n\n**Notes on the LIS algorithm**\n\nYou can find the longest increasing subsequence problem with a solution [here](https://leetcode.com/problems/longest-increasing-subsequence/). If you're not familiar with the $$O(N \\log N)$$ algorithm please go visit that question as it's a prerequisite for this one.\n\nFor the sake of completeness here's a brief explanation on how the LIS algorithm used below works:\n\n`dp` is an array such that `dp[i]` is the smallest element that ends an increasing subsequence of length `i + 1`. Whenever we encounter a new element `e`, we binary search inside `dp` to find the largest index `i` such that `e` can end that subsequence. We then update `dp[i]` with `e`.\n\nThe length of the LIS is the same as the length of `dp`, as if `dp` has an index `i`, then it must have a subsequence of length `i+1`.\n\n---\n\n#### Approach 1: Sort + Longest Increasing Subsequence\n\n**Algorithm**\n\nWe answer the question from the intuition by sorting. Let's pretend that we found the best arrangement of envelopes. We know that each envelope must be increasing in `w`, thus our best arrangement has to be a subsequence of all our envelopes sorted on `w`.\n\nAfter we sort our envelopes, we can simply find the length of the longest increasing subsequence on the second dimension (`h`). Note that we use a clever trick to solve some edge cases:\n\nConsider an input `[[1, 3], [1, 4], [1, 5], [2, 3]]`.\nIf we simply sort and extract the second dimension we get `[3, 4, 5, 3]`, which implies that we can fit three envelopes (3, 4, 5). The problem is that we can only fit one envelope, since envelopes that are equal in the first dimension can't be put into each other.\n\nIn order fix this, we don't just sort increasing in the first dimension - we also sort _decreasing_ on the second dimension, so two envelopes that are equal in the first dimension can never be in the same increasing subsequence.\n\nNow when we sort and extract the second element from the input we get `[5, 4, 3, 3]`, which correctly reflects an LIS of one.\n\n**Implementation**\n<iframe src=\"https://leetcode.com/playground/EwfqXwgB/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"EwfqXwgB\"></iframe>\n\n\n**Complexity Analysis**\n\n* Time complexity : $$O(N \\log N)$$, where $$N$$ is the length of the input. Both sorting the array and finding the LIS happen in $$O(N \\log N)$$\n\n* Space complexity : $$O(N)$$. Our `lis` function requires an array `dp` which goes up to size $$N$$. Also the sorting algorithm we use may also take additional space.\n\n\n---\n\nAnalysis written by @[alwinpeng](https://leetcode.com/alwinpeng/)",
    "contentTypeId": "107",
    "rating": {
      "id": "785",
      "count": 8,
      "average": 5,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "[[5,4],[6,4],[6,7],[2,3]]",
  "metaData": "{\r\n  \"name\": \"maxEnvelopes\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"envelopes\",\r\n      \"type\": \"integer[][]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
