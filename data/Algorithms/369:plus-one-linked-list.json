{
  "questionId": "369",
  "questionFrontendId": "369",
  "boundTopicId": null,
  "title": "Plus One Linked List",
  "titleSlug": "plus-one-linked-list",
  "categoryTitle": "Algorithms",
  "content": "<p>Given a non-negative integer represented as <b>non-empty</b> a singly linked list of digits, plus one to the integer.</p>\r\n\r\n<p>You may assume the integer do not contain any leading zero, except the number 0 itself.</p>\r\n\r\n<p>The digits are stored such that the most significant digit is at the head of the list.</p>\r\n\r\n<div>\r\n<p><strong>Example :</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[1,2,3]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[1,2,4]</span>\r\n</pre>\r\n</div>\r\n",
  "isPaidOnly": true,
  "difficulty": "Medium",
  "likes": 367,
  "dislikes": 17,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"Plus One\", \"titleSlug\": \"plus-one\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
  "contributors": [],
  "topicTags": [
    {
      "name": "Linked List",
      "slug": "linked-list"
    }
  ],
  "companyTagStats": "{\"1\": [{\"taggedByAdmin\": true, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 2}], \"3\": [{\"taggedByAdmin\": false, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 2}], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* plusOne(ListNode* head) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode plusOne(ListNode head) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def plusOne(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def plusOne(self, head: ListNode) -> ListNode:\n        "
    },
    {
      "lang": "C",
      "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\n\n\nstruct ListNode* plusOne(struct ListNode* head){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public ListNode PlusOne(ListNode head) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar plusOne = function(head) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val)\n#         @val = val\n#         @next = nil\n#     end\n# end\n\n# @param {ListNode} head\n# @return {ListNode}\ndef plus_one(head)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.next = nil\n *     }\n * }\n */\nclass Solution {\n    func plusOne(_ head: ListNode?) -> ListNode? {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc plusOne(head *ListNode) *ListNode {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "/**\n * Definition for singly-linked list.\n * class ListNode(var _x: Int = 0) {\n *   var next: ListNode = null\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def plusOne(head: ListNode): ListNode = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution {\n    fun plusOne(head: ListNode?): ListNode? {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n// \n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nimpl Solution {\n    pub fn plus_one(head: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val) { $this->val = $val; }\n * }\n */\nclass Solution {\n\n    /**\n     * @param ListNode $head\n     * @return ListNode\n     */\n    function plusOne($head) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"40.1K\", \"totalSubmission\": \"70K\", \"totalAcceptedRaw\": 40150, \"totalSubmissionRaw\": 69991, \"acRate\": \"57.4%\"}",
  "hints": [],
  "solution": {
    "id": "843",
    "canSeeDetail": true,
    "url": "/articles/plus-one-linked-list/",
    "content": "[TOC]\n\n## Solution\n\n---\n\n#### Overview.\n\n\"Plus One\" is a subset of a problem set \"Add Number\",\nand the solution patterns are the same. \n\nAll these problems could be solved in linear time, \nand the question here is how to solve without using addition operation or \nhow to fit into constant space complexity.\n\nThe choice of algorithm should be based on input format:\n\n1. Integers. \nUsually addition operation is not allowed for such a case.\nUse Bit Manipulation Approach. \nHere is an example: [Add Binary](https://leetcode.com/articles/add-binary/).\n\n2. Strings. \nUse schoolbook bit by bit computation. \nNote, that to fit into constant space is not possible for \nlanguages with immutable strings, for ex. for Java and Python.\nHere is an example: [Add Binary](https://leetcode.com/articles/add-binary/).\n\n3. Arrays. \nThe same textbook addition.\nHere is an example: [Add to Array Form of Integer](https://leetcode.com/articles/add-to-array-form-of-integer/).\n\n4. Linked Lists, current problem. \nSentinel Head + Textbook Addition. \n\nNote, that straightforward idea to convert everything into \nintegers and then use addition could be risky for Java interviews\nbecause of possible overflow issues, [here is in more details](https://leetcode.com/articles/add-binary/).\n<br /> \n<br />\n\n\n---\n#### Approach 1: Sentinel Head + Textbook Addition.\n\n**Textbook Addition**\n\nLet's identify the rightmost digit which is not equal to nine and \nincrease that digit by one. All the following nines should be set to zero.\n\nHere is the simplest use case which works fine.\n\n![simple](../Figures/369/simple.png)\n\nHere is more difficult case which still passes.\n\n![diff](../Figures/369/diff.png)\n\nAnd here is the case which breaks everything.\n\n![diff](../Figures/369/handle.png)\n\n**Sentinel Head**\n\nTo handle the last use case, one needs so called [Sentinel Node](https://en.wikipedia.org/wiki/Sentinel_node).\nSentinel nodes are widely used for trees and linked lists as pseudo-heads, \npseudo-tails, etc. \nThey are purely functional, and usually don't hold any data. \nTheir main purpose is to standardize the situation to avoid edge case\nhandling.\n \nFor example, here one could add pseudo-head with zero value,\nand hence there will always be not-nine node.\n\n![diff](../Figures/369/sentinel.png)\n\n**Algorithm**\n\n- Initialize sentinel node as `ListNode(0)` \nand set it to be the new head: `sentinel.next = head`.\n\n- Find the rightmost digit not equal to nine.\n\n- Increase that digit by one.\n\n- Set all the following nines to zero. \n\n- Return sentinel node if it was set to 1, \nand head `sentinel.next` otherwise.\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/kzqxjkaZ/shared\" frameBorder=\"0\" width=\"100%\" height=\"497\" name=\"kzqxjkaZ\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$\\mathcal{O}(N)$$ since it's not more that \ntwo passes along the input list.\n \n* Space complexity : $$\\mathcal{O}(1)$$. \n\nAnalysis written by @[liaison](https://leetcode.com/liaison/)\nand @[andvary](https://leetcode.com/andvary/)",
    "contentTypeId": "107",
    "rating": {
      "id": "801",
      "count": 4,
      "average": 3.75,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "[1,2,3]",
  "metaData": "{\r\n  \"name\": \"plusOne\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"head\",\r\n      \"type\": \"ListNode\",\r\n      \"dealloc\": false\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"ListNode\",\r\n    \"dealloc\": true\r\n  }\r\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
