{
  "questionId": "370",
  "questionFrontendId": "370",
  "boundTopicId": null,
  "title": "Range Addition",
  "titleSlug": "range-addition",
  "categoryTitle": "Algorithms",
  "content": "<p>Assume you have an array of length <b><i>n</i></b> initialized with all <b>0</b>&#39;s and are given <b><i>k</i></b> update operations.</p>\r\n\r\n<p>Each operation is represented as a triplet: <b>[startIndex, endIndex, inc]</b> which increments each element of subarray <b>A[startIndex ... endIndex]</b> (startIndex and endIndex inclusive) with <b>inc</b>.</p>\r\n\r\n<p>Return the modified array after all <b><i>k</i></b> operations were executed.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>length = <span id=\"example-input-1-1\">5</span>, updates = <span id=\"example-input-1-2\">[[1,3,2],[2,4,3],[0,2,-2]]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[-2,0,3,5,3]</span>\r\n</pre>\r\n\r\n<p><b>Explanation:</b></p>\r\n\r\n<pre>\r\nInitial state:\r\n[0,0,0,0,0]\r\n\r\nAfter applying operation [1,3,2]:\r\n[0,2,2,2,0]\r\n\r\nAfter applying operation [2,4,3]:\r\n[0,2,5,5,3]\r\n\r\nAfter applying operation [0,2,-2]:\r\n[-2,0,3,5,3]\r\n</pre>",
  "isPaidOnly": true,
  "difficulty": "Medium",
  "likes": 499,
  "dislikes": 17,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"Range Addition II\", \"titleSlug\": \"range-addition-ii\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
  "contributors": [
    {
      "username": "vinod23",
      "profileUrl": "/vinod23/",
      "avatarUrl": "https://assets.leetcode.com/users/vinod23/avatar_1532720423.png"
    }
  ],
  "topicTags": [
    {
      "name": "Array",
      "slug": "array"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 4}], \"1\": [], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    vector<int> getModifiedArray(int length, vector<vector<int>>& updates) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int[] getModifiedArray(int length, int[][] updates) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def getModifiedArray(self, length, updates):\n        \"\"\"\n        :type length: int\n        :type updates: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def getModifiedArray(self, length: int, updates: List[List[int]]) -> List[int]:\n        "
    },
    {
      "lang": "C",
      "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* getModifiedArray(int length, int** updates, int updatesSize, int* updatesColSize, int* returnSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public int[] GetModifiedArray(int length, int[][] updates) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number} length\n * @param {number[][]} updates\n * @return {number[]}\n */\nvar getModifiedArray = function(length, updates) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer} length\n# @param {Integer[][]} updates\n# @return {Integer[]}\ndef get_modified_array(length, updates)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func getModifiedArray(_ length: Int, _ updates: [[Int]]) -> [Int] {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func getModifiedArray(length int, updates [][]int) []int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def getModifiedArray(length: Int, updates: Array[Array[Int]]): Array[Int] = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun getModifiedArray(length: Int, updates: Array<IntArray>): IntArray {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn get_modified_array(length: i32, updates: Vec<Vec<i32>>) -> Vec<i32> {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer $length\n     * @param Integer[][] $updates\n     * @return Integer[]\n     */\n    function getModifiedArray($length, $updates) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"27.8K\", \"totalSubmission\": \"45.1K\", \"totalAcceptedRaw\": 27820, \"totalSubmissionRaw\": 45124, \"acRate\": \"61.7%\"}",
  "hints": [
    "Thinking of using advanced data structures? You are thinking it too complicated.",
    "For each update operation, do you really need to update all elements between i and j?",
    "Update only the first and end element is sufficient.",
    "The optimal time complexity is O(<b><i>k</i></b> + <b><i>n</i></b>) and uses O(1) extra space."
  ],
  "solution": {
    "id": "56",
    "canSeeDetail": true,
    "url": "/articles/range-addition/",
    "content": "[TOC]\n\n## Solution\n\n---\n#### Approach 1: Na√Øve Approach\n\n**Algorithm**\n\nThe algorithm is trivial. For each update query, we iterate over the required update range and update each element individually.\n\n\nEach query of `updates` is a tuple of 3 integers: $$start, end$$ (the start and end indexes for the update range) and $$val$$ (the amount by which each array element in this range must be incremented).\n\n<iframe src=\"https://leetcode.com/playground/5yopnQJa/shared\" frameBorder=\"0\" width=\"100%\" height=\"293\" name=\"5yopnQJa\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n \\cdot k)$$ (worst case) where $$k$$ is the number of update queries and $$n$$ is the length of the array. Each of the $$k$$ update operations take up $$O(n)$$ time (worst case, when all updates are over the entire range).\n\n* Space complexity : $$O(1)$$. No extra space required.\n<br>\n<br>\n\n---\n#### Approach 2: Range Caching\n\n**Intuition**\n\n* There is only one read query on the entire range, and it occurs at the end of all update queries. Additionally, the order of processing update queries is irrelevant.\n\n* Cumulative sums or `partial_sum` operations apply the effects of past elements to the future elements in the sequence.\n\n**Algorithm**\n\nThe algorithm makes use of the above intuition to simply store changes at the *borders* of the update ranges (instead of processing the entire range). Finally a single post processing operation is carried out over the entire output array.\n\nThe two steps that are required are as follows:\n\n1. For each update query $$(start, end, val)$$ on the array $$arr$$, we need to do *only* two operations:\n\n    * Update $$start$$ boundary of the range:\n\n    $$\n    arr_{start} = arr_{start} + val\n    $$\n\n    * Update just beyond the $$end$$ boundary of the range:\n\n    $$\n    arr_{end+1} = arr_{end+1} - val\n    $$\n\n2. Final Transformation. The cumulative sum of the entire array is taken (`0` - based indexing)\n\n    $$\n    arr_i = arr_i + arr_{i-1} \\quad \\forall \\quad i \\in [1, n)\n    $$\n\n\n<iframe src=\"https://leetcode.com/playground/qZVkkbBN/shared\" frameBorder=\"0\" width=\"100%\" height=\"446\" name=\"qZVkkbBN\"></iframe>\n\n**Formal Explanation**\n\nFor each update query $$(start, end, val)$$ on the array $$arr$$, the goal is to achieve the result:\n\n$$\narr_i = arr_i + val \\quad \\forall \\quad i \\in [start, end]\n$$\n\nApplying the final transformation, ensures two things:\n\n1. It carries over the $$+val$$ increment over to every element $$ arr_i \\; \\forall \\; i \\ge start $$.\n2. It carries over the $$-val$$ increment (equivalently, a $$+val$$ decrement) over to every element $$ arr_j \\; \\forall \\; j \\gt end $$.\n\nThe net result is that:\n\n$$\n\\begin{aligned}\narr_i &= arr_i + val  \\quad && \\forall \\quad i \\in [start, end] \\\\\narr_j &= arr_j + val - val = arr_j  \\quad && \\forall \\quad i \\in (end, length)\n\\end{aligned}\n$$\n\nwhich meets our end goal. It is easy to see that the updates over a range did not carry over beyond it due to the compensating effect of the $$-val$$ increment over the $$+val$$ increment.\n\nIt is good to note that this works for multiple update queries because the particular binary operations here (namely addition and subtraction):\n\n* are *closed* over the entire domain of `Integer`s. (A counter example is division which is not closed over all `Integer`s).\n\n* are *complementary* operations. (As a counter example multiplication and division are not always complimentary due to possible loss of precision when dividing `Integer`s).\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n + k)$$. Each of the $$k$$ update operations is done in constant $$O(1)$$ time. The final cumulative sum transformation takes $$O(n)$$ time always.\n\n* Space complexity : $$O(1)$$. No extra space required.\n<br>\n<br>\n\n---\n## Further Thoughts\n\nAn extension of this problem is to apply such updates on an array where all elements are **not** the same.\n\nIn this case, the second approach requires that the original configuration must be stored separately before applying the final transformation. This incurs an additional space complexity of $$O(n)$$.\n\n[@StefanPochmann](https://leetcode.com/StefanPochmann/) suggested another method (see comment section) which does not require extra space, but requires an extra linear pass over the entire array. The idea is to apply *reverse* `partial_sum` operation on the array (for example, array $$[2, 3, 10, 5]$$ transforms to $$[2, 1, 7, -5]$$) as an initialization step and then proceed with the second method as usual.\n\n---\n\nAnother general, more complex version of this problem comprises of multiple read and update queries over *ranges*. Such problems can be solved quite efficiently with [Segment Trees by applying a popular trick called **Lazy Propogation**.](https://leetcode.com/articles/a-recursive-approach-to-segment-trees-range-sum-queries-lazy-propagation/)\n\nAnalysis written by [@babhishek21](https://leetcode.com/babhishek21).",
    "contentTypeId": "107",
    "rating": {
      "id": "54",
      "count": 20,
      "average": 4.55,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "5\n[[1,3,2],[2,4,3],[0,2,-2]]",
  "metaData": "{\r\n  \"name\": \"getModifiedArray\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"length\",\r\n      \"type\": \"integer\"\r\n    },\r\n    {\r\n      \"name\": \"updates\",\r\n      \"type\": \"integer[][]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer[]\"\r\n  }\r\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
