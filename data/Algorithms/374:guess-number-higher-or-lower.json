{
  "questionId": "374",
  "questionFrontendId": "374",
  "boundTopicId": null,
  "title": "Guess Number Higher or Lower",
  "titleSlug": "guess-number-higher-or-lower",
  "categoryTitle": "Algorithms",
  "content": "<p>We are playing the Guess Game. The game is as follows:</p>\r\n\r\n<p>I pick a number from <b>1</b> to <b><i>n</i></b>. You have to guess which number I picked.</p>\r\n\r\n<p>Every time you guess wrong, I&#39;ll tell you whether the number is higher or lower.</p>\r\n\r\n<p>You call a pre-defined API <code>guess(int num)</code> which returns 3 possible results (<code>-1</code>, <code>1</code>, or <code>0</code>):</p>\r\n\r\n<pre>\r\n-1 : My number is lower\r\n 1 : My number is higher\r\n 0 : Congrats! You got it!\r\n</pre>\r\n\r\n<p><strong>Example :</strong></p>\r\n\r\n<div>\r\n<pre>\r\n<strong>Input: </strong>n = <span id=\"example-input-1-1\">10</span>, pick = <span id=\"example-input-1-2\">6</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">6</span>\r\n</pre>\r\n</div>\r\n",
  "isPaidOnly": false,
  "difficulty": "Easy",
  "likes": 298,
  "dislikes": 1426,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"First Bad Version\", \"titleSlug\": \"first-bad-version\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Guess Number Higher or Lower II\", \"titleSlug\": \"guess-number-higher-or-lower-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find K Closest Elements\", \"titleSlug\": \"find-k-closest-elements\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
  "contributors": [],
  "topicTags": [
    {
      "name": "Binary Search",
      "slug": "binary-search"
    }
  ],
  "companyTagStats": "{\"1\": [{\"taggedByAdmin\": true, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 3}], \"2\": [], \"3\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "// Forward declaration of guess API.\n// @param num, your guess\n// @return -1 if my number is lower, 1 if my number is higher, otherwise return 0\nint guess(int num);\n\nclass Solution {\npublic:\n    int guessNumber(int n) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "/* The guess API is defined in the parent class GuessGame.\n   @param num, your guess\n   @return -1 if my number is lower, 1 if my number is higher, otherwise return 0\n      int guess(int num); */\n\npublic class Solution extends GuessGame {\n    public int guessNumber(int n) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "# The guess API is already defined for you.\n# @param num, your guess\n# @return -1 if my number is lower, 1 if my number is higher, otherwise return 0\n# def guess(num):\n\nclass Solution(object):\n    def guessNumber(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "# The guess API is already defined for you.\n# @return -1 if my number is lower, 1 if my number is higher, otherwise return 0\n# def guess(num: int) -> int:\n\nclass Solution:\n    def guessNumber(self, n: int) -> int:\n        "
    }
  ],
  "stats": "{\"totalAccepted\": \"127.7K\", \"totalSubmission\": \"311.4K\", \"totalAcceptedRaw\": 127677, \"totalSubmissionRaw\": 311416, \"acRate\": \"41.0%\"}",
  "hints": [],
  "solution": {
    "id": "57",
    "canSeeDetail": true,
    "url": "/articles/guess-number-higher-or-lower/",
    "content": "[TOC]\n\n## Solution\n\n---\n#### Approach 1: Brute Force\n\nWe check every number from 1 to n-1 and pass it to the $$guess$$ function. The number\nfor which a 0 is returned is the required answer.\n\n<iframe src=\"https://leetcode.com/playground/fbFHDKsc/shared\" frameBorder=\"0\" width=\"100%\" height=\"276\" name=\"fbFHDKsc\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n)$$. We scan all the numbers from 1 to n.\n* Space complexity : $$O(1)$$. No extra space is used.\n<br>\n<br>\n\n---\n#### Approach 2: Using Binary Search\n\n**Algorithm**\n\nWe can apply Binary Search to find the given number. We start with the mid\nnumber. We pass that number to the $$guess$$ function. If it returns a -1, it implies that the guessed number is larger than the required one. Thus, we use Binary Search for numbers lower than itself. Similarly, if it returns a 1, we use Binary Search\n for numbers higher than itself.\n\n<iframe src=\"https://leetcode.com/playground/84NfKnsE/shared\" frameBorder=\"0\" width=\"100%\" height=\"429\" name=\"84NfKnsE\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O\\big(\\log_2 n\\big)$$. Binary Search is used.\n* Space complexity : $$O(1)$$. No extra space is used.\n<br>\n<br>\n\n---\n#### Approach 3: Ternary Search\n\n**Algorithm**\n\nIn Binary Search, we choose the middle element as the pivot in splitting. In Ternary Search, we choose two pivots (say $$m1$$ and $$m2$$) such that the given range is divided into three equal parts. If the required number $$num$$ is less than $$m1$$ then we apply ternary search on the left segment of $$m1$$. If $$num$$ lies between $$m1$$ and $$m2$$, we apply ternary search between $$m1$$ and $$m2$$. Otherwise we will search in the segment right to $$m2$$.\n\n<iframe src=\"https://leetcode.com/playground/ZVkdvE5j/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"ZVkdvE5j\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O\\big(\\log_3 n \\big)$$. Ternary Search is used.\n* Space complexity : $$O(1)$$. No extra space is used.\n<br>\n<br>\n\n---\n## Follow up\n\nIt seems that ternary search is able to terminate earlier compared to binary search. But why is binary search more widely used?\n\n#### Comparisons between Binary Search and Ternary Search\n\nTernary Search is worse than Binary Search. The following outlines the recursive formula to count comparisons of Binary Search in the worst case.\n\n$$\n\\begin{aligned}\nT(n) &= T\\bigg(\\frac{n}{2} \\ \\bigg) + 2, \\quad T(1) = 1 \\\\\nT\\bigg(\\frac{n}{2} \\ \\bigg) &= T\\bigg(\\frac{n}{2^2} \\ \\bigg) + 2 \\\\\n\\\\\n\\therefore{} \\quad T(n) &= T\\bigg(\\frac{n}{2^2} \\ \\bigg) + 2 \\times 2 \\\\\n&= T\\bigg(\\frac{n}{2^3} \\ \\bigg) + 3 \\times 2 \\\\\n&= \\ldots \\\\\n&= T\\bigg(\\frac{n}{2^{\\log_2 n}} \\ \\bigg) + 2 \\log_2 n \\\\\n&= T(1) + 2 \\log_2 n \\\\\n&= 1 + 2 \\log_2 n\n\\end{aligned}\n$$\n\nThe following outlines the recursive formula to count comparisons of Ternary Search in the worst case.\n\n$$\n\\begin{aligned}\nT(n) &= T\\bigg(\\frac{n}{3} \\ \\bigg) + 4, \\quad T(1) = 1 \\\\\nT\\bigg(\\frac{n}{3} \\ \\bigg) &= T\\bigg(\\frac{n}{3^2} \\ \\bigg) + 4 \\\\\n\\\\\n\\therefore{} \\quad T(n) &= T\\bigg(\\frac{n}{3^2} \\ \\bigg) + 2 \\times 4 \\\\\n&= T\\bigg(\\frac{n}{3^3} \\ \\bigg) + 3 \\times 4 \\\\\n&= \\ldots \\\\\n&= T\\bigg(\\frac{n}{3^{\\log_3 n}} \\ \\bigg) + 4 \\log_3 n \\\\\n&= T(1) + 4 \\log_3 n \\\\\n&= 1 + 4 \\log_3 n\n\\end{aligned}\n$$\n\nAs shown above, the total comparisons in the worst case for ternary and binary search are $$1 + 4 \\log_3 n$$ and $$1 + 2 \\log_2 n$$ comparisons respectively. To determine which is larger, we can just look at the expression $$2 \\log_3 n$$ and $$\\log_2 n$$ . The expression $$2 \\log_3 n$$ can be written as $$\\frac{2}{\\log_2 3} \\times \\log_2 n$$ . Since the value of $$\\frac{2}{\\log_2 3}$$ is greater than one, Ternary Search does more comparisons than Binary Search in the worst case.\n\nAnalysis written by: [@vinod23](https://leetcode.com/vinod23)",
    "contentTypeId": "107",
    "rating": {
      "id": "55",
      "count": 35,
      "average": 4.857,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "10\n6",
  "metaData": "{\n  \"name\": \"guessNumber\",\n  \"params\": [\n    {\n      \"name\": \"n\",\n      \"type\": \"integer\"\n    },\n    {\n      \"name\": \"pick\",\n      \"type\": \"integer\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"integer\"\n  },\n  \"languages\": [\n    \"cpp\",\n    \"java\",\n    \"python\",\n    \"python3\"\n  ],\n  \"manual\": true\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
