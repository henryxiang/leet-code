{
  "questionId": "37",
  "questionFrontendId": "37",
  "boundTopicId": null,
  "title": "Sudoku Solver",
  "titleSlug": "sudoku-solver",
  "categoryTitle": "Algorithms",
  "content": "<p>Write a program to solve a Sudoku puzzle by filling the empty cells.</p>\r\n\r\n<p>A&nbsp;sudoku solution must satisfy <strong>all of&nbsp;the following rules</strong>:</p>\r\n\r\n<ol>\r\n\t<li>Each of the digits&nbsp;<code>1-9</code> must occur exactly&nbsp;once in each row.</li>\r\n\t<li>Each of the digits&nbsp;<code>1-9</code>&nbsp;must occur&nbsp;exactly once in each column.</li>\r\n\t<li>Each of the the digits&nbsp;<code>1-9</code> must occur exactly once in each of the 9 <code>3x3</code> sub-boxes of the grid.</li>\r\n</ol>\r\n\r\n<p>Empty cells are indicated by the character <code>&#39;.&#39;</code>.</p>\r\n\r\n<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png\" style=\"height:250px; width:250px\" /><br />\r\n<small>A sudoku puzzle...</small></p>\r\n\r\n<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/31/Sudoku-by-L2G-20050714_solution.svg/250px-Sudoku-by-L2G-20050714_solution.svg.png\" style=\"height:250px; width:250px\" /><br />\r\n<small>...and its solution numbers marked in red.</small></p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>The given board&nbsp;contain only digits <code>1-9</code> and the character <code>&#39;.&#39;</code>.</li>\r\n\t<li>You may assume that the given Sudoku puzzle will have a single unique solution.</li>\r\n\t<li>The given board size is always <code>9x9</code>.</li>\r\n</ul>\r\n",
  "isPaidOnly": false,
  "difficulty": "Hard",
  "likes": 1258,
  "dislikes": 79,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"Valid Sudoku\", \"titleSlug\": \"valid-sudoku\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Unique Paths III\", \"titleSlug\": \"unique-paths-iii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
  "contributors": [],
  "topicTags": [
    {
      "name": "Hash Table",
      "slug": "hash-table"
    },
    {
      "name": "Backtracking",
      "slug": "backtracking"
    }
  ],
  "companyTagStats": "{\"2\": [{\"taggedByAdmin\": false, \"name\": \"VMware\", \"slug\": \"vmware\", \"timesEncountered\": 4}, {\"taggedByAdmin\": false, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 3}, {\"taggedByAdmin\": false, \"name\": \"Expedia\", \"slug\": \"expedia\", \"timesEncountered\": 2}], \"1\": [{\"taggedByAdmin\": false, \"name\": \"Facebook\", \"slug\": \"facebook\", \"timesEncountered\": 4}, {\"taggedByAdmin\": false, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 3}, {\"taggedByAdmin\": false, \"name\": \"Microsoft\", \"slug\": \"microsoft\", \"timesEncountered\": 2}], \"3\": [{\"taggedByAdmin\": false, \"name\": \"Arista Networks\", \"slug\": \"arista-networks\", \"timesEncountered\": 3}, {\"taggedByAdmin\": true, \"name\": \"Uber\", \"slug\": \"uber\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Riot Games\", \"slug\": \"riot-games\", \"timesEncountered\": 2}, {\"taggedByAdmin\": true, \"name\": \"Snapchat\", \"slug\": \"snapchat\", \"timesEncountered\": 0}]}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    void solveSudoku(vector<vector<char>>& board) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public void solveSudoku(char[][] board) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def solveSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def solveSudoku(self, board: List[List[str]]) -> None:\n        \"\"\"\n        Do not return anything, modify board in-place instead.\n        \"\"\"\n        "
    },
    {
      "lang": "C",
      "code": "\n\nvoid solveSudoku(char** board, int boardSize, int* boardColSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public void SolveSudoku(char[][] board) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {character[][]} board\n * @return {void} Do not return anything, modify board in-place instead.\n */\nvar solveSudoku = function(board) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Character[][]} board\n# @return {Void} Do not return anything, modify board in-place instead.\ndef solve_sudoku(board)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func solveSudoku(_ board: inout [[Character]]) {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func solveSudoku(board [][]byte)  {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def solveSudoku(board: Array[Array[Char]]): Unit = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun solveSudoku(board: Array<CharArray>): Unit {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn solve_sudoku(board: &mut Vec<Vec<char>>) {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param String[][] $board\n     * @return NULL\n     */\n    function solveSudoku(&$board) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"156.4K\", \"totalSubmission\": \"390.6K\", \"totalAcceptedRaw\": 156388, \"totalSubmissionRaw\": 390596, \"acRate\": \"40.0%\"}",
  "hints": [],
  "solution": {
    "id": "709",
    "canSeeDetail": true,
    "url": "/articles/sudoku-solver/",
    "content": "[TOC]\n\n## Solution\n\n---\n\n#### Approach 0: Brute Force\n\nThe first idea is to use brut-force \nto generate all possible ways to fill the cells\nwith numbers from `1` to `9`,\nand then check them to keep the solution only. \nThat means $$9^{81}$$ operations to do, \nwhere $$9$$ is a number of available digits \nand $$81$$ is a number of cells to fill.\nHence we're forced to think further how to optimize.\n<br />\n<br />\n\n\n---\n#### Approach 1: Backtracking\n\n**Conceptions to use**\n\nThere are two programming conceptions here which could\nhelp.\n\n> The first one is called _constrained programming_. \n\nThat basically means\nto put restrictions after each number placement. One puts a number on the \nboard and that immediately excludes this number from further \nusage in the current _row_, _column_ and _sub-box_. That propagates \n_constraints_ and helps to reduce the number of combinations to consider.\n\n![bla](../Figures/37/37_const3.png)\n\n> The second one called _backtracking_. \n\nLet's imagine that one has already managed to\nput several numbers on the board. \nBut the combination chosen is not the optimal one and there is no way \nto place the further numbers. What to do? _To backtrack_. \nThat means to come back,\nto change the previously placed number and try \nto proceed again. If that would not work either, _backtrack_ again.\n\n![bla](../Figures/37/37_backtrack2.png)\n\n**How to enumerate sub-boxes**\n\n> One tip to enumerate sub-boxes: \nlet's use `box_index = (row / 3) * 3 + column / 3` \nwhere `/` is an integer division.\n\n<img src=\"../Figures/36/36_boxes_2.png\" width=\"500\">\n\n**Algorithm**\n\nNow everything is ready to write down the backtrack function \n`backtrack(row = 0, col = 0)`.\n\n* Start from the upper left cell `row = 0, col = 0`. Proceed till the\nfirst free cell.\n* Iterate over the numbers from `1` to `9` \nand try to put each number `d` in the `(row, col)` cell.\n\n    * If number `d` is not yet in the current row, column and box :\n        \n        * Place the `d` in a `(row, col)` cell.\n        * Write down that `d` is now present in the current row, column and box.\n        * If we're on the last cell `row == 8, col == 8` :\n            * That means that we've solved the sudoku.\n        * Else\n            * Proceed to place further numbers.\n        * Backtrack if the solution is not yet here : \n        remove the last number from the `(row, col)` cell.\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/6YrdEaJx/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"6YrdEaJx\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity is constant here since the board size is fixed and there is no \nN-parameter to measure. \nThough let's discuss the number of operations needed : $$(9!)^9$$. \nLet's consider one row, i.e. not more than $$9$$ cells to fill. \nThere are not more than $$9$$ possibilities for the first number to put,\nnot more than $$9 \\times 8$$ for the second one,\nnot more than $$9 \\times 8 \\times 7$$ for the third one etc. In total that\nresults in not more than $$9!$$ possibilities for a just one row,\nthat means not more than $$(9!)^9$$ operations in total.\nLet's compare:\n\n    - $$9^{81} = 196627050475552913618075908526912116283103450944214766927315415537966391196809$$\nfor the brute force, \n\n    - and $$(9!)^9 = 109110688415571316480344899355894085582848000000000$$\nfor the standard backtracking,\ni.e. the number of operations is reduced in $$10^{27}$$ times !\n\n* Space complexity : the board size is fixed, and the space is used \nto store board, rows, columns and boxes structures, each contains `81` elements.  \n\nAnalysis written by @[liaison](https://leetcode.com/liaison/)\nand @[andvary](https://leetcode.com/andvary/)",
    "contentTypeId": "107",
    "rating": {
      "id": "694",
      "count": 19,
      "average": 4.684,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "[[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]",
  "metaData": "{\r\n  \"name\": \"solveSudoku\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"board\",\r\n      \"type\": \"character[][]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"void\"\r\n  },\r\n  \"output\": {\r\n    \"paramindex\": 0\r\n  }\r\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
