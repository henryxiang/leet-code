{
  "questionId": "380",
  "questionFrontendId": "380",
  "boundTopicId": null,
  "title": "Insert Delete GetRandom O(1)",
  "titleSlug": "insert-delete-getrandom-o1",
  "categoryTitle": "Algorithms",
  "content": "<p>Design a data structure that supports all following operations in <i>average</i> <b>O(1)</b> time.</p>\r\n\r\n<p>\r\n<ol>\r\n<li><code>insert(val)</code>: Inserts an item val to the set if not already present.</li>\r\n<li><code>remove(val)</code>: Removes an item val from the set if present.</li>\r\n<li><code>getRandom</code>: Returns a random element from current set of elements. Each element must have the <b>same probability</b> of being returned.</li>\r\n</ol>\r\n</p>\r\n\r\n<p><b>Example:</b>\r\n<pre>\r\n// Init an empty set.\r\nRandomizedSet randomSet = new RandomizedSet();\r\n\r\n// Inserts 1 to the set. Returns true as 1 was inserted successfully.\r\nrandomSet.insert(1);\r\n\r\n// Returns false as 2 does not exist in the set.\r\nrandomSet.remove(2);\r\n\r\n// Inserts 2 to the set, returns true. Set now contains [1,2].\r\nrandomSet.insert(2);\r\n\r\n// getRandom should return either 1 or 2 randomly.\r\nrandomSet.getRandom();\r\n\r\n// Removes 1 from the set, returns true. Set now contains [2].\r\nrandomSet.remove(1);\r\n\r\n// 2 was already in the set, so return false.\r\nrandomSet.insert(2);\r\n\r\n// Since 2 is the only number in the set, getRandom always return 2.\r\nrandomSet.getRandom();\r\n</pre>\r\n</p>",
  "isPaidOnly": false,
  "difficulty": "Medium",
  "likes": 1569,
  "dislikes": 117,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"Insert Delete GetRandom O(1) - Duplicates allowed\", \"titleSlug\": \"insert-delete-getrandom-o1-duplicates-allowed\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
  "contributors": [],
  "topicTags": [
    {
      "name": "Array",
      "slug": "array"
    },
    {
      "name": "Hash Table",
      "slug": "hash-table"
    },
    {
      "name": "Design",
      "slug": "design"
    }
  ],
  "companyTagStats": "{\"1\": [{\"taggedByAdmin\": true, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 14}, {\"taggedByAdmin\": true, \"name\": \"Facebook\", \"slug\": \"facebook\", \"timesEncountered\": 10}, {\"taggedByAdmin\": false, \"name\": \"Bloomberg\", \"slug\": \"bloomberg\", \"timesEncountered\": 9}, {\"taggedByAdmin\": false, \"name\": \"Databricks\", \"slug\": \"databricks\", \"timesEncountered\": 6}, {\"taggedByAdmin\": false, \"name\": \"LinkedIn\", \"slug\": \"linkedin\", \"timesEncountered\": 5}, {\"taggedByAdmin\": true, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 4}, {\"taggedByAdmin\": true, \"name\": \"Uber\", \"slug\": \"uber\", \"timesEncountered\": 3}, {\"taggedByAdmin\": false, \"name\": \"Microsoft\", \"slug\": \"microsoft\", \"timesEncountered\": 3}, {\"taggedByAdmin\": false, \"name\": \"Apple\", \"slug\": \"apple\", \"timesEncountered\": 3}, {\"taggedByAdmin\": false, \"name\": \"Salesforce\", \"slug\": \"salesforce\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Quora\", \"slug\": \"quora\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Affirm\", \"slug\": \"affirm\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"VMware\", \"slug\": \"vmware\", \"timesEncountered\": 2}], \"2\": [{\"taggedByAdmin\": false, \"name\": \"Indeed\", \"slug\": \"indeed\", \"timesEncountered\": 4}, {\"taggedByAdmin\": false, \"name\": \"Two Sigma\", \"slug\": \"two-sigma\", \"timesEncountered\": 3}, {\"taggedByAdmin\": true, \"name\": \"Twitter\", \"slug\": \"twitter\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Walmart Labs\", \"slug\": \"walmart-labs\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Adobe\", \"slug\": \"adobe\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Goldman Sachs\", \"slug\": \"goldman-sachs\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Yandex\", \"slug\": \"yandex\", \"timesEncountered\": 2}], \"3\": [{\"taggedByAdmin\": true, \"name\": \"Yelp\", \"slug\": \"yelp\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Flipkart\", \"slug\": \"flipkart\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Pinterest\", \"slug\": \"pinterest\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Oracle\", \"slug\": \"oracle\", \"timesEncountered\": 2}, {\"taggedByAdmin\": true, \"name\": \"Pocket Gems\", \"slug\": \"pocket-gems\", \"timesEncountered\": 0}]}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class RandomizedSet {\npublic:\n    /** Initialize your data structure here. */\n    RandomizedSet() {\n        \n    }\n    \n    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */\n    bool insert(int val) {\n        \n    }\n    \n    /** Removes a value from the set. Returns true if the set contained the specified element. */\n    bool remove(int val) {\n        \n    }\n    \n    /** Get a random element from the set. */\n    int getRandom() {\n        \n    }\n};\n\n/**\n * Your RandomizedSet object will be instantiated and called as such:\n * RandomizedSet* obj = new RandomizedSet();\n * bool param_1 = obj->insert(val);\n * bool param_2 = obj->remove(val);\n * int param_3 = obj->getRandom();\n */"
    },
    {
      "lang": "Java",
      "code": "class RandomizedSet {\n\n    /** Initialize your data structure here. */\n    public RandomizedSet() {\n        \n    }\n    \n    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */\n    public boolean insert(int val) {\n        \n    }\n    \n    /** Removes a value from the set. Returns true if the set contained the specified element. */\n    public boolean remove(int val) {\n        \n    }\n    \n    /** Get a random element from the set. */\n    public int getRandom() {\n        \n    }\n}\n\n/**\n * Your RandomizedSet object will be instantiated and called as such:\n * RandomizedSet obj = new RandomizedSet();\n * boolean param_1 = obj.insert(val);\n * boolean param_2 = obj.remove(val);\n * int param_3 = obj.getRandom();\n */"
    },
    {
      "lang": "Python",
      "code": "class RandomizedSet(object):\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        \n\n    def insert(self, val):\n        \"\"\"\n        Inserts a value to the set. Returns true if the set did not already contain the specified element.\n        :type val: int\n        :rtype: bool\n        \"\"\"\n        \n\n    def remove(self, val):\n        \"\"\"\n        Removes a value from the set. Returns true if the set contained the specified element.\n        :type val: int\n        :rtype: bool\n        \"\"\"\n        \n\n    def getRandom(self):\n        \"\"\"\n        Get a random element from the set.\n        :rtype: int\n        \"\"\"\n        \n\n\n# Your RandomizedSet object will be instantiated and called as such:\n# obj = RandomizedSet()\n# param_1 = obj.insert(val)\n# param_2 = obj.remove(val)\n# param_3 = obj.getRandom()"
    },
    {
      "lang": "Python3",
      "code": "class RandomizedSet:\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        \n\n    def insert(self, val: int) -> bool:\n        \"\"\"\n        Inserts a value to the set. Returns true if the set did not already contain the specified element.\n        \"\"\"\n        \n\n    def remove(self, val: int) -> bool:\n        \"\"\"\n        Removes a value from the set. Returns true if the set contained the specified element.\n        \"\"\"\n        \n\n    def getRandom(self) -> int:\n        \"\"\"\n        Get a random element from the set.\n        \"\"\"\n        \n\n\n# Your RandomizedSet object will be instantiated and called as such:\n# obj = RandomizedSet()\n# param_1 = obj.insert(val)\n# param_2 = obj.remove(val)\n# param_3 = obj.getRandom()"
    },
    {
      "lang": "C",
      "code": "\n\n\ntypedef struct {\n    \n} RandomizedSet;\n\n/** Initialize your data structure here. */\n\nRandomizedSet* randomizedSetCreate() {\n    \n}\n\n/** Inserts a value to the set. Returns true if the set did not already contain the specified element. */\nbool randomizedSetInsert(RandomizedSet* obj, int val) {\n  \n}\n\n/** Removes a value from the set. Returns true if the set contained the specified element. */\nbool randomizedSetRemove(RandomizedSet* obj, int val) {\n  \n}\n\n/** Get a random element from the set. */\nint randomizedSetGetRandom(RandomizedSet* obj) {\n  \n}\n\nvoid randomizedSetFree(RandomizedSet* obj) {\n    \n}\n\n/**\n * Your RandomizedSet struct will be instantiated and called as such:\n * RandomizedSet* obj = randomizedSetCreate();\n * bool param_1 = randomizedSetInsert(obj, val);\n \n * bool param_2 = randomizedSetRemove(obj, val);\n \n * int param_3 = randomizedSetGetRandom(obj);\n \n * randomizedSetFree(obj);\n*/"
    },
    {
      "lang": "C#",
      "code": "public class RandomizedSet {\n\n    /** Initialize your data structure here. */\n    public RandomizedSet() {\n        \n    }\n    \n    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */\n    public bool Insert(int val) {\n        \n    }\n    \n    /** Removes a value from the set. Returns true if the set contained the specified element. */\n    public bool Remove(int val) {\n        \n    }\n    \n    /** Get a random element from the set. */\n    public int GetRandom() {\n        \n    }\n}\n\n/**\n * Your RandomizedSet object will be instantiated and called as such:\n * RandomizedSet obj = new RandomizedSet();\n * bool param_1 = obj.Insert(val);\n * bool param_2 = obj.Remove(val);\n * int param_3 = obj.GetRandom();\n */"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * Initialize your data structure here.\n */\nvar RandomizedSet = function() {\n    \n};\n\n/**\n * Inserts a value to the set. Returns true if the set did not already contain the specified element. \n * @param {number} val\n * @return {boolean}\n */\nRandomizedSet.prototype.insert = function(val) {\n    \n};\n\n/**\n * Removes a value from the set. Returns true if the set contained the specified element. \n * @param {number} val\n * @return {boolean}\n */\nRandomizedSet.prototype.remove = function(val) {\n    \n};\n\n/**\n * Get a random element from the set.\n * @return {number}\n */\nRandomizedSet.prototype.getRandom = function() {\n    \n};\n\n/** \n * Your RandomizedSet object will be instantiated and called as such:\n * var obj = new RandomizedSet()\n * var param_1 = obj.insert(val)\n * var param_2 = obj.remove(val)\n * var param_3 = obj.getRandom()\n */"
    },
    {
      "lang": "Ruby",
      "code": "class RandomizedSet\n\n=begin\n    Initialize your data structure here.\n=end\n    def initialize()\n        \n    end\n\n\n=begin\n    Inserts a value to the set. Returns true if the set did not already contain the specified element.\n    :type val: Integer\n    :rtype: Boolean\n=end\n    def insert(val)\n        \n    end\n\n\n=begin\n    Removes a value from the set. Returns true if the set contained the specified element.\n    :type val: Integer\n    :rtype: Boolean\n=end\n    def remove(val)\n        \n    end\n\n\n=begin\n    Get a random element from the set.\n    :rtype: Integer\n=end\n    def get_random()\n        \n    end\n\n\nend\n\n# Your RandomizedSet object will be instantiated and called as such:\n# obj = RandomizedSet.new()\n# param_1 = obj.insert(val)\n# param_2 = obj.remove(val)\n# param_3 = obj.get_random()"
    },
    {
      "lang": "Swift",
      "code": "\nclass RandomizedSet {\n\n    /** Initialize your data structure here. */\n    init() {\n        \n    }\n    \n    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */\n    func insert(_ val: Int) -> Bool {\n        \n    }\n    \n    /** Removes a value from the set. Returns true if the set contained the specified element. */\n    func remove(_ val: Int) -> Bool {\n        \n    }\n    \n    /** Get a random element from the set. */\n    func getRandom() -> Int {\n        \n    }\n}\n\n/**\n * Your RandomizedSet object will be instantiated and called as such:\n * let obj = RandomizedSet()\n * let ret_1: Bool = obj.insert(val)\n * let ret_2: Bool = obj.remove(val)\n * let ret_3: Int = obj.getRandom()\n */"
    },
    {
      "lang": "Go",
      "code": "type RandomizedSet struct {\n    \n}\n\n\n/** Initialize your data structure here. */\nfunc Constructor() RandomizedSet {\n    \n}\n\n\n/** Inserts a value to the set. Returns true if the set did not already contain the specified element. */\nfunc (this *RandomizedSet) Insert(val int) bool {\n    \n}\n\n\n/** Removes a value from the set. Returns true if the set contained the specified element. */\nfunc (this *RandomizedSet) Remove(val int) bool {\n    \n}\n\n\n/** Get a random element from the set. */\nfunc (this *RandomizedSet) GetRandom() int {\n    \n}\n\n\n/**\n * Your RandomizedSet object will be instantiated and called as such:\n * obj := Constructor();\n * param_1 := obj.Insert(val);\n * param_2 := obj.Remove(val);\n * param_3 := obj.GetRandom();\n */"
    },
    {
      "lang": "Scala",
      "code": "class RandomizedSet() {\n\n    /** Initialize your data structure here. */\n    \n\n    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */\n    def insert(`val`: Int): Boolean = {\n        \n    }\n\n    /** Removes a value from the set. Returns true if the set contained the specified element. */\n    def remove(`val`: Int): Boolean = {\n        \n    }\n\n    /** Get a random element from the set. */\n    def getRandom(): Int = {\n        \n    }\n\n}\n\n/**\n * Your RandomizedSet object will be instantiated and called as such:\n * var obj = new RandomizedSet()\n * var param_1 = obj.insert(`val`)\n * var param_2 = obj.remove(`val`)\n * var param_3 = obj.getRandom()\n */"
    },
    {
      "lang": "Kotlin",
      "code": "class RandomizedSet() {\n\n    /** Initialize your data structure here. */\n    \n\n    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */\n    fun insert(`val`: Int): Boolean {\n        \n    }\n\n    /** Removes a value from the set. Returns true if the set contained the specified element. */\n    fun remove(`val`: Int): Boolean {\n        \n    }\n\n    /** Get a random element from the set. */\n    fun getRandom(): Int {\n        \n    }\n\n}\n\n/**\n * Your RandomizedSet object will be instantiated and called as such:\n * var obj = RandomizedSet()\n * var param_1 = obj.insert(`val`)\n * var param_2 = obj.remove(`val`)\n * var param_3 = obj.getRandom()\n */"
    },
    {
      "lang": "Rust",
      "code": "struct RandomizedSet {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl RandomizedSet {\n\n    /** Initialize your data structure here. */\n    fn new() -> Self {\n        \n    }\n    \n    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */\n    fn insert(&self, val: i32) -> bool {\n        \n    }\n    \n    /** Removes a value from the set. Returns true if the set contained the specified element. */\n    fn remove(&self, val: i32) -> bool {\n        \n    }\n    \n    /** Get a random element from the set. */\n    fn get_random(&self) -> i32 {\n        \n    }\n}\n\n/**\n * Your RandomizedSet object will be instantiated and called as such:\n * let obj = RandomizedSet::new();\n * let ret_1: bool = obj.insert(val);\n * let ret_2: bool = obj.remove(val);\n * let ret_3: i32 = obj.get_random();\n */"
    },
    {
      "lang": "PHP",
      "code": "class RandomizedSet {\n    /**\n     * Initialize your data structure here.\n     */\n    function __construct() {\n        \n    }\n  \n    /**\n     * Inserts a value to the set. Returns true if the set did not already contain the specified element.\n     * @param Integer $val\n     * @return Boolean\n     */\n    function insert($val) {\n        \n    }\n  \n    /**\n     * Removes a value from the set. Returns true if the set contained the specified element.\n     * @param Integer $val\n     * @return Boolean\n     */\n    function remove($val) {\n        \n    }\n  \n    /**\n     * Get a random element from the set.\n     * @return Integer\n     */\n    function getRandom() {\n        \n    }\n}\n\n/**\n * Your RandomizedSet object will be instantiated and called as such:\n * $obj = RandomizedSet();\n * $ret_1 = $obj->insert($val);\n * $ret_2 = $obj->remove($val);\n * $ret_3 = $obj->getRandom();\n */"
    }
  ],
  "stats": "{\"totalAccepted\": \"155.6K\", \"totalSubmission\": \"347.8K\", \"totalAcceptedRaw\": 155552, \"totalSubmissionRaw\": 347775, \"acRate\": \"44.7%\"}",
  "hints": [],
  "solution": {
    "id": "810",
    "canSeeDetail": true,
    "url": "/articles/insert-delete-getrandom-o1/",
    "content": "[TOC]\r\n\r\n## Solution\r\n\r\n--- \r\n\r\n#### Overview\r\n\r\nWe're asked to implement the structure \r\nwhich provides the following operations in _average_ $$\\mathcal{O}(1)$$ time:\r\n\r\n- Insert \r\n\r\n- Delete\r\n\r\n- GetRandom\r\n\r\nFirst of all - why this weird combination? \r\nThe structure looks quite theoretical, \r\nbut it's widely used in popular statistical algorithms like \r\n[Markov chain Monte Carlo](https://en.wikipedia.org/wiki/Markov_chain_Monte_Carlo) and \r\n[Metropolis–Hastings algorithm](https://en.wikipedia.org/wiki/Metropolis%E2%80%93Hastings_algorithm). \r\nThese algorithms are for sampling from a probability distribution \r\nwhen it's difficult to compute the distribution itself. \r\n\r\nLet's figure out how to implement such a structure.\r\nStarting from the Insert, we immediately have two good candidates with $$\\mathcal{O}(1)$$\r\n[average insert time](https://wiki.python.org/moin/TimeComplexity):\r\n\r\n- Hashmap (or Hashset, the implementation is very similar): [Java HashMap](https://docs.oracle.com/javase/8/docs/api/java/util/HashMap.html) / [Python dictionary](https://docs.python.org/3/tutorial/datastructures.html#dictionaries)\r\n\r\n- Array List: [Java ArrayList](https://docs.oracle.com/javase/8/docs/api/java/util/LinkedList.html) / [Python list](https://docs.python.org/3/tutorial/datastructures.html)\r\n\r\nLet's consider them one by one. \r\n\r\n> Hashmap provides Insert and Delete in \r\naverage constant time, although has problems with GetRandom. \r\n\r\nThe idea of GetRandom is to choose a random index and then to retrieve an\r\nelement with that index. There is no indexes in hashmap, and hence\r\nto get true random value, one has first to convert hashmap keys in a list,\r\nthat would take linear time. The solution here is to build a list of \r\nkeys aside and to use this list to compute GetRandom in constant time.\r\n\r\n> Array List has indexes and could provide Insert and GetRandom in \r\naverage constant time, though has problems with Delete. \r\n\r\nTo delete a value at arbitrary index takes linear time. \r\nThe solution here is to always delete the last value:\r\n\r\n- Swap the element to delete with the last one.\r\n\r\n- Pop the last element out.\r\n\r\nFor that, one has to compute an index of each element in constant time, and hence\r\nneeds a hashmap which stores `element -> its index` dictionary.\r\n\r\nBoth ways converge into the same combination of data structures:\r\n\r\n- Hashmap `element -> its index`.\r\n\r\n- Array List of elements.\r\n\r\n![fig](../Figures/380/structure2.png)\r\n<br /> \r\n<br />\r\n\r\n\r\n---\r\n#### Approach 1: HashMap + ArrayList\r\n\r\n**Insert**\r\n\r\n- Add value -> its index into dictionary, average $$\\mathcal{O}(1)$$ time.\r\n\r\n- Append value to array list, average $$\\mathcal{O}(1)$$ time as well.\r\n\r\n![fig](../Figures/380/isert.png)\r\n\r\n<iframe src=\"https://leetcode.com/playground/4tMBqgCe/shared\" frameBorder=\"0\" width=\"100%\" height=\"208\" name=\"4tMBqgCe\"></iframe>\r\n\r\n**Delete**\r\n\r\n- Retrieve an index of element to delete from the hashmap.\r\n\r\n- Move the last element to the place of the element to delete, $$\\mathcal{O}(1)$$ time.\r\n\r\n- Pop the last element out, $$\\mathcal{O}(1)$$ time.\r\n\r\n![fig](../Figures/380/delete.png)\r\n\r\n<iframe src=\"https://leetcode.com/playground/dX5mBWPW/shared\" frameBorder=\"0\" width=\"100%\" height=\"293\" name=\"dX5mBWPW\"></iframe>\r\n\r\n**GetRandom**\r\n\r\nGetRandom could be implemented in $$\\mathcal{O}(1)$$ time with the help of standard\r\n`random.choice` in Python and `Random` object in Java.\r\n\r\n<iframe src=\"https://leetcode.com/playground/FWwDDPbh/shared\" frameBorder=\"0\" width=\"100%\" height=\"140\" name=\"FWwDDPbh\"></iframe>\r\n\r\n**Implementation**\r\n\r\n<iframe src=\"https://leetcode.com/playground/M5LUr96J/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"M5LUr96J\"></iframe>\r\n\r\n**Complexity Analysis**\r\n\r\n* Time complexity. GetRandom is always $$\\mathcal{O}(1)$$.\r\nInsert and Delete both have $$\\mathcal{O}(1)$$ average time complexity, \r\nand $$\\mathcal{O}(N)$$ in the worst-case scenario \r\nwhen the operation exceeds the capacity of\r\ncurrently allocated array/hashmap and invokes space reallocation.\r\n\r\n* Space complexity: $$\\mathcal{O}(N)$$, to store N elements.\r\n\r\n\r\nAnalysis written by @[liaison](https://leetcode.com/liaison/)\r\nand @[andvary](https://leetcode.com/andvary/)",
    "contentTypeId": "107",
    "rating": {
      "id": "778",
      "count": 32,
      "average": 4.938,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "[\"RandomizedSet\",\"insert\",\"remove\",\"insert\",\"getRandom\",\"remove\",\"insert\",\"getRandom\"]\n[[],[1],[2],[2],[],[1],[2],[]]",
  "metaData": "{\r\n    \"classname\": \"RandomizedSet\",\r\n    \"maxbytesperline\": 121000,\r\n    \"constructor\": {\r\n        \"params\": [\r\n        ],\r\n        \"comment\": \"Initialize your data structure here.\"\r\n    },\r\n    \"methods\": [\r\n        {\r\n            \"name\" : \"insert\",\r\n            \"params\": [\r\n                {\r\n                    \"type\": \"integer\",\r\n                    \"name\": \"val\"\r\n                }\r\n            ],\r\n            \"return\": {\r\n                \"type\": \"boolean\"\r\n            },\r\n            \"comment\": \"Inserts a value to the set. Returns true if the set did not already contain the specified element.\"\r\n        },\r\n        {\r\n            \"name\" : \"remove\",\r\n            \"params\": [\r\n                {\r\n                    \"type\": \"integer\",\r\n                    \"name\": \"val\"\r\n                }\r\n            ],\r\n            \"return\": {\r\n                \"type\": \"boolean\"\r\n            },\r\n            \"comment\": \"Removes a value from the set. Returns true if the set contained the specified element.\"\r\n        },\r\n        {\r\n            \"name\" : \"getRandom\",\r\n            \"params\": [\r\n            ],\r\n            \"return\": {\r\n                \"type\": \"integer\"\r\n            },\r\n            \"comment\": \"Get a random element from the set.\"\r\n        }\r\n    ],\r\n    \"systemdesign\": true,\r\n    \"params\": [\r\n        {\r\n            \"name\": \"inputs\",\r\n            \"type\": \"integer[]\"\r\n        },\r\n        {\r\n            \"name\": \"inputs\",\r\n            \"type\": \"integer[]\"\r\n        }\r\n    ],\r\n    \"return\": {\r\n        \"type\": \"list<String>\",\r\n        \"dealloc\": true\r\n    }\r\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
