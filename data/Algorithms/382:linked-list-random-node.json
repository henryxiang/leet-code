{
  "questionId": "382",
  "questionFrontendId": "382",
  "boundTopicId": null,
  "title": "Linked List Random Node",
  "titleSlug": "linked-list-random-node",
  "categoryTitle": "Algorithms",
  "content": "<p>Given a singly linked list, return a random node's value from the linked list. Each node must have the <b>same probability</b> of being chosen.</p>\r\n\r\n<p><b>Follow up:</b><br />\r\nWhat if the linked list is extremely large and its length is unknown to you? Could you solve this efficiently without using extra space?\r\n</p>\r\n\r\n<p><b>Example:</b>\r\n<pre>\r\n// Init a singly linked list [1,2,3].\r\nListNode head = new ListNode(1);\r\nhead.next = new ListNode(2);\r\nhead.next.next = new ListNode(3);\r\nSolution solution = new Solution(head);\r\n\r\n// getRandom() should return either 1, 2, or 3 randomly. Each element should have equal probability of returning.\r\nsolution.getRandom();\r\n</pre>\r\n</p>",
  "isPaidOnly": false,
  "difficulty": "Medium",
  "likes": 466,
  "dislikes": 135,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"Random Pick Index\", \"titleSlug\": \"random-pick-index\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
  "contributors": [],
  "topicTags": [
    {
      "name": "Reservoir Sampling",
      "slug": "reservoir-sampling"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": false, \"name\": \"Apple\", \"slug\": \"apple\", \"timesEncountered\": 3}, {\"taggedByAdmin\": false, \"name\": \"Facebook\", \"slug\": \"facebook\", \"timesEncountered\": 2}], \"2\": [{\"taggedByAdmin\": true, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 2}], \"1\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    /** @param head The linked list's head.\n        Note that the head is guaranteed to be not null, so it contains at least one node. */\n    Solution(ListNode* head) {\n        \n    }\n    \n    /** Returns a random node's value. */\n    int getRandom() {\n        \n    }\n};\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution* obj = new Solution(head);\n * int param_1 = obj->getRandom();\n */"
    },
    {
      "lang": "Java",
      "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n\n    /** @param head The linked list's head.\n        Note that the head is guaranteed to be not null, so it contains at least one node. */\n    public Solution(ListNode head) {\n        \n    }\n    \n    /** Returns a random node's value. */\n    public int getRandom() {\n        \n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution obj = new Solution(head);\n * int param_1 = obj.getRandom();\n */"
    },
    {
      "lang": "Python",
      "code": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n\n    def __init__(self, head):\n        \"\"\"\n        @param head The linked list's head.\n        Note that the head is guaranteed to be not null, so it contains at least one node.\n        :type head: ListNode\n        \"\"\"\n        \n\n    def getRandom(self):\n        \"\"\"\n        Returns a random node's value.\n        :rtype: int\n        \"\"\"\n        \n\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution(head)\n# param_1 = obj.getRandom()"
    },
    {
      "lang": "Python3",
      "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n\n    def __init__(self, head: ListNode):\n        \"\"\"\n        @param head The linked list's head.\n        Note that the head is guaranteed to be not null, so it contains at least one node.\n        \"\"\"\n        \n\n    def getRandom(self) -> int:\n        \"\"\"\n        Returns a random node's value.\n        \"\"\"\n        \n\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution(head)\n# param_1 = obj.getRandom()"
    },
    {
      "lang": "C",
      "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\n\n\n\ntypedef struct {\n    \n} Solution;\n\n/** @param head The linked list's head.\n        Note that the head is guaranteed to be not null, so it contains at least one node. */\n\nSolution* solutionCreate(struct ListNode* head) {\n    \n}\n\n/** Returns a random node's value. */\nint solutionGetRandom(Solution* obj) {\n  \n}\n\nvoid solutionFree(Solution* obj) {\n    \n}\n\n/**\n * Your Solution struct will be instantiated and called as such:\n * Solution* obj = solutionCreate(head);\n * int param_1 = solutionGetRandom(obj);\n \n * solutionFree(obj);\n*/"
    },
    {
      "lang": "C#",
      "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n\n    /** @param head The linked list's head.\n        Note that the head is guaranteed to be not null, so it contains at least one node. */\n    public Solution(ListNode head) {\n        \n    }\n    \n    /** Returns a random node's value. */\n    public int GetRandom() {\n        \n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution obj = new Solution(head);\n * int param_1 = obj.GetRandom();\n */"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param head The linked list's head.\n        Note that the head is guaranteed to be not null, so it contains at least one node.\n * @param {ListNode} head\n */\nvar Solution = function(head) {\n    \n};\n\n/**\n * Returns a random node's value.\n * @return {number}\n */\nSolution.prototype.getRandom = function() {\n    \n};\n\n/** \n * Your Solution object will be instantiated and called as such:\n * var obj = new Solution(head)\n * var param_1 = obj.getRandom()\n */"
    },
    {
      "lang": "Ruby",
      "code": "# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val)\n#         @val = val\n#         @next = nil\n#     end\n# end\n\nclass Solution\n\n=begin\n    @param head The linked list's head.\n        Note that the head is guaranteed to be not null, so it contains at least one node.\n    :type head: ListNode\n=end\n    def initialize(head)\n        \n    end\n\n\n=begin\n    Returns a random node's value.\n    :rtype: Integer\n=end\n    def get_random()\n        \n    end\n\n\nend\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution.new(head)\n# param_1 = obj.get_random()"
    },
    {
      "lang": "Swift",
      "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.next = nil\n *     }\n * }\n */\n\nclass Solution {\n\n    /** @param head The linked list's head.\n        Note that the head is guaranteed to be not null, so it contains at least one node. */\n    init(_ head: ListNode?) {\n        \n    }\n    \n    /** Returns a random node's value. */\n    func getRandom() -> Int {\n        \n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * let obj = Solution(head)\n * let ret_1: Int = obj.getRandom()\n */"
    },
    {
      "lang": "Go",
      "code": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\ntype Solution struct {\n    \n}\n\n\n/** @param head The linked list's head.\n        Note that the head is guaranteed to be not null, so it contains at least one node. */\nfunc Constructor(head *ListNode) Solution {\n    \n}\n\n\n/** Returns a random node's value. */\nfunc (this *Solution) GetRandom() int {\n    \n}\n\n\n/**\n * Your Solution object will be instantiated and called as such:\n * obj := Constructor(head);\n * param_1 := obj.GetRandom();\n */"
    },
    {
      "lang": "Scala",
      "code": "/**\n * Definition for singly-linked list.\n * class ListNode(var _x: Int = 0) {\n *   var next: ListNode = null\n *   var x: Int = _x\n * }\n */\nclass Solution(_head: ListNode) {\n\n    /** @param head The linked list's head.\n        Note that the head is guaranteed to be not null, so it contains at least one node. */\n    \n\n    /** Returns a random node's value. */\n    def getRandom(): Int = {\n        \n    }\n\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * var obj = new Solution(head)\n * var param_1 = obj.getRandom()\n */"
    },
    {
      "lang": "Kotlin",
      "code": "/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution(head: ListNode?) {\n\n    /** @param head The linked list's head.\n        Note that the head is guaranteed to be not null, so it contains at least one node. */\n    \n\n    /** Returns a random node's value. */\n    fun getRandom(): Int {\n        \n    }\n\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * var obj = Solution(head)\n * var param_1 = obj.getRandom()\n */"
    },
    {
      "lang": "Rust",
      "code": "// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n// \n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nstruct Solution {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl Solution {\n\n    /** @param head The linked list's head.\n        Note that the head is guaranteed to be not null, so it contains at least one node. */\n    fn new(head: Option<Box<ListNode>>) -> Self {\n        \n    }\n    \n    /** Returns a random node's value. */\n    fn get_random(&self) -> i32 {\n        \n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * let obj = Solution::new(head);\n * let ret_1: i32 = obj.get_random();\n */"
    },
    {
      "lang": "PHP",
      "code": "/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val) { $this->val = $val; }\n * }\n */\nclass Solution {\n    /**\n     * @param head The linked list's head.\n        Note that the head is guaranteed to be not null, so it contains at least one node.\n     * @param ListNode $head\n     */\n    function __construct($head) {\n        \n    }\n  \n    /**\n     * Returns a random node's value.\n     * @return Integer\n     */\n    function getRandom() {\n        \n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * $obj = Solution($head);\n * $ret_1 = $obj->getRandom();\n */"
    }
  ],
  "stats": "{\"totalAccepted\": \"61.6K\", \"totalSubmission\": \"121.4K\", \"totalAcceptedRaw\": 61564, \"totalSubmissionRaw\": 121444, \"acRate\": \"50.7%\"}",
  "hints": [],
  "solution": null,
  "status": null,
  "sampleTestCase": "[\"Solution\",\"getRandom\"]\n[[[1,2,3]],[]]",
  "metaData": "{\r\n    \"classname\": \"Solution\",\r\n    \"maxbytesperline\": 121000,\r\n    \"constructor\": {\r\n        \"params\": [\r\n            {\r\n                \"type\": \"ListNode\",\r\n                \"name\": \"head\"\r\n            }\r\n        ],\r\n        \"comment\": \"@param head The linked list's head.\\n        Note that the head is guaranteed to be not null, so it contains at least one node.\"\r\n    },\r\n    \"methods\": [\r\n        {\r\n            \"name\" : \"getRandom\",\r\n            \"params\": [\r\n            ],\r\n            \"return\": {\r\n                \"type\": \"integer\"\r\n            },\r\n            \"deserialize\": false,\r\n            \"comment\": \"Returns a random node's value.\"\r\n        }\r\n    ],\r\n    \"systemdesign\": true,\r\n    \"params\": [\r\n        {\r\n            \"name\": \"inputs\",\r\n            \"type\": \"integer[]\"\r\n        },\r\n        {\r\n            \"name\": \"inputs\",\r\n            \"type\": \"integer[]\"\r\n        }\r\n    ],\r\n    \"return\": {\r\n        \"type\": \"list<String>\",\r\n        \"dealloc\": true\r\n    }\r\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
