{
  "questionId": "386",
  "questionFrontendId": "386",
  "boundTopicId": null,
  "title": "Lexicographical Numbers",
  "titleSlug": "lexicographical-numbers",
  "categoryTitle": "Algorithms",
  "content": "<p>Given an integer <i>n</i>, return 1 - <i>n</i> in lexicographical order.</p>\r\n\r\n<p>For example, given 13, return: [1,10,11,12,13,2,3,4,5,6,7,8,9].</p>\r\n\r\n<p>Please optimize your algorithm to use less time and space. The input size may be as large as 5,000,000.</p>\r\n",
  "isPaidOnly": false,
  "difficulty": "Medium",
  "likes": 460,
  "dislikes": 64,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [],
  "topicTags": [],
  "companyTagStats": "{\"2\": [{\"taggedByAdmin\": false, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 3}, {\"taggedByAdmin\": false, \"name\": \"Adobe\", \"slug\": \"adobe\", \"timesEncountered\": 2}], \"3\": [{\"taggedByAdmin\": true, \"name\": \"Bloomberg\", \"slug\": \"bloomberg\", \"timesEncountered\": 0}], \"1\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    vector<int> lexicalOrder(int n) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public List<Integer> lexicalOrder(int n) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def lexicalOrder(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def lexicalOrder(self, n: int) -> List[int]:\n        "
    },
    {
      "lang": "C",
      "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* lexicalOrder(int n, int* returnSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public IList<int> LexicalOrder(int n) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number} n\n * @return {number[]}\n */\nvar lexicalOrder = function(n) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer} n\n# @return {Integer[]}\ndef lexical_order(n)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func lexicalOrder(_ n: Int) -> [Int] {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func lexicalOrder(n int) []int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def lexicalOrder(n: Int): List[Int] = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun lexicalOrder(n: Int): List<Int> {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn lexical_order(n: i32) -> Vec<i32> {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer[]\n     */\n    function lexicalOrder($n) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"47.1K\", \"totalSubmission\": \"96.4K\", \"totalAcceptedRaw\": 47094, \"totalSubmissionRaw\": 96421, \"acRate\": \"48.8%\"}",
  "hints": [],
  "solution": null,
  "status": null,
  "sampleTestCase": "13",
  "metaData": "{\r\n  \"name\": \"lexicalOrder\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"n\",\r\n      \"type\": \"integer\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"list<integer>\"\r\n  }\r\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
