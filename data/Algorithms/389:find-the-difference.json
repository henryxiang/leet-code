{
  "questionId": "389",
  "questionFrontendId": "389",
  "boundTopicId": null,
  "title": "Find the Difference",
  "titleSlug": "find-the-difference",
  "categoryTitle": "Algorithms",
  "content": "<p>\r\nGiven two strings <b><i>s</i></b> and <b><i>t</i></b> which consist of only lowercase letters.</p>\r\n\r\n<p>String <b><i>t</i></b> is generated by random shuffling string <b><i>s</i></b> and then add one more letter at a random position.</p>\r\n\r\n<p>Find the letter that was added in <b><i>t</i></b>.</p>\r\n\r\n<p><b>Example:</b>\r\n<pre>\r\nInput:\r\ns = \"abcd\"\r\nt = \"abcde\"\r\n\r\nOutput:\r\ne\r\n\r\nExplanation:\r\n'e' is the letter that was added.\r\n</pre>",
  "isPaidOnly": false,
  "difficulty": "Easy",
  "likes": 599,
  "dislikes": 253,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"Single Number\", \"titleSlug\": \"single-number\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
  "contributors": [],
  "topicTags": [
    {
      "name": "Hash Table",
      "slug": "hash-table"
    },
    {
      "name": "Bit Manipulation",
      "slug": "bit-manipulation"
    }
  ],
  "companyTagStats": "{\"2\": [{\"taggedByAdmin\": true, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 2}], \"3\": [{\"taggedByAdmin\": false, \"name\": \"Adobe\", \"slug\": \"adobe\", \"timesEncountered\": 2}], \"1\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    char findTheDifference(string s, string t) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public char findTheDifference(String s, String t) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def findTheDifference(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def findTheDifference(self, s: str, t: str) -> str:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nchar findTheDifference(char * s, char * t){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public char FindTheDifference(string s, string t) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {string} s\n * @param {string} t\n * @return {character}\n */\nvar findTheDifference = function(s, t) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {String} s\n# @param {String} t\n# @return {Character}\ndef find_the_difference(s, t)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func findTheDifference(_ s: String, _ t: String) -> Character {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func findTheDifference(s string, t string) byte {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def findTheDifference(s: String, t: String): Char = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun findTheDifference(s: String, t: String): Char {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn find_the_difference(s: String, t: String) -> char {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param String $t\n     * @return String\n     */\n    function findTheDifference($s, $t) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"168.2K\", \"totalSubmission\": \"311K\", \"totalAcceptedRaw\": 168155, \"totalSubmissionRaw\": 310970, \"acRate\": \"54.1%\"}",
  "hints": [],
  "solution": null,
  "status": null,
  "sampleTestCase": "\"abcd\"\n\"abcde\"",
  "metaData": "{\r\n  \"name\": \"findTheDifference\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"s\",\r\n      \"type\": \"string\"\r\n    },\r\n    {\r\n      \"name\": \"t\",\r\n      \"type\": \"string\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"character\"\r\n  }\r\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
