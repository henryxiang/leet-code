{
  "questionId": "401",
  "questionFrontendId": "401",
  "boundTopicId": null,
  "title": "Binary Watch",
  "titleSlug": "binary-watch",
  "categoryTitle": "Algorithms",
  "content": "<p>A binary watch has 4 LEDs on the top which represent the <b>hours</b> (<b>0-11</b>), and the 6 LEDs on the bottom represent the <b>minutes</b> (<b>0-59</b>).</p>\r\n<p>Each LED represents a zero or one, with the least significant bit on the right.</p>\r\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/8/8b/Binary_clock_samui_moon.jpg\" height=\"300\" />\r\n<p>For example, the above binary watch reads \"3:25\".</p>\r\n\r\n<p>Given a non-negative integer <i>n</i> which represents the number of LEDs that are currently on, return all possible times the watch could represent.</p>\r\n\r\n<p><b>Example:</b>\r\n<pre>Input: n = 1<br>Return: [\"1:00\", \"2:00\", \"4:00\", \"8:00\", \"0:01\", \"0:02\", \"0:04\", \"0:08\", \"0:16\", \"0:32\"]</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br />\r\n<ul>\r\n<li>The order of output does not matter.</li>\r\n<li>The hour must not contain a leading zero, for example \"01:00\" is not valid, it should be \"1:00\".</li>\r\n<li>The minute must be consist of two digits and may contain a leading zero, for example \"10:2\" is not valid, it should be \"10:02\".</li>\r\n</ul>\r\n</p>",
  "isPaidOnly": false,
  "difficulty": "Easy",
  "likes": 452,
  "dislikes": 779,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"Letter Combinations of a Phone Number\", \"titleSlug\": \"letter-combinations-of-a-phone-number\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Number of 1 Bits\", \"titleSlug\": \"number-of-1-bits\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
  "contributors": [],
  "topicTags": [
    {
      "name": "Backtracking",
      "slug": "backtracking"
    },
    {
      "name": "Bit Manipulation",
      "slug": "bit-manipulation"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 0}], \"2\": [{\"taggedByAdmin\": false, \"name\": \"Apple\", \"slug\": \"apple\", \"timesEncountered\": 2}], \"1\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    vector<string> readBinaryWatch(int num) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public List<String> readBinaryWatch(int num) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def readBinaryWatch(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: List[str]\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def readBinaryWatch(self, num: int) -> List[str]:\n        "
    },
    {
      "lang": "C",
      "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar ** readBinaryWatch(int num, int* returnSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public IList<string> ReadBinaryWatch(int num) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number} num\n * @return {string[]}\n */\nvar readBinaryWatch = function(num) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer} num\n# @return {String[]}\ndef read_binary_watch(num)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func readBinaryWatch(_ num: Int) -> [String] {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func readBinaryWatch(num int) []string {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def readBinaryWatch(num: Int): List[String] = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun readBinaryWatch(num: Int): List<String> {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn read_binary_watch(num: i32) -> Vec<String> {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer $num\n     * @return String[]\n     */\n    function readBinaryWatch($num) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"73.1K\", \"totalSubmission\": \"158.4K\", \"totalAcceptedRaw\": 73088, \"totalSubmissionRaw\": 158371, \"acRate\": \"46.1%\"}",
  "hints": [
    "Simplify by seeking for solutions that involve comparing bit counts.",
    "Consider calculating all possible times for comparison purposes."
  ],
  "solution": null,
  "status": null,
  "sampleTestCase": "0",
  "metaData": "{\r\n    \"name\":\"readBinaryWatch\",\r\n    \"params\":[\r\n        {\r\n            \"name\":\"num\",\r\n            \"type\":\"integer\"\r\n        }\r\n    ],\r\n    \"return\":{\r\n        \"type\":\"list<string>\"\r\n    }\r\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
