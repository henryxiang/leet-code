{
  "questionId": "477",
  "questionFrontendId": "477",
  "boundTopicId": null,
  "title": "Total Hamming Distance",
  "titleSlug": "total-hamming-distance",
  "categoryTitle": "Algorithms",
  "content": "<p>The <a href=\"https://en.wikipedia.org/wiki/Hamming_distance\" target=\"_blank\">Hamming distance</a> between two integers is the number of positions at which the corresponding bits are different.</p>\r\n\r\n<p>Now your job is to find the total Hamming distance between all pairs of the given numbers.</p\u0010\u0010\u0010\u0010>\r\n\r\n\r\n<p><b>Example:</b><br />\r\n<pre>\r\n<b>Input:</b> 4, 14, 2\r\n\r\n<b>Output:</b> 6\r\n\r\n<b>Explanation:</b> In binary representation, the 4 is 0100, 14 is 1110, and 2 is 0010 (just\r\nshowing the four bits relevant in this case). So the answer will be:\r\nHammingDistance(4, 14) + HammingDistance(4, 2) + HammingDistance(14, 2) = 2 + 2 + 2 = 6.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>Elements of the given array are in the range of <code>0 </code> to <code>10^9</code>\r\n<li>Length of the array will not exceed <code>10^4</code>. </li>\r\n</ol>\r\n</p>",
  "isPaidOnly": false,
  "difficulty": "Medium",
  "likes": 644,
  "dislikes": 47,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"Hamming Distance\", \"titleSlug\": \"hamming-distance\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
  "contributors": [
    {
      "username": "kevinxinzhao",
      "profileUrl": "/kevinxinzhao/",
      "avatarUrl": "https://www.gravatar.com/avatar/4672cc804ba22bf1cc8dd844be02c862.png?s=200"
    }
  ],
  "topicTags": [
    {
      "name": "Bit Manipulation",
      "slug": "bit-manipulation"
    }
  ],
  "companyTagStats": "{\"2\": [{\"taggedByAdmin\": true, \"name\": \"Facebook\", \"slug\": \"facebook\", \"timesEncountered\": 6}], \"1\": [], \"3\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    int totalHammingDistance(vector<int>& nums) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int totalHammingDistance(int[] nums) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def totalHammingDistance(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def totalHammingDistance(self, nums: List[int]) -> int:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nint totalHammingDistance(int* nums, int numsSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public int TotalHammingDistance(int[] nums) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar totalHammingDistance = function(nums) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef total_hamming_distance(nums)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func totalHammingDistance(_ nums: [Int]) -> Int {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func totalHammingDistance(nums []int) int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def totalHammingDistance(nums: Array[Int]): Int = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun totalHammingDistance(nums: IntArray): Int {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn total_hamming_distance(nums: Vec<i32>) -> i32 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function totalHammingDistance($nums) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"55.1K\", \"totalSubmission\": \"110K\", \"totalAcceptedRaw\": 55062, \"totalSubmissionRaw\": 109978, \"acRate\": \"50.1%\"}",
  "hints": [],
  "solution": {
    "id": "80",
    "canSeeDetail": true,
    "url": "/articles/total-hamming-distance/",
    "content": "[TOC]\n\n## Solution\n---\n#### Approach #1 Brute Force [Time Limit Exceeded]\n\n**Intuition**\n\n1. Check all the unique pairs of elements for differing bits.\n2. `xor` of two bits is `1` if they are not the same, and `0` otherwise.\n\n**Algorithm**\n\nBitwise `xor` of two numbers will give a bitwise representation of where the bits of two numbers differ. Such bit positions are represented by a `1` bit in the resultant. For example:\n\n        0010 1101   ==  45\n      ^ 0100 1010   ==  74\n    ----------------\n        0110 0111\n         ^^   ^^^   => 5 differing bits\n\nHence the numbers $$45$$ and $$74$$ have five differing bits. Thus the Hamming Distance between them is $$5$$.\n\nFor each of the $$\\approx n^2/2$$ pairs of elements, simply apply bitwise `xor` to them to find out a resultant representation which tells us the differing bits. Count the `1` bits to find the Hamming Distance for that pair of elements. Sum over all pairs to get the total Hamming Distance.\n\n<iframe src=\"https://leetcode.com/playground/HpH92ApX/shared\" frameBorder=\"0\" name=\"HpH92ApX\" width=\"100%\" height=\"275\"></iframe>\n\n**NOTE:** The `__builtin_popcount()` method is an internal built-in function available in **C** (and hence by extension **C++**) which gives the count of `1` bits for an `int` type argument. Being a low level built-in method, it is understandably faster than running a hand rolled loop.\nAs an alternative, you can iterate over all the bits of the number and count the `1` bits. Take a look at the code for [Approach #2](#approach-2-loop-over-the-bits-accepted) for hints on how to achieve that.\n\n**Complexity Analysis**\n\n* Time complexity: $$O(n^2 \\cdot log_2V) \\simeq O(n^2)$$.\n\n    + There are exactly $$\\binom{n}{2} = {}^nC_2 = \\frac{n \\cdot (n-1)}{2}$$ unique pairs of elements for an $$n$$ element array.\n    + Each of these pairs, when `xor`ed, result in a resultant number which is $$\\lceil log_2V \\rceil$$ bits long. Here $$V$$ is the largest value any of the elements can ever take.\n    + We iterate over these many bits to count the number of `1` bits.  In our case, since all elements are $$\\leq 10^9$$, the value $$\\lceil log_2V \\rceil = 30$$ is a small constant. Hence counting the `1` bits takes place in nearly constant (i.e. $$O(1)$$) time.\n\n* Space complexity: $$O(1)$$ constant space.\n\n---\n#### Approach #2 Loop over the bits! [Accepted]\n\n**Intuition**\n\nLooping over all possible combinations of two element pairs, increases quadratically over the size of the input. If we could instead loop over the bits of the elements (which is constant), we could shave off an input dimension from our runtime complexity.\n\n**Algorithm**\n\nSay for any particular bit position, count the number of elements with this bit **ON** (i.e. this particular bit is `1`). Let this count be $$k$$. Hence the number of elements with this bit **OFF** (i.e. `0`) is $$(n - k)$$ (in an $$n$$ element array).\n\nCertainly unique pairs of elements exists where one element has this particular bit **ON** while the other element has this **OFF** (i.e. this particular bit differs for the two elements of this pair).\n> We can argue that every such pair contributes one unit to the Hamming Distance for this particular bit.\n\nWe know that the count of such unique pairs is $${}^kC_1 * {}^{n-k}C_1 = k \\cdot (n-k)$$ for this particular bit. Hence Hamming Distance for this particular bit is $$k \\cdot (n-k)$$.\n\nFor each of the $$\\lceil log_2V \\rceil$$ bits that we can check, we can calculate a Hamming Distance pertaining to that bit. Taking sum over the Hamming Distances of all these bits, we get the total Hamming Distance.\n\n<iframe src=\"https://leetcode.com/playground/EoYRygcG/shared\" frameBorder=\"0\" name=\"EoYRygcG\" width=\"100%\" height=\"445\"></iframe>\n\n**NOTE:** You *can switch the order of the loops* while counting `1` bits without affecting complexity. However it might give some performance changes due to locality of reference and the resultant cache hits/misses.\n\n**Complexity Analysis**\n\n* Time complexity: $$O(n \\cdot log_2V) \\simeq O(n)$$. Runtime performance is limited by the double loop where we are counting elements for particular bits. In our case, since all elements are $$\\leq 10^9$$, the value $$\\lceil log_2V \\rceil = 30$$ is a small constant. Thus the inner loop runs in nearly constant time.\n\n* Space complexity: $$O(log_2V) \\to O(1)$$ extra space.\n\n    + For each of the $$\\lceil log_2V \\rceil$$ bits, we need to maintain a count which is later used to calculate the Hamming Distance for that bit. Since $$\\lceil log_2V \\rceil \\approx 32$$ is a small constant in our case, that takes nearly constant extra space.\n    + Another thing to notice, is that if we **switch the order of the double loop,** we can do away with storing the count and calculate the Hamming Distance for that bit then and there. That results in only constant extra space being used.\n\n---\n#### Bonus!\n\nThis question is a perfect example of how vectorized operations can result in small, elegant and good performance code. Take a look at this slick **Python** solution to this problem (by [@StefanPochmann](https://leetcode.com/StefanPochmann/)):\n\n<iframe src=\"https://leetcode.com/playground/uskMAwMG/shared\" frameBorder=\"0\" name=\"uskMAwMG\" width=\"100%\" height=\"88\"></iframe>\n\nThe `*` operator turns the list of `32`-bit wide binary strings returned by `map` into individual arguments to the `zip` method. The `zip` method vectorizes the string arguments to create a list of vectors (each of which is a vector `b` of particular bits from every element in the input array; There are `32` such vectors of size `len(nums)` each, in this list ). Finally we use the same technique as [Approach #2](#approach-2-loop-over-the-bits-accepted) to calculate the total Hamming Distance.\n\n---\nAnalysis written by [@babhishek21](https://leetcode.com/babhishek21).",
    "contentTypeId": "107",
    "rating": {
      "id": "79",
      "count": 8,
      "average": 4.125,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "[4,14,2]",
  "metaData": "{\r\n  \"name\": \"totalHammingDistance\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"nums\",\r\n      \"type\": \"integer[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
