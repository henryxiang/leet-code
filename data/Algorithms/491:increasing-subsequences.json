{
  "questionId": "491",
  "questionFrontendId": "491",
  "boundTopicId": null,
  "title": "Increasing Subsequences",
  "titleSlug": "increasing-subsequences",
  "categoryTitle": "Algorithms",
  "content": "<p>Given an integer array, your task is to find all the different possible increasing subsequences of the given array, and the length of an increasing subsequence should be at least 2.</p>\n\n<p>&nbsp;</p>\n\n<p><b>Example:</b></p>\n\n<pre>\n<b>Input:</b> [4, 6, 7, 7]\n<b>Output:</b> [[4, 6], [4, 7], [4, 6, 7], [4, 6, 7, 7], [6, 7], [6, 7, 7], [7,7], [4,7,7]]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><b>Note:</b></p>\n\n<ol>\n\t<li>The length of the given array will not exceed 15.</li>\n\t<li>The range of integer in the given array is [-100,100].</li>\n\t<li>The given array may contain duplicates, and two equal integers should also be considered as a special case of increasing sequence.</li>\n</ol>\n",
  "isPaidOnly": false,
  "difficulty": "Medium",
  "likes": 525,
  "dislikes": 93,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"Maximum Length of Pair Chain\", \"titleSlug\": \"maximum-length-of-pair-chain\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
  "contributors": [
    {
      "username": "Stomach_ache",
      "profileUrl": "/stomach_ache/",
      "avatarUrl": "https://assets.leetcode.com/users/stomach_ache/avatar_1550751028.png"
    }
  ],
  "topicTags": [
    {
      "name": "Depth-first Search",
      "slug": "depth-first-search"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": false, \"name\": \"Facebook\", \"slug\": \"facebook\", \"timesEncountered\": 2}, {\"taggedByAdmin\": true, \"name\": \"Yahoo\", \"slug\": \"yahoo\", \"timesEncountered\": 0}], \"1\": [], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\r\npublic:\r\n    vector<vector<int>> findSubsequences(vector<int>& nums) {\r\n        \r\n    }\r\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public List<List<Integer>> findSubsequences(int[] nums) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def findSubsequences(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def findSubsequences(self, nums: List[int]) -> List[List[int]]:\n        "
    },
    {
      "lang": "C",
      "code": "\r\n\r\n/**\r\n * Return an array of arrays of size *returnSize.\r\n * The sizes of the arrays are returned as *returnColumnSizes array.\r\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\r\n */\r\nint** findSubsequences(int* nums, int numsSize, int* returnSize, int** returnColumnSizes){\r\n\r\n}\r\n\r\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\r\n    public IList<IList<int>> FindSubsequences(int[] nums) {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar findSubsequences = function(nums) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer[]} nums\r\n# @return {Integer[][]}\r\ndef find_subsequences(nums)\r\n    \r\nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\r\n    func findSubsequences(_ nums: [Int]) -> [[Int]] {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Go",
      "code": "func findSubsequences(nums []int) [][]int {\r\n    \r\n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\r\n    def findSubsequences(nums: Array[Int]): List[List[Int]] = {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\r\n    fun findSubsequences(nums: IntArray): List<List<Int>> {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\r\n    pub fn find_subsequences(nums: Vec<i32>) -> Vec<Vec<i32>> {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer[][]\n     */\n    function findSubsequences($nums) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"38.5K\", \"totalSubmission\": \"88.4K\", \"totalAcceptedRaw\": 38464, \"totalSubmissionRaw\": 88380, \"acRate\": \"43.5%\"}",
  "hints": [],
  "solution": null,
  "status": null,
  "sampleTestCase": "[4,6,7,7]",
  "metaData": "{\r\n  \"name\": \"findSubsequences\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"nums\",\r\n      \"type\": \"integer[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"list<list<integer>>\",\r\n    \"dealloc\": true\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
