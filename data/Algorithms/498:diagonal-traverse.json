{
  "questionId": "498",
  "questionFrontendId": "498",
  "boundTopicId": null,
  "title": "Diagonal Traverse",
  "titleSlug": "diagonal-traverse",
  "categoryTitle": "Algorithms",
  "content": "<p>Given a matrix of M x N elements (M rows, N columns), return all elements of the matrix in diagonal order as shown in the below image.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b>\r\n[\r\n [ 1, 2, 3 ],\r\n [ 4, 5, 6 ],\r\n [ 7, 8, 9 ]\r\n]\r\n\r\n<b>Output:</b>  [1,2,4,7,5,3,6,8,9]\r\n\r\n<b>Explanation:</b>\r\n<img src=\"https://assets.leetcode.com/uploads/2018/10/12/diagonal_traverse.png\" style=\"width: 220px;\" />\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<p>The total number of elements of the given matrix will not exceed 10,000.</p>\r\n",
  "isPaidOnly": false,
  "difficulty": "Medium",
  "likes": 482,
  "dislikes": 270,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [
    {
      "username": "nberserk",
      "profileUrl": "/nberserk/",
      "avatarUrl": "https://www.gravatar.com/avatar/d12b6465ca96740be9e53d07a3093247.png?s=200"
    }
  ],
  "topicTags": [],
  "companyTagStats": "{\"1\": [{\"taggedByAdmin\": false, \"name\": \"Quora\", \"slug\": \"quora\", \"timesEncountered\": 6}, {\"taggedByAdmin\": false, \"name\": \"Facebook\", \"slug\": \"facebook\", \"timesEncountered\": 4}, {\"taggedByAdmin\": false, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 3}, {\"taggedByAdmin\": false, \"name\": \"Walmart Labs\", \"slug\": \"walmart-labs\", \"timesEncountered\": 3}, {\"taggedByAdmin\": false, \"name\": \"Splunk\", \"slug\": \"splunk\", \"timesEncountered\": 3}, {\"taggedByAdmin\": true, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"eBay\", \"slug\": \"ebay\", \"timesEncountered\": 2}], \"2\": [{\"taggedByAdmin\": false, \"name\": \"Microsoft\", \"slug\": \"microsoft\", \"timesEncountered\": 2}], \"3\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    vector<int> findDiagonalOrder(vector<vector<int>>& matrix) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int[] findDiagonalOrder(int[][] matrix) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def findDiagonalOrder(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def findDiagonalOrder(self, matrix: List[List[int]]) -> List[int]:\n        "
    },
    {
      "lang": "C",
      "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* findDiagonalOrder(int** matrix, int matrixSize, int* matrixColSize, int* returnSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public int[] FindDiagonalOrder(int[][] matrix) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number[][]} matrix\n * @return {number[]}\n */\nvar findDiagonalOrder = function(matrix) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer[][]} matrix\n# @return {Integer[]}\ndef find_diagonal_order(matrix)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func findDiagonalOrder(_ matrix: [[Int]]) -> [Int] {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func findDiagonalOrder(matrix [][]int) []int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def findDiagonalOrder(matrix: Array[Array[Int]]): Array[Int] = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun findDiagonalOrder(matrix: Array<IntArray>): IntArray {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn find_diagonal_order(matrix: Vec<Vec<i32>>) -> Vec<i32> {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer[][] $matrix\n     * @return Integer[]\n     */\n    function findDiagonalOrder($matrix) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"58.6K\", \"totalSubmission\": \"126.1K\", \"totalAcceptedRaw\": 58574, \"totalSubmissionRaw\": 126108, \"acRate\": \"46.4%\"}",
  "hints": [],
  "solution": {
    "id": "845",
    "canSeeDetail": true,
    "url": "/articles/diagonal-traverse/",
    "content": "[TOC]\n\n## Solution\n\n#### Approach 1: Diagonal Iteration and Reversal\n\n**Intuition**\n\nA common strategy for solving a lot of programming problem is to first solve a stripped down, simpler version of them and then think what needs to be changed to achieve the original goal. Our first approach to this problem is also based on this very idea. So, instead of thinking about the zig-zag pattern of printing for the diagonals, let's say the problem statement simply asked us to print out the contents of the matrix, one diagonal after the other starting from the first element. Let's see what this problem would look like. \n\n<center>\n<img src=\"../Figures/498/img1.png\" width=\"600\"/>\n</center>\n\nThe first row and the last column in this problem would serve as the starting point for the corresponding diagonal. Given an element inside a diagonal, say $$[i, j]$$, we can either go up the diagonal by going one row up and one column ahead i.e. $$[i - 1, j + 1]$$ or, we can go down the diagonal by going one row down and one column to the left i.e. $$[i + 1, j - 1]$$. *Note* that this applies to diagonals that go from `right to left` only. The math would change for the ones that go from left to right. \n\nThis is a simple problem to solve, right? The only difference between this one and the original problem is that some of the diagonals are not printed in the right order. That's all we need to fix to get the right solution!\n\n> We simply need to reverse the odd numbered diagonals before we add the elements to the final result array. So, for e.g. the third diagonal starting from the left would be [3, 7, 11] and before we add these elements to the final result array, we simply reverse them i.e. [11, 7, 3]. \n\n**Algorithm**\n\n1. Initialize a `result` array that we will eventually return. \n2. We would have an outer loop that will go over each of the diagonals one by one. As mentioned before, the elements in the first row and the last column would actually be the heads of their corresponding diagonals. \n3. We then have an inner while loop that iterates over all the elements in the diagonal. We can calculate the number of elements in the corresponding diagonal by doing some math but we can simply iterate until one of the indices goes out of bounds.\n4. For each diagonal we will need a new list or dynamic array like data structure since we don't know what size to allocate. Again, we can do some math and calculate the size of that particular diagonal and allocate memory; but it's not necessary for this explanation.  \n5. For odd numbered diagonals, we simply need to add the elements in our intermediary array, in reverse order to the final result array.\n\n    <center>\n    <img src=\"../Figures/498/img2.png\" width=\"500\"/>\n    </center>\n\n<iframe src=\"https://leetcode.com/playground/9dd6FoAz/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"9dd6FoAz\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: $$O(N \\cdot M)$$ considering the array has $$N$$ rows and $$M$$ columns. An important thing to remember is that for all the odd numbered diagonals, we will be processing the elements twice since we have to reverse the elements before adding to the result array. Additionally, to save space, we have to `clear` the intermediate array before we process a new diagonal. That operation also takes $$O(K)$$ where $$K$$ is the size of that array. So, we will be processing all the elements of the array at least twice. But, as far as the asymptotic complexity is concerned, it remains the same.\n* Space Complexity: $$O(min(N, M))$$ since the extra space is occupied by the intermediate arrays we use for storing diagonal elements and the maximum it can occupy is the equal to the minimum of $$N$$ and $$M$$. Remember, the diagonal can only extend till one of its indices goes out of scope.\n<br>\n<br>\n\n---\n#### Approach 2: Simulation\n\n**Intuition**\n\nThis approach simply and plainly does what the problem statement asks us to do. It's pure simulation. However, in order to implement this simulation, we need to understand the walking patterns inside the array. Basically, in the previous approach, figuring our the `head` of the diagonal was pretty easy. In this case, it won't be that easy. We need to figure out two things for each diagonal:\n\n1. The direction in which we want to process it's elements and\n2. The head or the starting point for the diagonal `depending upon its direction`.\n\nLet's see these two things annotated on a sample matrix. \n\n<center>\n<img src=\"../Figures/498/img3.png\" width=\"600\"/>\n</center>\n\nNow that we know what two things we need to figure out, let's get to the part where we actually do it! The direction is pretty straightforward. We can simply use a boolean variable and keep alternating it to figure out the direction for a diagonal. That part is sorted. The slightly tricky part is figuring out the head of the next diagonal. \n\nThe good part is, we already know the `end` of the previous diagonal. We can use that information to figure out the head of the next diagonal. \n\n**Next head when going UP**<br>\nLet's look at the two scenarios that we may come across when we are at the tail end of a downwards diagonal and we want to find the head of the next diagonal.\n\n<center>\n<img src=\"../Figures/498/img4.png\" width=\"600\"/>\n</center>\n\nSo, the general rule that we will be following when we want to find the head for an upwards going diagonal is that:\n\n> The head would be the node directly below the tail of the previous diagonal. Unless the tail lies in the last row of the matrix in which case the head would be the node right next to the tail.\n\n**Next head when going DOWN** <br>\nLet's look at the two scenarios that we may come across when we are at the tail end of an upwards diagonal and we want to find the head of the next diagonal.\n\n<center>\n<img src=\"../Figures/498/img5.png\" width=\"600\"/>\n</center>\n\nSo, the general rule that we will be following when we want to find the head for a downwards going diagonal is that:\n\n> The head would be the node to the right of the tail of the previous diagonal. Unless the tail lies in the last column of the matrix in which case the head would be the node directly below the tail.\n\n**Algorithm**\n\n1. Initialize a boolean variable called `direction` which will tell us whether the current diagonal is an upwards or downwards going. Based on the current direction and the tail, we will determine the head of the next diagonal. Initially the direction would be `1` which would indicate `up`. We will keep alternating this value from one iteration to the next.\n2. Assuming we know the head of a diagonal, say $$matrix[i][j]$$, we will use the direction to progress along the diagonal and process its elements. \n    - For an upwards going diagonal, the next element in the diagonal would be $$matrix[i - 1][j + 1]$$\n    - For a downwards going diagonal, the next element would be $$matrix[i + 1][j - 1]$$. \n3. We keep processing the elements of the current diagonal until we go out of the boundaries of the matrix. \n4. Now, given that we know the tail of the diagonal (the last node before we went out of bounds), let's see how we can find the next head. Note that in the following pseudocode, the `direction` is for the current diagonal and we are trying to find the head of the next diagonal. So, if the direction is `up`, it means the next diagonal would be going down and vice-versa.\n    <pre>\n   tail = [i, j]\n   if direction == up, then {\n      if [i, j + 1] is within bounds, then {\n          next_head = [i, j + 1]\n      } else { \n          next_head = [i + 1, j]\n      }\n   } else {\n      if [i + 1, j] is within bounds, then {\n          next_head = [i + 1, j]\n      } else { \n          next_head = [i, j + 1]\n      }\n   }</pre>\n    \n5. We keep processing the elements of a diagonal and once the current diagonal ends, we use the current direction and the tail element to find the next head and we switch over to processing the next diagonal. Also remember to flip the direction bit. \n\n<iframe src=\"https://leetcode.com/playground/5qAGnrYc/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"5qAGnrYc\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: $$O(N \\cdot M)$$ since we process each element of the matrix exactly once.\n* Space Complexity: $$O(1)$$ since we don't make use of any additional data structure. Note that the space occupied by the output array doesn't count towards the space complexity since that is a requirement of the problem itself. Space complexity comprises any `additional` space that we may have used to get to build the final array. For the previous solution, it was the intermediate arrays. In this solution, we don't have any additional space apart from a couple of variables.\n<br>\n<br>\n---\nAnalysis written by: [@sachinmalhotra1993](https://leetcode.com/sachinmalhotra1993/).",
    "contentTypeId": "107",
    "rating": {
      "id": "803",
      "count": 1,
      "average": 5,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "[[1,2,3],[4,5,6],[7,8,9]]",
  "metaData": "{\r\n  \"name\": \"findDiagonalOrder\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"matrix\",\r\n      \"type\": \"integer[][]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer[]\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
