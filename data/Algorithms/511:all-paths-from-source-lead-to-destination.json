{
  "questionId": "511",
  "questionFrontendId": "1059",
  "boundTopicId": null,
  "title": "All Paths from Source Lead to Destination",
  "titleSlug": "all-paths-from-source-lead-to-destination",
  "categoryTitle": "Algorithms",
  "content": "<p>Given the <code>edges</code> of a directed graph, and two nodes <code>source</code> and <code>destination</code> of this graph, determine whether or not all paths starting from <code>source</code> eventually end at <code>destination</code>, that is:</p>\r\n\r\n<ul>\r\n\t<li>At least one path exists from the <code>source</code> node to the <code>destination</code> node</li>\r\n\t<li>If a path exists from the <code>source</code> node to a node with no outgoing edges, then that node is equal to <code>destination</code>.</li>\r\n\t<li>The number of possible paths from <code>source</code> to <code>destination</code> is a finite number.</li>\r\n</ul>\r\n\r\n<p>Return <code>true</code> if and only if all roads from <code>source</code> lead to <code>destination</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/03/16/485_example_1.png\" style=\"width: 200px; height: 208px;\" /></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>n = 3, edges = <span id=\"example-input-1-2\">[[0,1],[0,2]]</span>, source = <span id=\"example-input-1-3\">0</span>, destination = 2\r\n<strong>Output: </strong><span id=\"example-output-1\">false</span>\r\n<strong>Explanation: </strong>It is possible to reach and get stuck on both node 1 and node 2.\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/03/16/485_example_2.png\" style=\"width: 200px; height: 230px;\" /></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>n = <span id=\"example-input-2-1\">4</span>, edges = <span id=\"example-input-2-2\">[[0,1],[0,3],[1,2],[2,1]]</span>, source = <span id=\"example-input-2-3\">0</span>, destination = <span id=\"example-input-2-4\">3</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">false</span>\r\n<strong>Explanation: </strong>We have two possibilities: to end at node 3, or to loop over node 1 and node 2 indefinitely.\r\n</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/03/16/485_example_3.png\" style=\"width: 200px; height: 183px;\" /></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>n = <span id=\"example-input-3-1\">4</span>, edges = <span id=\"example-input-3-2\">[[0,1],[0,2],[1,3],[2,3]]</span>, source = <span id=\"example-input-3-3\">0</span>, destination = <span id=\"example-input-3-4\">3</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">true</span>\r\n</pre>\r\n\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/03/16/485_example_4.png\" style=\"width: 200px; height: 183px;\" /></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>n = <span id=\"example-input-4-1\">3</span>, edges = <span id=\"example-input-4-2\">[[0,1],[1,1],[1,2]]</span>, source = <span id=\"example-input-4-3\">0</span>, destination = <span id=\"example-input-4-4\">2</span>\r\n<strong>Output: </strong><span id=\"example-output-4\">false</span>\r\n<strong>Explanation: </strong>All paths from the source node end at the destination node, but there are an infinite number of paths, such as 0-1-2, 0-1-1-2, 0-1-1-1-2, 0-1-1-1-1-2, and so on.\r\n</pre>\r\n\r\n<p><strong>Example 5:</strong></p>\r\n\r\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/03/16/485_example_5.png\" style=\"width: 150px; height: 131px;\" /></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>n = <span id=\"example-input-5-1\">2</span>, edges = <span id=\"example-input-5-2\">[[0,1],[1,1]]</span>, source = <span id=\"example-input-5-3\">0</span>, destination = <span id=\"example-input-5-4\">1</span>\r\n<strong>Output: </strong><span id=\"example-output-5\">false</span>\r\n<strong>Explanation: </strong>There is infinite self-loop at destination node.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><italic>The given graph may have self loops and parallel edges.</italic></li>\r\n\t<li>The number of nodes <code>n</code> in the graph is between <code>1</code> and <code>10000</code></li>\r\n\t<li>The number of edges in the graph is between <code>0</code> and <code>10000</code></li>\r\n\t<li><code>0 &lt;= edges.length &lt;= 10000</code></li>\r\n\t<li><code>edges[i].length == 2</code></li>\r\n\t<li><code>0 &lt;= source &lt;= n - 1</code></li>\r\n\t<li><code>0 &lt;= destination &lt;= n - 1</code></li>\r\n</ol>\r\n",
  "isPaidOnly": true,
  "difficulty": "Medium",
  "likes": 70,
  "dislikes": 16,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [
    {
      "username": "meryhu",
      "profileUrl": "/meryhu/",
      "avatarUrl": "https://www.gravatar.com/avatar/de7b95203d3fcfe317593ef0c0eb4907.png?s=200"
    }
  ],
  "topicTags": [
    {
      "name": "Depth-first Search",
      "slug": "depth-first-search"
    },
    {
      "name": "Graph",
      "slug": "graph"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 0}], \"1\": [], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    bool leadsToDestination(int n, vector<vector<int>>& edges, int source, int destination) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public boolean leadsToDestination(int n, int[][] edges, int source, int destination) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def leadsToDestination(self, n, edges, source, destination):\n        \"\"\"\n        :type n: int\n        :type edges: List[List[int]]\n        :type source: int\n        :type destination: int\n        :rtype: bool\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def leadsToDestination(self, n: int, edges: List[List[int]], source: int, destination: int) -> bool:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nbool leadsToDestination(int n, int** edges, int edgesSize, int* edgesColSize, int source, int destination){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public bool LeadsToDestination(int n, int[][] edges, int source, int destination) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number} n\n * @param {number[][]} edges\n * @param {number} source\n * @param {number} destination\n * @return {boolean}\n */\nvar leadsToDestination = function(n, edges, source, destination) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer} n\n# @param {Integer[][]} edges\n# @param {Integer} source\n# @param {Integer} destination\n# @return {Boolean}\ndef leads_to_destination(n, edges, source, destination)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func leadsToDestination(_ n: Int, _ edges: [[Int]], _ source: Int, _ destination: Int) -> Bool {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func leadsToDestination(n int, edges [][]int, source int, destination int) bool {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def leadsToDestination(n: Int, edges: Array[Array[Int]], source: Int, destination: Int): Boolean = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun leadsToDestination(n: Int, edges: Array<IntArray>, source: Int, destination: Int): Boolean {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn leads_to_destination(n: i32, edges: Vec<Vec<i32>>, source: i32, destination: i32) -> bool {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $edges\n     * @param Integer $source\n     * @param Integer $destination\n     * @return Boolean\n     */\n    function leadsToDestination($n, $edges, $source, $destination) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"4K\", \"totalSubmission\": \"8.7K\", \"totalAcceptedRaw\": 3966, \"totalSubmissionRaw\": 8735, \"acRate\": \"45.4%\"}",
  "hints": [
    "What if we can reach to a cycle from the source node?",
    "Then the answer will be false, because we eventually get trapped in the cycle forever.",
    "What if the we can't reach to a cycle from the source node? Then we need to ensure that from all visited nodes from source the unique node with indegree = 0 is the destination node."
  ],
  "solution": null,
  "status": null,
  "sampleTestCase": "3\n[[0,1],[0,2]]\n0\n2",
  "metaData": "{\r\n  \"name\": \"leadsToDestination\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"n\",\r\n      \"type\": \"integer\"\r\n    },\r\n    {\r\n      \"name\": \"edges\",\r\n      \"type\": \"integer[][]\"\r\n    },\r\n    {\r\n      \"name\": \"source\",\r\n      \"type\": \"integer\"\r\n    },\r\n    {\r\n      \"name\": \"destination\",\r\n      \"type\": \"integer\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"boolean\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
