{
  "questionId": "514",
  "questionFrontendId": "514",
  "boundTopicId": null,
  "title": "Freedom Trail",
  "titleSlug": "freedom-trail",
  "categoryTitle": "Algorithms",
  "content": "<p>In the video game Fallout 4, the quest &quot;Road to Freedom&quot; requires players to reach a metal dial called the &quot;Freedom Trail Ring&quot;, and use the dial to spell a specific keyword in order to open the door.</p>\r\n\r\n<p>Given a string <b>ring</b>, which represents the code engraved on the outer ring and another string <b>key</b>, which represents the keyword needs to be spelled. You need to find the <b>minimum</b> number of steps in order to spell all the characters in the keyword.</p>\r\n\r\n<p>Initially, the first character of the <b>ring</b> is aligned at 12:00 direction. You need to spell all the characters in the string <b>key</b> one by one by rotating the ring clockwise or anticlockwise to make each character of the string <b>key</b> aligned at 12:00 direction and then by pressing the center button.</p>\r\n\r\n<p>At the stage of rotating the ring to spell the key character <b>key[i]</b>:</p>\r\n\r\n<ol>\r\n\t<li>You can rotate the <b>ring</b> clockwise or anticlockwise <b>one place</b>, which counts as 1 step. The final purpose of the rotation is to align one of the string <b>ring&#39;s</b> characters at the 12:00 direction, where this character must equal to the character <b>key[i]</b>.</li>\r\n\t<li>If the character <b>key[i]</b> has been aligned at the 12:00 direction, you need to press the center button to spell, which also counts as 1 step. After the pressing, you could begin to spell the next character in the key (next stage), otherwise, you&#39;ve finished all the spelling.</li>\r\n</ol>\r\n\r\n<p><b>Example:</b></p>\r\n\r\n<center><img src=\"https://assets.leetcode.com/uploads/2018/10/22/ring.jpg\" style=\"width: 26%;\" /></center>\r\n&nbsp;\r\n\r\n<pre>\r\n<b>Input:</b> ring = &quot;godding&quot;, key = &quot;gd&quot;\r\n<b>Output:</b> 4\r\n<b>Explanation:</b>\r\nFor the first key character &#39;g&#39;, since it is already in place, we just need 1 step to spell this character. \r\nFor the second key character &#39;d&#39;, we need to rotate the ring &quot;godding&quot; anticlockwise by two steps to make it become &quot;ddinggo&quot;.\r\nAlso, we need 1 more step for spelling.\r\nSo the final output is 4.\r\n</pre>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ol>\r\n\t<li>Length of both ring and <b>key</b> will be in range 1 to 100.</li>\r\n\t<li>There are only lowercase letters in both strings and might be some duplcate characters in both strings.</li>\r\n\t<li>It&#39;s guaranteed that string <b>key</b> could always be spelled by rotating the string <b>ring</b>.</li>\r\n</ol>\r\n",
  "isPaidOnly": false,
  "difficulty": "Hard",
  "likes": 327,
  "dislikes": 19,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [
    {
      "username": "Rabby250",
      "profileUrl": "/rabby250/",
      "avatarUrl": "https://www.gravatar.com/avatar/4563e379238ee92db8ed69627d3e0437.png?s=200"
    }
  ],
  "topicTags": [
    {
      "name": "Divide and Conquer",
      "slug": "divide-and-conquer"
    },
    {
      "name": "Dynamic Programming",
      "slug": "dynamic-programming"
    },
    {
      "name": "Depth-first Search",
      "slug": "depth-first-search"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 0}], \"1\": [], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    int findRotateSteps(string ring, string key) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int findRotateSteps(String ring, String key) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def findRotateSteps(self, ring, key):\n        \"\"\"\n        :type ring: str\n        :type key: str\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def findRotateSteps(self, ring: str, key: str) -> int:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nint findRotateSteps(char * ring, char * key){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public int FindRotateSteps(string ring, string key) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {string} ring\n * @param {string} key\n * @return {number}\n */\nvar findRotateSteps = function(ring, key) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {String} ring\n# @param {String} key\n# @return {Integer}\ndef find_rotate_steps(ring, key)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func findRotateSteps(_ ring: String, _ key: String) -> Int {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func findRotateSteps(ring string, key string) int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def findRotateSteps(ring: String, key: String): Int = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun findRotateSteps(ring: String, key: String): Int {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn find_rotate_steps(ring: String, key: String) -> i32 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param String $ring\n     * @param String $key\n     * @return Integer\n     */\n    function findRotateSteps($ring, $key) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"15.6K\", \"totalSubmission\": \"37.6K\", \"totalAcceptedRaw\": 15607, \"totalSubmissionRaw\": 37601, \"acRate\": \"41.5%\"}",
  "hints": [],
  "solution": null,
  "status": null,
  "sampleTestCase": "\"godding\"\n\"gd\"",
  "metaData": "{\r\n  \"name\": \"findRotateSteps\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"ring\",\r\n      \"type\": \"string\"\r\n    },\r\n    {\r\n      \"name\": \"key\",\r\n      \"type\": \"string\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
