{
  "questionId": "527",
  "questionFrontendId": "527",
  "boundTopicId": null,
  "title": "Word Abbreviation",
  "titleSlug": "word-abbreviation",
  "categoryTitle": "Algorithms",
  "content": "<p>Given an array of n distinct non-empty strings, you need to generate <b>minimal</b> possible abbreviations for every word following rules below.</p>\r\n\r\n<ol>\r\n<li>Begin with the first character and then the number of characters abbreviated, which followed by the last character.</li>\r\n<li>If there are any conflict, that is more than one words share the same abbreviation, a longer prefix is used instead of only the first character until making the map from word to abbreviation become unique. In other words, a final abbreviation cannot map to more than one original words.</li>\r\n<li> If the abbreviation doesn't make the word shorter, then keep it as original.</li>\r\n</ol>\r\n\r\n<p><b>Example:</b><br />\r\n<pre>\r\n<b>Input:</b> [\"like\", \"god\", \"internal\", \"me\", \"internet\", \"interval\", \"intension\", \"face\", \"intrusion\"]\r\n<b>Output:</b> [\"l2e\",\"god\",\"internal\",\"me\",\"i6t\",\"interval\",\"inte4n\",\"f2e\",\"intr4n\"]\r\n</pre>\r\n</p>\r\n\r\n\r\n<b>Note:</b> \r\n<ol>\r\n<li> Both n and the length of each word will not exceed 400.</li>\r\n<li> The length of each word is greater than 1.</li>\r\n<li> The words consist of lowercase English letters only.</li>\r\n<li> The return answers should be <b>in the same order</b> as the original array.</li>\r\n</ol>",
  "isPaidOnly": true,
  "difficulty": "Hard",
  "likes": 177,
  "dislikes": 107,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"Valid Word Abbreviation\", \"titleSlug\": \"valid-word-abbreviation\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Minimum Unique Word Abbreviation\", \"titleSlug\": \"minimum-unique-word-abbreviation\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
  "contributors": [
    {
      "username": "just_not_over_12",
      "profileUrl": "/just_not_over_12/",
      "avatarUrl": "https://www.gravatar.com/avatar/464d04f3923cca7da1660e31335cd246.png?s=200"
    }
  ],
  "topicTags": [
    {
      "name": "String",
      "slug": "string"
    },
    {
      "name": "Sort",
      "slug": "sort"
    }
  ],
  "companyTagStats": "{\"2\": [{\"taggedByAdmin\": true, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 5}, {\"taggedByAdmin\": true, \"name\": \"Snapchat\", \"slug\": \"snapchat\", \"timesEncountered\": 2}], \"1\": [{\"taggedByAdmin\": false, \"name\": \"Grab\", \"slug\": \"grab\", \"timesEncountered\": 2}], \"3\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    vector<string> wordsAbbreviation(vector<string>& dict) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public List<String> wordsAbbreviation(List<String> dict) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def wordsAbbreviation(self, dict):\n        \"\"\"\n        :type dict: List[str]\n        :rtype: List[str]\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def wordsAbbreviation(self, dict: List[str]) -> List[str]:\n        "
    },
    {
      "lang": "C",
      "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar ** wordsAbbreviation(char ** dict, int dictSize, int* returnSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public IList<string> WordsAbbreviation(IList<string> dict) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {string[]} dict\n * @return {string[]}\n */\nvar wordsAbbreviation = function(dict) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {String[]} dict\n# @return {String[]}\ndef words_abbreviation(dict)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func wordsAbbreviation(_ dict: [String]) -> [String] {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func wordsAbbreviation(dict []string) []string {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def wordsAbbreviation(dict: List[String]): List[String] = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun wordsAbbreviation(dict: List<String>): List<String> {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn words_abbreviation(dict: Vec<String>) -> Vec<String> {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param String[] $dict\n     * @return String[]\n     */\n    function wordsAbbreviation($dict) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"13.9K\", \"totalSubmission\": \"26.5K\", \"totalAcceptedRaw\": 13916, \"totalSubmissionRaw\": 26539, \"acRate\": \"52.4%\"}",
  "hints": [],
  "solution": {
    "id": "344",
    "canSeeDetail": true,
    "url": "/articles/word-abbreviation/",
    "content": "[TOC]\r\n\r\n#### Approach #1: Greedy [Accepted]\r\n\r\n**Intuition**\r\n\r\nLet's choose the shortest abbreviation for each word.  Then, while we have duplicates, we'll increase the length of all duplicates.\r\n\r\n**Algorithm**\r\n\r\nFor example, let's say we have `\"aabaaa\", \"aacaaa\", \"aacdaa\"`, then we start with `\"a4a\", \"a4a\", \"a4a\"`.  Since these are duplicated, we lengthen them to `\"aa3a\", \"aa3a\", \"aa3a\"`.  They are still duplicated, so we lengthen them to `\"aab2a\", \"aac2a\", \"aac2a\"`.  The last two are still duplicated, so we lengthen them to `\"aacaaa\", \"aacdaa\"`.\r\n\r\nThroughout this process, we were tracking an index `prefix[i]` which told us up to what index to take the prefix to.  For example, `prefix[i] = 2` means to take a prefix of `word[0], word[1], word[2]`.\r\n\r\n<iframe src=\"https://leetcode.com/playground/potfaw7d/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"potfaw7d\"></iframe>\r\n\r\n**Complexity Analysis**\r\n\r\n* Time Complexity: $$O(C^2)$$ where $$C$$ is the number of characters across all words in the given array.\r\n\r\n* Space Complexity: $$O(C)$$.\r\n\r\n---\r\n#### Approach #2: Group + Least Common Prefix [Accepted]\r\n\r\n**Intuition and Algorithm**\r\n\r\nTwo words are only eligible to have the same abbreviation if they have the same first letter, last letter, and length.  Let's group each word based on these properties, and then sort out the conflicts.\r\n\r\nIn each group `G`, if a word `W` has a longest common prefix `P` with any other word `X` in `G`, then our abbreviation must contain a prefix of more than `|P|` characters.  The longest common prefixes must occur with words adjacent to `W` (in lexicographical order), so we can just sort `G` and look at the adjacent words.\r\n\r\n<iframe src=\"https://leetcode.com/playground/oSfs2RA2/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"oSfs2RA2\"></iframe>\r\n\r\n**Complexity Analysis**\r\n\r\n* Time Complexity: $$O(C \\log C)$$ where $$C$$ is the number of characters across all words in the given array.  The complexity is dominated by the sorting step.\r\n\r\n* Space Complexity: $$O(C)$$.\r\n\r\n---\r\n#### Approach #3: Group + Trie [Accepted]\r\n\r\n**Intuition and Algorithm**\r\n\r\nAs in *Approach #1*, let's group words based on length, first letter, and last letter, and discuss when words in a group do not share a longest common prefix.\r\n\r\nPut the words of a group into a trie (prefix tree), and count at each node (representing some prefix `P`) the number of words with prefix `P`.  If the count is 1, we know the prefix is unique.\r\n\r\n<iframe src=\"https://leetcode.com/playground/g97bSjjc/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"g97bSjjc\"></iframe>\r\n\r\n**Complexity Analysis**\r\n\r\n* Time Complexity: $$O(C)$$ where $$C$$ is the number of characters across all words in the given array.\r\n\r\n* Space Complexity: $$O(C)$$.\r\n\r\n---\r\n\r\nAnalysis written by: [@awice](https://leetcode.com/awice).  Approach #1 inspired by [@ckcz123](https://discuss.leetcode.com/topic/82613/really-simple-and-straightforward-java-solution).",
    "contentTypeId": "107",
    "rating": {
      "id": "339",
      "count": 9,
      "average": 4.556,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "[\"like\",\"god\",\"internal\",\"me\",\"internet\",\"interval\",\"intension\",\"face\",\"intrusion\"]",
  "metaData": "{\r\n  \"name\": \"wordsAbbreviation\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"dict\",\r\n      \"type\": \"list<string>\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"list<string>\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
