{
  "questionId": "545",
  "questionFrontendId": "545",
  "boundTopicId": null,
  "title": "Boundary of Binary Tree",
  "titleSlug": "boundary-of-binary-tree",
  "categoryTitle": "Algorithms",
  "content": "<p>Given a binary tree, return the values of its boundary in <b>anti-clockwise</b> direction starting from root. Boundary includes left boundary, leaves, and right boundary in order without duplicate <strong>nodes</strong>.&nbsp; (The values of the nodes may still be duplicates.)</p>\r\n\r\n<p><b>Left boundary</b> is defined as the path from root to the <b>left-most</b> node. <b>Right boundary</b> is defined as the path from root to the <b>right-most</b> node. If the root doesn&#39;t have left subtree or right subtree, then the root itself is left boundary or right boundary. Note this definition only applies to the input binary tree, and not applies to any subtrees.</p>\r\n\r\n<p>The <b>left-most</b> node is defined as a <b>leaf</b> node you could reach when you always firstly travel to the left subtree if exists. If not, travel to the right subtree. Repeat until you reach a leaf node.</p>\r\n\r\n<p>The <b>right-most</b> node is also defined by the same way with left and right exchanged.</p>\r\n\r\n<p><b>Example 1</b></p>\r\n\r\n<pre>\r\n<b>Input:</b>\r\n  1\r\n   \\\r\n    2\r\n   / \\\r\n  3   4\r\n\r\n<b>Ouput:</b>\r\n[1, 3, 4, 2]\r\n\r\n<b>Explanation:</b>\r\nThe root doesn&#39;t have left subtree, so the root itself is left boundary.\r\nThe leaves are node 3 and 4.\r\nThe right boundary are node 1,2,4. Note the anti-clockwise direction means you should output reversed right boundary.\r\nSo order them in anti-clockwise without duplicates and we have [1,3,4,2].\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example 2</b></p>\r\n\r\n<pre>\r\n<b>Input:</b>\r\n    ____1_____\r\n   /          \\\r\n  2            3\r\n / \\          / \r\n4   5        6   \r\n   / \\      / \\\r\n  7   8    9  10  \r\n       \r\n<b>Ouput:</b>\r\n[1,2,4,7,8,9,10,6,3]\r\n\r\n<b>Explanation:</b>\r\nThe left boundary are node 1,2,4. (4 is the left-most node according to definition)\r\nThe leaves are node 4,7,8,9,10.\r\nThe right boundary are node 1,3,6,10. (10 is the right-most node).\r\nSo order them in anti-clockwise without duplicate nodes we have [1,2,4,7,8,9,10,6,3].\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n",
  "isPaidOnly": true,
  "difficulty": "Medium",
  "likes": 363,
  "dislikes": 627,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"Binary Tree Right Side View\", \"titleSlug\": \"binary-tree-right-side-view\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
  "contributors": [
    {
      "username": "Serious",
      "profileUrl": "/serious/",
      "avatarUrl": "https://www.gravatar.com/avatar/17e9d7040384d52068e87162227f6b12.png?s=200"
    }
  ],
  "topicTags": [
    {
      "name": "Tree",
      "slug": "tree"
    }
  ],
  "companyTagStats": "{\"1\": [{\"taggedByAdmin\": true, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 11}, {\"taggedByAdmin\": false, \"name\": \"Microsoft\", \"slug\": \"microsoft\", \"timesEncountered\": 3}], \"2\": [{\"taggedByAdmin\": false, \"name\": \"Apple\", \"slug\": \"apple\", \"timesEncountered\": 3}], \"3\": [{\"taggedByAdmin\": false, \"name\": \"Atlassian\", \"slug\": \"atlassian\", \"timesEncountered\": 3}, {\"taggedByAdmin\": true, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 0}]}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    vector<int> boundaryOfBinaryTree(TreeNode* root) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public List<Integer> boundaryOfBinaryTree(TreeNode root) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def boundaryOfBinaryTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def boundaryOfBinaryTree(self, root: TreeNode) -> List[int]:\n        "
    },
    {
      "lang": "C",
      "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* boundaryOfBinaryTree(struct TreeNode* root, int* returnSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public int val;\r\n *     public TreeNode left;\r\n *     public TreeNode right;\r\n *     public TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public IList<int> BoundaryOfBinaryTree(TreeNode root) {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\nvar boundaryOfBinaryTree = function(root) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# Definition for a binary tree node.\r\n# class TreeNode\r\n#     attr_accessor :val, :left, :right\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @left, @right = nil, nil\r\n#     end\r\n# end\r\n\r\n# @param {TreeNode} root\r\n# @return {Integer[]}\r\ndef boundary_of_binary_tree(root)\r\n    \r\nend"
    },
    {
      "lang": "Swift",
      "code": "/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public var val: Int\r\n *     public var left: TreeNode?\r\n *     public var right: TreeNode?\r\n *     public init(_ val: Int) {\r\n *         self.val = val\r\n *         self.left = nil\r\n *         self.right = nil\r\n *     }\r\n * }\r\n */\r\nclass Solution {\r\n    func boundaryOfBinaryTree(_ root: TreeNode?) -> [Int] {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Go",
      "code": "/**\r\n * Definition for a binary tree node.\r\n * type TreeNode struct {\r\n *     Val int\r\n *     Left *TreeNode\r\n *     Right *TreeNode\r\n * }\r\n */\r\nfunc boundaryOfBinaryTree(root *TreeNode) []int {\r\n    \r\n}"
    },
    {
      "lang": "Scala",
      "code": "/**\r\n * Definition for a binary tree node.\r\n * class TreeNode(var _value: Int) {\r\n *   var value: Int = _value\r\n *   var left: TreeNode = null\r\n *   var right: TreeNode = null\r\n * }\r\n */\r\nobject Solution {\r\n    def boundaryOfBinaryTree(root: TreeNode): List[Int] = {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Kotlin",
      "code": "/**\r\n * Example:\r\n * var ti = TreeNode(5)\r\n * var v = ti.`val`\r\n * Definition for a binary tree node.\r\n * class TreeNode(var `val`: Int) {\r\n *     var left: TreeNode? = null\r\n *     var right: TreeNode? = null\r\n * }\r\n */\r\nclass Solution {\r\n    fun boundaryOfBinaryTree(root: TreeNode?): List<Int> {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Rust",
      "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn boundary_of_binary_tree(root: Option<Rc<RefCell<TreeNode>>>) -> Vec<i32> {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($value) { $this->val = $value; }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $root\n     * @return Integer[]\n     */\n    function boundaryOfBinaryTree($root) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"34.3K\", \"totalSubmission\": \"91.8K\", \"totalAcceptedRaw\": 34259, \"totalSubmissionRaw\": 91840, \"acRate\": \"37.3%\"}",
  "hints": [],
  "solution": {
    "id": "97",
    "canSeeDetail": true,
    "url": "/articles/boundary-of-binary-tree/",
    "content": "[TOC]\n\n## Solution\n\n---\n#### Approach #1 Simple Solution [Accepted]\n\n**Algorithm**\n\nOne simple approach is to divide this problem into three subproblems- left boundary, leaves and right boundary.\n\n* Left Boundary: We keep on traversing the tree towards the left and keep on adding the nodes in the $$res$$ array, provided the current node isn't a leaf node. If at any point, we can't find the left child of a node, but its right child exists, we put the right child in the $$res$$ and continue the process. The following animation depicts the process.\n\n<!--![Left_Boundary](../Figures/545_Boundary_Left.gif)-->\n\n!?!../Documents/545_Boundary_Of_Binary_Tree1.json:1000,563!?!\n\n* Leaf Nodes: We make use of a recursive function `addLeaves(res,root)`, in which we change the root node for every recursive call. If the current root node happens to be a leaf node, it is added to the $$res$$ array. Otherwise, we make the recursive call using the left child of the current node as the new root. After this, we make the recursive call using the right child of the current node as the new root. The following animation depicts the process.\n\n<!--![Leaf_Boundary](../Figures/545_Boundary_Leaf.gif)-->\n!?!../Documents/545_Boundary_Of_Binary_Tree2.json:1000,563!?!\n\n* Right Boundary: We perform the same process as the left boundary. But, this time, we traverse towards the right. If the right child doesn't exist, we move towards the left child. Also, instead of putting the traversed nodes in the $$res$$ array, we push them over a stack during the traversal. After the complete traversal is done, we pop the element from over the stack and append them to the $$res$$ array. The following animation depicts the process.\n\n<!--![Right_Boundary](../Figures/545_Boundary_Right.gif)-->\n!?!../Documents/545_Boundary_Of_Binary_Tree3.json:1000,563!?!\n\n\n\n<iframe src=\"https://leetcode.com/playground/xEtX5sQc/shared\" frameBorder=\"0\" name=\"xEtX5sQc\" width=\"100%\" height=\"515\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n)$$ One complete traversal for leaves and two traversals upto depth of binary tree for left and right boundary.\n\n* Space complexity : $$O(n)$$ $$res$$ and $$stack$$ is used.\n\n---\n\n#### Approach #2 Using PreOrder Traversal [Accepted]\n\n**Algorithm**\n\nBefore we dive into this approach, let's look at the preorder traversal of a simple Binary Tree as shown below:\n\n![Preorder Traversal](../Figures/545_Preorder.png)\n\nFrom the above figure, we can observe that our problem statement is very similar to the Preorder traversal. Actually, the order of traversal is the same(except for the right boundary nodes, for which it is the reverse), but we need to selectively include the nodes in the return result list. Thus, we need to include only those nodes in the result, which are either on the left boundary, the leaves or the right boundary.\n\nIn order to distinguish between the various kinds of nodes, we make use of a $$flag$$ as follows:\n\n* Flag=0: Root Node.\n\n* Flag=1: Left Boundary Node.\n\n* Flag=2: Right Boundary Node.\n\n* Flag=3: Others(Middle Node).\n\nWe make use of three lists $$\\text{left_boundary}$$, $$\\text{right_boundary}$$, $$\\text{leaves}$$ to store the appropriate nodes and append the three lists at the end.\n\nWe go for the normal preorder traversal, but while calling the recursive function for preorder traversal using the left child or the right child of the current node, we also pass the $$flag$$ information indicating the type of node that the current child behaves like.\n\nFor obtaining the flag information about the left child of the current node, we make use of the function `leftChildFlag(node, flag)`. In the case of a left child, the following cases are possible, as can be verified by looking at the figure above:\n\n* The current node is a left boundary node: In this case, the left child will always be a left boundary node. e.g. relationship between E & J in the above figure.\n\n* The current node is a root node: In this case, the left child will always be a left boundary node. e.g. relationship between A & B in the above figure.\n\n* The current node is a right boundary node: In this case, if the right child of the current node doesn't exist, the left child always acts as the right boundary node. e.g. G & N. But, if the right child exists, the left child always acts as the middle node. e.g. C & F.\n\nSimilarly, for obtaining the flag information about the right child of the current node, we make use of the function `rightChildFlag(node, flag)`. In the case of a right child, the following cases are possible, as can be verified by looking at the figure above:\n\n* The current node is a right boundary node: In this case, the right child will always be a right boundary node. e.g. relationship between C & G in the above figure.\n\n* The current node is a root node: In this case, the right child will always be a left boundary node. e.g. relationship between A & C in the above figure.\n\n* The current node is a left boundary node: In this case, if the left child of the current node doesn't exist, the right child always acts as the left boundary node. e.g. B & E. But, if the left child exists, the left child always acts as the middle node.\n\nMaking use of the above information, we set the $$flag$$ appropriately, which is used to determine the list in which the current node has to be appended.\n\n\n<iframe src=\"https://leetcode.com/playground/2t96fXpN/shared\" frameBorder=\"0\" name=\"2t96fXpN\" width=\"100%\" height=\"515\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n)$$ One complete traversal of the tree is done.\n\n* Space complexity : $$O(n)$$ The recursive stack can grow upto a depth of $$n$$. Further, $$\\text{left_boundary}$$, $$\\text{right_boundary}$$ and $$\\text{leaves}$$ combined together can be of size $$n$$.\n\n---\n\nAnalysis written by: [@vinod23](https://leetcode.com/vinod23)",
    "contentTypeId": "107",
    "rating": {
      "id": "95",
      "count": 19,
      "average": 4.632,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "[1,null,2,3,4]",
  "metaData": "{\r\n  \"name\": \"boundaryOfBinaryTree\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"root\",\r\n      \"type\": \"TreeNode\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"list<integer>\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
