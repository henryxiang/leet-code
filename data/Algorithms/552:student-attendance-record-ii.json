{
  "questionId": "552",
  "questionFrontendId": "552",
  "boundTopicId": null,
  "title": "Student Attendance Record II",
  "titleSlug": "student-attendance-record-ii",
  "categoryTitle": "Algorithms",
  "content": "<p>Given a positive integer <b>n</b>, return the number of all possible attendance records with length n, which will be regarded as rewardable. The answer may be very large, return it after mod 10<sup>9</sup> + 7.</p>\r\n\r\n<p>A student attendance record is a string that only contains the following three characters:</p>\r\n\r\n<p>\r\n<ol>\r\n<li><b>'A'</b> : Absent. </li>\r\n<li><b>'L'</b> : Late.</li>\r\n<li> <b>'P'</b> : Present. </li>\r\n</ol>\r\n</p>\r\n\r\n<p>\r\nA record is regarded as rewardable if it doesn't contain <b>more than one 'A' (absent)</b> or <b>more than two continuous 'L' (late)</b>.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> n = 2\r\n<b>Output:</b> 8 \r\n<b>Explanation:</b>\r\nThere are 8 records with length 2 will be regarded as rewardable:\r\n\"PP\" , \"AP\", \"PA\", \"LP\", \"PL\", \"AL\", \"LA\", \"LL\"\r\nOnly \"AA\" won't be regarded as rewardable owing to more than one absent times. \r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\nThe value of <b>n</b> won't exceed 100,000.\r\n</p>\r\n\r\n\r\n",
  "isPaidOnly": false,
  "difficulty": "Hard",
  "likes": 395,
  "dislikes": 81,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"Student Attendance Record I\", \"titleSlug\": \"student-attendance-record-i\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
  "contributors": [
    {
      "username": "fallcreek",
      "profileUrl": "/fallcreek/",
      "avatarUrl": "https://www.gravatar.com/avatar/043194ec5c4c5d2778049a3fa6d2e1d8.png?s=200"
    }
  ],
  "topicTags": [
    {
      "name": "Dynamic Programming",
      "slug": "dynamic-programming"
    }
  ],
  "companyTagStats": "{\"1\": [{\"taggedByAdmin\": true, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 5}], \"2\": [{\"taggedByAdmin\": false, \"name\": \"Uber\", \"slug\": \"uber\", \"timesEncountered\": 3}], \"3\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    int checkRecord(int n) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int checkRecord(int n) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def checkRecord(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def checkRecord(self, n: int) -> int:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nint checkRecord(int n){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public int CheckRecord(int n) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar checkRecord = function(n) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer} n\n# @return {Integer}\ndef check_record(n)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func checkRecord(_ n: Int) -> Int {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func checkRecord(n int) int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def checkRecord(n: Int): Int = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun checkRecord(n: Int): Int {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn check_record(n: i32) -> i32 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function checkRecord($n) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"17.2K\", \"totalSubmission\": \"49.4K\", \"totalAcceptedRaw\": 17185, \"totalSubmissionRaw\": 49350, \"acRate\": \"34.8%\"}",
  "hints": [],
  "solution": {
    "id": "110",
    "canSeeDetail": true,
    "url": "/articles/student-attendance-record-ii/",
    "content": "[TOC]\n\n## Solution\n\n---\n#### Approach #1 Brute Force [Time Limit Exceeded]\n\nIn the brute force approach, we actually form every possible string comprising of the letters \"A\", \"P\", \"L\" and check if the string is rewardable by checking it against the given criterias. In order to form every possible string, we make use of a recursive `gen(string, n)` function. At every call of this function, we append the letters \"A\", \"P\" and \"L\" to the input string, reduce the required length by 1 and call the same function again for all the three newly generated strings.\n\n\n!?!../Documents/552_Student_Attendance_Record_II.json:1000,563!?!\n\n\n<iframe src=\"https://leetcode.com/playground/8H9pueM6/shared\" frameBorder=\"0\" name=\"8H9pueM6\" width=\"100%\" height=\"479\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(3^n)$$. Exploring $$3^n$$ combinations.\n* Space complexity : $$O(n^n)$$. Recursion tree can grow upto depth $$n$$ and each node contains string of length $$O(n)$$.\n\n---\n#### Approach #2 Using Recursive formulae [Time Limit Exceeded]\n\n**Algorithm**\n\nThe given problem can be solved easily if we can develop a recurring relation for it.\n\nFirstly, assume the problem to be considering only the characters $$L$$ and $$P$$ in the strings. i.e. The strings can contain only $$L$$ and $$P$$. The effect of $$A$$ will be taken into account later on.\n\nIn order to develop the relation, let's assume that $$f[n]$$ represents the number of possible rewardable strings(with $$L$$ and $$P$$ as the only characters) of length $$n$$. Then, we can easily determine the value of $$f[n]$$ if we know the values of the counts for smaller values of $$n$$. To see how it works, let's examine the figure below:\n\n![Recurrence](../Figures/552_Student_Attendence_II.PNG)\n\nThe above figure depicts the division of the rewardable string of length $$n$$ into two strings of length $$n-1$$ and ending with $$L$$ or $$P$$. The string ending with $$P$$ of length $$n$$ is always rewardable provided the string of length $$n-1$$ is rewardable. Thus, this string accounts for a factor of $$f[n-1]$$ to $$f[n]$$.\n\nFor the first string ending with $$L$$, the rewardability is dependent on the further strings of length $$n-3$$. Thus, we consider all the rewardable strings of length $$n-3$$ now. Out of the four combinations possible at the end, the fourth combination, ending with a $$LL$$ at the end leads to an unawardable string. But, since we've considered only rewardable strings of length $$n-3$$, for the last string to be rewardable at length $$n-3$$ and unawardable at length $$n-1$$, it must be preceded by a $$P$$ before the $$LL$$.\n\nThus, accounting for the first string again, all the rewardable strings of length $$n-1$$, except the strings of length $$n-4$$ followed by $$PLL$$, can contribute to a rewardable string of length $$n$$. Thus, this string accounts for a factor of $$f[n-1] - f[n-4]$$ to $$f[n]$$.\n\nThus, the recurring relation becomes:\n\n$$f[n] = 2f[n-1] - f[n-4]$$\n\nWe store all the $$f[i]$$ values in an array. In order to compute $$f[i]$$, we make use of a recursive function `func(n)` which makes use of the above recurrence relation.\n\nNow, we need to put the factor of character $$A$$ being present in the given string. We know, atmost one $$A$$ is allowed to be presnet in a rewardable string. Now, consider the two cases.\n\n1. No $$A$$ is present: In this case, the number of rewardable strings is the same as $$f[n]$$.\n\n2. A single $$A$$ is present: Now, the single $$A$$ can be present at any of the $$n$$ positions. If the $$A$$ is present at the $$i^{th}$$ position in the given string, in the form: \"<(i-1) characters>, A, <(n-i) characters>\", the total number of rewardable strings is given by: $$f[i-1] * f[n-i]$$. Thus, the total number of such substrings is given by: $$\\sum_{i=1}^{n} (f[i-1] * f[n-i])$$.\n\n\n<iframe src=\"https://leetcode.com/playground/5oz4CZCn/shared\" frameBorder=\"0\" name=\"5oz4CZCn\" width=\"100%\" height=\"496\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(2^n)$$. method $$func$$ will take $$2^n$$ time.\n\n* Space complexity : $$O(n)$$. $$f$$ array is used of size $$n$$.\n\n---\n#### Approach #3 Using Dynamic Programming [Accepted]\n\n**Algorithm**\n\nIn the last approach, we calculated the values of $$f[i]$$ everytime using the recursive function, which goes till its root depth everytime. But, we can reduce a large number of redundant calculations, if we use the results obtained for previous $$f[j]$$ values directly to obtain $$f[i]$$ as  $$f[i] = 2f[i-1] + f[i-4]$$.\n\n<iframe src=\"https://leetcode.com/playground/mPZsFUjT/shared\" frameBorder=\"0\" name=\"mPZsFUjT\" width=\"100%\" height=\"343\"></iframe>\n**Complexity Analysis**\n\n* Time complexity : $$O(n)$$. One loop to fill $$f$$ array and one to calculate $$sum$$\n\n* Space complexity : $$O(n)$$. $$f$$ array of size $$n$$ is used.\n\n---\n#### Approach #4 Dynamic Programming with Constant Space [Accepted]\n\n**Algorithm**\n\nWe can observe that the number and position of $$P$$'s in the given string is irrelevant. Keeping into account this fact, we can obtain a state diagram that represents the transitions between the possible states as shown in the figure below:\n\n![State_Diagram](../Figures/552_State_Diagram.PNG)\n\nThis state diagram contains the states based only upon whether an $$A$$ is present in the string or not, and on the number of $$L$$'s that occur at the trailing edge of the string formed till now. The state transition occurs whenver we try to append a new character to the end of the current string.\n\nBased on the above state diagram, we keep a track of the number of unique transitions from which a rewardable state can be achieved. We start off with a string of length 0 and keep on adding a new character to the end of the string till we achieve a length of $$n$$. At the end, we sum up the number of transitions possible to reach each rewardable state to obtain the required result.\n\nWe can use variables corresponding to the states. $$axly$$ represents the number of strings of length $$i$$ containing $$x$$ $$a's$$ and ending with $$y$$ $$l's$$.\n\nBelow code is inspired by [@stefanpochmann](http://leetcode.com/stefanpochmann).\n\n<iframe src=\"https://leetcode.com/playground/3Eeni8XC/shared\" frameBorder=\"0\" name=\"3Eeni8XC\" width=\"100%\" height=\"428\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n)$$. Single loop to update the states.\n\n* Space complexity : $$O(1)$$. Constant Extra Space is used.\n\n---\n\n\n#### Approach #5 Using less variables [Accepted]\n\n**Algorithm**\n\nIn the last approach discussed, we've made use of six extra temporary variables just to keep a track of the change in the current state. The same result can be obtained by using a lesser number of temporary variables too.\n\n<iframe src=\"https://leetcode.com/playground/3GPeuNgd/shared\" frameBorder=\"0\" name=\"3GPeuNgd\" width=\"100%\" height=\"343\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n)$$. Single loop to update the states.\n\n* Space complexity : $$O(1)$$. Constant Extra Space is used.\n\n---\n\nAnalysis written by: [@vinod23](https://leetcode.com/vinod23)",
    "contentTypeId": "107",
    "rating": {
      "id": "106",
      "count": 20,
      "average": 3.9,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "1",
  "metaData": "{\r\n  \"name\": \"checkRecord\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"n\",\r\n      \"type\": \"integer\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
