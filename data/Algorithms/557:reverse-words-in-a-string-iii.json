{
  "questionId": "557",
  "questionFrontendId": "557",
  "boundTopicId": null,
  "title": "Reverse Words in a String III",
  "titleSlug": "reverse-words-in-a-string-iii",
  "categoryTitle": "Algorithms",
  "content": "<p>Given a string, you need to reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> \"Let's take LeetCode contest\"\r\n<b>Output:</b> \"s'teL ekat edoCteeL tsetnoc\"\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\nIn the string, each word is separated by single space and there will not be any extra space in the string.\r\n</p>",
  "isPaidOnly": false,
  "difficulty": "Easy",
  "likes": 763,
  "dislikes": 76,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"Reverse String II\", \"titleSlug\": \"reverse-string-ii\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
  "contributors": [
    {
      "username": "joshpowell",
      "profileUrl": "/joshpowell/",
      "avatarUrl": "https://www.gravatar.com/avatar/4752f10edceb311d41fa9683e4949b95.png?s=200"
    }
  ],
  "topicTags": [
    {
      "name": "String",
      "slug": "string"
    }
  ],
  "companyTagStats": "{\"1\": [{\"taggedByAdmin\": false, \"name\": \"Microsoft\", \"slug\": \"microsoft\", \"timesEncountered\": 9}, {\"taggedByAdmin\": false, \"name\": \"Yahoo\", \"slug\": \"yahoo\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Paypal\", \"slug\": \"paypal\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Snapchat\", \"slug\": \"snapchat\", \"timesEncountered\": 2}], \"3\": [{\"taggedByAdmin\": false, \"name\": \"Apple\", \"slug\": \"apple\", \"timesEncountered\": 3}, {\"taggedByAdmin\": true, \"name\": \"Zappos\", \"slug\": \"zappos\", \"timesEncountered\": 0}], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    string reverseWords(string s) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public String reverseWords(String s) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def reverseWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def reverseWords(self, s: str) -> str:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nchar * reverseWords(char * s){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public string ReverseWords(string s) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {string} s\n * @return {string}\n */\nvar reverseWords = function(s) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {String} s\n# @return {String}\ndef reverse_words(s)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func reverseWords(_ s: String) -> String {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func reverseWords(s string) string {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def reverseWords(s: String): String = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun reverseWords(s: String): String {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn reverse_words(s: String) -> String {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function reverseWords($s) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"163.7K\", \"totalSubmission\": \"245.4K\", \"totalAcceptedRaw\": 163743, \"totalSubmissionRaw\": 245447, \"acRate\": \"66.7%\"}",
  "hints": [],
  "solution": {
    "id": "104",
    "canSeeDetail": true,
    "url": "/articles/reverse-words-in-a-string-iii/",
    "content": "[TOC]\n\n## Solution\n\n---\n#### Approach #1 Simple Solution[Accepted]\n\nThe first method is really simple. We simply split up the given string based on whitespaces and put the individual words in an array of strings. Then, we reverse each individual string and concatenate the result. We return the result after removing the additional whitespaces at the end.\n\n\n<iframe src=\"https://leetcode.com/playground/DjRyo9vA/shared\" frameBorder=\"0\" name=\"DjRyo9vA\" width=\"100%\" height=\"207\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n)$$. where $$n$$ is the length of the string.\n\n* Space complexity : $$O(n)$$. $$res$$ of size $$n$$ is used.\n\n---\n#### Approach #2 Without using pre-defined split and reverse function [Accepted]\n\n**Algorithm**\n\nWe can create our own split and reverse function. Split function splits the string based on the delimiter \" \"(space) and returns the array of words. Reverse function returns the string after reversing the characters.\n\n\n\n<iframe src=\"https://leetcode.com/playground/oxasWgHd/shared\" frameBorder=\"0\" name=\"oxasWgHd\" width=\"100%\" height=\"515\"></iframe>\n**Complexity Analysis**\n\n* Time complexity : $$O(n)$$. where $$n$$ is the length of the string.\n* Space complexity : $$O(n)$$. $$res$$ of size $$n$$ is used.\n\n---\n#### Approach #3 Using StringBuilder and reverse method [Accepted]\n\n**Algorithm**\n\nInstead of using split method, we can use temporary string $$word$$ to store the word. We simply append the characters to the $$word$$ until `' '` character is not found. On getting `' '` we append the reverse of the $$word$$ to the resultant string $$result$$. Also after completion of loop , we still have to append the $$reverse$$ of the $$word$$(last word) to the $$result$$ string. \n\nBelow code is inspired by [@ApolloX](http://leetcode.com/apolloX).\n\n\n<iframe src=\"https://leetcode.com/playground/Xt8eMTKv/shared\" frameBorder=\"0\" name=\"Xt8eMTKv\" width=\"100%\" height=\"343\"></iframe>\n**Complexity Analysis**\n\n* Time complexity : $$O(n)$$. Single loop upto $$n$$ is there, where $$n$$ is the length of the string.\n* Space complexity : $$O(n)$$. $$result$$ and $$word$$ size will grow upto $$n$$.\n\n---\nAnalysis written by: [@vinod23](https://leetcode.com/vinod23)",
    "contentTypeId": "107",
    "rating": {
      "id": "104",
      "count": 42,
      "average": 3.071,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "\"Let's take LeetCode contest\"",
  "metaData": "{\r\n  \"name\": \"reverseWords\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"s\",\r\n      \"type\": \"string\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"string\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
