{
  "questionId": "561",
  "questionFrontendId": "561",
  "boundTopicId": null,
  "title": "Array Partition I",
  "titleSlug": "array-partition-i",
  "categoryTitle": "Algorithms",
  "content": "<p>\r\nGiven an array of <b>2n</b> integers, your task is to group these integers into <b>n</b> pairs of integer, say (a<sub>1</sub>, b<sub>1</sub>), (a<sub>2</sub>, b<sub>2</sub>), ..., (a<sub>n</sub>, b<sub>n</sub>) which makes sum of min(a<sub>i</sub>, b<sub>i</sub>) for all i from 1 to n as large as possible.\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> [1,4,3,2]\r\n\r\n<b>Output:</b> 4\r\n<b>Explanation:</b> n is 2, and the maximum sum of pairs is 4 = min(1, 2) + min(3, 4).\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li><b>n</b> is a positive integer, which is in the range of [1, 10000].</li>\r\n<li>All the integers in the array will be in the range of [-10000, 10000].</li>\r\n</ol>\r\n</p>",
  "isPaidOnly": false,
  "difficulty": "Easy",
  "likes": 665,
  "dislikes": 2058,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [
    {
      "username": "Stomach_ache",
      "profileUrl": "/stomach_ache/",
      "avatarUrl": "https://assets.leetcode.com/users/stomach_ache/avatar_1550751028.png"
    }
  ],
  "topicTags": [
    {
      "name": "Array",
      "slug": "array"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": false, \"name\": \"Apple\", \"slug\": \"apple\", \"timesEncountered\": 2}], \"2\": [{\"taggedByAdmin\": false, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 2}], \"1\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    int arrayPairSum(vector<int>& nums) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int arrayPairSum(int[] nums) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def arrayPairSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def arrayPairSum(self, nums: List[int]) -> int:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nint arrayPairSum(int* nums, int numsSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public int ArrayPairSum(int[] nums) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar arrayPairSum = function(nums) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef array_pair_sum(nums)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func arrayPairSum(_ nums: [Int]) -> Int {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func arrayPairSum(nums []int) int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def arrayPairSum(nums: Array[Int]): Int = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun arrayPairSum(nums: IntArray): Int {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn array_pair_sum(nums: Vec<i32>) -> i32 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function arrayPairSum($nums) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"179.4K\", \"totalSubmission\": \"254.3K\", \"totalAcceptedRaw\": 179419, \"totalSubmissionRaw\": 254268, \"acRate\": \"70.6%\"}",
  "hints": [
    "Obviously, brute force won't help here. Think of something else, take some example like 1,2,3,4.",
    "How will you make pairs to get the result? There must be some pattern.",
    "Did you observe that- Minimum element gets add into the result in sacrifice of maximum element.",
    "Still won't able to find pairs? Sort the array and try to find the pattern."
  ],
  "solution": {
    "id": "117",
    "canSeeDetail": true,
    "url": "/articles/array-partitioning-i/",
    "content": "[TOC]\n\n\n## Solution\n\n---\n#### Approach #1 Brute Force [Time Limit Exceeded]\n\n**Algorithm**\n\nThe simplest solution is to consider every possible set of pairings possible by using the elements of the $$nums$$ array. For generating all the possible pairings, we make use of a function `permute(nums, current_index)`. This function creates all the possible permutations of the elements of the given array.\n\nTo do so, `permute` takes the index of the current element $$current_index$$ as one of the arguments. Then, it swaps the current element with every other element in the array, lying towards its right, so as to generate a new ordering of the array elements. After the swapping has been done, it makes another call to  `permute` but this time with the index of the next element in the array. While returning back, we reverse the swapping done in the current function call.\n\nThus, when we reach the end of the array, a new ordering of the array's elements is generated. We consider the elements to be taken for the pairings such that the first element of every pair comes from the first half of the new array and the second element comes from the last half of the array. Thus, we sum up the minimum elements out of all these possible pairings and find out the maximum sum out of them.\n\nThe animation below depicts the ways the permutations are generated.\n\n!?!../Documents/561_Array.json:1000,563!?!\n\n\n<iframe src=\"https://leetcode.com/playground/yuWmjysn/shared\" frameBorder=\"0\" name=\"yuWmjysn\" width=\"100%\" height=\"513\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n!)$$. A total of $$n!$$ permutations are possible for $$n$$ elements in the array.\n* Space complexity : $$O(1)$$. Constant extra space is used.\n\n---\n#### Approach #2 Using Sorting [Accepted]\n\n**Algorithm**\n\nIn order to understand this approach, let us look at the problem from a different perspective. We need to form the pairings of the array's elements such that the overall sum of the minimum out of such pairings is maximum. Thus, we can look at the operation of choosing the minimum out of the pairing, say $$(a, b)$$ as incurring a loss of $$a - b$$(if $$a> b$$), in the maximum sum possible.\n\nThe total sum will now be maximum if the overall loss incurred from such pairings is minimized. This minimization of loss in every pairing is possible only if the numbers chosen for the pairings lie closer to each other than to the other elements of the array.\n\nTaking this into consideration, we can sort the elements of the given array and form the pairings of the elements directly in the sorted order. This will lead to the pairings of elements with minimum difference between them leading to the maximization of the required sum.\n\n<iframe src=\"https://leetcode.com/playground/d5X9zosv/shared\" frameBorder=\"0\" name=\"d5X9zosv\" width=\"100%\" height=\"224\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O\\big(nlog(n)\\big)$$. Sorting takes $$O\\big(nlog(n)\\big)$$ time. We iterate over the array only once.\n\n* Space complexity : $$O(1)$$. Constant extra space is used.\n\n---\n#### Approach #3 Using Extra Array [Accepted] \n\n**Algorithm**\n\nThis approach is somewhat related to the sorting approach. Since the range of elements in the given array is limited, we can make use of a hashmap $$arr$$, such that $$arr[i]$$ stores the frequency of occurence of $$(i-10000)^{th}$$ element. This subtraction is done so as to be able to map the numbers in the range $$-10000 &leq; i &leq; -1$$ onto the hashmap.\n\nThus, now instead of sorting the array's elements, we can directly traverse the hashmap in an ascending order. But, any element could also occur multiple times in the given array. We need to take this factor into account. \n\nFor this, consider an example: `nums: [a, b, a, b, b, a]`. The sorted order of this array will be `nums_sorted: [a, a, a, b, b, b]`. (We aren't actually sorting the array in this approach, but the sorted array is taken just for demonstration). From the previous approach, we know that the required set of pairings is $$(a,a), (a,b), (b,b)$$. Now, we can see that while choosing the minimum elements, $$a$$ will be chosen twice and $$b$$ will be chosen once only. This happens because the number of $$a$$'s to be chosen has already been determined by the frequency of $$a$$, leaving the rest of the places to be filled by $$b$$. This is because, for the correct result we need to consider the elements in the ascending order. Thus, the lower number always gets priority to be added to the end result.\n\nBut, if the sorted elements take the form: `nums_sorted: [a, a, b, b, b, b]`, the correct pairing will be $$(a,a), (b,b), (b,b)$$. Again, in this case the number of $$a$$'s chosen is already predetermined, but since the number of $$a$$'s is odd, it doesn't impact the choice of $$b$$ in the final sum.\n\nThus, based on the above discussion, we traverse the hashmap $$arr$$. If the current element is occuring $$freq_i$$ number of times, and one of the elements is left to be paired with other elements in the right region(considering a virtual sorted array), we consider the current element $$\\left \\lceil\\frac{freq_i}{2}\\right \\rceil$$ number of times and the next element occuring in the array $$\\left \\lfloor\\frac{freq_j}{2}\\right \\rfloor$$ number of times for the final sum. To propagate the impact of this left over chosen number, we make use of a flag $$d$$. This flag is set to 1 if there is a leftover element from the current set which will be considered one more time. The same extra element already considered is taken into account while choosing an element from the next set.\n\nWhile traversing the hashmap, we determine the correct number of times each element needs to be considered as discussed above. Note that the flag $$d$$ and the $$sum$$ remains unchanged if the current element of the hashmap doesn't exist in the array.\n\nBelow code is inspired by [@fallcreek](https://leetcode.com/fallcreek)\n\n<iframe src=\"https://leetcode.com/playground/tzs4t7Hu/shared\" frameBorder=\"0\" name=\"tzs4t7Hu\" width=\"100%\" height=\"309\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n)$$. The whole hashmap $$arr$$ of size $$n$$ is traversed only once.\n\n* Space complexity : $$O(n)$$. A hashmap $$arr$$ of size $$n$$ is used.\n\n---\n\nAnalysis written by: [@vinod23](https://leetcode.com/vinod23)",
    "contentTypeId": "107",
    "rating": {
      "id": "115",
      "count": 12,
      "average": 4.417,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "[1,4,3,2]",
  "metaData": "{\r\n  \"name\": \"arrayPairSum\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"nums\",\r\n      \"type\": \"integer[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
