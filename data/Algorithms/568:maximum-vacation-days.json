{
  "questionId": "568",
  "questionFrontendId": "568",
  "boundTopicId": null,
  "title": "Maximum Vacation Days",
  "titleSlug": "maximum-vacation-days",
  "categoryTitle": "Algorithms",
  "content": "<p>\r\nLeetCode wants to give one of its best employees the option to travel among <b>N</b> cities to collect algorithm problems. But all work and no play makes Jack a dull boy, you could take vacations in some particular cities and weeks. Your job is to schedule the traveling to maximize the number of vacation days you could take, but there are certain rules and restrictions you need to follow.\r\n</p>\r\n\r\n<p><b>Rules and restrictions:</b><br>\r\n<ol>\r\n<li>You can only travel among <b>N</b> cities, represented by indexes from 0 to N-1. Initially, you are in the city indexed 0 on <b>Monday</b>.</li>\r\n<li>The cities are connected by flights. The flights are represented as a <b>N*N</b> matrix (not necessary symmetrical), called <b>flights</b> representing the airline status from the city i to the city j. If there is no flight from the city i to the city j, <b>flights[i][j] = 0</b>; Otherwise, <b>flights[i][j] = 1</b>. Also, <b>flights[i][i] = 0</b> for all i.</li>\r\n<li>You totally have <b>K</b> weeks (<b>each week has 7 days</b>) to travel. You can only take flights at most once <b>per day</b> and can only take flights on each week's <b>Monday</b> morning. Since flight time is so short, we don't consider the impact of flight time.</li>\r\n<li>For each city, you can only have restricted vacation days in different weeks, given an <b>N*K</b> matrix called <b>days</b> representing this relationship. For the value of <b>days[i][j]</b>, it represents the maximum days you could take vacation in the city <b>i</b> in the week <b>j</b>.</li>\r\n</ol>\r\n</p>\r\n\r\n<p>You're given the <b>flights</b> matrix and <b>days</b> matrix, and you need to output the maximum vacation days you could take during <b>K</b> weeks.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b>flights = [[0,1,1],[1,0,1],[1,1,0]], days = [[1,3,1],[6,0,3],[3,3,3]]\r\n<b>Output:</b> 12\r\n<b>Explanation:</b> <br>Ans = 6 + 3 + 3 = 12. <br>\r\nOne of the best strategies is:\r\n1st week : fly from city 0 to city 1 on Monday, and play 6 days and work 1 day. <br/>(Although you start at city 0, we could also fly to and start at other cities since it is Monday.) \r\n2nd week : fly from city 1 to city 2 on Monday, and play 3 days and work 4 days.\r\n3rd week : stay at city 2, and play 3 days and work 4 days.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b>flights = [[0,0,0],[0,0,0],[0,0,0]], days = [[1,1,1],[7,7,7],[7,7,7]]\r\n<b>Output:</b> 3\r\n<b>Explanation:</b> <br>Ans = 1 + 1 + 1 = 3. <br>\r\nSince there is no flights enable you to move to another city, you have to stay at city 0 for the whole 3 weeks. <br/>For each week, you only have one day to play and six days to work. <br/>So the maximum number of vacation days is 3.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 3:</b><br />\r\n<pre>\r\n<b>Input:</b>flights = [[0,1,1],[1,0,1],[1,1,0]], days = [[7,0,0],[0,7,0],[0,0,7]]\r\n<b>Output:</b> 21\r\n<b>Explanation:</b><br>Ans = 7 + 7 + 7 = 21<br>\r\nOne of the best strategies is:\r\n1st week : stay at city 0, and play 7 days. \r\n2nd week : fly from city 0 to city 1 on Monday, and play 7 days.\r\n3rd week : fly from city 1 to city 2 on Monday, and play 7 days.\r\n</pre>\r\n</p>\r\n\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li><b>N and K</b> are positive integers, which are in the range of [1, 100].</li>\r\n<li>In the matrix <b>flights</b>, all the values are integers in the range of [0, 1].</li>\r\n<li>In the matrix <b>days</b>, all the values are integers in the range [0, 7].</li>\r\n<li>You could stay at a city beyond the number of vacation days, but you should <b>work</b> on the extra days, which won't be counted as vacation days.</li>\r\n<li>If you fly from the city A to the city B and take the vacation on that day, the deduction towards vacation days will count towards the vacation days of city B in that week.</li>\r\n<li>We don't consider the impact of flight hours towards the calculation of vacation days.</li>\r\n</ol>\r\n</p>",
  "isPaidOnly": true,
  "difficulty": "Hard",
  "likes": 252,
  "dislikes": 37,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"Cheapest Flights Within K Stops\", \"titleSlug\": \"cheapest-flights-within-k-stops\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
  "contributors": [
    {
      "username": "just_not_over_12",
      "profileUrl": "/just_not_over_12/",
      "avatarUrl": "https://www.gravatar.com/avatar/464d04f3923cca7da1660e31335cd246.png?s=200"
    }
  ],
  "topicTags": [
    {
      "name": "Dynamic Programming",
      "slug": "dynamic-programming"
    }
  ],
  "companyTagStats": "{\"2\": [{\"taggedByAdmin\": true, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 2}], \"1\": [{\"taggedByAdmin\": false, \"name\": \"Facebook\", \"slug\": \"facebook\", \"timesEncountered\": 2}], \"3\": [{\"taggedByAdmin\": false, \"name\": \"Uber\", \"slug\": \"uber\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Microsoft\", \"slug\": \"microsoft\", \"timesEncountered\": 2}]}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    int maxVacationDays(vector<vector<int>>& flights, vector<vector<int>>& days) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int maxVacationDays(int[][] flights, int[][] days) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def maxVacationDays(self, flights, days):\n        \"\"\"\n        :type flights: List[List[int]]\n        :type days: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def maxVacationDays(self, flights: List[List[int]], days: List[List[int]]) -> int:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nint maxVacationDays(int** flights, int flightsSize, int* flightsColSize, int** days, int daysSize, int* daysColSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public int MaxVacationDays(int[][] flights, int[][] days) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number[][]} flights\n * @param {number[][]} days\n * @return {number}\n */\nvar maxVacationDays = function(flights, days) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer[][]} flights\n# @param {Integer[][]} days\n# @return {Integer}\ndef max_vacation_days(flights, days)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func maxVacationDays(_ flights: [[Int]], _ days: [[Int]]) -> Int {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func maxVacationDays(flights [][]int, days [][]int) int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def maxVacationDays(flights: Array[Array[Int]], days: Array[Array[Int]]): Int = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun maxVacationDays(flights: Array<IntArray>, days: Array<IntArray>): Int {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn max_vacation_days(flights: Vec<Vec<i32>>, days: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer[][] $flights\n     * @param Integer[][] $days\n     * @return Integer\n     */\n    function maxVacationDays($flights, $days) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"20.7K\", \"totalSubmission\": \"52.8K\", \"totalAcceptedRaw\": 20660, \"totalSubmissionRaw\": 52775, \"acRate\": \"39.1%\"}",
  "hints": [
    "First try to understand the problem carefully and then take some example and solve it on a paper.",
    "Can you interpret the given input as a graph? Which graph traversal technique is suitable here?",
    "Can we use some space to avoid redundant function calls?"
  ],
  "solution": {
    "id": "122",
    "canSeeDetail": true,
    "url": "/articles/maximum-vacation-days/",
    "content": "[TOC]\n\n## Solution\n\n---\n#### Approach #1 Using Depth First Search [Time Limit Exceeded]\n\n**Algorithm**\n\nIn the brute force approach, we make use of a recursive function $$dfs$$, which returns the number of vacations which can be taken startring from $$cur\\_city$$ as the current city and $$weekno$$ as the starting week. \n\nIn every function call, we traverse over all the cities(represented by $$i$$) and find out all the cities which are connected to the current city, $$cur\\_city$$. Such a city is represented by a 1 at the corresponding $$flights[cur\\_city][i]$$ position. Now, for the current city, we can either travel to the city which is connected to it or we can stay in the same city. Let's say the city to which we change our location from the current city be represented by $$j$$. Thus, after changing the city, we need to find the number of vacations which we can take from the new city as the current city and the incremented week as the new starting week. This count of vacations can be represented as: $$days[j][weekno] + dfs(flights, days, j, weekno + 1)$$. \n\nThus, for the current city, we obtain a number of vacations by choosing different cities as the next cities. Out of all of these vacations coming from different cities, we can find out the maximum number of vacations that need to be returned for every $$dfs$$ function call.\n\n<iframe src=\"https://leetcode.com/playground/7nvGhHgq/shared\" frameBorder=\"0\" name=\"7nvGhHgq\" width=\"100%\" height=\"377\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n^k)$$. Depth of Recursion tree will be $$k$$ and each node contains $$n$$ branches in the worst case. Here $$n$$ represents the number of cities and $$k$$ is the total number of weeks.\n\n* Space complexity : $$O(k)$$. The depth of the recursion tree is $$k$$.\n\n---\n\n#### Approach #2 Using DFS with memoization [Accepted]:\n\n**Algorithm**\n\nIn the last approach, we make a number of redundant function calls, since the same function call of the form `dfs(flights, days, cur_city, weekno)` can be made multiple number of times with the same $$cur\\_city$$ and $$weekno$$. These redundant calls can be pruned off if we make use of memoization. \n\nIn order to remove these redundant function calls, we make use of a 2-D memoization array $$memo$$. In this array, $$memo[i][j]$$ is used to store the number of vacactions that can be taken using the $$i^{th}$$ city as the current city and the $$j^{th}$$ week as the starting week. This result is equivalent to that obtained using the function call: `dfs(flights, days, i, j)`. Thus, if the $$memo$$ entry corresponding to the current function call already contains a valid value, we can directly obtain the result from this array instead of going deeper into recursion.\n\n<iframe src=\"https://leetcode.com/playground/JawnLfLv/shared\" frameBorder=\"0\" name=\"JawnLfLv\" width=\"100%\" height=\"445\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n^2k)$$. $$memo$$ array of size $$n*k$$ is filled and each cell filling takes O(n) time .\n\n* Space complexity : $$O(n*k)$$. $$memo$$ array of size $$n*k$$ is used. Here $$n$$ represents the number of cities and $$k$$ is the total number of weeks.\n\n---\n\n#### Approach #3 Using 2-D Dynamic Programming [Accepted]:\n\n**Algorithm**\n\nThe idea behind this approach is as follows. The maximum number of vacations that can be taken given we start from the $$i^{th}$$ city in the $$j^{th}$$ week is not dependent on the the vacations that can be taken in the earlier weeks. It only depends on the number of vacations that can be taken in the upcoming weeks and also on the connections between the various cities($$flights$$).\n\nTherefore, we can make use of a 2-D $$dp$$, in which $$dp[i][k]$$ represents the maximum number of vacations which can be taken starting from the $$i^{th}$$ city in the $$k^{th}$$ week. This $$dp$$ is filled in the backward manner(in terms of the week number).\n\nWhile filling up the entry for $$dp[i][k]$$, we need to consider the following cases:\n\n1. We start from the $$i^{th}$$ city in the $$k^{th}$$ week and stay in the same city for the $$(k+1)^{th}$$ week. Thus, the factor to be considered for updating the $$dp[i][k]$$ entry will be given by: $$days[i][k] + dp[i, k+1]$$.\n\n2. We start from the $$i^{th}$$ city in the $$k^{th}$$ week and move to the $$j^{th}$$ city in the $$(k+1)^{th}$$ week. But, for changing the city in this manner, we need to be able to move from the $$i^{th}$$ city to the $$j^{th}$$ city i.e. $$flights[i][j]$$ should be 1 for such $$i$$ and $$j$$. \n\nBut, while changing the city from $$i^{th}$$ city in the $$k^{th}$$ week, we can move to any $$j^{th}$$ city such that a connection exists between the $$i^{th}$$ city and the $$j^{th}$$ city i.e. $$flights[i][j]=1$$. But, in order to maximize the number of vacations that can be taken starting from the $$i^{th}$$ city in the $$k^{th}$$ week, we need to choose the destination city that leads to maximum no. of vacations. Thus, the factor to be considered here, is given by: $$\\text{max}days[j][k] + days[j, k+1]$$, for all $$i$$, $$j$$, $$k$$ satisfying $$flights[i][j] = 1$$, $$0 &leq; i,j &leq; n, where $$n$$ refers to the number of cities.\n\nAt the end, we need to find the maximum out of these two factors to update the $$dp[i][k]$$ value.\n\nIn order to fill the $$dp$$ values, we start by filling the entries for the last week and proceed backwards. At last, the value of $$dp[0][0]$$ gives the required result.\n\nThe following animation illustrates the process of filling the $$dp$$ array.\n\n!?!../Documents/568_Maximum_Vacation_Days.json:1000,563!?!\n\nBelow code is inspired by [@hackerhuang](http://leetcode.com/hackerhuang)\n\n<iframe src=\"https://leetcode.com/playground/hLAaTwUh/shared\" frameBorder=\"0\" name=\"hLAaTwUh\" width=\"100%\" height=\"343\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n^2k)$$. $$dp$$ array of size $$n*k$$ is filled and each cell filling takes O(n) time. Here $$n$$ represents the number of cities and $$k$$ is the total number of weeks.\n\n* Space complexity : $$O(n*k)$$. $$dp$$ array of size $$n*k$$ is used. \n\n---\n\n#### Approach #4 Using 1-D Dynamic Programming [Accepted]:\n\n**Algorithm**\n\nAs can be observed in the previous approach, in order to update the $$dp$$ entries for $$i^{th}$$ week, we only need the values corresponding to $$(i+1)^{th}$$ week along with the $$days$$ and $$flights$$ array. Thus, instead of using a 2-D $$dp$$ array, we can omit the dimension corresponding to the weeks and make use of a 1-D $$dp$$ array. \n\nNow, $$dp[i]$$ is used to store the number of vacations that provided that we start from the $$i^{th}$$ city in the current week. The procedure remains the same as that of the previous approach, except that we make the updations in the same $$dp$$ row again and again. In order to store the $$dp$$ values corresponding to the current week temporarily, we make use of a $$temp$$ array so that the original $$dp$$ entries corresponding to $$week+1$$ aren't altered.\n\n<iframe src=\"https://leetcode.com/playground/6eAfgP4u/shared\" frameBorder=\"0\" name=\"6eAfgP4u\" width=\"100%\" height=\"394\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n^2k)$$. $$dp$$ array of size $$n*k$$ is filled and each cell filling takes O(n) time. Here $$n$$ represents the number of cities and $$k$$ is the total number of weeks.\n\n* Space complexity : $$O(k)$$. $$dp$$ array of size $$nk$$ is used. \n\n---\n\nAnalysis written by: [@vinod23](https://leetcode.com/vinod23)",
    "contentTypeId": "107",
    "rating": {
      "id": "120",
      "count": 9,
      "average": 5,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "[[0,1,1],[1,0,1],[1,1,0]]\n[[1,3,1],[6,0,3],[3,3,3]]",
  "metaData": "{\r\n  \"name\": \"maxVacationDays\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"flights\",\r\n      \"type\": \"integer[][]\"\r\n    },\r\n    {\r\n      \"name\": \"days\",\r\n      \"type\": \"integer[][]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
