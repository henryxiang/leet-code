{
  "questionId": "573",
  "questionFrontendId": "573",
  "boundTopicId": null,
  "title": "Squirrel Simulation",
  "titleSlug": "squirrel-simulation",
  "categoryTitle": "Algorithms",
  "content": "There&#39;s a tree, a squirrel, and several nuts. Positions are represented by the cells in a 2D grid. Your goal is to find the <b>minimal</b> distance for the squirrel to collect all the nuts and put them under the tree one by one. The squirrel can only take at most <b>one nut</b> at one time and can move in four directions - up, down, left and right, to the adjacent cell. The distance is represented by the number of moves.\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> \r\nHeight : 5\r\nWidth : 7\r\nTree position : [2,2]\r\nSquirrel : [4,4]\r\nNuts : [[3,0], [2,5]]\r\n<b>Output:</b> 12\r\n<b>Explanation:</b>\r\n<img src=\"https://assets.leetcode.com/uploads/2018/10/22/squirrel_simulation.png\" style=\"width: 40%;\" />​​​​​\r\n</pre>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ol>\r\n\t<li>All given positions won&#39;t overlap.</li>\r\n\t<li>The squirrel can take at most one nut at one time.</li>\r\n\t<li>The given positions of nuts have no order.</li>\r\n\t<li>Height and width are positive integers. 3 &lt;= height * width &lt;= 10,000.</li>\r\n\t<li>The given positions contain at least one nut, only one tree and one squirrel.</li>\r\n</ol>\r\n",
  "isPaidOnly": true,
  "difficulty": "Medium",
  "likes": 115,
  "dislikes": 18,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [
    {
      "username": "fallcreek",
      "profileUrl": "/fallcreek/",
      "avatarUrl": "https://www.gravatar.com/avatar/043194ec5c4c5d2778049a3fa6d2e1d8.png?s=200"
    }
  ],
  "topicTags": [
    {
      "name": "Math",
      "slug": "math"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"Square\", \"slug\": \"square\", \"timesEncountered\": 0}], \"1\": [], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    int minDistance(int height, int width, vector<int>& tree, vector<int>& squirrel, vector<vector<int>>& nuts) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int minDistance(int height, int width, int[] tree, int[] squirrel, int[][] nuts) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def minDistance(self, height, width, tree, squirrel, nuts):\n        \"\"\"\n        :type height: int\n        :type width: int\n        :type tree: List[int]\n        :type squirrel: List[int]\n        :type nuts: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def minDistance(self, height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nint minDistance(int height, int width, int* tree, int treeSize, int* squirrel, int squirrelSize, int** nuts, int nutsSize, int* nutsColSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public int MinDistance(int height, int width, int[] tree, int[] squirrel, int[][] nuts) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number} height\n * @param {number} width\n * @param {number[]} tree\n * @param {number[]} squirrel\n * @param {number[][]} nuts\n * @return {number}\n */\nvar minDistance = function(height, width, tree, squirrel, nuts) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer} height\n# @param {Integer} width\n# @param {Integer[]} tree\n# @param {Integer[]} squirrel\n# @param {Integer[][]} nuts\n# @return {Integer}\ndef min_distance(height, width, tree, squirrel, nuts)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func minDistance(_ height: Int, _ width: Int, _ tree: [Int], _ squirrel: [Int], _ nuts: [[Int]]) -> Int {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func minDistance(height int, width int, tree []int, squirrel []int, nuts [][]int) int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def minDistance(height: Int, width: Int, tree: Array[Int], squirrel: Array[Int], nuts: Array[Array[Int]]): Int = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun minDistance(height: Int, width: Int, tree: IntArray, squirrel: IntArray, nuts: Array<IntArray>): Int {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn min_distance(height: i32, width: i32, tree: Vec<i32>, squirrel: Vec<i32>, nuts: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer $height\n     * @param Integer $width\n     * @param Integer[] $tree\n     * @param Integer[] $squirrel\n     * @param Integer[][] $nuts\n     * @return Integer\n     */\n    function minDistance($height, $width, $tree, $squirrel, $nuts) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"6.8K\", \"totalSubmission\": \"12.3K\", \"totalAcceptedRaw\": 6779, \"totalSubmissionRaw\": 12335, \"acRate\": \"55.0%\"}",
  "hints": [
    "Will Brute force solution works here? What will be its complexity?",
    "Brute force definitely won't work here. Think of some simple solution. Take some example and make some observations.",
    "Will order of nuts traversed by squirrel is important or only first nut traversed by squirrel is important?",
    "Are there some paths which squirrel have to cover in any case? If yes, what are they?",
    "Did you notice only first nut traversed by squirrel matters? Obviously squirrel will choose first nut which will result in minimum distance."
  ],
  "solution": {
    "id": "127",
    "canSeeDetail": true,
    "url": "/articles/squirrel-simulation/",
    "content": "[TOC]\n\n## Solution\n\n---\n#### Approach 1: Simple Solution\n\n**Algorithm**\n\nWe know, the distance between any two points(tree, squirrel, nut) is given by the absolute difference between the corresponding x-coordinates and the corresponding y-coordinates. \n\nNow, in order to determine the required minimum distance, we need to observe a few points. Firstly, the order in which the nuts are picked doesn't affect the final result, except one of the nuts which needs to be visited first from the squirrel's starting position. For the rest of the nuts, it is mandatory to go from the tree to the nut and then come back as well. \n\nFor the first visited nut, the saving obtained, given by $$d$$, is the difference between the distance between the tree and the current nut & the distance between the current nut and the squirrel. This is because for this nut, we need not travel from the tree to the nut, but need to travel an additional distance from the squirrel's original position to the nut.\n\nWhile traversing over the $$nuts$$ array and adding the to-and-fro distance, we find out the saving, $$d$$, which can be obtained if the squirrel goes to the current nut first. Out of all the nuts, we find out the nut which maximizes the saving and then deduct this maximum saving from the sum total of the to-and-fro distance of all the nuts.\n\nNote that the first nut to be picked needs not necessarily be the nut closest to the squirrel's start point, but it's the one which maximizes the savings.\n\n![Squirrel_Nuts](../Figures/573_Squirrel.PNG)\n{:align=\"center\"}\n\n<iframe src=\"https://leetcode.com/playground/A6WMRzdf/shared\" frameBorder=\"0\" width=\"100%\" height=\"276\" name=\"A6WMRzdf\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n)$$. We need to traverse over the whole $$nuts$$ array once. $$n$$ refers to the size of $$nuts$$ array.\n\n* Space complexity : $$O(1)$$. Constant space is used.\n\n---\nAnalysis written by: [@vinod23](https://leetcode.com/vinod23)",
    "contentTypeId": "107",
    "rating": {
      "id": "124",
      "count": 5,
      "average": 5,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "5\n7\n[2,2]\n[4,4]\n[[3,0], [2,5]]",
  "metaData": "{\r\n  \"name\": \"minDistance\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"height\",\r\n      \"type\": \"integer\"\r\n    },\r\n    {\r\n      \"name\": \"width\",\r\n      \"type\": \"integer\"\r\n    },\r\n    {\r\n      \"name\": \"tree\",\r\n      \"type\": \"integer[]\"\r\n    },\r\n    {\r\n      \"name\": \"squirrel\",\r\n      \"type\": \"integer[]\"\r\n    },\r\n    {\r\n      \"name\": \"nuts\",\r\n      \"type\": \"integer[][]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
