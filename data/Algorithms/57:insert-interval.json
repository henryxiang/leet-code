{
  "questionId": "57",
  "questionFrontendId": "57",
  "boundTopicId": null,
  "title": "Insert Interval",
  "titleSlug": "insert-interval",
  "categoryTitle": "Algorithms",
  "content": "<p>Given a set of <em>non-overlapping</em> intervals, insert a new interval into the intervals (merge if necessary).</p>\r\n\r\n<p>You may assume that the intervals were initially sorted according to their start times.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> intervals = [[1,3],[6,9]], newInterval = [2,5]\r\n<strong>Output:</strong> [[1,5],[6,9]]\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> intervals = <code>[[1,2],[3,5],[6,7],[8,10],[12,16]]</code>, newInterval = <code>[4,8]</code>\r\n<strong>Output:</strong> [[1,2],[3,10],[12,16]]\r\n<strong>Explanation:</strong> Because the new interval <code>[4,8]</code> overlaps with <code>[3,5],[6,7],[8,10]</code>.</pre>\r\n\r\n<p><strong>NOTE:</strong>&nbsp;input types have been changed on April 15, 2019. Please reset to default code definition to get new method signature.</p>\r\n",
  "isPaidOnly": false,
  "difficulty": "Hard",
  "likes": 1153,
  "dislikes": 140,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"Merge Intervals\", \"titleSlug\": \"merge-intervals\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Range Module\", \"titleSlug\": \"range-module\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
  "contributors": [],
  "topicTags": [
    {
      "name": "Array",
      "slug": "array"
    },
    {
      "name": "Sort",
      "slug": "sort"
    }
  ],
  "companyTagStats": "{\"2\": [{\"taggedByAdmin\": false, \"name\": \"Uber\", \"slug\": \"uber\", \"timesEncountered\": 5}, {\"taggedByAdmin\": true, \"name\": \"Facebook\", \"slug\": \"facebook\", \"timesEncountered\": 3}, {\"taggedByAdmin\": false, \"name\": \"Microsoft\", \"slug\": \"microsoft\", \"timesEncountered\": 3}, {\"taggedByAdmin\": false, \"name\": \"Apple\", \"slug\": \"apple\", \"timesEncountered\": 3}, {\"taggedByAdmin\": false, \"name\": \"Adobe\", \"slug\": \"adobe\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Dataminr\", \"slug\": \"dataminr\", \"timesEncountered\": 2}], \"3\": [{\"taggedByAdmin\": false, \"name\": \"Yahoo\", \"slug\": \"yahoo\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Tableau\", \"slug\": \"tableau\", \"timesEncountered\": 2}], \"1\": [{\"taggedByAdmin\": true, \"name\": \"LinkedIn\", \"slug\": \"linkedin\", \"timesEncountered\": 9}, {\"taggedByAdmin\": false, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 6}, {\"taggedByAdmin\": true, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 4}, {\"taggedByAdmin\": false, \"name\": \"Twitter\", \"slug\": \"twitter\", \"timesEncountered\": 4}, {\"taggedByAdmin\": false, \"name\": \"Oracle\", \"slug\": \"oracle\", \"timesEncountered\": 2}]}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\r\npublic:\r\n    vector<vector<int>> insert(vector<vector<int>>& intervals, vector<int>& newInterval) {\r\n        \r\n    }\r\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int[][] insert(int[][] intervals, int[] newInterval) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def insert(self, intervals, newInterval):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :type newInterval: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def insert(self, intervals: List[List[int]], newInterval: List[int]) -> List[List[int]]:\n        "
    },
    {
      "lang": "C",
      "code": "\n\n/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** insert(int** intervals, int intervalsSize, int* intervalsColSize, int* newInterval, int newIntervalSize, int* returnSize, int** returnColumnSizes){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\r\n    public int[][] Insert(int[][] intervals, int[] newInterval) {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number[][]} intervals\n * @param {number[]} newInterval\n * @return {number[][]}\n */\nvar insert = function(intervals, newInterval) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer[][]} intervals\r\n# @param {Integer[]} new_interval\r\n# @return {Integer[][]}\r\ndef insert(intervals, new_interval)\r\n    \r\nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\r\n    func insert(_ intervals: [[Int]], _ newInterval: [Int]) -> [[Int]] {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Go",
      "code": "func insert(intervals [][]int, newInterval []int) [][]int {\r\n    \r\n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\r\n    def insert(intervals: Array[Array[Int]], newInterval: Array[Int]): Array[Array[Int]] = {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\r\n    fun insert(intervals: Array<IntArray>, newInterval: IntArray): Array<IntArray> {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn insert(intervals: Vec<Vec<i32>>, new_interval: Vec<i32>) -> Vec<Vec<i32>> {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer[][] $intervals\n     * @param Integer[] $newInterval\n     * @return Integer[][]\n     */\n    function insert($intervals, $newInterval) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"210K\", \"totalSubmission\": \"651.1K\", \"totalAcceptedRaw\": 209970, \"totalSubmissionRaw\": 651066, \"acRate\": \"32.3%\"}",
  "hints": [],
  "solution": {
    "id": "728",
    "canSeeDetail": true,
    "url": "/articles/insert-interval/",
    "content": "[TOC]\r\n\r\n## Solution\r\n\r\n---\r\n\r\n#### Approach 1: Greedy.\r\n\r\n**Greedy algorithms**\r\n\r\nGreedy problems usually look like \r\n\"Find minimum number of _something_ to do _something_\" or \r\n\"Find maximum number of _something_ to fit in _some conditions_\", \r\nand typically propose an unsorted input.\r\n\r\n> The idea of greedy algorithm is to pick the _locally_\r\noptimal move at each step, that will lead to the _globally_ optimal solution.\r\n\r\nThe standard solution has $$\\mathcal{O}(N \\log N)$$ time complexity and consists of two parts:\r\n\r\n- Figure out how to sort the input data ($$\\mathcal{O}(N \\log N)$$ time).\r\nThat could be done directly by a sorting or indirectly by a heap usage. \r\nTypically sort is better than the heap usage because of gain in space.\r\n\r\n- Parse the sorted input to have a solution ($$\\mathcal{O}(N)$$ time). \r\n\r\nPlease notice that in case of well-sorted input one doesn't need the first \r\npart and the greedy solution could have $$\\mathcal{O}(N)$$ time complexity,\r\n[here is an example](https://leetcode.com/articles/gas-station/).\r\n\r\n> How to prove that your greedy algorithm provides globally optimal solution?\r\n\r\nUsually you could use the [proof by contradiction](https://en.wikipedia.org/wiki/Proof_by_contradiction). \r\n\r\n**Intuition**\r\n\r\nHere we have an example of a greedy problem with a well-sorted input,\r\nand hence the algorithm time complexity should be \r\n$$\\mathcal{O}(N)$$.\r\n\r\nLet's consider the following intervals\r\n\r\n![bla](../Figures/57/intervals.png)\r\n\r\nThe straightforward one-pass strategy could be implemented in three steps.\r\n\r\n1 . Add to the output all the intervals starting before `newInterval`.\r\n\r\n![bla](../Figures/57/step1_new.png)\r\n\r\n2 . Add to the output `newInterval`, merge it with the last added\r\ninterval if needed.\r\n\r\n![bla](../Figures/57/step2_new.png)\r\n\r\n3 . Add the next intervals one by one, merge if needed.\r\n\r\n![bla](../Figures/57/step33.png)\r\n\r\nBasically, the same strategy [as here](https://leetcode.com/articles/merge-intervals/),\r\nwith an additional care to add the new interval in its proper\r\nposition in order not to destroy the well-sorted input. \r\n\r\n**Algorithm**\r\n\r\nHere is the algorithm :\r\n\r\n- Add to the output all the intervals starting before `newInterval`.\r\n\r\n- Add to the output `newInterval`. Merge it with the last added\r\ninterval if `newInterval` starts before the\r\nlast added interval.\r\n\r\n- Add the next intervals one by one. Merge with the last added\r\ninterval if the current interval starts before the\r\nlast added interval.\r\n\r\n**Implementation**\r\n\r\n<iframe src=\"https://leetcode.com/playground/P7imNxgC/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"P7imNxgC\"></iframe>\r\n\r\n**Complexity Analysis**\r\n\r\n* Time complexity : $$\\mathcal{O}(N)$$ since it's one pass along\r\nthe input array.\r\n \r\n* Space complexity : $$\\mathcal{O}(N)$$ to keep the output. \r\n\r\nAnalysis written by @[liaison](https://leetcode.com/liaison/)\r\nand @[andvary](https://leetcode.com/andvary/)",
    "contentTypeId": "107",
    "rating": {
      "id": "713",
      "count": 11,
      "average": 4.546,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "[[1,3],[6,9]]\n[2,5]",
  "metaData": "{\r\n  \"name\": \"insert\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"intervals\",\r\n      \"type\": \"integer[][]\"\r\n    },\r\n    {\r\n      \"name\": \"newInterval\",\r\n      \"type\": \"integer[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer[][]\"\r\n  }\r\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
