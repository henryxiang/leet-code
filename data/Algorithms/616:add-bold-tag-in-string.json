{
  "questionId": "616",
  "questionFrontendId": "616",
  "boundTopicId": null,
  "title": "Add Bold Tag in String",
  "titleSlug": "add-bold-tag-in-string",
  "categoryTitle": "Algorithms",
  "content": "Given a string <b>s</b> and a list of strings <b>dict</b>, you need to add a closed pair of bold tag <code>&lt;b&gt;</code> and <code>&lt;/b&gt;</code> to wrap the substrings in s that exist in dict. If two such substrings overlap, you need to wrap them together by only one pair of closed bold tag. Also, if two substrings wrapped by bold tags are consecutive, you need to combine them. \r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> \r\ns = \"abcxyz123\"\r\ndict = [\"abc\",\"123\"]\r\n<b>Output:</b>\r\n\"&lt;b&gt;abc&lt;/b&gt;xyz&lt;b&gt;123&lt;/b&gt;\"\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> \r\ns = \"aaabbcc\"\r\ndict = [\"aaa\",\"aab\",\"bc\"]\r\n<b>Output:</b>\r\n\"&lt;b&gt;aaabbc&lt;/b&gt;c\"\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>The given dict won't contain duplicates, and its length won't exceed 100.</li>\r\n<li>All the strings in input have length in range [1, 1000]. </li>\r\n</ol>\r\n</p>",
  "isPaidOnly": true,
  "difficulty": "Medium",
  "likes": 381,
  "dislikes": 44,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"Merge Intervals\", \"titleSlug\": \"merge-intervals\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Tag Validator\", \"titleSlug\": \"tag-validator\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
  "contributors": [
    {
      "username": "fallcreek",
      "profileUrl": "/fallcreek/",
      "avatarUrl": "https://www.gravatar.com/avatar/043194ec5c4c5d2778049a3fa6d2e1d8.png?s=200"
    }
  ],
  "topicTags": [
    {
      "name": "String",
      "slug": "string"
    }
  ],
  "companyTagStats": "{\"2\": [{\"taggedByAdmin\": true, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 5}], \"1\": [{\"taggedByAdmin\": false, \"name\": \"Facebook\", \"slug\": \"facebook\", \"timesEncountered\": 2}], \"3\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    string addBoldTag(string s, vector<string>& dict) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public String addBoldTag(String s, String[] dict) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def addBoldTag(self, s, dict):\n        \"\"\"\n        :type s: str\n        :type dict: List[str]\n        :rtype: str\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def addBoldTag(self, s: str, dict: List[str]) -> str:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nchar * addBoldTag(char * s, char ** dict, int dictSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public string AddBoldTag(string s, string[] dict) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {string} s\n * @param {string[]} dict\n * @return {string}\n */\nvar addBoldTag = function(s, dict) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {String} s\n# @param {String[]} dict\n# @return {String}\ndef add_bold_tag(s, dict)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func addBoldTag(_ s: String, _ dict: [String]) -> String {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func addBoldTag(s string, dict []string) string {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def addBoldTag(s: String, dict: Array[String]): String = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun addBoldTag(s: String, dict: Array<String>): String {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn add_bold_tag(s: String, dict: Vec<String>) -> String {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param String[] $dict\n     * @return String\n     */\n    function addBoldTag($s, $dict) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"28.1K\", \"totalSubmission\": \"69.2K\", \"totalAcceptedRaw\": 28111, \"totalSubmissionRaw\": 69177, \"acRate\": \"40.6%\"}",
  "hints": [],
  "solution": {
    "id": "166",
    "canSeeDetail": true,
    "url": "/articles/add-bold-tag-in-a-string/",
    "content": "[TOC]\r\n\r\n#### Approach #1: Brute Force [Accepted]\r\n\r\n**Intuition**\r\n\r\nLet's try to learn which letters end up bold, since the resulting answer will just be the canonical one - we put bold tags around each group of bold letters.\r\n\r\nTo do this, we'll check for all occurrences of each word and mark the corresponding letters bold.\r\n\r\n**Algorithm**\r\n\r\nLet's work on first setting `mask[i] = true` if and only if the `i`-th letter is bold.  For each starting position `i` in `S`, for each `word`, if `S[i]` starts with `word`, we'll set the appropriate letters bold.\r\n\r\nNow armed with the correct `mask`, let's try to output the answer.  A letter in position `i` is the first bold letter of the group if `mask[i] && (i == 0 || !mask[i-1])`, and is the last bold letter if `mask[i] && (i == N-1 || !mask[i+1])`.  Alternatively, we could use `itertools.groupby` in Python.\r\n\r\nOnce we know which letters are the first and last bold letters of a group, we know where to put the `\"<b>\"` and `\"</b>\"` tags.\r\n\r\n<iframe src=\"https://leetcode.com/playground/xHHDL4Ke/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"xHHDL4Ke\"></iframe>\r\n\r\n**Complexity Analysis**\r\n\r\n* Time Complexity: $$O(N\\sum w_i)$$, where $$N$$ is the length of `S` and $$w_i$$ is the sum of `W`.\r\n\r\n* Space Complexity: $$O(N)$$.\r\n\r\n---\r\n\r\nAnalysis written by: [@awice](https://leetcode.com/awice).",
    "contentTypeId": "107",
    "rating": {
      "id": "161",
      "count": 19,
      "average": 3.526,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "\"abcxyz123\"\n[\"abc\",\"123\"]",
  "metaData": "{\r\n  \"name\": \"addBoldTag\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"s\",\r\n      \"type\": \"string\"\r\n    },\r\n    {\r\n      \"name\": \"dict\",\r\n      \"type\": \"string[]\" \r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"string\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
