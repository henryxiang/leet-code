{
  "questionId": "625",
  "questionFrontendId": "625",
  "boundTopicId": null,
  "title": "Minimum Factorization",
  "titleSlug": "minimum-factorization",
  "categoryTitle": "Algorithms",
  "content": "<p>Given a positive integer <code>a</code>, find the smallest positive integer <code>b</code> whose multiplication of each digit equals to <code>a</code>. </p>\r\n\r\n<p>\r\nIf there is no answer or the answer is not fit in 32-bit signed integer, then return 0.</p>\r\n\r\n<p>\r\n<b>Example 1</b><br>\r\nInput:\r\n<pre>48 </pre>\r\nOutput:\r\n<pre>68</pre>\r\n</p>\r\n\r\n<p>\r\n<b>Example 2</b><br>\r\nInput: \r\n<pre>15</pre>\r\n\r\nOutput:\r\n<pre>35</pre>\r\n</p>",
  "isPaidOnly": true,
  "difficulty": "Medium",
  "likes": 79,
  "dislikes": 62,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [
    {
      "username": "gld",
      "profileUrl": "/gld/",
      "avatarUrl": "https://www.gravatar.com/avatar/5d13793d8ddcd280672e2a06b542f321.png?s=200"
    }
  ],
  "topicTags": [
    {
      "name": "Math",
      "slug": "math"
    },
    {
      "name": "Recursion",
      "slug": "recursion"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"Tencent\", \"slug\": \"tencent\", \"timesEncountered\": 0}], \"1\": [], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    int smallestFactorization(int a) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int smallestFactorization(int a) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def smallestFactorization(self, a):\n        \"\"\"\n        :type a: int\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def smallestFactorization(self, a: int) -> int:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nint smallestFactorization(int a){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public int SmallestFactorization(int a) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number} a\n * @return {number}\n */\nvar smallestFactorization = function(a) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer} a\n# @return {Integer}\ndef smallest_factorization(a)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func smallestFactorization(_ a: Int) -> Int {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func smallestFactorization(a int) int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def smallestFactorization(a: Int): Int = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun smallestFactorization(a: Int): Int {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn smallest_factorization(a: i32) -> i32 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer $a\n     * @return Integer\n     */\n    function smallestFactorization($a) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"7.3K\", \"totalSubmission\": \"22.4K\", \"totalAcceptedRaw\": 7269, \"totalSubmissionRaw\": 22385, \"acRate\": \"32.5%\"}",
  "hints": [],
  "solution": {
    "id": "173",
    "canSeeDetail": true,
    "url": "/articles/minimum-factorization/",
    "content": "[TOC]\n\n## Solution\n\n---\n#### Approach #1 Brute Force [Time Limit Exceeded]\n\nThe simplest solution is to consider every possible 32-bit number starting from 1 which satisfies the given criteria. To check this, we obtain each individual digit of every such number and check if their product is equal to the given number $$a$$. As soon as such a number is found, we return the same. If no such 32-bit number is found, we return a 0 value.\n\n<iframe src=\"https://leetcode.com/playground/W7M6JELz/shared\" frameBorder=\"0\" name=\"W7M6JELz\" width=\"100%\" height=\"309\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(9999999999)$$. In case of prime numbers loop can go upto this large number.\n\n* Space complexity : $$O(1)$$. Constant space is used.\n\n---\n#### Approach #2 Better Brute Force [Time Limit Exceeded]\n\n**Algorithm**\n\nInstead of considering every possible number from the total search space, we can do the search in a smarter way. We can start putting the numbers from 9 to 2 at the ones position and keep on proceeding towards more significant places. For every number currently generated, we can check if the product of its digits exceeds the given number $$a$$. If so, there is no point in appending more digitas to this number. Thus, we can change the composition of the number generated till now and continue the checking process. \n\nFor doing this, we make use of a recursive function `search()`, which takes the number generated till now, $$res$$(as a string) as one of its arguments along with the number to be appended next as the $$res$$ as a prefix as one of the other arguments. We can note that to obtain the smallest possible number, we need to try to put the largest number(which will be one of the factors for constituting the product $$a$$) at the least significant position and the smallest one at the most significant position. Thus, we start from the least significant position by trying to place a 9 at this position and then continue by trying to place smaller numbers at this position if the numbers generated by the previous arrangements fail. If some arrangement leads to a product of digits not larger than $$a$$, we continue with placing digits, equal to or smaller than the last digit placed, at the more significant positions.\n\nThe following animation illustrates the recursive process:\n\n!?!../Documents/625_Minimum_Factorization.json:1000,563!?!\n\n<iframe src=\"https://leetcode.com/playground/mq3fEUtA/shared\" frameBorder=\"0\" name=\"mq3fEUtA\" width=\"100%\" height=\"411\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(l)$$. Here $$l$$ refers to total number of combinations.\n\n* Space complexity : $$O(log(a))$$. In worst case, depth of recursion tree can go upto the $$O(log(a))$$\n.\n\n---\n#### Approach #3  Using Factorization[Accepted]\n\n**Algorithm**\n\nWe know that the final number generated, $$res$$,  should be such that its digits should have a product equal to the given number $$a$$. In other words, the digits of $$res$$ will be the factors of the given number $$a$$. Thus, our problem reduces to finding the factors(not necessarily prime) of $$a$$ and finding their smallest possible arrangement. Thus, we start with trying with the largest possible factor $$9$$, obtain as many such counts of this factor as possible in $$res$$ and place such factors obtianed at its least significant positions. Then, we go on decrementing the number currently considered as the possible factor and if it is a factor, we keep on placing it at relatively more significant positions in $$res$$. We go on getting such factors till we are done considering all the numbers from 9 to 2.  At the end, $$res$$ gives the required result.\n\n<iframe src=\"https://leetcode.com/playground/WHBgGGcX/shared\" frameBorder=\"0\" name=\"WHBgGGcX\" width=\"100%\" height=\"309\"></iframe>\n**Complexity Analysis**\n\n* Time complexity : $$O(8loga)$$. Outer loop will iterate only 8 times, while inner loop takes $$O(logi)$$ for particular $$i$$.\n\n* Space complexity : $$O(1)$$. Constant space is used.\n\n---\nAnalysis written by: [@vinod23](https://leetcode.com/vinod23)",
    "contentTypeId": "107",
    "rating": {
      "id": "168",
      "count": 12,
      "average": 5,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "48",
  "metaData": "{\r\n  \"name\": \"smallestFactorization\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"a\",\r\n      \"type\": \"integer\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
