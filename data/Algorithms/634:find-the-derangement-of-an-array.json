{
  "questionId": "634",
  "questionFrontendId": "634",
  "boundTopicId": null,
  "title": "Find the Derangement of An Array",
  "titleSlug": "find-the-derangement-of-an-array",
  "categoryTitle": "Algorithms",
  "content": "<p>\r\nIn combinatorial mathematics, a derangement is a permutation of the elements of a set, such that no element appears in its original position.\r\n</p>\r\n\r\n<p>\r\nThere's originally an array consisting of <code>n</code> integers from 1 to <code>n</code> in ascending order, you need to find the number of derangement it can generate.\r\n</p>\r\n\r\n<p>\r\nAlso, since the answer may be very large, you should return the output mod 10<sup>9</sup> + 7.\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> 3\r\n<b>Output:</b> 2\r\n<b>Explanation:</b> The original array is [1,2,3]. The two derangements are [2,3,1] and [3,1,2].\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br/>\r\n<code>n</code> is in the range of [1, 10<sup>6</sup>].\r\n</p>",
  "isPaidOnly": true,
  "difficulty": "Medium",
  "likes": 103,
  "dislikes": 110,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [
    {
      "username": "lalaphoon",
      "profileUrl": "/lalaphoon/",
      "avatarUrl": "https://assets.leetcode.com/users/lalaphoon/avatar_1567557101.png"
    }
  ],
  "topicTags": [
    {
      "name": "Math",
      "slug": "math"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"IXL\", \"slug\": \"ixl\", \"timesEncountered\": 0}], \"1\": [{\"taggedByAdmin\": false, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 2}], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    int findDerangement(int n) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int findDerangement(int n) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def findDerangement(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def findDerangement(self, n: int) -> int:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nint findDerangement(int n){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public int FindDerangement(int n) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar findDerangement = function(n) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer} n\n# @return {Integer}\ndef find_derangement(n)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func findDerangement(_ n: Int) -> Int {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func findDerangement(n int) int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def findDerangement(n: Int): Int = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun findDerangement(n: Int): Int {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn find_derangement(n: i32) -> i32 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function findDerangement($n) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"5.7K\", \"totalSubmission\": \"14.6K\", \"totalAcceptedRaw\": 5713, \"totalSubmissionRaw\": 14568, \"acRate\": \"39.2%\"}",
  "hints": [],
  "solution": {
    "id": "193",
    "canSeeDetail": true,
    "url": "/articles/find-derangements/",
    "content": "[TOC]\n\n## Solution\n\n---\n#### Approach 1: Brute Force\n\n\nThe simplest solution is to consider every possible permutation of the given numbers from $$1$$ to $$n$$ and count the number of permutations which are dereangements of the \noriginal arrangement. \n\n\n**Complexity Analysis**\n\n* Time complexity : $$O\\big((n+1)!\\big)$$. $$n!$$ permutations are possible for $$n$$ numbers. For each permutation, we need to traverse over the whole arrangement to check if it \nis a derangement or not, which takes $$O(n)$$ time.\n\n* Space complexity : $$O(n)$$. Each permutation would require $$n$$ space to be stored.\n<br />\n<br />\n---\n#### Approach 2: Recursion\n\n**Algorithm**\n\nIn order to find the number of derangements for $$n$$ numbers, firstly we can consider the the original array to be \n`[1,2,3,...,n]`. Now, in order to generate the derangements of this array, assume that firstly, we move the number 1 from \nits original position and place at the place of the number $$i$$. But, now, this $$i^{th}$$ position can be chosen \nin $$n-1$$ ways. Now, for placing the number $$i$$ we have got two options:\n\n1. We place $$i$$ at the place of $$1$$: By doing this, the problem of finding the derangements reduces to finding the derangements of the \nremaining $$n-2$$ numbers, since we've got $$n-2$$ numbers and $$n-2$$ places, such that every number can't be placed at exactly one position.\n\n2. We don't place $$i$$ at the place of $$1$$: By doing this, the problem of finding the derangements reduces to finding the \nderangements for the $$n-1$$ elements(except 1). This is because, now we've got $$n-1$$ elements and these $$n-1$$ elements can't be placed at \nexactly one location(with $$i$$ not being placed at the first position).\n\n![Derangement_Split](../Figures/634/634_Find_Derangements_split.PNG)\n{:align=\"center\"}\n\nBased, on the above discussion, if $$d(n)$$ represents the number of derangements for $$n$$ elements, it can be obtained as:\n\n$$d(n) = (n-1) \\cdot [d(n-1) + d(n-2)]$$\n\nThis is a recursive equation and can thus, be solved easily by making use of a recursive function.\n\nBut, if we go with the above method, a lot of duplicate function calls wiil be made, with the same parameters being passed. This is because the same state can be reached through various paths in the recursive tree. In order to avoid these duplicate calls, we can store the result of a function call, once its made, \ninto a memoization array. Thus, whenever the same function call is made again, we can directly return the result from this memoization array. \nThis helps to prune the search space to a great extent.\n\n<iframe src=\"https://leetcode.com/playground/fHm2mg5D/shared\" frameBorder=\"0\" width=\"100%\" height=\"327\" name=\"fHm2mg5D\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n)$$. $$memo$$ array of length $$n$$ is filled once only.\n\n* Space complexity : $$O(n)$$. $$memo$$ array of length $$n$$ is used.\n<br />\n<br />\n---\n\n#### Approach 3: Dynamic Programming\n\n**Algorithm**\n\nAs we've discussed above, the recursive formula for finding the derangements for $$n$$ elements is given by:\n\n$$d(n) = (n-1) \\cdot [d(n-1) + d(n-2)]$$\n\nFrom this expression, we can see that the result for derangements for $$i$$ numbers depends only on the result of the derangments \nof numbers lesser than $$i$$. Thus, we can solve the given problem by making use of Dynamic Programming.\n\nThe equation for Dynamic Programming remains identical to the recursive equation.\n\n$$dp[i] = (i - 1) \\cdot (dp[i-1]+dp[i-2])$$\n\nHere, $$dp[i]$$ is used to store the number of derangements for $$i$$ elements. We start filling the $$dp$$ array from $$i=0$$ and move towards the larger values of $$i$$. At the end, the value of \n$$dp[n]$$ gives the required result.\n\nThe following animation illustrates the $$dp$$ filling process.\n\n!?!../Documents/634_Find_Derangements.json:1000,563!?!\n\n<iframe src=\"https://leetcode.com/playground/DaeQYxch/shared\" frameBorder=\"0\" width=\"100%\" height=\"293\" name=\"DaeQYxch\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n)$$. Single loop upto $$n$$ is required to fill the $$dp$$ array of size $$n$$.\n\n* Space complexity : $$O(n)$$. $$dp$$ array of size $$n$$ is used.\n<br />\n<br />\n---\n#### Approach 4: Constant Space Dynamic Programming\n\n**Algorithm**\n\nIn the last approach, we can easily observe that the result for $$dp[i]$$ depends only on the previous two elements, $$dp[i-1]$$ and \n$$dp[i-2]$$. Thus, instead of maintaining the entire 1-D array, we can just keep a track of the last two values required to calculate the \nvalue of the current element. By making use of this observation, we can save the space required by the $$dp$$ array in the last approach.\n\n<iframe src=\"https://leetcode.com/playground/YAKUsx8Z/shared\" frameBorder=\"0\" width=\"100%\" height=\"310\" name=\"YAKUsx8Z\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n)$$. Single loop upto $$n$$ is required to find the required result.\n\n* Space complexity : $$O(1)$$. Constant extra space is used.\n<br />\n<br />\n---\n#### Approach 5: Formula\n\n**Algorithm**\n\nBefore discussing this approach, we need to look at some preliminaries.\n\nIn combinatorics (combinatorial mathematics), the inclusionâ€“exclusion principle is a counting \ntechnique which generalizes the familiar method of obtaining the number of elements in the union of two \nfinite sets; symbolically expressed as\n\n$$\\left|A\\cup B\\right|=\\left|A\\right|+\\left|B\\right|-\\left|A\\cap B\\right|$$ \n\nwhere $$A$$ and $$B$$ are two finite sets and $$\\left|S\\right|$$ indicates the cardinality of a set $$S$$ \n(which may be considered as the number of elements of the set, if the set is finite). \n\n![AUB](../Figures/634/634_AUB.PNG)\n{:align=\"center\"}\n\nThe formula expresses the fact that the sum of the sizes of the two sets may be too large since\n some elements may be counted twice. The double-counted elements are those in the intersection of \n the two sets and the count is corrected by subtracting the size of the intersection.\n\nThe principle is more clearly seen in the case of three sets, which for the sets $$A$$, $$B$$ and $$C$$ is given by\n\n$$\\left|A\\cup B\\cup C\\right|=\\left|A\\right|+\\left|B\\right|+\\left|C\\right|-\\left|A\\cap B\\right|-\\left|A\\cap C\\right|-\\left|B\\cap C\\right|+\\left|A\\cap B\\cap C\\right|$$.\n\nThis formula can be verified by counting how many times each region in the \nVenn diagram figure shown below. \n\n![AUBUC](../Figures/634/634_AUBUC.png)\n{:align=\"center\"}\n\nIn this case, \nwhen removing the contributions of over-counted elements, the number of elements in the mutual \nintersection of the three sets has been subtracted too often, so must be added back in to get the correct total.\n\nIn its general form, the principle of inclusionâ€“exclusion states that for finite sets $$A_1, ..., A_n$$, one\n has the identity\n\n$$\\bigg|\\bigcup _{i=1}^{n}A_{i}\\bigg|=\\sum_{i=1}^{n}\\left|A_{i}\\right|-\\sum_{1 \\leq; i < j \\leq; n}\\left|A_{i}\\cap A_{j}\\right|+...$$\n\n$$+...+\\sum_{1 \\leq; i < j < k \\leq; n}\\left|A_{i}\\cap A_{j}\\cap A_{k}\\right|-..... +(-1)^{n}\\left|A_{1}\\cap... \\cap A_{n}\\right|$$\n\n\nBy applying De-Morgan's law to the above equation, we can obtain\n\n$$\\bigg|\\bigcap _{i=1}^{n}\\bar{A_{i}}\\bigg|=\\bigg|S-\\bigcup _{i=1}^{n}A_{i}\\bigg|=\\left|S\\right|-$$  $$\\sum_{i=1}^{n}\\left|A_{i}\\right|+\\sum_{1 \\leq; i < j \\leq; n}\\left|A_{i}\\cap A_{j}\\right|-.... +(-1)^{n}\\left|A_{1}\\cap....\\cap A_{n}\\right|$$\n\nHere, $$S$$ represents the universal set containing all of the $$A_i$$ and $$\\bar{A_{i}}$$ denotes the complement of $$A_i$$ in $$S$$.\n\nNow, let $$A_i$$ denote the set of permutations  which leave $$A_i$$ in its natural position. Thus, the number of permutations in which \nthe $$i^{th}$$ element remains at its natural position is $$(n-1)!$$. Thus, the component $$\\sum_{i=1}^{n}\\left|A_{i}\\right|$$ above \nbecomes $${{n}\\choose{1}} (n-1)!$$. Here, $${{n}\\choose{1}}$$ represents the number of ways of choosing 1 element out of $$n$$ elements.\n\n Making use of this notation, the required number of derangements can be denoted by $$\\left|\\bigcap _{i=1}^{n}\\bar{A_{i}}\\right|$$ term. \n\nThis is the same term which has been expanded in the last equation. Putting appropriate values of the elements, we can expand the above equation as:\n\n$$\\bigg|\\bigcap _{i=1}^{n}\\bar{A_{i}}\\bigg|=n! -{n \\choose 1}(n-1)! + {n\\choose 2}(n-2)! - {n \\choose 3}(n-3)! +...$$\n$$...+(-1)^{p}{n \\choose p}(n-p)! +...+ (-1)^{n}{n \\choose n} (n-n)!$$\n\n$$ = n! - \\frac{n!}{1!} + \\frac{n!}{2!} - \\frac{n!}{3!}+...+(-1)^n \\frac{n!}{n!}$$\n\nWe can make use of this formula to obtain the required number of derangements.\n\n<iframe src=\"https://leetcode.com/playground/tMvhGHmm/shared\" frameBorder=\"0\" width=\"100%\" height=\"225\" name=\"tMvhGHmm\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n)$$. Single loop upto $$n$$ is used.\n\n* Space complexity : $$O(1)$$. Constant space is used.\n\n---\nAnalysis written by: [@vinod23](https://leetcode.com/vinod23)",
    "contentTypeId": "107",
    "rating": {
      "id": "188",
      "count": 7,
      "average": 5,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "1",
  "metaData": "{\r\n  \"name\": \"findDerangement\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"n\",\r\n      \"type\": \"integer\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
