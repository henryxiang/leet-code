{
  "questionId": "643",
  "questionFrontendId": "643",
  "boundTopicId": null,
  "title": "Maximum Average Subarray I",
  "titleSlug": "maximum-average-subarray-i",
  "categoryTitle": "Algorithms",
  "content": "<p>Given an array consisting of <code>n</code> integers, find the contiguous subarray of given length <code>k</code> that has the maximum average value. And you need to output the maximum average value.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> [1,12,-5,-6,50,3], k = 4\r\n<b>Output:</b> 12.75\r\n<b>Explanation:</b> Maximum average is (12-5-6+50)/4 = 51/4 = 12.75\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ol>\r\n\t<li>1 &lt;= <code>k</code> &lt;= <code>n</code> &lt;= 30,000.</li>\r\n\t<li>Elements of the given array will be in the range [-10,000, 10,000].</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n",
  "isPaidOnly": false,
  "difficulty": "Easy",
  "likes": 550,
  "dislikes": 93,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"Maximum Average Subarray II\", \"titleSlug\": \"maximum-average-subarray-ii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
  "contributors": [
    {
      "username": "Stomach_ache",
      "profileUrl": "/stomach_ache/",
      "avatarUrl": "https://assets.leetcode.com/users/stomach_ache/avatar_1550751028.png"
    }
  ],
  "topicTags": [
    {
      "name": "Array",
      "slug": "array"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 0}], \"1\": [], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    double findMaxAverage(vector<int>& nums, int k) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public double findMaxAverage(int[] nums, int k) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def findMaxAverage(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: float\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def findMaxAverage(self, nums: List[int], k: int) -> float:\n        "
    },
    {
      "lang": "C",
      "code": "\n\ndouble findMaxAverage(int* nums, int numsSize, int k){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public double FindMaxAverage(int[] nums, int k) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar findMaxAverage = function(nums, k) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Float}\ndef find_max_average(nums, k)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func findMaxAverage(_ nums: [Int], _ k: Int) -> Double {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func findMaxAverage(nums []int, k int) float64 {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def findMaxAverage(nums: Array[Int], k: Int): Double = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun findMaxAverage(nums: IntArray, k: Int): Double {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn find_max_average(nums: Vec<i32>, k: i32) -> f64 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Float\n     */\n    function findMaxAverage($nums, $k) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"63.8K\", \"totalSubmission\": \"157K\", \"totalAcceptedRaw\": 63759, \"totalSubmissionRaw\": 156972, \"acRate\": \"40.6%\"}",
  "hints": [],
  "solution": {
    "id": "221",
    "canSeeDetail": true,
    "url": "/articles/maximum-average-subarray/",
    "content": "[TOC]\n\n \n## Solution\n\n---\n#### Approach #1 Cumulative Sum [Accepted]\n\n**Algorithm**\n\nWe know that in order to obtain the averages of subarrays with length $$k$$, we need to obtain the sum of these $$k$$ length subarrays. One of the methods of obtaining this sum is to make use of a cumulative sum array, $$sum$$, which is populated only once. Here, $$sum[i]$$ is used to store the sum of the elements of the given $$nums$$ array from the first element upto the element at the $$i^{th}$$ index.\n\nOnce the $$sum$$ array has been filled up, in order to find the sum of elements from the index $$i$$ to $$i+k$$, all we need to do is to use: $$sum[i] - sum[i-k]$$. Thus, now, by doing one more iteration over the $$sum$$ array, we can determine the maximum average possible from the subarrays of length $$k$$.\n\nThe following animation illustrates the process for a simple example.\n\n!?!../Documents/643_Maximum_Average.json:1000,563!?!\n\n<iframe src=\"https://leetcode.com/playground/dJyoFWQo/shared\" frameBorder=\"0\" name=\"dJyoFWQo\" width=\"100%\" height=\"275\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n)$$. We iterate over the $$nums$$ array of length $$n$$ once to fill the $$sum$$ array. Then, we iterate over $$n-k$$ elements of $$sum$$ to determine the required result.\n\n* Space complexity : $$O(n)$$. We make use of a $$sum$$ array of length $$n$$ to store the cumulative sum.\n\n---\n\n\n#### Approach #2 Sliding Window [Accepted]\n\n**Algorithm**\n\nInstead of creating a cumulative sum array first, and then traversing over it to determine the required sum, we can simply traverse over $$nums$$ just once, and on the go keep on determining the sums possible for the subarrays of length $$k$$. To understand the idea, assume that we already know the sum of elements from index $$i$$ to index $$i+k$$, say it is $$x$$.\n\nNow, to determine the sum of elements from the index $$i+1$$ to the index $$i+k+1$$, all we need to do is to subtract the element $$nums[i]$$ from $$x$$ and to add the element $$nums[i+k+1]$$ to $$x$$. We can carry out our process based on this idea and determine the maximum possible average.\n\n<iframe src=\"https://leetcode.com/playground/uABxt2Z8/shared\" frameBorder=\"0\" name=\"uABxt2Z8\" width=\"100%\" height=\"292\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n)$$. We iterate over the given $$nums$$ array of length $$n$$ once only.\n\n* Space complexity : $$O(1)$$. Constant extra space is used.\n\n---\nAnalysis written by: [@vinod23](https://leetcode.com/vinod23)",
    "contentTypeId": "107",
    "rating": {
      "id": "216",
      "count": 11,
      "average": 4.454,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "[1,12,-5,-6,50,3]\n4",
  "metaData": "{\r\n  \"name\": \"findMaxAverage\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"nums\",\r\n      \"type\": \"integer[]\"\r\n    },\r\n    {\r\n      \"name\": \"k\",\r\n      \"type\": \"integer\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"double\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
