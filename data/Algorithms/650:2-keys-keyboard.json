{
  "questionId": "650",
  "questionFrontendId": "650",
  "boundTopicId": null,
  "title": "2 Keys Keyboard",
  "titleSlug": "2-keys-keyboard",
  "categoryTitle": "Algorithms",
  "content": "<p>Initially on a notepad only one character &#39;A&#39; is present. You can perform two operations on this notepad for each step:</p>\r\n\r\n<ol>\r\n\t<li><code>Copy All</code>: You can copy all the characters present on the notepad (partial copy is not allowed).</li>\r\n\t<li><code>Paste</code>: You can paste the characters which are copied <b>last time</b>.</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Given a number <code>n</code>. You have to get <b>exactly</b> <code>n</code> &#39;A&#39; on the notepad by performing the minimum number of steps permitted. Output the minimum number of steps to get <code>n</code> &#39;A&#39;.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> 3\r\n<b>Output:</b> 3\r\n<b>Explanation:</b>\r\nIntitally, we have one character &#39;A&#39;.\r\nIn step 1, we use <b>Copy All</b> operation.\r\nIn step 2, we use <b>Paste</b> operation to get &#39;AA&#39;.\r\nIn step 3, we use <b>Paste</b> operation to get &#39;AAA&#39;.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ol>\r\n\t<li>The <code>n</code> will be in the range [1, 1000].</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n",
  "isPaidOnly": false,
  "difficulty": "Medium",
  "likes": 805,
  "dislikes": 59,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"4 Keys Keyboard\", \"titleSlug\": \"4-keys-keyboard\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Broken Calculator\", \"titleSlug\": \"broken-calculator\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
  "contributors": [
    {
      "username": "apoorv_vikram",
      "profileUrl": "/apoorv_vikram/",
      "avatarUrl": "https://assets.leetcode.com/users/apoorv_vikram/avatar_1523716831.png"
    }
  ],
  "topicTags": [
    {
      "name": "Dynamic Programming",
      "slug": "dynamic-programming"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"Microsoft\", \"slug\": \"microsoft\", \"timesEncountered\": 0}], \"1\": [], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    int minSteps(int n) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int minSteps(int n) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def minSteps(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def minSteps(self, n: int) -> int:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nint minSteps(int n){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public int MinSteps(int n) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar minSteps = function(n) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer} n\n# @return {Integer}\ndef min_steps(n)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func minSteps(_ n: Int) -> Int {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func minSteps(n int) int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def minSteps(n: Int): Int = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun minSteps(n: Int): Int {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn min_steps(n: i32) -> i32 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function minSteps($n) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"42K\", \"totalSubmission\": \"88K\", \"totalAcceptedRaw\": 41965, \"totalSubmissionRaw\": 87993, \"acRate\": \"47.7%\"}",
  "hints": [
    "How many characters may be there in the clipboard at the last step if n = 3? n = 7? n = 10? n = 24?"
  ],
  "solution": {
    "id": "320",
    "canSeeDetail": true,
    "url": "/articles/2-keys-keyboard/",
    "content": "[TOC]\n\n---\n#### Approach #1: Prime Factorization [Accepted]\n\n**Intuition**\n\nWe can break our moves into groups of `(copy, paste, ..., paste)`.  Let `C` denote copying and `P` denote pasting.  Then for example, in the sequence of moves `CPPCPPPPCP`, the groups would be `[CPP][CPPPP][CP]`.\n\nSay these groups have lengths `g_1, g_2, ...`.  After parsing the first group, there are `g_1` `'A'`s.  After parsing the second group, there are `g_1 * g_2` `'A'`s, and so on.  At the end, there are `g_1 * g_2 * ... * g_n` `'A'`s.\n\nWe want exactly `N = g_1 * g_2 * ... * g_n`.  If any of the `g_i` are composite, say `g_i = p * q`, then we can split this group into two groups (the first of which has one copy followed by `p-1` pastes, while the second group having one copy and `q-1` pastes).\n\nSuch a split never uses more moves: we use `p+q` moves when splitting, and `pq` moves previously.  As `p+q <= pq` is equivalent to `1 <= (p-1)(q-1)`, which is true as long as `p >= 2` and `q >= 2`.\n\n**Algorithm**\nBy the above argument, we can suppose `g_1, g_2, ...` is the prime factorization of `N`, and the answer is therefore the sum of these prime factors.\n\n<iframe src=\"https://leetcode.com/playground/U88jzmPG/shared\" frameBorder=\"0\" width=\"100%\" height=\"276\" name=\"U88jzmPG\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: $$O(\\sqrt{N})$$.  When `N` is the square of a prime, our loop does $$O(\\sqrt{N})$$ steps.\n\n* Space Complexity: $$O(1)$$, the space used by `ans` and `d`.\n\n---\n\nAnalysis written by: [@awice](https://leetcode.com/awice).",
    "contentTypeId": "107",
    "rating": {
      "id": "315",
      "count": 29,
      "average": 4.655,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "3",
  "metaData": "{\r\n  \"name\": \"minSteps\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"n\",\r\n      \"type\": \"integer\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
