{
  "questionId": "651",
  "questionFrontendId": "651",
  "boundTopicId": null,
  "title": "4 Keys Keyboard",
  "titleSlug": "4-keys-keyboard",
  "categoryTitle": "Algorithms",
  "content": "<p>Imagine you have a special keyboard with the following keys: </p>\r\n<p><code>Key 1: (A)</code>:  Print one 'A' on screen.</p>\r\n<p><code>Key 2: (Ctrl-A)</code>: Select the whole screen.</p>\r\n<p><code>Key 3: (Ctrl-C)</code>: Copy selection to buffer.</p>\r\n<p><code>Key 4: (Ctrl-V)</code>: Print buffer on screen appending it after what has already been printed. </p>\r\n\r\n\r\n\r\n<p>Now, you can only press the keyboard for <b>N</b> times (with the above four keys), find out the maximum numbers of 'A' you can print on screen.</p>\r\n\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> N = 3\r\n<b>Output:</b> 3\r\n<b>Explanation:</b> \r\nWe can at most get 3 A's on screen by pressing following key sequence:\r\nA, A, A\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> N = 7\r\n<b>Output:</b> 9\r\n<b>Explanation:</b> \r\nWe can at most get 9 A's on screen by pressing following key sequence:\r\nA, A, A, Ctrl A, Ctrl C, Ctrl V, Ctrl V\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>1 <= N <= 50 </li>\r\n<li>Answers will be in the range of 32-bit signed integer.</li>\r\n</ol>\r\n</p>\r\n",
  "isPaidOnly": true,
  "difficulty": "Medium",
  "likes": 313,
  "dislikes": 52,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"2 Keys Keyboard\", \"titleSlug\": \"2-keys-keyboard\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
  "contributors": [
    {
      "username": "fallcreek",
      "profileUrl": "/fallcreek/",
      "avatarUrl": "https://www.gravatar.com/avatar/043194ec5c4c5d2778049a3fa6d2e1d8.png?s=200"
    }
  ],
  "topicTags": [
    {
      "name": "Math",
      "slug": "math"
    },
    {
      "name": "Dynamic Programming",
      "slug": "dynamic-programming"
    },
    {
      "name": "Greedy",
      "slug": "greedy"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 0}, {\"taggedByAdmin\": true, \"name\": \"Microsoft\", \"slug\": \"microsoft\", \"timesEncountered\": 0}], \"1\": [], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    int maxA(int N) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int maxA(int N) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def maxA(self, N):\n        \"\"\"\n        :type N: int\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def maxA(self, N: int) -> int:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nint maxA(int N){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public int MaxA(int N) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number} N\n * @return {number}\n */\nvar maxA = function(N) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer} n\n# @return {Integer}\ndef max_a(n)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func maxA(_ N: Int) -> Int {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func maxA(N int) int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def maxA(N: Int): Int = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun maxA(N: Int): Int {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn max_a(n: i32) -> i32 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer $N\n     * @return Integer\n     */\n    function maxA($N) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"14.1K\", \"totalSubmission\": \"27.3K\", \"totalAcceptedRaw\": 14069, \"totalSubmissionRaw\": 27281, \"acRate\": \"51.6%\"}",
  "hints": [],
  "solution": {
    "id": "318",
    "canSeeDetail": true,
    "url": "/articles/4-keys-keyboard/",
    "content": "[TOC]\n\n---\n\n#### Approach Framework\n\n**Explanation**\n\nWe either press 'A', or press 'CTRL+A', 'CTRL+C', and some number of 'CTRL+V's.  Thus, in the context of making `N` keypresses to write the letter 'A' `M` times, there are only two types of moves:\n\n* Add (`1` keypress):  Add `1` to `M`.\n* Multiply (`k+1` keypresses):  Multiply `M` by `k`, where `k >= 2`.\n\nIn the following explanations, we will reference these as moves.\n\n---\n#### Approach #1: Dynamic Programming [Accepted]\n\n**Intuition and Algorithm**\n\nSay `best[k]` is the largest number of written 'A's possible after `k` keypresses.\n\nIf the last move in some optimal solution of `k` keypresses was adding, then `best[k] = best[k-1] + 1`.\n\nOtherwise, if the last move was multiplying, then we multiplied by `x`, and `best[k-(x+1)] = best[k-(x+1)] * x` for some `x < k-1`.\n\nTaking the best of these candidates lets us find `best[k]` in terms of previous `best[j]`, when `j < k`.\n\n<iframe src=\"https://leetcode.com/playground/SGFr27fh/shared\" frameBorder=\"0\" width=\"100%\" height=\"242\" name=\"SGFr27fh\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: $$O(N^2)$$.  We have two nested for-loops, each of which do $$O(N)$$ work.\n\n* Space Complexity: $$O(N)$$, the size of `best`.\n\n---\n#### Approach #2: Optimized Dynamic Programming [Accepted]\n\n**Intuition**\n\nIf we multiply by `2N`, paying a cost of `2N+1`, we could instead multiply by `N` then `2`, paying `N+4`.  When `N >= 3`, we don't pay more by doing it the second way.\n\nSimilarly, if we are to multiply by `2N+1` paying `2N+2`, we could instead multiply by `N+1` then `2`, paying `N+5`.  Again, when `N >= 3`, we don't pay more doing it the second way.\n\nThus, we never multiply by more than `5`.\n\n**Algorithm**\n\nOur approach is the same as *Approach #1*, except we do not consider multiplying by more than 5 in our inner loop.  For brevity, we have omitted this solution.\n\n**Complexity Analysis**\n\n* Time Complexity: $$O(N)$$.  We have two nested for-loops, but the inner loop does $$O(1)$$ work.\n\n* Space Complexity: $$O(N)$$, the size of `best`.\n\n---\n#### Approach #3: Mathematical [Accepted]\n\n**Explanation**\n\nAs in *Approach #2*, we never multiply by more than 5.\n\nWhen `N` is arbitrarily large, the long run behavior of multiplying by `k` repeatedly is to get to the value $$k^{\\frac{N}{k+1}}$$.  Analyzing the function $$k^{\\frac{1}{k+1}}$$ at values $$k = 2, 3, 4, 5$$, it attains a peak at $$k = 4$$.  Thus, we should expect that *eventually*, `best[K] = best[K-5] * 4`.\n\nNow, we need to make a few more deductions.\n\n* We never add after multiplying: if we add `c` after multiplying by `k`, we should instead multiply by `k+c`.\n\n* We never add after 5: If we add `1` then multiply by `k` to get to `(x+1) * k = xk + k`, we could instead multiply by `k+1` to get to `xk + x`.  Since `k <= 5`, we must have `x <= 5` for our additions to not be dominated.\n\n* The number of multiplications by 2, 3, or 5 is bounded.\n\n  * Every time we've multiplied by 2 two times, we prefer to multiply by 4 once for less cost. (4^1 for a cost of 5, vs 2^2 for a cost of 6.)\n  * Every time we've multiplied by 3 five times, we prefer to multiply by 4 four times for the same cost but a larger result. (4^4 > 3^5, and cost is 20.)\n  * Every time we've multiplied by 5 five times, we prefer to multiply by 4 six times for the same cost but a larger result. (4^6 > 5^5, and cost is 30.)\n\nTogether, this shows there are at most 5 additions and 9 multiplications by a number that isn't 4.\n\nWe can find the first 14 operations on 1 by hand: `1, 2, 3, 4, 5, 6, 9, 12, 16, 20, 27, 36, 48, 64, 81`. After that, every subsequent number is achieved by multiplying by 4: ie., `best[K] = best[K-5] * 4`.\n\n<iframe src=\"https://leetcode.com/playground/Pe7Dpj2G/shared\" frameBorder=\"0\" width=\"100%\" height=\"191\" name=\"Pe7Dpj2G\"></iframe>\n\n**Complexity Analysis**\n\n* Time and Space Complexity: $$O(1)$$.\n\n---\n\nAnalysis written by: [@awice](https://leetcode.com/awice).",
    "contentTypeId": "107",
    "rating": {
      "id": "313",
      "count": 60,
      "average": 1.667,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "1",
  "metaData": "{\r\n  \"name\": \"maxA\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"N\",\r\n      \"type\": \"integer\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
