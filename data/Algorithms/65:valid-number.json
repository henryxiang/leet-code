{
  "questionId": "65",
  "questionFrontendId": "65",
  "boundTopicId": null,
  "title": "Valid Number",
  "titleSlug": "valid-number",
  "categoryTitle": "Algorithms",
  "content": "<p>Validate if a given string can be interpreted as&nbsp;a decimal number.</p>\r\n\r\n<p>Some examples:<br />\r\n<code>&quot;0&quot;</code> =&gt; <code>true</code><br />\r\n<code>&quot; 0.1 &quot;</code> =&gt; <code>true</code><br />\r\n<code>&quot;abc&quot;</code> =&gt; <code>false</code><br />\r\n<code>&quot;1 a&quot;</code> =&gt; <code>false</code><br />\r\n<code>&quot;2e10&quot;</code> =&gt; <code>true</code><br />\r\n<code>&quot; -90e3&nbsp; &nbsp;&quot;</code> =&gt; <code>true</code><br />\r\n<code>&quot; 1e&quot;</code> =&gt; <code>false</code><br />\r\n<code>&quot;e3&quot;</code> =&gt; <code>false</code><br />\r\n<code>&quot; 6e-1&quot;</code> =&gt; <code>true</code><br />\r\n<code>&quot; 99e2.5&nbsp;&quot;</code> =&gt; <code>false</code><br />\r\n<code>&quot;53.5e93&quot;</code> =&gt; <code>true</code><br />\r\n<code>&quot; --6 &quot;</code> =&gt; <code>false</code><br />\r\n<code>&quot;-+3&quot;</code> =&gt; <code>false</code><br />\r\n<code>&quot;95a54e53&quot;</code> =&gt; <code>false</code></p>\r\n\r\n<p><strong>Note:</strong> It is intended for the problem statement to be ambiguous. You should gather all requirements up front before implementing one. However, here is a list of characters that can be in a valid decimal number:</p>\r\n\r\n<ul>\r\n\t<li>Numbers 0-9</li>\r\n\t<li>Exponent - &quot;e&quot;</li>\r\n\t<li>Positive/negative sign - &quot;+&quot;/&quot;-&quot;</li>\r\n\t<li>Decimal point - &quot;.&quot;</li>\r\n</ul>\r\n\r\n<p>Of course, the context of these characters also matters in the input.</p>\r\n\r\n<p><strong>Update (2015-02-10):</strong><br />\r\nThe signature of the <code>C++</code> function had been updated. If you still see your function signature accepts a <code>const char *</code> argument, please click the reload button to reset your code definition.</p>\r\n",
  "isPaidOnly": false,
  "difficulty": "Hard",
  "likes": 563,
  "dislikes": 4001,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"String to Integer (atoi)\", \"titleSlug\": \"string-to-integer-atoi\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
  "contributors": [],
  "topicTags": [
    {
      "name": "Math",
      "slug": "math"
    },
    {
      "name": "String",
      "slug": "string"
    }
  ],
  "companyTagStats": "{\"1\": [{\"taggedByAdmin\": false, \"name\": \"Facebook\", \"slug\": \"facebook\", \"timesEncountered\": 15}, {\"taggedByAdmin\": true, \"name\": \"LinkedIn\", \"slug\": \"linkedin\", \"timesEncountered\": 3}, {\"taggedByAdmin\": false, \"name\": \"TripAdvisor\", \"slug\": \"tripadvisor\", \"timesEncountered\": 2}], \"2\": [{\"taggedByAdmin\": false, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 3}, {\"taggedByAdmin\": false, \"name\": \"Microsoft\", \"slug\": \"microsoft\", \"timesEncountered\": 2}], \"3\": [{\"taggedByAdmin\": false, \"name\": \"Apple\", \"slug\": \"apple\", \"timesEncountered\": 3}, {\"taggedByAdmin\": false, \"name\": \"Adobe\", \"slug\": \"adobe\", \"timesEncountered\": 2}]}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    bool isNumber(string s) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public boolean isNumber(String s) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def isNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def isNumber(self, s: str) -> bool:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nbool isNumber(char * s){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public bool IsNumber(string s) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {string} s\n * @return {boolean}\n */\nvar isNumber = function(s) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {String} s\n# @return {Boolean}\ndef is_number(s)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func isNumber(_ s: String) -> Bool {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func isNumber(s string) bool {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def isNumber(s: String): Boolean = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun isNumber(s: String): Boolean {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn is_number(s: String) -> bool {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Boolean\n     */\n    function isNumber($s) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"145.7K\", \"totalSubmission\": \"998.7K\", \"totalAcceptedRaw\": 145742, \"totalSubmissionRaw\": 998654, \"acRate\": \"14.6%\"}",
  "hints": [],
  "solution": null,
  "status": null,
  "sampleTestCase": "\"0\"",
  "metaData": "{ \r\n  \"name\": \"isNumber\",\r\n  \"params\": [\r\n    { \r\n      \"name\": \"s\",\r\n      \"type\": \"string\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"boolean\"\r\n  }\r\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
