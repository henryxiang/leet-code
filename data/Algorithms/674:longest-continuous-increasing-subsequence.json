{
  "questionId": "674",
  "questionFrontendId": "674",
  "boundTopicId": null,
  "title": "Longest Continuous Increasing Subsequence",
  "titleSlug": "longest-continuous-increasing-subsequence",
  "categoryTitle": "Algorithms",
  "content": "<p>\r\nGiven an unsorted array of integers, find the length of longest <code>continuous</code> increasing subsequence (subarray).\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> [1,3,5,4,7]\r\n<b>Output:</b> 3\r\n<b>Explanation:</b> The longest continuous increasing subsequence is [1,3,5], its length is 3. \r\nEven though [1,3,5,7] is also an increasing subsequence, it's not a continuous one where 5 and 7 are separated by 4. \r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> [2,2,2,2,2]\r\n<b>Output:</b> 1\r\n<b>Explanation:</b> The longest continuous increasing subsequence is [2], its length is 1. \r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\nLength of the array will not exceed 10,000.\r\n</p>",
  "isPaidOnly": false,
  "difficulty": "Easy",
  "likes": 546,
  "dislikes": 104,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"Number of Longest Increasing Subsequence\", \"titleSlug\": \"number-of-longest-increasing-subsequence\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Window Subsequence\", \"titleSlug\": \"minimum-window-subsequence\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
  "contributors": [
    {
      "username": "just_not_over_12",
      "profileUrl": "/just_not_over_12/",
      "avatarUrl": "https://www.gravatar.com/avatar/464d04f3923cca7da1660e31335cd246.png?s=200"
    }
  ],
  "topicTags": [
    {
      "name": "Array",
      "slug": "array"
    }
  ],
  "companyTagStats": "{\"2\": [{\"taggedByAdmin\": true, \"name\": \"Facebook\", \"slug\": \"facebook\", \"timesEncountered\": 6}], \"3\": [{\"taggedByAdmin\": false, \"name\": \"Apple\", \"slug\": \"apple\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 2}], \"1\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    int findLengthOfLCIS(vector<int>& nums) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int findLengthOfLCIS(int[] nums) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def findLengthOfLCIS(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def findLengthOfLCIS(self, nums: List[int]) -> int:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nint findLengthOfLCIS(int* nums, int numsSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public int FindLengthOfLCIS(int[] nums) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findLengthOfLCIS = function(nums) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef find_length_of_lcis(nums)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func findLengthOfLCIS(_ nums: [Int]) -> Int {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func findLengthOfLCIS(nums []int) int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def findLengthOfLCIS(nums: Array[Int]): Int = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun findLengthOfLCIS(nums: IntArray): Int {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn find_length_of_lcis(nums: Vec<i32>) -> i32 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function findLengthOfLCIS($nums) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"85.3K\", \"totalSubmission\": \"189K\", \"totalAcceptedRaw\": 85258, \"totalSubmissionRaw\": 188976, \"acRate\": \"45.1%\"}",
  "hints": [],
  "solution": {
    "id": "278",
    "canSeeDetail": true,
    "url": "/articles/longest-continuous-increasing-subsequence/",
    "content": "[TOC]\n\n\n#### Approach #1: Sliding Window [Accepted]\n\n**Intuition and Algorithm**\n\nEvery (continuous) increasing subsequence is disjoint, and the boundary of each such subsequence occurs whenever `nums[i-1] >= nums[i]`.  When it does, it marks the start of a new increasing subsequence at `nums[i]`, and we store such `i` in the variable `anchor`.\n\nFor example, if `nums = [7, 8, 9, 1, 2, 3]`, then `anchor` starts at `0` (`nums[anchor] = 7`) and gets set again to `anchor = 3` (`nums[anchor] = 1`).  Regardless of the value of `anchor`, we record a candidate answer of `i - anchor + 1`, the length of the subarray `nums[anchor], nums[anchor+1], ..., nums[i]`; and our answer gets updated appropriately.\n\n<iframe src=\"https://leetcode.com/playground/AvR7oHwg/shared\" frameBorder=\"0\" width=\"100%\" height=\"225\" name=\"AvR7oHwg\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: $$O(N)$$, where $$N$$ is the length of `nums`.  We perform one loop through `nums`.\n\n* Space Complexity: $$O(1)$$, the space used by `anchor` and `ans`.\n\n---\n\nAnalysis written by: [@awice](https://leetcode.com/awice).",
    "contentTypeId": "107",
    "rating": {
      "id": "273",
      "count": 18,
      "average": 4.556,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "[1,3,5,4,7]",
  "metaData": "{\r\n  \"name\": \"findLengthOfLCIS\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"nums\",\r\n      \"type\": \"integer[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
