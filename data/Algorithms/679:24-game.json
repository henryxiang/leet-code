{
  "questionId": "679",
  "questionFrontendId": "679",
  "boundTopicId": null,
  "title": "24 Game",
  "titleSlug": "24-game",
  "categoryTitle": "Algorithms",
  "content": "<p>\r\nYou have 4 cards each containing a number from 1 to 9.  You need to judge whether they could operated through <code>*</code>, <code>/</code>, <code>+</code>, <code>-</code>, <code>(</code>, <code>)</code> to get the value of 24.\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> [4, 1, 8, 7]\r\n<b>Output:</b> True\r\n<b>Explanation:</b> (8-4) * (7-1) = 24\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> [1, 2, 1, 2]\r\n<b>Output:</b> False\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>The division operator <code>/</code> represents real division, not integer division.  For example, 4 / (1 - 2/3) = 12.</li>\r\n<li>Every operation done is between two numbers.  In particular, we cannot use <code>-</code> as a unary operator.  For example, with <code>[1, 1, 1, 1]</code> as input, the expression <code>-1 - 1 - 1 - 1</code> is not allowed.</li>\r\n<li>You cannot concatenate numbers together.  For example, if the input is <code>[1, 2, 1, 2]</code>, we cannot write this as 12 + 12.</li>\r\n</ol>\r\n</p>\r\n</p>",
  "isPaidOnly": false,
  "difficulty": "Hard",
  "likes": 504,
  "dislikes": 111,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [
    {
      "username": "just_not_over_12",
      "profileUrl": "/just_not_over_12/",
      "avatarUrl": "https://www.gravatar.com/avatar/464d04f3923cca7da1660e31335cd246.png?s=200"
    }
  ],
  "topicTags": [
    {
      "name": "Depth-first Search",
      "slug": "depth-first-search"
    }
  ],
  "companyTagStats": "{\"1\": [{\"taggedByAdmin\": true, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 5}, {\"taggedByAdmin\": false, \"name\": \"Microsoft\", \"slug\": \"microsoft\", \"timesEncountered\": 3}, {\"taggedByAdmin\": false, \"name\": \"Uber\", \"slug\": \"uber\", \"timesEncountered\": 2}], \"3\": [{\"taggedByAdmin\": false, \"name\": \"Twitter\", \"slug\": \"twitter\", \"timesEncountered\": 4}], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    bool judgePoint24(vector<int>& nums) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public boolean judgePoint24(int[] nums) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def judgePoint24(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def judgePoint24(self, nums: List[int]) -> bool:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nbool judgePoint24(int* nums, int numsSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public bool JudgePoint24(int[] nums) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar judgePoint24 = function(nums) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer[]} nums\n# @return {Boolean}\ndef judge_point24(nums)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func judgePoint24(_ nums: [Int]) -> Bool {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func judgePoint24(nums []int) bool {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def judgePoint24(nums: Array[Int]): Boolean = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun judgePoint24(nums: IntArray): Boolean {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn judge_point24(nums: Vec<i32>) -> bool {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Boolean\n     */\n    function judgePoint24($nums) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"27.9K\", \"totalSubmission\": \"62.5K\", \"totalAcceptedRaw\": 27866, \"totalSubmissionRaw\": 62545, \"acRate\": \"44.6%\"}",
  "hints": [],
  "solution": {
    "id": "247",
    "canSeeDetail": true,
    "url": "/articles/24-game/",
    "content": "[TOC]\n\n#### Approach #1: Backtracking [Accepted]\n\n**Intuition and Algorithm**\n\nThere are only 4 cards and only 4 operations that can be performed.  Even when all operations do not commute, that gives us an upper bound of $$12 * 6 * 2 * 4 * 4 * 4 = 9216$$ possibilities, which makes it feasible to just try them all.  Specifically, we choose two numbers (with order) in 12 ways and perform one of 4 operations (12 * 4). Then, with 3 remaining numbers, we choose 2 of them and perform one of 4 operations (6 * 4).  Finally we have two numbers left and make a final choice of 2 * 4 possibilities.\n\nWe will perform 3 binary operations (`+, -, *, /` are the operations) on either our numbers or resulting numbers.  Because `-` and `/` do not commute, we must be careful to consider both `a / b` and `b / a`.\n\nFor every way to remove two numbers `a, b` in our list, and for each possible result they can make, like `a+b`, `a/b`, etc., we will recursively solve the problem on this smaller list of numbers.\n\n<iframe src=\"https://leetcode.com/playground/vSR6aMjS/shared\" frameBorder=\"0\" name=\"vSR6aMjS\" width=\"100%\" height=\"515\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: $$O(1)$$.  There is a hard limit of 9216 possibilities, and we do $$O(1)$$ work for each of them.\n\n* Space Complexity: $$O(1)$$.  Our intermediate arrays are at most 4 elements, and the number made is bounded by an $$O(1)$$ factor.\n\n---\n\nAnalysis written by: [@awice](https://leetcode.com/awice)",
    "contentTypeId": "107",
    "rating": {
      "id": "241",
      "count": 45,
      "average": 2.156,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "[4,1,8,7]",
  "metaData": "{\r\n  \"name\": \"judgePoint24\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"nums\",\r\n      \"type\": \"integer[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"boolean\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
