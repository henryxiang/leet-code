{
  "questionId": "681",
  "questionFrontendId": "681",
  "boundTopicId": null,
  "title": "Next Closest Time",
  "titleSlug": "next-closest-time",
  "categoryTitle": "Algorithms",
  "content": "<p>Given a time represented in the format \"HH:MM\", form the next closest time by reusing the current digits. There is no limit on how many times a digit can be reused.</p>\r\n\r\n<p>You may assume the given input string is always valid. For example, \"01:34\", \"12:09\" are all valid. \"1:34\", \"12:9\" are all invalid.</p>\r\n\r\n<p><b>Example 1:</b>\r\n<pre>\r\n<b>Input:</b> \"19:34\"\r\n<b>Output:</b> \"19:39\"\r\n<b>Explanation:</b> The next closest time choosing from digits <b>1</b>, <b>9</b>, <b>3</b>, <b>4</b>, is <b>19:39</b>, which occurs 5 minutes later.  It is not <b>19:33</b>, because this occurs 23 hours and 59 minutes later.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b>\r\n<pre>\r\n<b>Input:</b> \"23:59\"\r\n<b>Output:</b> \"22:22\"\r\n<b>Explanation:</b> The next closest time choosing from digits <b>2</b>, <b>3</b>, <b>5</b>, <b>9</b>, is <b>22:22</b>. It may be assumed that the returned time is next day's time since it is smaller than the input time numerically.\r\n</pre>\r\n</p>",
  "isPaidOnly": true,
  "difficulty": "Medium",
  "likes": 394,
  "dislikes": 624,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [
    {
      "username": "1337c0d3r",
      "profileUrl": "/1337c0d3r/",
      "avatarUrl": "https://assets.leetcode.com/users/1337c0d3r/avatar_1547177258.png"
    }
  ],
  "topicTags": [
    {
      "name": "String",
      "slug": "string"
    }
  ],
  "companyTagStats": "{\"1\": [{\"taggedByAdmin\": true, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 2}], \"3\": [{\"taggedByAdmin\": false, \"name\": \"Facebook\", \"slug\": \"facebook\", \"timesEncountered\": 3}, {\"taggedByAdmin\": false, \"name\": \"Uber\", \"slug\": \"uber\", \"timesEncountered\": 2}], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    string nextClosestTime(string time) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public String nextClosestTime(String time) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def nextClosestTime(self, time):\n        \"\"\"\n        :type time: str\n        :rtype: str\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def nextClosestTime(self, time: str) -> str:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nchar * nextClosestTime(char * time){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public string NextClosestTime(string time) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {string} time\n * @return {string}\n */\nvar nextClosestTime = function(time) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {String} time\n# @return {String}\ndef next_closest_time(time)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func nextClosestTime(_ time: String) -> String {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func nextClosestTime(time string) string {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def nextClosestTime(time: String): String = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun nextClosestTime(time: String): String {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn next_closest_time(time: String) -> String {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param String $time\n     * @return String\n     */\n    function nextClosestTime($time) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"53K\", \"totalSubmission\": \"121.6K\", \"totalAcceptedRaw\": 52953, \"totalSubmissionRaw\": 121620, \"acRate\": \"43.5%\"}",
  "hints": [],
  "solution": {
    "id": "249",
    "canSeeDetail": true,
    "url": "/articles/next-closest-time/",
    "content": "#### Approach #1: Simulation [Accepted]\n\n**Intuition and Algorithm**\n\nSimulate the clock going forward by one minute.  Each time it moves forward, if all the digits are allowed, then return the current time.\n\nThe natural way to represent the time is as an integer `t` in the range `0 <= t < 24 * 60`.  Then the hours are `t / 60`, the minutes are `t % 60`, and each digit of the hours and minutes can be found by `hours / 10, hours % 10` etc.\n\n<iframe src=\"https://leetcode.com/playground/vBGi23jY/shared\" frameBorder=\"0\" name=\"vBGi23jY\" width=\"100%\" height=\"377\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: $$O(1)$$.  We try up to $$24 * 60$$ possible times until we find the correct time.\n\n* Space Complexity: $$O(1)$$.\n\n---\n#### Approach #2: Build From Allowed Digits [Accepted]\n\n**Intuition and Algorithm**\n\nWe have up to 4 different allowed digits, which naively gives us `4 * 4 * 4 * 4` possible times.  For each possible time, let's check that it can be displayed on a clock: ie., `hours < 24 and mins < 60`.  The best possible `time != start` is the one with the smallest `cand_elapsed = (time - start) % (24 * 60)`, as this represents the time that has elapsed since `start`, and where the modulo operation is taken to be always non-negative.\n\nFor example, if we have `start = 720` (ie. noon), then times like `12:05 = 725` means that `(725 - 720) % (24 * 60) = 5` seconds have elapsed; while times like `00:10 = 10` means that `(10 - 720) % (24 * 60) = -710 % (24 * 60) = 730` seconds have elapsed.\n\nAlso, we should make sure to handle `cand_elapsed` carefully.  When our current candidate time `cur` is equal to the given starting time, then `cand_elapsed` will be `0` and we should handle this case appropriately.\n\n<iframe src=\"https://leetcode.com/playground/Yr63hFuh/shared\" frameBorder=\"0\" name=\"Yr63hFuh\" width=\"100%\" height=\"479\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: $$O(1)$$.  We all $$4^4$$ possible times and take the best one.\n\n* Space Complexity: $$O(1)$$.\n\n---\n\nAnalysis written by: [@awice](https://leetcode.com/awice)",
    "contentTypeId": "107",
    "rating": {
      "id": "244",
      "count": 34,
      "average": 2.971,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "\"19:34\"",
  "metaData": "{\r\n  \"name\": \"nextClosestTime\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"time\",\r\n      \"type\": \"string\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"string\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
