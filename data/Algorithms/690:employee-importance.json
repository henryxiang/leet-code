{
  "questionId": "690",
  "questionFrontendId": "690",
  "boundTopicId": null,
  "title": "Employee Importance",
  "titleSlug": "employee-importance",
  "categoryTitle": "Algorithms",
  "content": "<p>You are given a data structure of employee information, which includes the employee&#39;s <b>unique id</b>, his <b>importance value</b> and his <b>direct</b> subordinates&#39; id.</p>\r\n\r\n<p>For example, employee 1 is the leader of employee 2, and employee 2 is the leader of employee 3. They have importance value 15, 10 and 5, respectively. Then employee 1 has a data structure like [1, 15, [2]], and employee 2 has [2, 10, [3]], and employee 3 has [3, 5, []]. Note that although employee 3 is also a subordinate of employee 1, the relationship is <b>not direct</b>.</p>\r\n\r\n<p>Now given the employee information of a company, and an employee id, you need to return the total importance value of this employee and all his subordinates.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> [[1, 5, [2, 3]], [2, 3, []], [3, 3, []]], 1\r\n<b>Output:</b> 11\r\n<b>Explanation:</b>\r\nEmployee 1 has importance value 5, and he has two direct subordinates: employee 2 and employee 3. They both have importance value 3. So the total importance value of employee 1 is 5 + 3 + 3 = 11.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ol>\r\n\t<li>One employee has at most one <b>direct</b> leader and may have several subordinates.</li>\r\n\t<li>The maximum number of employees won&#39;t exceed 2000.</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n",
  "isPaidOnly": false,
  "difficulty": "Easy",
  "likes": 469,
  "dislikes": 517,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"Nested List Weight Sum\", \"titleSlug\": \"nested-list-weight-sum\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
  "contributors": [
    {
      "username": "fallcreek",
      "profileUrl": "/fallcreek/",
      "avatarUrl": "https://www.gravatar.com/avatar/043194ec5c4c5d2778049a3fa6d2e1d8.png?s=200"
    }
  ],
  "topicTags": [
    {
      "name": "Hash Table",
      "slug": "hash-table"
    },
    {
      "name": "Depth-first Search",
      "slug": "depth-first-search"
    },
    {
      "name": "Breadth-first Search",
      "slug": "breadth-first-search"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"Uber\", \"slug\": \"uber\", \"timesEncountered\": 0}], \"2\": [{\"taggedByAdmin\": false, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 2}], \"1\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "/*\n// Employee info\nclass Employee {\npublic:\n    // It's the unique ID of each node.\n    // unique id of this employee\n    int id;\n    // the importance value of this employee\n    int importance;\n    // the id of direct subordinates\n    vector<int> subordinates;\n};\n*/\nclass Solution {\npublic:\n    int getImportance(vector<Employee*> employees, int id) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "/*\n// Employee info\nclass Employee {\n    // It's the unique id of each node;\n    // unique id of this employee\n    public int id;\n    // the importance value of this employee\n    public int importance;\n    // the id of direct subordinates\n    public List<Integer> subordinates;\n};\n*/\nclass Solution {\n    public int getImportance(List<Employee> employees, int id) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "\"\"\"\n# Employee info\nclass Employee(object):\n    def __init__(self, id, importance, subordinates):\n    \t#################\n        :type id: int\n        :type importance: int\n        :type subordinates: List[int]\n        #################\n        # It's the unique id of each node.\n        # unique id of this employee\n        self.id = id\n        # the importance value of this employee\n        self.importance = importance\n        # the id of direct subordinates\n        self.subordinates = subordinates\n\"\"\"\nclass Solution(object):\n    def getImportance(self, employees, id):\n        \"\"\"\n        :type employees: List[Employee]\n        :type id: int\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "\"\"\"\n# Employee info\nclass Employee:\n    def __init__(self, id: int, importance: int, subordinates: List[int]):\n        # It's the unique id of each node.\n        # unique id of this employee\n        self.id = id\n        # the importance value of this employee\n        self.importance = importance\n        # the id of direct subordinates\n        self.subordinates = subordinates\n\"\"\"\nclass Solution:\n    def getImportance(self, employees: List['Employee'], id: int) -> int:\n        "
    },
    {
      "lang": "Ruby",
      "code": "=begin\n# Employee info\nclass Employee\n    attr_accessor :id, :importance, :subordinates\n    def initialize( id, importance, subordinates)\n        # It's the unique id of each node.\n        # unique id of this employee\n        @id = id\n        # the importance value of this employee\n        @importance = importance\n        # the id of direct subordinates\n        @subordinates = subordinates\n    end\nend\n=end\n# @param {Employee} employees\n# @param {Integer} id\n# @return {Integer}\ndef get_importance(employees, id)\n    \nend"
    }
  ],
  "stats": "{\"totalAccepted\": \"57.7K\", \"totalSubmission\": \"104.2K\", \"totalAcceptedRaw\": 57732, \"totalSubmissionRaw\": 104214, \"acRate\": \"55.4%\"}",
  "hints": [],
  "solution": {
    "id": "303",
    "canSeeDetail": true,
    "url": "/articles/employee-importance/",
    "content": "[TOC]\n\n#### Approach #1: Depth-First Search [Accepted]\n\n**Intuition and Algorithm**\n\nLet's use a hashmap `emap = {employee.id -> employee}` to query employees quickly.\n\nNow to find the total importance of an employee, it will be the importance of that employee, plus the total importance of each of that employee's subordinates.  This is a straightforward depth-first search.\n\n<iframe src=\"https://leetcode.com/playground/NX7sm9qW/shared\" frameBorder=\"0\" width=\"100%\" height=\"310\" name=\"NX7sm9qW\"></iframe>\n\n\n**Complexity Analysis**\n\n* Time Complexity: $$O(N)$$, where $$N$$ is the number of employees.  We might query each employee in `dfs`.\n\n* Space Complexity: $$O(N)$$, the size of the implicit call stack when evaluating `dfs`.\n\n---\n\nAnalysis written by: [@awice](https://leetcode.com/awice).",
    "contentTypeId": "107",
    "rating": {
      "id": "298",
      "count": 10,
      "average": 4.5,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "[[1,2,[2]], [2,3,[]]]\n2",
  "metaData": "{\n  \"name\": \"getImportance\",\n  \"params\": [\n    {\n      \"name\": \"employees\",\n      \"type\": \"list<Employee>\"\n    },\n    {\n      \"name\": \"id\",\n      \"type\": \"integer\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"integer\"\n  },\n  \"structures\": [\n    {\n      \"name\": \"Employee\",\n      \"comment\": \"Employee info\",\n      \"members\": [\n        {\n          \"name\": \"id\",\n          \"type\": \"integer\",\n          \"comment\": \"unique id of this employee\"\n        },\n        {\n          \"name\": \"importance\",\n          \"type\": \"integer\",\n          \"comment\": \"the importance value of this employee\"\n        },\n        {\n          \"name\": \"subordinates\",\n          \"type\": \"list<integer>\",\n          \"comment\": \"the id of direct subordinates\"\n        }\n      ]\n    }\n  ],\n  \"languages\": [\n    \"cpp\",\n    \"java\",\n    \"python\",\n    \"ruby\",\n    \"python3\"\n  ],\n  \"manual\": true\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
