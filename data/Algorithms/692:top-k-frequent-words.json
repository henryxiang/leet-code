{
  "questionId": "692",
  "questionFrontendId": "692",
  "boundTopicId": null,
  "title": "Top K Frequent Words",
  "titleSlug": "top-k-frequent-words",
  "categoryTitle": "Algorithms",
  "content": "<p>Given a non-empty list of words, return the <i>k</i> most frequent elements.</p>\r\n<p>Your answer should be sorted by frequency from highest to lowest. If two words have the same frequency, then the word with the lower alphabetical order comes first.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> [\"i\", \"love\", \"leetcode\", \"i\", \"love\", \"coding\"], k = 2\r\n<b>Output:</b> [\"i\", \"love\"]\r\n<b>Explanation:</b> \"i\" and \"love\" are the two most frequent words.\r\n    Note that \"i\" comes before \"love\" due to a lower alphabetical order.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> [\"the\", \"day\", \"is\", \"sunny\", \"the\", \"the\", \"the\", \"sunny\", \"is\", \"is\"], k = 4\r\n<b>Output:</b> [\"the\", \"is\", \"sunny\", \"day\"]\r\n<b>Explanation:</b> \"the\", \"is\", \"sunny\" and \"day\" are the four most frequent words,\r\n    with the number of occurrence being 4, 3, 2 and 1 respectively.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>You may assume <i>k</i> is always valid, 1 &le; <i>k</i> &le; number of unique elements.</li>\r\n<li>Input words contain only lowercase letters.</li>\r\n</ol>\r\n</p>\r\n\r\n<p><b>Follow up:</b><br />\r\n<ol>\r\n<li>Try to solve it in <i>O</i>(<i>n</i> log <i>k</i>) time and <i>O</i>(<i>n</i>) extra space.</li>\r\n</ol>\r\n</p>",
  "isPaidOnly": false,
  "difficulty": "Medium",
  "likes": 1108,
  "dislikes": 102,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"Top K Frequent Elements\", \"titleSlug\": \"top-k-frequent-elements\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"K Closest Points to Origin\", \"titleSlug\": \"k-closest-points-to-origin\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
  "contributors": [
    {
      "username": "fallcreek",
      "profileUrl": "/fallcreek/",
      "avatarUrl": "https://www.gravatar.com/avatar/043194ec5c4c5d2778049a3fa6d2e1d8.png?s=200"
    }
  ],
  "topicTags": [
    {
      "name": "Hash Table",
      "slug": "hash-table"
    },
    {
      "name": "Heap",
      "slug": "heap"
    },
    {
      "name": "Trie",
      "slug": "trie"
    }
  ],
  "companyTagStats": "{\"1\": [{\"taggedByAdmin\": true, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 21}, {\"taggedByAdmin\": true, \"name\": \"Yelp\", \"slug\": \"yelp\", \"timesEncountered\": 7}, {\"taggedByAdmin\": false, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 6}, {\"taggedByAdmin\": false, \"name\": \"Facebook\", \"slug\": \"facebook\", \"timesEncountered\": 5}, {\"taggedByAdmin\": true, \"name\": \"Bloomberg\", \"slug\": \"bloomberg\", \"timesEncountered\": 3}, {\"taggedByAdmin\": false, \"name\": \"Oracle\", \"slug\": \"oracle\", \"timesEncountered\": 3}, {\"taggedByAdmin\": true, \"name\": \"Uber\", \"slug\": \"uber\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Apple\", \"slug\": \"apple\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Salesforce\", \"slug\": \"salesforce\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"TripAdvisor\", \"slug\": \"tripadvisor\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Atlassian\", \"slug\": \"atlassian\", \"timesEncountered\": 2}], \"2\": [{\"taggedByAdmin\": false, \"name\": \"Microsoft\", \"slug\": \"microsoft\", \"timesEncountered\": 3}, {\"taggedByAdmin\": false, \"name\": \"Expedia\", \"slug\": \"expedia\", \"timesEncountered\": 3}], \"3\": [{\"taggedByAdmin\": false, \"name\": \"LinkedIn\", \"slug\": \"linkedin\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Yahoo\", \"slug\": \"yahoo\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"VMware\", \"slug\": \"vmware\", \"timesEncountered\": 2}, {\"taggedByAdmin\": true, \"name\": \"Pocket Gems\", \"slug\": \"pocket-gems\", \"timesEncountered\": 0}]}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    vector<string> topKFrequent(vector<string>& words, int k) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public List<String> topKFrequent(String[] words, int k) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def topKFrequent(self, words, k):\n        \"\"\"\n        :type words: List[str]\n        :type k: int\n        :rtype: List[str]\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def topKFrequent(self, words: List[str], k: int) -> List[str]:\n        "
    },
    {
      "lang": "C",
      "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar ** topKFrequent(char ** words, int wordsSize, int k, int* returnSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public IList<string> TopKFrequent(string[] words, int k) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {string[]} words\n * @param {number} k\n * @return {string[]}\n */\nvar topKFrequent = function(words, k) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {String[]} words\n# @param {Integer} k\n# @return {String[]}\ndef top_k_frequent(words, k)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func topKFrequent(_ words: [String], _ k: Int) -> [String] {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func topKFrequent(words []string, k int) []string {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def topKFrequent(words: Array[String], k: Int): List[String] = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun topKFrequent(words: Array<String>, k: Int): List<String> {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn top_k_frequent(words: Vec<String>, k: i32) -> Vec<String> {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param String[] $words\n     * @param Integer $k\n     * @return String[]\n     */\n    function topKFrequent($words, $k) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"104.6K\", \"totalSubmission\": \"216.3K\", \"totalAcceptedRaw\": 104608, \"totalSubmissionRaw\": 216347, \"acRate\": \"48.4%\"}",
  "hints": [],
  "solution": {
    "id": "275",
    "canSeeDetail": true,
    "url": "/articles/top-k-frequent-words/",
    "content": "[TOC]\n\n\n#### Approach #1: Sorting [Accepted]\n\n**Intuition and Algorithm**\n\nCount the frequency of each word, and sort the words with a custom ordering relation that uses these frequencies.  Then take the best `k` of them.\n\n**Python**\n```python\nclass Solution(object):\n    def topKFrequent(self, words, k):\n        count = collections.Counter(words)\n        candidates = count.keys()\n        candidates.sort(key = lambda w: (-count[w], w))\n        return candidates[:k]\n```\n\n**Java**\n```java\nclass Solution {\n    public List<String> topKFrequent(String[] words, int k) {\n        Map<String, Integer> count = new HashMap();\n        for (String word: words) {\n            count.put(word, count.getOrDefault(word, 0) + 1);\n        }\n        List<String> candidates = new ArrayList(count.keySet());\n        Collections.sort(candidates, (w1, w2) -> count.get(w1).equals(count.get(w2)) ?\n                w1.compareTo(w2) : count.get(w2) - count.get(w1));\n\n        return candidates.subList(0, k);\n```\n\n**Complexity Analysis**\n\n* Time Complexity: $$O(N \\log{N})$$, where $$N$$ is the length of `words`.  We count the frequency of each word in $$O(N)$$ time, then we sort the given words in $$O(N \\log{N})$$ time.\n\n* Space Complexity: $$O(N)$$, the space used to store our `candidates`.\n\n---\n\n#### Approach #2: Heap [Accepted]\n\n**Intuition and Algorithm**\n\nCount the frequency of each word, then add it to heap that stores the best `k` candidates.  Here, \"best\" is defined with our custom ordering relation, which puts the worst candidates at the top of the heap.  At the end, we pop off the heap up to `k` times and reverse the result so that the best candidates are first.\n\nIn Python, we instead use `heapq.heapify`, which can turn a list into a heap in linear time, simplifying our work.\n\n**Java**\n```java\nclass Solution {\n    public List<String> topKFrequent(String[] words, int k) {\n        Map<String, Integer> count = new HashMap();\n        for (String word: words) {\n            count.put(word, count.getOrDefault(word, 0) + 1);\n        }\n        PriorityQueue<String> heap = new PriorityQueue<String>(\n                (w1, w2) -> count.get(w1).equals(count.get(w2)) ?\n                w2.compareTo(w1) : count.get(w1) - count.get(w2) );\n\n        for (String word: count.keySet()) {\n            heap.offer(word);\n            if (heap.size() > k) heap.poll();\n        }\n\n        List<String> ans = new ArrayList();\n        while (!heap.isEmpty()) ans.add(heap.poll());\n        Collections.reverse(ans);\n        return ans;\n    }\n}\n```\n\n```python\nclass Solution(object):\n    def topKFrequent(self, words, k):\n        count = collections.Counter(words)\n        heap = [(-freq, word) for word, freq in count.items()]\n        heapq.heapify(heap)\n        return [heapq.heappop(heap)[1] for _ in xrange(k)]\n```\n\n**Complexity Analysis**\n\n* Time Complexity: $$O(N \\log{k})$$, where $$N$$ is the length of `words`.  We count the frequency of each word in $$O(N)$$ time, then we add $$N$$ words to the heap, each in $$O(\\log {k})$$ time.  Finally, we pop from the heap up to $$k$$ times.  As $$k \\leq N$$, this is $$O(N \\log{k})$$ in total.\n\n  In Python, we improve this to $$O(N + k \\log {N})$$: our `heapq.heapify` operation and counting operations are $$O(N)$$, and each of $$k$$ `heapq.heappop` operations are $$O(\\log {N})$$.\n\n* Space Complexity: $$O(N)$$, the space used to store our `count`.\n\n---\n\nAnalysis written by: [@awice](https://leetcode.com/awice).",
    "contentTypeId": "107",
    "rating": {
      "id": "270",
      "count": 35,
      "average": 3.686,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "[\"i\", \"love\", \"leetcode\", \"i\", \"love\", \"coding\"]\n2",
  "metaData": "{\r\n  \"name\": \"topKFrequent\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"words\",\r\n      \"type\": \"string[]\"\r\n    },\r\n    {\r\n        \"name\": \"k\",\r\n        \"type\": \"integer\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"list<string>\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
