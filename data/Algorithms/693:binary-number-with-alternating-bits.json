{
  "questionId": "693",
  "questionFrontendId": "693",
  "boundTopicId": null,
  "title": "Binary Number with Alternating Bits",
  "titleSlug": "binary-number-with-alternating-bits",
  "categoryTitle": "Algorithms",
  "content": "<p>Given a positive integer, check whether it has alternating bits: namely, if two adjacent bits will always have different values.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> 5\r\n<b>Output:</b> True\r\n<b>Explanation:</b>\r\nThe binary representation of 5 is: 101\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> 7\r\n<b>Output:</b> False\r\n<b>Explanation:</b>\r\nThe binary representation of 7 is: 111.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 3:</b><br />\r\n<pre>\r\n<b>Input:</b> 11\r\n<b>Output:</b> False\r\n<b>Explanation:</b>\r\nThe binary representation of 11 is: 1011.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 4:</b><br />\r\n<pre>\r\n<b>Input:</b> 10\r\n<b>Output:</b> True\r\n<b>Explanation:</b>\r\nThe binary representation of 10 is: 1010.\r\n</pre>\r\n</p>",
  "isPaidOnly": false,
  "difficulty": "Easy",
  "likes": 347,
  "dislikes": 73,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"Number of 1 Bits\", \"titleSlug\": \"number-of-1-bits\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
  "contributors": [
    {
      "username": "chiragbm",
      "profileUrl": "/chiragbm/",
      "avatarUrl": "https://www.gravatar.com/avatar/eab0bb0a274e5b9e3c3529c135d12676.png?s=200"
    }
  ],
  "topicTags": [
    {
      "name": "Bit Manipulation",
      "slug": "bit-manipulation"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"Yahoo\", \"slug\": \"yahoo\", \"timesEncountered\": 0}], \"1\": [], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    bool hasAlternatingBits(int n) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public boolean hasAlternatingBits(int n) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def hasAlternatingBits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def hasAlternatingBits(self, n: int) -> bool:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nbool hasAlternatingBits(int n){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public bool HasAlternatingBits(int n) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number} n\n * @return {boolean}\n */\nvar hasAlternatingBits = function(n) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer} n\n# @return {Boolean}\ndef has_alternating_bits(n)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func hasAlternatingBits(_ n: Int) -> Bool {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func hasAlternatingBits(n int) bool {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def hasAlternatingBits(n: Int): Boolean = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun hasAlternatingBits(n: Int): Boolean {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn has_alternating_bits(n: i32) -> bool {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Boolean\n     */\n    function hasAlternatingBits($n) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"50.6K\", \"totalSubmission\": \"86.4K\", \"totalAcceptedRaw\": 50643, \"totalSubmissionRaw\": 86369, \"acRate\": \"58.6%\"}",
  "hints": [],
  "solution": {
    "id": "259",
    "canSeeDetail": true,
    "url": "/articles/binary-number-with-alternating-bits/",
    "content": "[TOC]\n\n#### Approach #1: Convert to String [Accepted]\n\n**Intuition and Algorithm**\n\nLet's convert the given number into a string of binary digits.  Then, we should simply check that no two adjacent digits are the same.\n\n<iframe src=\"https://leetcode.com/playground/79o5Wvyy/shared\" frameBorder=\"0\" name=\"79o5Wvyy\" width=\"100%\" height=\"241\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: $$O(1)$$.  For arbitrary inputs, we do $$O(w)$$ work, where $$w$$ is the number of bits in `n`.  However, $$w \\leq 32$$.\n\n* Space complexity: $$O(1)$$, or alternatively $$O(w)$$.\n\n---\n\n#### Approach #2: Divide By Two [Accepted]\n\n**Intuition and Algorithm**\n\nWe can get the last bit and the rest of the bits via `n % 2` and `n // 2` operations.  Let's remember `cur`, the last bit of `n`.  If the last bit ever equals the last bit of the remaining, then two adjacent bits have the same value, and the answer is `False`.  Otherwise, the answer is `True`.\n\nAlso note that instead of `n % 2` and `n // 2`, we could have used operators `n & 1` and `n >>= 1` instead.\n\n<iframe src=\"https://leetcode.com/playground/oFAELrSA/shared\" frameBorder=\"0\" name=\"oFAELrSA\" width=\"100%\" height=\"258\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: $$O(1)$$.  For arbitrary inputs, we do $$O(w)$$ work, where $$w$$ is the number of bits in `n`.  However, $$w \\leq 32$$.\n\n* Space complexity: $$O(1)$$.\n\n---\n\nAnalysis written by: [@awice](https://leetcode.com/awice)",
    "contentTypeId": "107",
    "rating": {
      "id": "252",
      "count": 6,
      "average": 3.833,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "5",
  "metaData": "{\r\n  \"name\": \"hasAlternatingBits\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"n\",\r\n      \"type\": \"integer\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"boolean\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
