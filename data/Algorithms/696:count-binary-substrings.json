{
  "questionId": "696",
  "questionFrontendId": "696",
  "boundTopicId": null,
  "title": "Count Binary Substrings",
  "titleSlug": "count-binary-substrings",
  "categoryTitle": "Algorithms",
  "content": "<p>Give a string <code>s</code>, count the number of non-empty (contiguous) substrings that have the same number of 0's and 1's, and all the 0's and all the 1's in these substrings are grouped consecutively. \r\n</p>\r\n<p>Substrings that occur multiple times are counted the number of times they occur.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> \"00110011\"\r\n<b>Output:</b> 6\r\n<b>Explanation:</b> There are 6 substrings that have equal number of consecutive 1's and 0's: \"0011\", \"01\", \"1100\", \"10\", \"0011\", and \"01\".\r\n<br>Notice that some of these substrings repeat and are counted the number of times they occur.\r\n<br>Also, \"00110011\" is not a valid substring because <b>all</b> the 0's (and 1's) are not grouped together.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> \"10101\"\r\n<b>Output:</b> 4\r\n<b>Explanation:</b> There are 4 substrings: \"10\", \"01\", \"10\", \"01\" that have equal number of consecutive 1's and 0's.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\n<li><code>s.length</code> will be between 1 and 50,000.</li>\r\n<li><code>s</code> will only consist of \"0\" or \"1\" characters.</li>\r\n</p>",
  "isPaidOnly": false,
  "difficulty": "Easy",
  "likes": 759,
  "dislikes": 135,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"Encode and Decode Strings\", \"titleSlug\": \"encode-and-decode-strings\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
  "contributors": [
    {
      "username": "fishercoder",
      "profileUrl": "/fishercoder/",
      "avatarUrl": "https://assets.leetcode.com/users/fishercoder/avatar_1576991018.png"
    }
  ],
  "topicTags": [
    {
      "name": "String",
      "slug": "string"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"Helix\", \"slug\": \"helix\", \"timesEncountered\": 0}], \"1\": [], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    int countBinarySubstrings(string s) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int countBinarySubstrings(String s) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def countBinarySubstrings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def countBinarySubstrings(self, s: str) -> int:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nint countBinarySubstrings(char * s){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public int CountBinarySubstrings(string s) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar countBinarySubstrings = function(s) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {String} s\n# @return {Integer}\ndef count_binary_substrings(s)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func countBinarySubstrings(_ s: String) -> Int {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func countBinarySubstrings(s string) int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def countBinarySubstrings(s: String): Int = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun countBinarySubstrings(s: String): Int {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn count_binary_substrings(s: String) -> i32 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function countBinarySubstrings($s) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"37.8K\", \"totalSubmission\": \"69.1K\", \"totalAcceptedRaw\": 37752, \"totalSubmissionRaw\": 69089, \"acRate\": \"54.6%\"}",
  "hints": [
    "How many valid binary substrings exist in \"000111\", and how many in \"11100\"?  What about \"00011100\"?"
  ],
  "solution": {
    "id": "261",
    "canSeeDetail": true,
    "url": "/articles/count-binary-substrings/",
    "content": "[TOC]\n\n#### Approach #1: Group By Character [Accepted]\n\n**Intuition**\n\nWe can convert the string `s` into an array `groups` that represents the length of same-character contiguous blocks within the string.  For example, if `s = \"110001111000000\"`, then `groups = [2, 3, 4, 6]`.\n\nFor every binary string of the form `'0' * k + '1' * k` or `'1' * k + '0' * k`, the middle of this string must occur between two groups.  \n\nLet's try to count the number of valid binary strings between `groups[i]` and `groups[i+1]`.  If we have `groups[i] = 2, groups[i+1] = 3`, then it represents either `\"00111\"` or `\"11000\"`.  We clearly can make `min(groups[i], groups[i+1])` valid binary strings within this string.  Because the binary digits to the left or right of this string must change at the boundary, our answer can never be larger.\n\n**Algorithm**\n\nLet's create `groups` as defined above.  The first element of `s` belongs in it's own group.  From then on, each element either doesn't match the previous element, so that it starts a new group of size 1; or it does match, so that the size of the most recent group increases by 1.\n\nAfterwards, we will take the sum of `min(groups[i-1], groups[i])`.\n\n**Python**\n```python\nclass Solution(object):\n    def countBinarySubstrings(self, s):\n        groups = [1]\n        for i in xrange(1, len(s)):\n            if s[i-1] != s[i]:\n                groups.append(1)\n            else:\n                groups[-1] += 1\n\n        ans = 0\n        for i in xrange(1, len(groups)):\n            ans += min(groups[i-1], groups[i])\n        return ans\n```\n\n*Alternate Implentation*\n```python\nclass Solution(object):\n    def countBinarySubstrings(self, s):\n        groups = [len(list(v)) for _, v in itertools.groupby(s)]\n        return sum(min(a, b) for a, b in zip(groups, groups[1:]))\n```\n\n**Java**\n```java\nclass Solution {\n    public int countBinarySubstrings(String s) {\n        int[] groups = new int[s.length()];\n        int t = 0;\n        groups[0] = 1;\n        for (int i = 1; i < s.length(); i++) {\n            if (s.charAt(i-1) != s.charAt(i)) {\n                groups[++t] = 1;\n            } else {\n                groups[t]++;\n            }\n        }\n\n        int ans = 0;\n        for (int i = 1; i <= t; i++) {\n            ans += Math.min(groups[i-1], groups[i]);\n        }\n        return ans;\n    }\n}\n```\n\n**Complexity Analysis**\n\n* Time Complexity: $$O(N)$$, where $$N$$ is the length of `s`.  Every loop is through $$O(N)$$ items with $$O(1)$$ work inside the for-block.\n\n* Space Complexity: $$O(N)$$, the space used by `groups`.\n\n---\n#### Approach #2: Linear Scan [Accepted]\n\n**Intuition and Algorithm**\n\nWe can amend our *Approach #1* to calculate the answer on the fly.  Instead of storing `groups`, we will remember only `prev = groups[-2]` and `cur = groups[-1]`.  Then, the answer is the sum of `min(prev, cur)` over each different final `(prev, cur)` we see.\n\n**Python**\n```python\nclass Solution(object):\n    def countBinarySubstrings(self, s):\n        ans, prev, cur = 0, 0, 1\n        for i in xrange(1, len(s)):\n            if s[i-1] != s[i]:\n                ans += min(prev, cur)\n                prev, cur = cur, 1\n            else:\n                cur += 1\n\n        return ans + min(prev, cur)\n```\n\n**Java**\n```java\nclass Solution {\n    public int countBinarySubstrings(String s) {\n        int ans = 0, prev = 0, cur = 1;\n        for (int i = 1; i < s.length(); i++) {\n            if (s.charAt(i-1) != s.charAt(i)) {\n                ans += Math.min(prev, cur);\n                prev = cur;\n                cur = 1;\n            } else {\n                cur++;\n            }\n        }\n        return ans + Math.min(prev, cur);\n    }\n}\n```\n\n**Complexity Analysis**\n\n* Time Complexity: $$O(N)$$, where $$N$$ is the length of `s`.  Every loop is through $$O(N)$$ items with $$O(1)$$ work inside the for-block.\n\n* Space Complexity: $$O(1)$$, the space used by `prev`, `cur`, and `ans`.\n\n---\n\nAnalysis written by: [@awice](https://leetcode.com/awice).",
    "contentTypeId": "107",
    "rating": {
      "id": "256",
      "count": 19,
      "average": 4.579,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "\"00110\"",
  "metaData": "{\r\n  \"name\": \"countBinarySubstrings\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"s\",\r\n      \"type\": \"string\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
