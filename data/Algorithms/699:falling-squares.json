{
  "questionId": "699",
  "questionFrontendId": "699",
  "boundTopicId": null,
  "title": "Falling Squares",
  "titleSlug": "falling-squares",
  "categoryTitle": "Algorithms",
  "content": "<p>On an infinite number line (x-axis), we drop given squares in the order they are given.</p>\r\n\r\n<p>The <code>i</code>-th square dropped (<code>positions[i] = (left, side_length)</code>) is a square with the left-most point being <code>positions[i][0]</code> and sidelength <code>positions[i][1]</code>.</p>\r\n\r\n<p>The square is dropped with the bottom edge parallel to the number line, and from a higher height than all currently landed squares. We wait for each square to stick before dropping the next.</p>\r\n\r\n<p>The squares are infinitely sticky on their bottom edge, and will remain fixed to any positive length surface they touch (either the number line or another square). Squares dropped adjacent to each other will not stick together prematurely.</p>\r\n&nbsp;\r\n\r\n<p>Return a list <code>ans</code> of heights. Each height <code>ans[i]</code> represents the current highest height of any square we have dropped, after dropping squares represented by <code>positions[0], positions[1], ..., positions[i]</code>.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> [[1, 2], [2, 3], [6, 1]]\r\n<b>Output:</b> [2, 5, 5]\r\n<b>Explanation:</b>\r\n</pre>\r\n\r\n<p>After the first drop of <code>positions[0] = [1, 2]: _aa _aa ------- </code>The maximum height of any square is 2.</p>\r\n\r\n<p>After the second drop of <code>positions[1] = [2, 3]: __aaa __aaa __aaa _aa__ _aa__ -------------- </code>The maximum height of any square is 5. The larger square stays on top of the smaller square despite where its center of gravity is, because squares are infinitely sticky on their bottom edge.</p>\r\n\r\n<p>After the third drop of <code>positions[1] = [6, 1]: __aaa __aaa __aaa _aa _aa___a -------------- </code>The maximum height of any square is still 5. Thus, we return an answer of <code>[2, 5, 5]</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n&nbsp;\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> [[100, 100], [200, 100]]\r\n<b>Output:</b> [100, 100]\r\n<b>Explanation:</b> Adjacent squares don&#39;t get stuck prematurely - only their bottom edge can stick to surfaces.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= positions.length &lt;= 1000</code>.</li>\r\n\t<li><code>1 &lt;= positions[i][0] &lt;= 10^8</code>.</li>\r\n\t<li><code>1 &lt;= positions[i][1] &lt;= 10^6</code>.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n",
  "isPaidOnly": false,
  "difficulty": "Hard",
  "likes": 206,
  "dislikes": 43,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"The Skyline Problem\", \"titleSlug\": \"the-skyline-problem\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
  "contributors": [
    {
      "username": "1337c0d3r",
      "profileUrl": "/1337c0d3r/",
      "avatarUrl": "https://assets.leetcode.com/users/1337c0d3r/avatar_1547177258.png"
    }
  ],
  "topicTags": [
    {
      "name": "Segment Tree",
      "slug": "segment-tree"
    },
    {
      "name": "Ordered Map",
      "slug": "ordered-map"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"Uber\", \"slug\": \"uber\", \"timesEncountered\": 0}, {\"taggedByAdmin\": true, \"name\": \"Square\", \"slug\": \"square\", \"timesEncountered\": 0}], \"1\": [], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\r\npublic:\r\n    vector<int> fallingSquares(vector<vector<int>>& positions) {\r\n        \r\n    }\r\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public List<Integer> fallingSquares(int[][] positions) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def fallingSquares(self, positions):\n        \"\"\"\n        :type positions: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def fallingSquares(self, positions: List[List[int]]) -> List[int]:\n        "
    },
    {
      "lang": "C",
      "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* fallingSquares(int** positions, int positionsSize, int* positionsColSize, int* returnSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\r\n    public IList<int> FallingSquares(int[][] positions) {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number[][]} positions\n * @return {number[]}\n */\nvar fallingSquares = function(positions) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer[][]} positions\r\n# @return {Integer[]}\r\ndef falling_squares(positions)\r\n    \r\nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\r\n    func fallingSquares(_ positions: [[Int]]) -> [Int] {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Go",
      "code": "func fallingSquares(positions [][]int) []int {\r\n    \r\n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\r\n    def fallingSquares(positions: Array[Array[Int]]): List[Int] = {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\r\n    fun fallingSquares(positions: Array<IntArray>): List<Int> {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn falling_squares(positions: Vec<Vec<i32>>) -> Vec<i32> {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer[][] $positions\n     * @return Integer[]\n     */\n    function fallingSquares($positions) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"11.1K\", \"totalSubmission\": \"27.1K\", \"totalAcceptedRaw\": 11050, \"totalSubmissionRaw\": 27050, \"acRate\": \"40.9%\"}",
  "hints": [
    "If positions = [[10, 20], [20, 30]], this is the same as [[1, 2], [2, 3]].  Currently, the values of positions are very large.  Can you generalize this approach so as to make the values in positions manageable?"
  ],
  "solution": {
    "id": "264",
    "canSeeDetail": true,
    "url": "/articles/falling-squares/",
    "content": "[TOC]\n\n#### Approach Framework\n\n**Intuition**\n\nIntuitively, there are two operations: `update`, which updates our notion of the board (number line) after dropping a square; and `query`, which finds the largest height in the current board on some interval.  We will work on implementing these operations.\n\n**Coordinate Compression**\n\nIn the below approaches, since there are only up to `2 * len(positions)` critical points, namely the left and right edges of each square, we can use a technique called *coordinate compression* to map these critical points to adjacent integers, as shown in the code snippets below.  \n\nFor brevity, these snippets are omitted from the remaining solutions.\n\n<iframe src=\"https://leetcode.com/playground/fMedPoC3/shared\" frameBorder=\"0\" width=\"100%\" height=\"242\" name=\"fMedPoC3\"></iframe>\n\n---\n#### Approach 1: Offline Propagation\n\n**Intuition**\n\nInstead of asking the question \"what squares affect this query?\", lets ask the question \"what queries are affected by this square?\"\n\n**Algorithm**\n\nLet `qans[i]` be the maximum height of the interval specified by `positions[i]`.  At the end, we'll return a running max of `qans`.\n\nFor each square `positions[i]`, the maximum height will get higher by the size of the square we drop.  Then, for any future squares that intersect the interval `[left, right)` (where `left = positions[i][0], right = positions[i][0] + positions[i][1]`), we'll update the maximum height of that interval.\n\n<iframe src=\"https://leetcode.com/playground/Pb4sS8fW/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"Pb4sS8fW\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: $$O(N^2)$$, where $$N$$ is the length of `positions`.  We use two for-loops, each of complexity $$O(N)$$.\n\n* Space Complexity: $$O(N)$$, the space used by `qans` and `ans`.\n<br>\n<br>\n\n---\n#### Approach 2: Brute Force with Coordinate Compression\n\n**Intuition and Algorithm**\n\nLet `N = len(positions)`.  After mapping the board to a board of length at most $$2* N \\leq 2000$$, we can brute force the answer by simulating each square's drop directly.\n\nOur answer is either the current answer or the height of the square that was just dropped, and we'll update it appropriately.\n\n<iframe src=\"https://leetcode.com/playground/h2KhkM7T/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"h2KhkM7T\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: $$O(N^2)$$, where $$N$$ is the length of `positions`.  We use two for-loops, each of complexity $$O(N)$$ (because of coordinate compression.)\n\n* Space Complexity: $$O(N)$$, the space used by `heights`.\n<br>\n<br>\n\n---\n#### Approach 3: Block (Square Root) Decomposition\n\n**Intuition**\n\nWhenever we perform operations (like `update` and `query`) on some interval in a domain, we could segment that domain with size $$W$$ into blocks of size $$\\sqrt{W}$$.  \n\nThen, instead of a typical brute force where we update our array `heights` representing the board, we will also hold another array `blocks`, where `blocks[i]` represents the $$B = \\lfloor \\sqrt{W} \\rfloor$$ elements `heights[B*i], heights[B*i + 1], ..., heights[B*i + B-1]`.  This allows us to write to the array in $$O(B)$$ operations.\n\n**Algorithm**\n\nLet's get into the details.  We actually need another array, `blocks_read`.  When we update some element `i` in block `b = i / B`, we'll also update `blocks_read[b]`.  If later we want to read the entire block, we can read from here (and stuff written to the whole block in `blocks[b]`.)\n\nWhen we write to a block, we'll write in `blocks[b]`.  Later, when we want to read from an element `i` in block `b = i / B`, we'll read from `heights[i]` and `blocks[b]`.\n\nOur process for managing `query` and `update` will be similar.  While `left` isn't a multiple of `B`, we'll proceed with a brute-force-like approach, and similarly for `right`.  At the end, `[left, right+1)` will represent a series of contiguous blocks: the interval will have length which is a multiple of `B`, and `left` will also be a multiple of `B`.\n\n<iframe src=\"https://leetcode.com/playground/ZY8qrszn/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"ZY8qrszn\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: $$O(N\\sqrt{N})$$, where $$N$$ is the length of `positions`.  Each `query` and `update` has complexity $$O(\\sqrt{N})$$.\n\n* Space Complexity: $$O(N)$$, the space used by `heights`.\n<br>\n<br>\n\n---\n#### Approach 4: Segment Tree with Lazy Propagation\n\n**Intuition**\n\nIf we were familiar with the idea of a segment tree (which supports queries and updates on intervals), we can immediately crack the problem.  \n\n**Algorithm**\n\nSegment trees work by breaking intervals into a disjoint sum of component intervals, whose number is at most `log(width)`.  The motivation is that when we change an element, we only need to change `log(width)` many intervals that aggregate on an interval containing that element.\n\nWhen we want to update an interval all at once, we need to use *lazy propagation* to ensure good run-time complexity.  This topic is covered in more depth [here](https://leetcode.com/articles/a-recursive-approach-to-segment-trees-range-sum-queries-lazy-propagation/).\n\nWith such an implementation in hand, the problem falls out immediately.\n\n<iframe src=\"https://leetcode.com/playground/SHMdZn9d/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"SHMdZn9d\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: $$O(N \\log N)$$, where $$N$$ is the length of `positions`.  This is the run-time complexity of using a segment tree.\n\n* Space Complexity: $$O(N)$$, the space used by our tree.\n<br>\n<br>\n\n---\n\nAnalysis written by: [@awice](https://leetcode.com/awice).",
    "contentTypeId": "107",
    "rating": {
      "id": "257",
      "count": 13,
      "average": 4.615,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "[[1,2],[2,3],[6,1]]",
  "metaData": "{\r\n  \"name\": \"fallingSquares\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"positions\",\r\n      \"type\": \"integer[][]\",\r\n      \"dealloc\": false\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"list<integer>\",\r\n    \"dealloc\": true\r\n  }\r\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
