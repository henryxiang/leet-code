{
  "questionId": "712",
  "questionFrontendId": "712",
  "boundTopicId": null,
  "title": "Minimum ASCII Delete Sum for Two Strings",
  "titleSlug": "minimum-ascii-delete-sum-for-two-strings",
  "categoryTitle": "Algorithms",
  "content": "<p>Given two strings <code>s1, s2</code>, find the lowest ASCII sum of deleted characters to make two strings equal.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> s1 = \"sea\", s2 = \"eat\"\r\n<b>Output:</b> 231\r\n<b>Explanation:</b> Deleting \"s\" from \"sea\" adds the ASCII value of \"s\" (115) to the sum.\r\nDeleting \"t\" from \"eat\" adds 116 to the sum.\r\nAt the end, both strings are equal, and 115 + 116 = 231 is the minimum sum possible to achieve this.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> s1 = \"delete\", s2 = \"leet\"\r\n<b>Output:</b> 403\r\n<b>Explanation:</b> Deleting \"dee\" from \"delete\" to turn the string into \"let\",\r\nadds 100[d]+101[e]+101[e] to the sum.  Deleting \"e\" from \"leet\" adds 101[e] to the sum.\r\nAt the end, both strings are equal to \"let\", and the answer is 100+101+101+101 = 403.\r\nIf instead we turned both strings into \"lee\" or \"eet\", we would get answers of 433 or 417, which are higher.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\n<li><code>0 < s1.length, s2.length <= 1000</code>.</li>\r\n<li>All elements of each string will have an ASCII value in <code>[97, 122]</code>.</li> \r\n</p>",
  "isPaidOnly": false,
  "difficulty": "Medium",
  "likes": 689,
  "dislikes": 41,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"Edit Distance\", \"titleSlug\": \"edit-distance\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Longest Increasing Subsequence\", \"titleSlug\": \"longest-increasing-subsequence\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Delete Operation for Two Strings\", \"titleSlug\": \"delete-operation-for-two-strings\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
  "contributors": [
    {
      "username": "m_deepakraja",
      "profileUrl": "/m_deepakraja/",
      "avatarUrl": "https://www.gravatar.com/avatar/b0015ba376574d645d5661efdb9d45d3.png?s=200"
    }
  ],
  "topicTags": [
    {
      "name": "Dynamic Programming",
      "slug": "dynamic-programming"
    }
  ],
  "companyTagStats": "{\"2\": [{\"taggedByAdmin\": true, \"name\": \"TripleByte\", \"slug\": \"triplebyte\", \"timesEncountered\": 3}], \"1\": [], \"3\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    int minimumDeleteSum(string s1, string s2) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int minimumDeleteSum(String s1, String s2) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def minimumDeleteSum(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def minimumDeleteSum(self, s1: str, s2: str) -> int:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nint minimumDeleteSum(char * s1, char * s2){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public int MinimumDeleteSum(string s1, string s2) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {string} s1\n * @param {string} s2\n * @return {number}\n */\nvar minimumDeleteSum = function(s1, s2) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {String} s1\n# @param {String} s2\n# @return {Integer}\ndef minimum_delete_sum(s1, s2)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func minimumDeleteSum(_ s1: String, _ s2: String) -> Int {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func minimumDeleteSum(s1 string, s2 string) int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def minimumDeleteSum(s1: String, s2: String): Int = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun minimumDeleteSum(s1: String, s2: String): Int {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn minimum_delete_sum(s1: String, s2: String) -> i32 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param String $s1\n     * @param String $s2\n     * @return Integer\n     */\n    function minimumDeleteSum($s1, $s2) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"26.4K\", \"totalSubmission\": \"46.9K\", \"totalAcceptedRaw\": 26432, \"totalSubmissionRaw\": 46895, \"acRate\": \"56.4%\"}",
  "hints": [
    "Let dp(i, j) be the answer for inputs s1[i:] and s2[j:]."
  ],
  "solution": {
    "id": "266",
    "canSeeDetail": true,
    "url": "/articles/minimum-ascii-delete-sum-for-two-strings/",
    "content": "[TOC]\n\n\n#### Approach #1: Dynamic Programming [Accepted]\n\n**Intuition and Algorithm**\n\nLet `dp[i][j]` be the answer to the problem for the strings `s1[i:], s2[j:]`.\n\nWhen one of the input strings is empty, the answer is the ASCII-sum of the other string.  We can calculate this cumulatively using code like `dp[i][s2.length()] = dp[i+1][s2.length()] + s1.codePointAt(i)`.\n\nWhen `s1[i] == s2[j]`, we have `dp[i][j] = dp[i+1][j+1]` as we can ignore these two characters.\n\nWhen `s1[i] != s2[j]`, we will have to delete at least one of them.  We'll have `dp[i][j]` as the minimum of the answers after both deletion options.\n\nThe solutions presented will use *bottom-up* dynamic programming.\n\n**Python**\n```python\nclass Solution(object):\n    def minimumDeleteSum(self, s1, s2):\n        dp = [[0] * (len(s2) + 1) for _ in xrange(len(s1) + 1)]\n\n        for i in xrange(len(s1) - 1, -1, -1):\n            dp[i][len(s2)] = dp[i+1][len(s2)] + ord(s1[i])\n        for j in xrange(len(s2) - 1, -1, -1):\n            dp[len(s1)][j] = dp[len(s1)][j+1] + ord(s2[j])\n\n        for i in xrange(len(s1) - 1, -1, -1):\n            for j in xrange(len(s2) - 1, -1, -1):\n                if s1[i] == s2[j]:\n                    dp[i][j] = dp[i+1][j+1]\n                else:\n                    dp[i][j] = min(dp[i+1][j] + ord(s1[i]),\n                                   dp[i][j+1] + ord(s2[j]))\n\n        return dp[0][0]\n```\n\n**Java**\n```java\nclass Solution {\n    public int minimumDeleteSum(String s1, String s2) {\n        int[][] dp = new int[s1.length() + 1][s2.length() + 1];\n\n        for (int i = s1.length() - 1; i >= 0; i--) {\n            dp[i][s2.length()] = dp[i+1][s2.length()] + s1.codePointAt(i);\n        }\n        for (int j = s2.length() - 1; j >= 0; j--) {\n            dp[s1.length()][j] = dp[s1.length()][j+1] + s2.codePointAt(j);\n        }\n        for (int i = s1.length() - 1; i >= 0; i--) {\n            for (int j = s2.length() - 1; j >= 0; j--) {\n                if (s1.charAt(i) == s2.charAt(j)) {\n                    dp[i][j] = dp[i+1][j+1];\n                } else {\n                    dp[i][j] = Math.min(dp[i+1][j] + s1.codePointAt(i),\n                                        dp[i][j+1] + s2.codePointAt(j));\n                }\n            }\n        }\n        return dp[0][0];\n    }\n}\n```\n\n**Complexity Analysis**\n\n* Time Complexity: $$O(M*N)$$, where $$M, N$$ are the lengths of the given strings.  We use nested for loops: each loop is $$O(M)$$ and $$O(N)$$ respectively.\n\n* Space Complexity: $$O(M*N)$$, the space used by `dp`.\n\n---\n\nAnalysis written by: [@awice](https://leetcode.com/awice).",
    "contentTypeId": "107",
    "rating": {
      "id": "262",
      "count": 23,
      "average": 3.739,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "\"sea\"\n\"eat\"",
  "metaData": "{\r\n  \"name\": \"minimumDeleteSum\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"s1\",\r\n      \"type\": \"string\"\r\n    },\r\n    {\r\n      \"name\": \"s2\",\r\n      \"type\": \"string\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
