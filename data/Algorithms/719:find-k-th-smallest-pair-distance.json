{
  "questionId": "719",
  "questionFrontendId": "719",
  "boundTopicId": null,
  "title": "Find K-th Smallest Pair Distance",
  "titleSlug": "find-k-th-smallest-pair-distance",
  "categoryTitle": "Algorithms",
  "content": "<p>Given an integer array, return the k-th smallest <b>distance</b> among all the pairs. The distance of a pair (A, B) is defined as the absolute difference between A and B. </p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b>\r\nnums = [1,3,1]\r\nk = 1\r\n<b>Output: 0</b> \r\n<b>Explanation:</b>\r\nHere are all the pairs:\r\n(1,3) -> 2\r\n(1,1) -> 0\r\n(3,1) -> 2\r\nThen the 1st smallest distance pair is (1,1), and its distance is 0.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li><code>2 <= len(nums) <= 10000</code>.</li>\r\n<li><code>0 <= nums[i] < 1000000</code>.</li>\r\n<li><code>1 <= k <= len(nums) * (len(nums) - 1) / 2</code>.</li>\r\n</ol>\r\n</p>",
  "isPaidOnly": false,
  "difficulty": "Hard",
  "likes": 686,
  "dislikes": 23,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"Find K Pairs with Smallest Sums\", \"titleSlug\": \"find-k-pairs-with-smallest-sums\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Kth Smallest Element in a Sorted Matrix\", \"titleSlug\": \"kth-smallest-element-in-a-sorted-matrix\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find K Closest Elements\", \"titleSlug\": \"find-k-closest-elements\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Kth Smallest Number in Multiplication Table\", \"titleSlug\": \"kth-smallest-number-in-multiplication-table\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"K-th Smallest Prime Fraction\", \"titleSlug\": \"k-th-smallest-prime-fraction\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
  "contributors": [
    {
      "username": "fallcreek",
      "profileUrl": "/fallcreek/",
      "avatarUrl": "https://www.gravatar.com/avatar/043194ec5c4c5d2778049a3fa6d2e1d8.png?s=200"
    }
  ],
  "topicTags": [
    {
      "name": "Array",
      "slug": "array"
    },
    {
      "name": "Binary Search",
      "slug": "binary-search"
    },
    {
      "name": "Heap",
      "slug": "heap"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 0}], \"1\": [{\"taggedByAdmin\": false, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 2}], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    int smallestDistancePair(vector<int>& nums, int k) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int smallestDistancePair(int[] nums, int k) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def smallestDistancePair(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def smallestDistancePair(self, nums: List[int], k: int) -> int:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nint smallestDistancePair(int* nums, int numsSize, int k){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public int SmallestDistancePair(int[] nums, int k) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar smallestDistancePair = function(nums, k) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef smallest_distance_pair(nums, k)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func smallestDistancePair(_ nums: [Int], _ k: Int) -> Int {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func smallestDistancePair(nums []int, k int) int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def smallestDistancePair(nums: Array[Int], k: Int): Int = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun smallestDistancePair(nums: IntArray, k: Int): Int {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn smallest_distance_pair(nums: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function smallestDistancePair($nums, $k) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"25K\", \"totalSubmission\": \"82.6K\", \"totalAcceptedRaw\": 24992, \"totalSubmissionRaw\": 82592, \"acRate\": \"30.3%\"}",
  "hints": [
    "Binary search for the answer.  How can you check how many pairs have distance <= X?"
  ],
  "solution": {
    "id": "270",
    "canSeeDetail": true,
    "url": "/articles/find-k-th-smallest-pair-distance/",
    "content": "[TOC]\n\n\n#### Approach #1: Heap [Time Limit Exceeded]\n\n**Intuition and Algorithm**\n\nSort the points.  For every point with index `i`, the pairs with indexes `(i, j)` [by order of distance] are `(i, i+1), (i, i+2), ..., (i, N-1)`.\n\nLet's keep a heap of pairs, initially `heap = [(i, i+1) for all i]`, and ordered by distance (the distance of `(i, j)` is `nums[j] - nums[i]`.)  Whenever we use a pair `(i, x)` from our heap, we will add `(i, x+1)` to our heap when appropriate.\n\n<iframe src=\"https://leetcode.com/playground/haWM6KvQ/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"haWM6KvQ\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: $$O((k+N) \\log{N})$$, where $$N$$ is the length of `nums`.  As $$k = O(N^2)$$, this is $$O(N^2 \\log {N})$$ in the worst case.  The complexity added by our heap operations is either $$O((k+N) \\log N)$$ in the Java solution, or $$O(k \\log{N} + N)$$ in the Python solution because the `heapq.heapify` operation is linear time.  Additionally, we add $$O(N \\log N)$$ complexity due to sorting.\n\n* Space Complexity: $$O(N)$$, the space used to store our `heap` of at most `N-1` elements.\n\n---\n\n#### Approach #2: Binary Search + Prefix Sum [Accepted]\n\n**Intuition**\n\nLet's binary search for the answer.  It's definitely in the range `[0, W]`, where `W = max(nums) - min(nums)]`.  \n\nLet `possible(guess)` be true if and only if there are `k` or more pairs with distance less than or equal to `guess`.  We will focus on evaluating our `possible` function quickly.\n\n**Algorithm**\n\nLet `prefix[v]` be the number of points in `nums` less than or equal to `v`.  Also, let `multiplicity[j]` be the number of points `i` with `i < j and nums[i] == nums[j]`.  We can record both of these with a simple linear scan.\n\nNow, for every point `i`, the number of points `j` with `i < j` and `nums[j] - nums[i] <= guess` is `prefix[x+guess] - prefix[x] + (count[i] - multiplicity[i])`, where `count[i]` is the number of ocurrences of `nums[i]` in `nums`.  The sum of this over all `i` is the number of pairs with distance `<= guess`.  \n\nFinally, because the sum of `count[i] - multiplicity[i]` is the same as the sum of `multiplicity[i]`, we could just replace that term with `multiplicity[i]` without affecting the answer.  (Actually, the sum of multiplicities in total will be a constant used in the answer, so we could precalculate it if we wanted.)\n\nIn our Java solution, we computed `possible = count >= k` directly in the binary search instead of using a helper function.\n\n<iframe src=\"https://leetcode.com/playground/upbfbVHa/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"upbfbVHa\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: $$O(W + N \\log{W} + N \\log{N})$$, where $$N$$ is the length of `nums`, and $$W$$ is equal to `nums[nums.length - 1] - nums[0]`.  We do $$O(W)$$ work to calculate `prefix` initially.  The $$\\log W$$ factor comes from our binary search, and we do $$O(N)$$ work inside our call to `possible` (or to calculate `count` in Java).  The final $$O(N\\log N)$$ factor comes from sorting.\n\n* Space Complexity: $$O(N+W)$$, the space used to store `multiplicity` and `prefix`.\n\n---\n\n#### Approach #3: Binary Search + Sliding Window [Accepted]\n\n**Intuition**\n\nAs in *Approach #2*, let's binary search for the answer, and we will focus on evaluating our `possible` function quickly.\n\n**Algorithm**\n\nWe will use a sliding window approach to count the number of pairs with distance `<=` guess.  \n\nFor every possible `right`, we maintain the loop invariant: `left` is the smallest value such that `nums[right] - nums[left] <= guess`.  Then, the number of pairs with `right` as it's right-most endpoint is `right - left`, and we add all of these up.\n\n<iframe src=\"https://leetcode.com/playground/UD6QK4gU/shared\" frameBorder=\"0\" width=\"100%\" height=\"429\" name=\"UD6QK4gU\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: $$O(N \\log{W} + N \\log{N})$$, where $$N$$ is the length of `nums`, and $$W$$ is equal to `nums[nums.length - 1] - nums[0]`.  The $$\\log W$$ factor comes from our binary search, and we do $$O(N)$$ work inside our call to `possible` (or to calculate `count` in Java).  The final $$O(N\\log N)$$ factor comes from sorting.\n\n* Space Complexity: $$O(1)$$.  No additional space is used except for integer variables.\n\n---\n\nAnalysis written by: [@awice](https://leetcode.com/awice).",
    "contentTypeId": "107",
    "rating": {
      "id": "266",
      "count": 45,
      "average": 3.089,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "[1,3,1]\n1",
  "metaData": "{\r\n  \"name\": \"smallestDistancePair\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"nums\",\r\n      \"type\": \"integer[]\"\r\n    },\r\n    {\r\n      \"name\": \"k\",\r\n      \"type\": \"integer\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
