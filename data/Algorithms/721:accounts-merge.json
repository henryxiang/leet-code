{
  "questionId": "721",
  "questionFrontendId": "721",
  "boundTopicId": null,
  "title": "Accounts Merge",
  "titleSlug": "accounts-merge",
  "categoryTitle": "Algorithms",
  "content": "<p>Given a list <code>accounts</code>, each element <code>accounts[i]</code> is a list of strings, where the first element <code>accounts[i][0]</code> is a <i>name</i>, and the rest of the elements are <i>emails</i> representing emails of the account.</p>\r\n\r\n<p>Now, we would like to merge these accounts.  Two accounts definitely belong to the same person if there is some email that is common to both accounts.  Note that even if two accounts have the same name, they may belong to different people as people could have the same name.  A person can have any number of accounts initially, but all of their accounts definitely have the same name.</p>\r\n\r\n<p>After merging the accounts, return the accounts in the following format: the first element of each account is the name, and the rest of the elements are emails <b>in sorted order</b>.  The accounts themselves can be returned in any order.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre style=\"white-space: pre-wrap\">\r\n<b>Input:</b> \r\naccounts = [[\"John\", \"johnsmith@mail.com\", \"john00@mail.com\"], [\"John\", \"johnnybravo@mail.com\"], [\"John\", \"johnsmith@mail.com\", \"john_newyork@mail.com\"], [\"Mary\", \"mary@mail.com\"]]\r\n<b>Output:</b> [[\"John\", 'john00@mail.com', 'john_newyork@mail.com', 'johnsmith@mail.com'],  [\"John\", \"johnnybravo@mail.com\"], [\"Mary\", \"mary@mail.com\"]]\r\n<b>Explanation:</b> \r\nThe first and third John's are the same person as they have the common email \"johnsmith@mail.com\".\r\nThe second John and Mary are different people as none of their email addresses are used by other accounts.\r\nWe could return these lists in any order, for example the answer [['Mary', 'mary@mail.com'], ['John', 'johnnybravo@mail.com'], \r\n['John', 'john00@mail.com', 'john_newyork@mail.com', 'johnsmith@mail.com']] would still be accepted.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\n<li>The length of <code>accounts</code> will be in the range <code>[1, 1000]</code>.</li>\r\n<li>The length of <code>accounts[i]</code> will be in the range <code>[1, 10]</code>.</li>\r\n<li>The length of <code>accounts[i][j]</code> will be in the range <code>[1, 30]</code>.</li>\r\n</p>",
  "isPaidOnly": false,
  "difficulty": "Medium",
  "likes": 905,
  "dislikes": 233,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"Redundant Connection\", \"titleSlug\": \"redundant-connection\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Sentence Similarity\", \"titleSlug\": \"sentence-similarity\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Sentence Similarity II\", \"titleSlug\": \"sentence-similarity-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
  "contributors": [
    {
      "username": "awice",
      "profileUrl": "/awice/",
      "avatarUrl": "https://assets.leetcode.com/users/awice/avatar_1576905115.png"
    }
  ],
  "topicTags": [
    {
      "name": "Depth-first Search",
      "slug": "depth-first-search"
    },
    {
      "name": "Union Find",
      "slug": "union-find"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": false, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 3}, {\"taggedByAdmin\": false, \"name\": \"Bloomberg\", \"slug\": \"bloomberg\", \"timesEncountered\": 2}], \"1\": [{\"taggedByAdmin\": true, \"name\": \"Facebook\", \"slug\": \"facebook\", \"timesEncountered\": 9}, {\"taggedByAdmin\": false, \"name\": \"Houzz\", \"slug\": \"houzz\", \"timesEncountered\": 3}, {\"taggedByAdmin\": false, \"name\": \"LinkedIn\", \"slug\": \"linkedin\", \"timesEncountered\": 3}, {\"taggedByAdmin\": false, \"name\": \"Microsoft\", \"slug\": \"microsoft\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 2}], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    vector<vector<string>> accountsMerge(vector<vector<string>>& accounts) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public List<List<String>> accountsMerge(List<List<String>> accounts) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def accountsMerge(self, accounts):\n        \"\"\"\n        :type accounts: List[List[str]]\n        :rtype: List[List[str]]\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def accountsMerge(self, accounts: List[List[str]]) -> List[List[str]]:\n        "
    },
    {
      "lang": "C",
      "code": "\n\n/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nchar *** accountsMerge(char *** accounts, int accountsSize, int* accountsColSize, int* returnSize, int** returnColumnSizes){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public IList<IList<string>> AccountsMerge(IList<IList<string>> accounts) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {string[][]} accounts\n * @return {string[][]}\n */\nvar accountsMerge = function(accounts) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {String[][]} accounts\n# @return {String[][]}\ndef accounts_merge(accounts)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func accountsMerge(_ accounts: [[String]]) -> [[String]] {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func accountsMerge(accounts [][]string) [][]string {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def accountsMerge(accounts: List[List[String]]): List[List[String]] = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun accountsMerge(accounts: List<List<String>>): List<List<String>> {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn accounts_merge(accounts: Vec<Vec<String>>) -> Vec<Vec<String>> {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param String[][] $accounts\n     * @return String[][]\n     */\n    function accountsMerge($accounts) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"53.3K\", \"totalSubmission\": \"119.8K\", \"totalAcceptedRaw\": 53283, \"totalSubmissionRaw\": 119807, \"acRate\": \"44.5%\"}",
  "hints": [
    "For every pair of emails in the same account, draw an edge between those emails.  The problem is about enumerating the connected components of this graph."
  ],
  "solution": {
    "id": "286",
    "canSeeDetail": true,
    "url": "/articles/accounts-merge/",
    "content": "[TOC]\n\n\n#### Approach #1: Depth-First Search [Accepted]\n\n**Intuition**\n\nDraw an edge between two emails if they occur in the same account.  The problem comes down to finding connected components of this graph.\n\n**Algorithm**\n\nFor each account, draw the edge from the first email to all other emails.  Additionally, we'll remember a map from emails to names on the side.  After finding each connected component using a depth-first search, we'll add that to our answer.\n\n**Python**\n```python\nclass Solution(object):\n    def accountsMerge(self, accounts):\n        em_to_name = {}\n        graph = collections.defaultdict(set)\n        for acc in accounts:\n            name = acc[0]\n            for email in acc[1:]:\n                graph[acc[1]].add(email)\n                graph[email].add(acc[1])\n                em_to_name[email] = name\n\n        seen = set()\n        ans = []\n        for email in graph:\n            if email not in seen:\n                seen.add(email)\n                stack = [email]\n                component = []\n                while stack:\n                    node = stack.pop()\n                    component.append(node)\n                    for nei in graph[node]:\n                        if nei not in seen:\n                            seen.add(nei)\n                            stack.append(nei)\n                ans.append([em_to_name[email]] + sorted(component))\n        return ans\n```\n\n**Java**\n```java\nclass Solution {\n    public List<List<String>> accountsMerge(List<List<String>> accounts) {\n        Map<String, String> emailToName = new HashMap();\n        Map<String, ArrayList<String>> graph = new HashMap();\n        for (List<String> account: accounts) {\n            String name = \"\";\n            for (String email: account) {\n                if (name == \"\") {\n                    name = email;\n                    continue;\n                }\n                graph.computeIfAbsent(email, x-> new ArrayList<String>()).add(account.get(1));\n                graph.computeIfAbsent(account.get(1), x-> new ArrayList<String>()).add(email);\n                emailToName.put(email, name);\n            }\n        }\n\n        Set<String> seen = new HashSet();\n        List<List<String>> ans = new ArrayList();\n        for (String email: graph.keySet()) {\n            if (!seen.contains(email)) {\n                seen.add(email);\n                Stack<String> stack = new Stack();\n                stack.push(email);\n                List<String> component = new ArrayList();\n                while (!stack.empty()) {\n                    String node = stack.pop();\n                    component.add(node);\n                    for (String nei: graph.get(node)) {\n                        if (!seen.contains(nei)) {\n                            seen.add(nei);\n                            stack.push(nei);\n                        }\n                    }\n                }\n                Collections.sort(component);\n                component.add(0, emailToName.get(email));\n                ans.add(component);\n            }\n        }\n        return ans;\n    }\n}\n```\n\n**Complexity Analysis**\n\n* Time Complexity: $$O(\\sum a_i \\log a_i)$$, where $$a_i$$ is the length of `accounts[i]`.  Without the log factor, this is the complexity to build the graph and search for each component.  The log factor is for sorting each component at the end.\n\n* Space Complexity: $$O(\\sum a_i)$$, the space used by our graph and our search.\n\n---\n#### Approach #2: Union-Find [Accepted]\n\n**Intuition**\n\nAs in *Approach #1*, our problem comes down to finding the connected components of a graph.  This is a natural fit for a *Disjoint Set Union* (DSU) structure.\n\n**Algorithm**\n\nAs in *Approach #1*, draw edges between emails if they occur in the same account.  For easier interoperability between our DSU template, we will map each email to some integer index by using `emailToID`.  Then, `dsu.find(email)` will tell us a unique id representing what component that email is in.\n\nFor more information on DSU, please look at *Approach #2* in the [article here](https://leetcode.com/articles/redundant-connection/).  For brevity, the solutions showcased below do not use *union-by-rank*.\n\n**Python**\n```python\nclass DSU:\n    def __init__(self):\n        self.p = range(10001)\n    def find(self, x):\n        if self.p[x] != x:\n            self.p[x] = self.find(self.p[x])\n        return self.p[x]\n    def union(self, x, y):\n        self.p[self.find(x)] = self.find(y)\n\nclass Solution(object):\n    def accountsMerge(self, accounts):\n        dsu = DSU()\n        em_to_name = {}\n        em_to_id = {}\n        i = 0\n        for acc in accounts:\n            name = acc[0]\n            for email in acc[1:]:\n                em_to_name[email] = name\n                if email not in em_to_id:\n                    em_to_id[email] = i\n                    i += 1\n                dsu.union(em_to_id[acc[1]], em_to_id[email])\n\n        ans = collections.defaultdict(list)\n        for email in em_to_name:\n            ans[dsu.find(em_to_id[email])].append(email)\n\n        return [[em_to_name[v[0]]] + sorted(v) for v in ans.values()]\n```\n\n**Java**\n```java\nclass Solution {\n    public List<List<String>> accountsMerge(List<List<String>> accounts) {\n        DSU dsu = new DSU();\n        Map<String, String> emailToName = new HashMap();\n        Map<String, Integer> emailToID = new HashMap();\n        int id = 0;\n        for (List<String> account: accounts) {\n            String name = \"\";\n            for (String email: account) {\n                if (name == \"\") {\n                    name = email;\n                    continue;\n                }\n                emailToName.put(email, name);\n                if (!emailToID.containsKey(email)) {\n                    emailToID.put(email, id++);\n                }\n                dsu.union(emailToID.get(account.get(1)), emailToID.get(email));\n            }\n        }\n\n        Map<Integer, List<String>> ans = new HashMap();\n        for (String email: emailToName.keySet()) {\n            int index = dsu.find(emailToID.get(email));\n            ans.computeIfAbsent(index, x-> new ArrayList()).add(email);\n        }\n        for (List<String> component: ans.values()) {\n            Collections.sort(component);\n            component.add(0, emailToName.get(component.get(0)));\n        }\n        return new ArrayList(ans.values());\n    }\n}\nclass DSU {\n    int[] parent;\n    public DSU() {\n        parent = new int[10001];\n        for (int i = 0; i <= 10000; ++i)\n            parent[i] = i;\n    }\n    public int find(int x) {\n        if (parent[x] != x) parent[x] = find(parent[x]);\n        return parent[x];\n    }\n    public void union(int x, int y) {\n        parent[find(x)] = find(y);\n    }\n}\n```\n\n**Complexity Analysis**\n\n* Time Complexity: $$O(A \\log A)$$, where $$A = \\sum a_i$$, and $$a_i$$ is the length of `accounts[i]`.  If we used union-by-rank, this complexity improves to $$O(A \\alpha(A)) \\approx O(A)$$, where $$\\alpha$$ is the *Inverse-Ackermann* function.\n\n* Space Complexity: $$O(A)$$, the space used by our DSU structure.\n\n---\n\nAnalysis written by: [@awice](https://leetcode.com/awice).",
    "contentTypeId": "107",
    "rating": {
      "id": "278",
      "count": 29,
      "average": 4.241,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "[[\"John\",\"johnsmith@mail.com\",\"john_newyork@mail.com\"],[\"John\",\"johnsmith@mail.com\",\"john00@mail.com\"],[\"Mary\",\"mary@mail.com\"],[\"John\",\"johnnybravo@mail.com\"]]",
  "metaData": "{\r\n  \"name\": \"accountsMerge\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"accounts\",\r\n      \"type\": \"list<list<string>>\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"list<list<string>>\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
