{
  "questionId": "724",
  "questionFrontendId": "724",
  "boundTopicId": null,
  "title": "Find Pivot Index",
  "titleSlug": "find-pivot-index",
  "categoryTitle": "Algorithms",
  "content": "<p>Given an array of integers <code>nums</code>, write a method that returns the &quot;pivot&quot; index of this array.</p>\r\n\r\n<p>We define the pivot index as the index where the sum of the numbers to the left of the index is equal to the sum of the numbers to the right of the index.</p>\r\n\r\n<p>If no such index exists, we should return -1. If there are multiple pivot indexes, you should return the left-most pivot index.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> \r\nnums = [1, 7, 3, 6, 5, 6]\r\n<b>Output:</b> 3\r\n<b>Explanation:</b> \r\nThe sum of the numbers to the left of index 3 (nums[3] = 6) is equal to the sum of numbers to the right of index 3.\r\nAlso, 3 is the first index where this occurs.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> \r\nnums = [1, 2, 3]\r\n<b>Output:</b> -1\r\n<b>Explanation:</b> \r\nThere is no index that satisfies the conditions in the problem statement.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ul>\r\n\t<li>The length of <code>nums</code> will be in the range <code>[0, 10000]</code>.</li>\r\n\t<li>Each element <code>nums[i]</code> will be an integer in the range <code>[-1000, 1000]</code>.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n",
  "isPaidOnly": false,
  "difficulty": "Easy",
  "likes": 802,
  "dislikes": 183,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"Subarray Sum Equals K\", \"titleSlug\": \"subarray-sum-equals-k\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
  "contributors": [
    {
      "username": "fishercoder",
      "profileUrl": "/fishercoder/",
      "avatarUrl": "https://assets.leetcode.com/users/fishercoder/avatar_1576991018.png"
    }
  ],
  "topicTags": [
    {
      "name": "Array",
      "slug": "array"
    }
  ],
  "companyTagStats": "{\"1\": [{\"taggedByAdmin\": false, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Facebook\", \"slug\": \"facebook\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"GoDaddy\", \"slug\": \"godaddy\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Goldman Sachs\", \"slug\": \"goldman-sachs\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Salesforce\", \"slug\": \"salesforce\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Expedia\", \"slug\": \"expedia\", \"timesEncountered\": 2}], \"2\": [{\"taggedByAdmin\": false, \"name\": \"Apple\", \"slug\": \"apple\", \"timesEncountered\": 5}, {\"taggedByAdmin\": false, \"name\": \"Microsoft\", \"slug\": \"microsoft\", \"timesEncountered\": 4}, {\"taggedByAdmin\": false, \"name\": \"Tesla\", \"slug\": \"tesla\", \"timesEncountered\": 2}], \"3\": [{\"taggedByAdmin\": false, \"name\": \"Baidu\", \"slug\": \"baidu\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Indeed\", \"slug\": \"indeed\", \"timesEncountered\": 2}, {\"taggedByAdmin\": true, \"name\": \"Radius\", \"slug\": \"radius\", \"timesEncountered\": 0}, {\"taggedByAdmin\": true, \"name\": \"Coupang\", \"slug\": \"coupang\", \"timesEncountered\": 0}]}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int pivotIndex(int[] nums) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def pivotIndex(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def pivotIndex(self, nums: List[int]) -> int:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nint pivotIndex(int* nums, int numsSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public int PivotIndex(int[] nums) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar pivotIndex = function(nums) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef pivot_index(nums)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func pivotIndex(_ nums: [Int]) -> Int {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func pivotIndex(nums []int) int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def pivotIndex(nums: Array[Int]): Int = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun pivotIndex(nums: IntArray): Int {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn pivot_index(nums: Vec<i32>) -> i32 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function pivotIndex($nums) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"98K\", \"totalSubmission\": \"231.2K\", \"totalAcceptedRaw\": 98024, \"totalSubmissionRaw\": 231208, \"acRate\": \"42.4%\"}",
  "hints": [
    "We can precompute prefix sums P[i] = nums[0] + nums[1] + ... + nums[i-1].\r\nThen for each index, the left sum is P[i], and the right sum is P[P.length - 1] - P[i] - nums[i]."
  ],
  "solution": {
    "id": "291",
    "canSeeDetail": true,
    "url": "/articles/find-pivot-index/",
    "content": "[TOC]\n\n#### Approach #1: Prefix Sum [Accepted]\n\n**Intuition and Algorithm**\n\nWe need to quickly compute the sum of values to the left and the right of every index.\n\nLet's say we knew `S` as the sum of the numbers, and we are at index `i`.  If we knew the sum of numbers `leftsum` that are to the left of index `i`, then the other sum to the right of the index would just be `S - nums[i] - leftsum`.  \n\nAs such, we only need to know about `leftsum` to check whether an index is a pivot index in constant time.  Let's do that: as we iterate through candidate indexes `i`, we will maintain the correct value of `leftsum`.\n\n<iframe src=\"https://leetcode.com/playground/332EfbBV/shared\" frameBorder=\"0\" width=\"100%\" height=\"242\" name=\"332EfbBV\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: $$O(N)$$, where $$N$$ is the length of `nums`.\n\n* Space Complexity: $$O(1)$$, the space used by `leftsum` and `S`.\n\n---\n\nAnalysis written by: [@awice](https://leetcode.com/awice).",
    "contentTypeId": "107",
    "rating": {
      "id": "286",
      "count": 37,
      "average": 4.622,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "[1,7,3,6,5,6]",
  "metaData": "{\r\n  \"name\": \"pivotIndex\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"nums\",\r\n      \"type\": \"integer[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
