{
  "questionId": "725",
  "questionFrontendId": "725",
  "boundTopicId": null,
  "title": "Split Linked List in Parts",
  "titleSlug": "split-linked-list-in-parts",
  "categoryTitle": "Algorithms",
  "content": "<p>Given a (singly) linked list with head node <code>root</code>, write a function to split the linked list into <code>k</code> consecutive linked list \"parts\".\r\n</p><p>\r\nThe length of each part should be as equal as possible: no two parts should have a size differing by more than 1.  This may lead to some parts being null.\r\n</p><p>\r\nThe parts should be in order of occurrence in the input list, and parts occurring earlier should always have a size greater than or equal parts occurring later.\r\n</p><p>\r\nReturn a List of ListNode's representing the linked list parts that are formed.\r\n</p>\r\n\r\nExamples\r\n1->2->3->4, k = 5 // 5 equal parts\r\n[ [1], \r\n[2],\r\n[3],\r\n[4],\r\nnull ]\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre style=\"white-space: pre-line\">\r\n<b>Input:</b> \r\nroot = [1, 2, 3], k = 5\r\n<b>Output:</b> [[1],[2],[3],[],[]]\r\n<b>Explanation:</b>\r\nThe input and each element of the output are ListNodes, not arrays.\r\nFor example, the input root has root.val = 1, root.next.val = 2, \\root.next.next.val = 3, and root.next.next.next = null.\r\nThe first element output[0] has output[0].val = 1, output[0].next = null.\r\nThe last element output[4] is null, but it's string representation as a ListNode is [].\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> \r\nroot = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3\r\n<b>Output:</b> [[1, 2, 3, 4], [5, 6, 7], [8, 9, 10]]\r\n<b>Explanation:</b>\r\nThe input has been split into consecutive parts with size difference at most 1, and earlier parts are a larger size than the later parts.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\n<li>The length of <code>root</code> will be in the range <code>[0, 1000]</code>.</li>\r\n<li>Each value of a node in the input will be an integer in the range <code>[0, 999]</code>.</li>\r\n<li><code>k</code> will be an integer in the range <code>[1, 50]</code>.</li>\r\n</p>",
  "isPaidOnly": false,
  "difficulty": "Medium",
  "likes": 454,
  "dislikes": 92,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"Rotate List\", \"titleSlug\": \"rotate-list\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Odd Even Linked List\", \"titleSlug\": \"odd-even-linked-list\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
  "contributors": [
    {
      "username": "swetjh",
      "profileUrl": "/swetjh/",
      "avatarUrl": "https://assets.leetcode.com/users/swetjh/avatar_1548658754.png"
    }
  ],
  "topicTags": [
    {
      "name": "Linked List",
      "slug": "linked-list"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": false, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 2}, {\"taggedByAdmin\": true, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 0}], \"1\": [], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    vector<ListNode*> splitListToParts(ListNode* root, int k) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode[] splitListToParts(ListNode root, int k) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def splitListToParts(self, root, k):\n        \"\"\"\n        :type root: ListNode\n        :type k: int\n        :rtype: List[ListNode]\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def splitListToParts(self, root: ListNode, k: int) -> List[ListNode]:\n        "
    },
    {
      "lang": "C",
      "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\n\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nstruct ListNode** splitListToParts(struct ListNode* root, int k, int* returnSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public ListNode[] SplitListToParts(ListNode root, int k) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} root\n * @param {number} k\n * @return {ListNode[]}\n */\nvar splitListToParts = function(root, k) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val)\n#         @val = val\n#         @next = nil\n#     end\n# end\n\n# @param {ListNode} root\n# @param {Integer} k\n# @return {ListNode[]}\ndef split_list_to_parts(root, k)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.next = nil\n *     }\n * }\n */\nclass Solution {\n    func splitListToParts(_ root: ListNode?, _ k: Int) -> [ListNode?] {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc splitListToParts(root *ListNode, k int) []*ListNode {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "/**\n * Definition for singly-linked list.\n * class ListNode(var _x: Int = 0) {\n *   var next: ListNode = null\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def splitListToParts(root: ListNode, k: Int): Array[ListNode] = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution {\n    fun splitListToParts(root: ListNode?, k: Int): Array<ListNode?> {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n// \n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nimpl Solution {\n    pub fn split_list_to_parts(root: Option<Box<ListNode>>, k: i32) -> Vec<Option<Box<ListNode>>> {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val) { $this->val = $val; }\n * }\n */\nclass Solution {\n\n    /**\n     * @param ListNode $root\n     * @param Integer $k\n     * @return ListNode[]\n     */\n    function splitListToParts($root, $k) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"35.8K\", \"totalSubmission\": \"71.1K\", \"totalAcceptedRaw\": 35782, \"totalSubmissionRaw\": 71081, \"acRate\": \"50.3%\"}",
  "hints": [
    "If there are N nodes in the list, and k parts, then every part has N/k elements, except the first N%k parts have an extra one."
  ],
  "solution": {
    "id": "292",
    "canSeeDetail": true,
    "url": "/articles/split-linked-list-in-parts/",
    "content": "[TOC]\n\n#### Approach #1: Create New Lists [Accepted]\n\n**Intuition and Algorithm**\n\nIf there are $$N$$ nodes in the linked list `root`, then there are $$N / k$$ items in each part, plus the first $$N \\% k$$ parts have an extra item.  We can count $$N$$ with a simple loop.\n\nNow for each part, we have calculated how many nodes that part will have: `width + (i < remainder ? 1 : 0)`.  We create a new list and write the part to that list.\n\nOur solution showcases constructs of the form `a = b = c`.  Note that this syntax behaves differently for different languages.\n\n<iframe src=\"https://leetcode.com/playground/mPv7qf7R/shared\" frameBorder=\"0\" width=\"100%\" height=\"463\" name=\"mPv7qf7R\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: $$O(N + k)$$, where $$N$$ is the number of nodes in the given list.  If $$k$$ is large, it could still require creating many new empty lists.\n\n* Space Complexity: $$O(max(N, k))$$, the space used in writing the answer.\n\n---\n#### Approach #2: Split Input List [Accepted]\n\n**Intuition and Algorithm**\n\nAs in *Approach #1*, we know the size of each part.  Instead of creating new lists, we will split the input list directly and return a list of pointers to nodes in the original list as appropriate.\n\nOur solution proceeds similarly.  For a part of size `L = width + (i < remainder ? 1 : 0)`, instead of stepping `L` times, we will step `L-1` times, and our final time will also sever the link between the last node from the previous part and the first node from the next part.\n\n<iframe src=\"https://leetcode.com/playground/RmD7xooU/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"RmD7xooU\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: $$O(N + k)$$, where $$N$$ is the number of nodes in the given list.  If $$k$$ is large, it could still require creating many new empty lists.\n\n* Space Complexity: $$O(k)$$, the additional space used in writing the answer.\n\n---\n\nAnalysis written by: [@awice](https://leetcode.com/awice).",
    "contentTypeId": "107",
    "rating": {
      "id": "287",
      "count": 15,
      "average": 4.133,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "[1,2,3,4]\n5",
  "metaData": "{\r\n  \"name\": \"splitListToParts\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"root\",\r\n      \"type\": \"ListNode\"\r\n    },\r\n    {\r\n      \"name\": \"k\",\r\n      \"type\": \"integer\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"ListNode[]\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
