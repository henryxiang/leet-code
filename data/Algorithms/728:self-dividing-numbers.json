{
  "questionId": "728",
  "questionFrontendId": "728",
  "boundTopicId": null,
  "title": "Self Dividing Numbers",
  "titleSlug": "self-dividing-numbers",
  "categoryTitle": "Algorithms",
  "content": "<p>\r\nA <i>self-dividing number</i> is a number that is divisible by every digit it contains.\r\n</p><p>\r\nFor example, 128 is a self-dividing number because <code>128 % 1 == 0</code>, <code>128 % 2 == 0</code>, and <code>128 % 8 == 0</code>.\r\n</p><p>\r\nAlso, a self-dividing number is not allowed to contain the digit zero.\r\n</p><p>\r\nGiven a lower and upper number bound, output a list of every possible self dividing number, including the bounds if possible.\r\n</p>\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> \r\nleft = 1, right = 22\r\n<b>Output:</b> [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\n<li>The boundaries of each input argument are <code>1 <= left <= right <= 10000</code>.</li>\r\n</p>",
  "isPaidOnly": false,
  "difficulty": "Easy",
  "likes": 511,
  "dislikes": 268,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"Perfect Number\", \"titleSlug\": \"perfect-number\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
  "contributors": [
    {
      "username": "jkl0619",
      "profileUrl": "/jkl0619/",
      "avatarUrl": "https://www.gravatar.com/avatar/45ab5dc9312768075c35051e4c8794af.png?s=200"
    }
  ],
  "topicTags": [
    {
      "name": "Math",
      "slug": "math"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"Epic Systems\", \"slug\": \"epic-systems\", \"timesEncountered\": 0}], \"1\": [{\"taggedByAdmin\": false, \"name\": \"Adobe\", \"slug\": \"adobe\", \"timesEncountered\": 3}], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    vector<int> selfDividingNumbers(int left, int right) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public List<Integer> selfDividingNumbers(int left, int right) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def selfDividingNumbers(self, left, right):\n        \"\"\"\n        :type left: int\n        :type right: int\n        :rtype: List[int]\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def selfDividingNumbers(self, left: int, right: int) -> List[int]:\n        "
    },
    {
      "lang": "C",
      "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* selfDividingNumbers(int left, int right, int* returnSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public IList<int> SelfDividingNumbers(int left, int right) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number} left\n * @param {number} right\n * @return {number[]}\n */\nvar selfDividingNumbers = function(left, right) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer} left\n# @param {Integer} right\n# @return {Integer[]}\ndef self_dividing_numbers(left, right)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func selfDividingNumbers(_ left: Int, _ right: Int) -> [Int] {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func selfDividingNumbers(left int, right int) []int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def selfDividingNumbers(left: Int, right: Int): List[Int] = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun selfDividingNumbers(left: Int, right: Int): List<Int> {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn self_dividing_numbers(left: i32, right: i32) -> Vec<i32> {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer $left\n     * @param Integer $right\n     * @return Integer[]\n     */\n    function selfDividingNumbers($left, $right) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"104.2K\", \"totalSubmission\": \"143.9K\", \"totalAcceptedRaw\": 104159, \"totalSubmissionRaw\": 143929, \"acRate\": \"72.4%\"}",
  "hints": [
    "For each number in the range, check whether it is self dividing by converting that number to a character array (or string in Python), then checking that each digit is nonzero and divides the original number."
  ],
  "solution": {
    "id": "296",
    "canSeeDetail": true,
    "url": "/articles/self-dividing-numbers/",
    "content": "[TOC]\n\n#### Approach #1: Brute Force [Accepted]\n\n**Intuition and Algorithm**\n\nFor each number in the given range, we will directly test if that number is self-dividing.\n\nBy definition, we want to test each whether each digit is non-zero and divides the number.  For example, with `128`, we want to test `d != 0 && 128 % d == 0` for `d = 1, 2, 8`.  To do that, we need to iterate over each digit of the number.\n\nA straightforward approach to that problem would be to convert the number into a character array (string in Python), and then convert back to integer to perform the modulo operation when checking `n % d == 0`.\n\nWe could also continually divide the number by 10 and peek at the last digit.  That is shown as a variation in a comment.\n\n<iframe src=\"https://leetcode.com/playground/6GUVmusj/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"6GUVmusj\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: $$O(D)$$, where $$D$$ is the number of integers in the range $$[L, R]$$, and assuming $$\\log(R)$$ is bounded.  (In general, the complexity would be $$O(D\\log R)$$.)\n\n* Space Complexity: $$O(D)$$, the length of the answer.\n\n---\n\nAnalysis written by: [@awice](https://leetcode.com/awice).",
    "contentTypeId": "107",
    "rating": {
      "id": "291",
      "count": 16,
      "average": 3.625,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "1\n22",
  "metaData": "{\r\n  \"name\": \"selfDividingNumbers\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"left\",\r\n      \"type\": \"integer\"\r\n    },\r\n    {\r\n      \"name\": \"right\",\r\n      \"type\": \"integer\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"list<integer>\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
