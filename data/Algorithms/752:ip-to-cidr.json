{
  "questionId": "752",
  "questionFrontendId": "751",
  "boundTopicId": null,
  "title": "IP to CIDR",
  "titleSlug": "ip-to-cidr",
  "categoryTitle": "Algorithms",
  "content": "<p>\r\nGiven a start IP address <code>ip</code> and a number of ips we need to cover <code>n</code>, return a representation of the range as a list (of smallest possible length) of CIDR blocks.\r\n</p><p>\r\nA CIDR block is a string consisting of an IP, followed by a slash, and then the prefix length.  For example: \"123.45.67.89/20\".  That prefix length \"20\" represents the number of common prefix bits in the specified range.\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> ip = \"255.0.0.7\", n = 10\r\n<b>Output:</b> [\"255.0.0.7/32\",\"255.0.0.8/29\",\"255.0.0.16/32\"]\r\n<b>Explanation:</b>\r\nThe initial ip address, when converted to binary, looks like this (spaces added for clarity):\r\n255.0.0.7 -> 11111111 00000000 00000000 00000111\r\nThe address \"255.0.0.7/32\" specifies all addresses with a common prefix of 32 bits to the given address,\r\nie. just this one address.\r\n\r\nThe address \"255.0.0.8/29\" specifies all addresses with a common prefix of 29 bits to the given address:\r\n255.0.0.8 -> 11111111 00000000 00000000 00001000\r\nAddresses with common prefix of 29 bits are:\r\n11111111 00000000 00000000 00001000\r\n11111111 00000000 00000000 00001001\r\n11111111 00000000 00000000 00001010\r\n11111111 00000000 00000000 00001011\r\n11111111 00000000 00000000 00001100\r\n11111111 00000000 00000000 00001101\r\n11111111 00000000 00000000 00001110\r\n11111111 00000000 00000000 00001111\r\n\r\nThe address \"255.0.0.16/32\" specifies all addresses with a common prefix of 32 bits to the given address,\r\nie. just 11111111 00000000 00000000 00010000.\r\n\r\nIn total, the answer specifies the range of 10 ips starting with the address 255.0.0.7 .\r\n\r\nThere were other representations, such as:\r\n[\"255.0.0.7/32\",\"255.0.0.8/30\", \"255.0.0.12/30\", \"255.0.0.16/32\"],\r\nbut our answer was the shortest possible.\r\n\r\nAlso note that a representation beginning with say, \"255.0.0.7/30\" would be incorrect,\r\nbecause it includes addresses like 255.0.0.4 = 11111111 00000000 00000000 00000100 \r\nthat are outside the specified range.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li><code>ip</code> will be a valid IPv4 address.</li>\r\n<li>Every implied address <code>ip + x</code> (for <code>x < n</code>) will be a valid IPv4 address.</li>\r\n<li><code>n</code> will be an integer in the range <code>[1, 1000]</code>.</li>\r\n</ol>\r\n</p>",
  "isPaidOnly": true,
  "difficulty": "Easy",
  "likes": 85,
  "dislikes": 680,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"Restore IP Addresses\", \"titleSlug\": \"restore-ip-addresses\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Validate IP Address\", \"titleSlug\": \"validate-ip-address\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
  "contributors": [
    {
      "username": "1337c0d3r",
      "profileUrl": "/1337c0d3r/",
      "avatarUrl": "https://assets.leetcode.com/users/1337c0d3r/avatar_1547177258.png"
    }
  ],
  "topicTags": [
    {
      "name": "Bit Manipulation",
      "slug": "bit-manipulation"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": false, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 2}], \"1\": [{\"taggedByAdmin\": true, \"name\": \"Airbnb\", \"slug\": \"airbnb\", \"timesEncountered\": 2}], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    vector<string> ipToCIDR(string ip, int n) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public List<String> ipToCIDR(String ip, int n) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def ipToCIDR(self, ip, n):\n        \"\"\"\n        :type ip: str\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def ipToCIDR(self, ip: str, n: int) -> List[str]:\n        "
    },
    {
      "lang": "C",
      "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar ** ipToCIDR(char * ip, int n, int* returnSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public IList<string> IpToCIDR(string ip, int n) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {string} ip\n * @param {number} n\n * @return {string[]}\n */\nvar ipToCIDR = function(ip, n) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {String} ip\n# @param {Integer} n\n# @return {String[]}\ndef ip_to_cidr(ip, n)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func ipToCIDR(_ ip: String, _ n: Int) -> [String] {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func ipToCIDR(ip string, n int) []string {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def ipToCIDR(ip: String, n: Int): List[String] = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun ipToCIDR(ip: String, n: Int): List<String> {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn ip_to_cidr(ip: String, n: i32) -> Vec<String> {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param String $ip\n     * @param Integer $n\n     * @return String[]\n     */\n    function ipToCIDR($ip, $n) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"9.9K\", \"totalSubmission\": \"16.1K\", \"totalAcceptedRaw\": 9919, \"totalSubmissionRaw\": 16098, \"acRate\": \"61.6%\"}",
  "hints": [
    "Convert the ip addresses to and from (long) integers.  You want to know what is the most addresses you can put in this block starting from the \"start\" ip, up to n.  It is the smallest between the lowest bit of start and the highest bit of n.  Then, repeat this process with a new start and n."
  ],
  "solution": {
    "id": "355",
    "canSeeDetail": true,
    "url": "/articles/ip-to-cidr/",
    "content": "[TOC]\n\n#### Approach #1: Direct [Accepted]\n\n**Intuition**\n\nThis problem is about performing the steps directly as written.  The tricky part is managing the bit manipulations involved.\n\nLet's ask the question: for a number `n` of ip addresses desired, and the starting address `ip` of that range, what is the CIDR block representing the most ip addresses in that range starting at `ip`?  Evidently, this greedy approach will work, and we can keep repeating this until we are done, so let's just focus on creating one largest block.\n\n**Algorithm**\n\nWe'll need to be able to convert `ip` addresses back and forth to integers (`long`).  We can do this with some basic manipulations - see the code for more details.\n\nThen, with an ip address like `255.0.0.24` converted to `start`, it ends in the binary `00011000`.  There are some cases.  If `n >= 8`, then we should use the entire block `255.0.0.24/29`.  Otherwise, we can only take a number of addresses equal to the largest power of 2 less than or equal to `n`.\n\nIn a more general setting, we use the bit lengths of both `n` and `start & -start` (the lowest bit of `start`) to compute the `mask` which represents $$2^{32 - \\text{mask}}$$ ip addresses.  Then, we adjust `start` and `n` appropriately.\n\nIn Java and C++, we should be careful to use `long` data types to represent the converted ip addresses, since the number could exceed $$2^{31}$$.\n\n<iframe src=\"https://leetcode.com/playground/GPWsnGbw/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"GPWsnGbw\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: $$O(N)$$ where $$N$$ is the length of `nums`.\n\n* Space Complexity: $$O(1)$$, the space used by our `int` variables.\n\n---\n\nAnalysis written by: [@awice](https://leetcode.com/awice).",
    "contentTypeId": "107",
    "rating": {
      "id": "350",
      "count": 25,
      "average": 1.68,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "\"255.0.0.7\"\n10",
  "metaData": "{\r\n  \"name\": \"ipToCIDR\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"ip\",\r\n      \"type\": \"string\"\r\n    },\r\n    {\r\n      \"name\": \"n\",\r\n      \"type\": \"integer\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"list<string>\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
