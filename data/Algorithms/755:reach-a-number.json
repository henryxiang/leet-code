{
  "questionId": "755",
  "questionFrontendId": "754",
  "boundTopicId": null,
  "title": "Reach a Number",
  "titleSlug": "reach-a-number",
  "categoryTitle": "Algorithms",
  "content": "<p>\r\nYou are standing at position <code>0</code> on an infinite number line.  There is a goal at position <code>target</code>.\r\n</p><p>\r\nOn each move, you can either go left or right.  During the <i>n</i>-th move (starting from 1), you take <i>n</i> steps.\r\n</p><p>\r\nReturn the minimum number of steps required to reach the destination.\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> target = 3\r\n<b>Output:</b> 2\r\n<b>Explanation:</b>\r\nOn the first move we step from 0 to 1.\r\nOn the second step we step from 1 to 3.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> target = 2\r\n<b>Output:</b> 3\r\n<b>Explanation:</b>\r\nOn the first move we step from 0 to 1.\r\nOn the second move we step  from 1 to -1.\r\nOn the third move we step from -1 to 2.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<li><code>target</code> will be a non-zero integer in the range <code>[-10^9, 10^9]</code>.</li>\r\n</p>",
  "isPaidOnly": false,
  "difficulty": "Medium",
  "likes": 364,
  "dislikes": 307,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [
    {
      "username": "ngoc_lam",
      "profileUrl": "/ngoc_lam/",
      "avatarUrl": "https://assets.leetcode.com/users/ngoc_lam/avatar_1528594557.png"
    }
  ],
  "topicTags": [
    {
      "name": "Math",
      "slug": "math"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"InMobi\", \"slug\": \"inmobi\", \"timesEncountered\": 0}], \"1\": [], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    int reachNumber(int target) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int reachNumber(int target) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def reachNumber(self, target):\n        \"\"\"\n        :type target: int\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def reachNumber(self, target: int) -> int:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nint reachNumber(int target){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public int ReachNumber(int target) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number} target\n * @return {number}\n */\nvar reachNumber = function(target) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer} target\n# @return {Integer}\ndef reach_number(target)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func reachNumber(_ target: Int) -> Int {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func reachNumber(target int) int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def reachNumber(target: Int): Int = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun reachNumber(target: Int): Int {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn reach_number(target: i32) -> i32 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer $target\n     * @return Integer\n     */\n    function reachNumber($target) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"14.2K\", \"totalSubmission\": \"41.9K\", \"totalAcceptedRaw\": 14162, \"totalSubmissionRaw\": 41867, \"acRate\": \"33.8%\"}",
  "hints": [],
  "solution": {
    "id": "364",
    "canSeeDetail": true,
    "url": "/articles/reach-a-number/",
    "content": "[TOC]\n\n#### Approach #1: Mathematical [Accepted]\n\n**Intuition**\n\nThe crux of the problem is to put `+` and `-` signs on the numbers `1, 2, 3, ..., k` so that the sum is `target`.\n\nWhen `target < 0` and we made a sum of `target`, we could switch the signs of all the numbers so that it equals `Math.abs(target)`.  Thus, the answer for `target` is the same as `Math.abs(target)`, and so without loss of generality, we can consider only `target > 0`.\n\nNow let's say `k` is the smallest number with `S = 1 + 2 + ... + k >= target`.  If `S == target`, the answer is clearly `k`.\n\nIf `S > target`, we need to change some number signs.  If `delta = S - target` is even, then we can always find a subset of `{1, 2, ..., k}` equal to `delta / 2` and switch the signs, so the answer is `k`.  (This depends on `T = delta / 2` being at most `S`.)  [The proof is simple: either `T <= k` and we choose it, or we choose `k` in our subset and try to solve the same instance of the problem for `T -= k` and the set `{1, 2, ..., k-1}`.]\n\nOtherwise, if `delta` is odd, we can't do it, as every sign change from positive to negative changes the sum by an even number.  So let's consider a candidate answer of `k+1`, which changes `delta` by `k+1`.  If this is odd, then `delta` will be even and we can have an answer of `k+1`.  Otherwise, `delta` will be odd, and we will have an answer of `k+2`.\n\nFor concrete examples of the above four cases, consider the following:\n\n* If `target = 3`, then `k = 2, delta = 0` and the answer is `k = 2`.\n* If `target = 4`, then `k = 3, delta = 2`, delta is even and the answer is `k = 3`.\n* If `target = 7`, then `k = 4, delta = 3`, delta is odd and adding `k+1` makes delta even.  The answer is `k+1 = 5`.\n* If `target = 5`, then `k = 3, delta = 1`, delta is odd and adding `k+1` keeps delta odd.  The answer is `k+2 = 5`.\n\n**Algorithm**\n\nSubtract `++k` from `target` until it goes non-positive.  Then `k` will be as described, and `target` will be `delta` as described.  We can output the four cases above: if `delta` is even then the answer is `k`, if `delta` is odd then the answer is `k+1` or `k+2` depending on the parity of `k`.\n\n<iframe src=\"https://leetcode.com/playground/VZd5DozE/shared\" frameBorder=\"0\" width=\"100%\" height=\"208\" name=\"VZd5DozE\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: $$O(\\sqrt{\\text{target}})$$.  Our while loop needs this many steps, as $$1 + 2 + \\dots + k = \\frac{k(k+1)}{2}$$.\n\n* Space Complexity: $$O(1)$$.\n\n---\n\nAnalysis written by: [@awice](https://leetcode.com/awice).",
    "contentTypeId": "107",
    "rating": {
      "id": "357",
      "count": 38,
      "average": 4.21,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "1",
  "metaData": "{\r\n  \"name\": \"reachNumber\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"target\",\r\n      \"type\": \"integer\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
