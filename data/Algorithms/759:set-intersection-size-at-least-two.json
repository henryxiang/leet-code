{
  "questionId": "759",
  "questionFrontendId": "757",
  "boundTopicId": null,
  "title": "Set Intersection Size At Least Two",
  "titleSlug": "set-intersection-size-at-least-two",
  "categoryTitle": "Algorithms",
  "content": "<p>\r\nAn integer interval <code>[a, b]</code> (for integers <code>a < b</code>) is a set of all consecutive integers from <code>a</code> to <code>b</code>, including <code>a</code> and <code>b</code>.\r\n</p><p>\r\nFind the minimum size of a set S such that for every integer interval A in <code>intervals</code>, the intersection of S with A has size at least 2.\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> intervals = [[1, 3], [1, 4], [2, 5], [3, 5]]\r\n<b>Output:</b> 3\r\n<b>Explanation:</b>\r\nConsider the set S = {2, 3, 4}.  For each interval, there are at least 2 elements from S in the interval.\r\nAlso, there isn't a smaller size set that fulfills the above condition.\r\nThus, we output the size of this set, which is 3.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> intervals = [[1, 2], [2, 3], [2, 4], [4, 5]]\r\n<b>Output:</b> 5\r\n<b>Explanation:</b>\r\nAn example of a minimum sized set is {1, 2, 3, 4, 5}.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br><ol>\r\n<li><code>intervals</code> will have length in range <code>[1, 3000]</code>.</li>\r\n<li><code>intervals[i]</code> will have length <code>2</code>, representing some integer interval.</li>\r\n<li><code>intervals[i][j]</code> will be an integer in <code>[0, 10^8]</code>.</li>\r\n</ol></p>",
  "isPaidOnly": false,
  "difficulty": "Hard",
  "likes": 198,
  "dislikes": 16,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [
    {
      "username": "Google8",
      "profileUrl": "/google8/",
      "avatarUrl": "https://assets.leetcode.com/users/zhuofuchuscedu/avatar.png"
    }
  ],
  "topicTags": [
    {
      "name": "Greedy",
      "slug": "greedy"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"Drawbridge\", \"slug\": \"drawbridge\", \"timesEncountered\": 0}], \"1\": [{\"taggedByAdmin\": false, \"name\": \"Uber\", \"slug\": \"uber\", \"timesEncountered\": 2}], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    int intersectionSizeTwo(vector<vector<int>>& intervals) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int intersectionSizeTwo(int[][] intervals) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def intersectionSizeTwo(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def intersectionSizeTwo(self, intervals: List[List[int]]) -> int:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nint intersectionSizeTwo(int** intervals, int intervalsSize, int* intervalsColSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public int IntersectionSizeTwo(int[][] intervals) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number[][]} intervals\n * @return {number}\n */\nvar intersectionSizeTwo = function(intervals) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer[][]} intervals\n# @return {Integer}\ndef intersection_size_two(intervals)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func intersectionSizeTwo(_ intervals: [[Int]]) -> Int {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func intersectionSizeTwo(intervals [][]int) int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def intersectionSizeTwo(intervals: Array[Array[Int]]): Int = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun intersectionSizeTwo(intervals: Array<IntArray>): Int {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn intersection_size_two(intervals: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer[][] $intervals\n     * @return Integer\n     */\n    function intersectionSizeTwo($intervals) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"5.6K\", \"totalSubmission\": \"15K\", \"totalAcceptedRaw\": 5643, \"totalSubmissionRaw\": 14982, \"acRate\": \"37.7%\"}",
  "hints": [],
  "solution": {
    "id": "365",
    "canSeeDetail": true,
    "url": "/articles/set-intersection-size-at-least-two/",
    "content": "[TOC]\n\n#### Approach #1: Greedy [Accepted]\n\n**Intuition**\n\nLet's try to solve a simpler problem: what is the answer when the set intersection size is at least *one*?\n\nSort the points.  Take the last interval `[s, e]`, which point on this interval will be in `S`?  Since every other interval has start point `<= s`, it is strictly better to choose `s` as the start.  So we can repeatedly take `s` in our set `S` and remove all intervals containing `s`.\n\nWe will try to extend this solution to the case when we want an intersection of size two.\n\n**Algorithm**\n\nFor each interval, we will perform the algorithm described above, storing a `todo` *multiplicity* which starts at `2`.  As we identify points in `S`, we will subtract from these multiplicities as appropriate.\n\nOne case that is important to handle is the following:\n`[[1, 2], [2, 3], [2, 4], [4, 5]]`.  If we put `4, 5` in `S`, then we put `2` in `S`, when handling `[2, 3]` we need to put `3` in `S`, not `2` which was already put.\n\nWe can handle this case succinctly by sorting intervals `[s, e]` by `s` ascending, then `e` descending.  This makes it so that any interval encountered with the same `s` has the lowest possible `e`, and so it has the highest *multiplicity*.  When at interval `[s, e]` and choosing points to be included into `S`, it will always be the case that the start of the interval (either `s` or `s, s+1`) will be unused.\n\n<iframe src=\"https://leetcode.com/playground/w4QM4e3U/shared\" frameBorder=\"0\" width=\"100%\" height=\"412\" name=\"w4QM4e3U\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: $$O(N^2)$$, where $$N$$ is the length of `intervals`.\n\n* Space Complexity: $$O(N)$$.\n\n---\n\nAnalysis written by: [@awice](https://leetcode.com/awice).",
    "contentTypeId": "107",
    "rating": {
      "id": "360",
      "count": 13,
      "average": 2.308,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "[[1,3],[1,4],[2,5],[3,5]]",
  "metaData": "{\r\n  \"name\": \"intersectionSizeTwo\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"intervals\",\r\n      \"type\": \"integer[][]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
