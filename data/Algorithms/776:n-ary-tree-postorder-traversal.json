{
  "questionId": "776",
  "questionFrontendId": "590",
  "boundTopicId": null,
  "title": "N-ary Tree Postorder Traversal",
  "titleSlug": "n-ary-tree-postorder-traversal",
  "categoryTitle": "Algorithms",
  "content": "<p>Given an n-ary tree, return the <i>postorder</i> traversal of its nodes&#39; values.</p>\n\n<p><em>Nary-Tree input serialization&nbsp;is represented in their level order traversal, each group of children is separated by the null value (See examples).</em></p>\n\n<p>&nbsp;</p>\n\n<p><strong>Follow up:</strong></p>\n\n<p>Recursive solution is trivial, could you do it iteratively?</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<p><img src=\"https://assets.leetcode.com/uploads/2018/10/12/narytreeexample.png\" style=\"width: 100%; max-width: 300px;\" /></p>\n\n<pre>\n<strong>Input:</strong> root = [1,null,3,2,4,null,5,6]\n<strong>Output:</strong> [5,6,3,2,4,1]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/11/08/sample_4_964.png\" style=\"width: 296px; height: 241px;\" /></p>\n\n<pre>\n<strong>Input:</strong> root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\n<strong>Output:</strong> [2,6,14,11,7,3,12,8,4,13,9,10,5,1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The height of the n-ary tree is less than or equal to <code>1000</code></li>\n\t<li>The total number of nodes is between <code>[0,&nbsp;10^4]</code></li>\n</ul>\n",
  "isPaidOnly": false,
  "difficulty": "Easy",
  "likes": 431,
  "dislikes": 51,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"Binary Tree Postorder Traversal\", \"titleSlug\": \"binary-tree-postorder-traversal\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"N-ary Tree Level Order Traversal\", \"titleSlug\": \"n-ary-tree-level-order-traversal\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"N-ary Tree Preorder Traversal\", \"titleSlug\": \"n-ary-tree-preorder-traversal\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
  "contributors": [],
  "topicTags": [
    {
      "name": "Tree",
      "slug": "tree"
    }
  ],
  "companyTagStats": "{\"1\": [], \"2\": [], \"3\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    vector<Node*> children;\n\n    Node() {}\n\n    Node(int _val) {\n        val = _val;\n    }\n\n    Node(int _val, vector<Node*> _children) {\n        val = _val;\n        children = _children;\n    }\n};\n*/\nclass Solution {\npublic:\n    vector<int> postorder(Node* root) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "/*\n// Definition for a Node.\nclass Node {\n    public int val;\n    public List<Node> children;\n\n    public Node() {}\n\n    public Node(int _val) {\n        val = _val;\n    }\n\n    public Node(int _val, List<Node> _children) {\n        val = _val;\n        children = _children;\n    }\n};\n*/\nclass Solution {\n    public List<Integer> postorder(Node root) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "\"\"\"\n# Definition for a Node.\nclass Node(object):\n    def __init__(self, val=None, children=None):\n        self.val = val\n        self.children = children\n\"\"\"\nclass Solution(object):\n    def postorder(self, root):\n        \"\"\"\n        :type root: Node\n        :rtype: List[int]\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "\"\"\"\n# Definition for a Node.\nclass Node:\n    def __init__(self, val=None, children=None):\n        self.val = val\n        self.children = children\n\"\"\"\nclass Solution:\n    def postorder(self, root: 'Node') -> List[int]:\n        "
    },
    {
      "lang": "C#",
      "code": "/*\n// Definition for a Node.\npublic class Node {\n    public int val;\n    public IList<Node> children;\n\n    public Node() {}\n\n    public Node(int _val) {\n        val = _val;\n    }\n\n    public Node(int _val, IList<Node> _children) {\n        val = _val;\n        children = _children;\n    }\n}\n*/\npublic class Solution {\n    public IList<int> Postorder(Node root) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * // Definition for a Node.\n * function Node(val,children) {\n *    this.val = val;\n *    this.children = children;\n * };\n */\n/**\n * @param {Node} root\n * @return {number[]}\n */\nvar postorder = function(root) {\n    \n};"
    }
  ],
  "stats": "{\"totalAccepted\": \"63.6K\", \"totalSubmission\": \"91.4K\", \"totalAcceptedRaw\": 63627, \"totalSubmissionRaw\": 91399, \"acRate\": \"69.6%\"}",
  "hints": [],
  "solution": {
    "id": "595",
    "canSeeDetail": true,
    "url": "/articles/n-ary-tree-postorder-transversal/",
    "content": "[TOC]\r\n\r\n## Solution\r\n\r\n---\r\n\r\n#### How to traverse the tree\r\n\r\nFirst of all, please refer to [this article](https://leetcode.com/articles/binary-tree-postorder-transversal/) \r\nfor the solution in case of binary tree.\r\nThis article offers the same ideas with a bit of generalisation. \r\n\r\nThere are two general strategies to traverse a tree:\r\n\r\n- *Breadth First Search* (`BFS`)\r\n\r\n    We scan through the tree level by level, following the order of height,\r\n    from top to bottom. The nodes on higher level would be visited before\r\n    the ones with lower levels.\r\n     \r\n- *Depth First Search* (`DFS`)\r\n\r\n    In this strategy, we adopt the `depth` as the priority, so that one\r\n    would start from a root and reach all the way down to certain leaf,\r\n    and then back to root to reach another branch.\r\n\r\n    The DFS strategy can further be distinguished as\r\n    `preorder`, `inorder`, and `postorder` depending on the relative order\r\n    among the root node, left node and right node.\r\n    \r\nOn the following figure the nodes are numerated in the order you visit them,\r\nplease follow ```1-2-3-4-5``` to compare different strategies.\r\n\r\n![postorder](../Figures/145_transverse.png)\r\n\r\nHere the problem is to implement postorder traversal using iterations.\r\n<br />\r\n<br />\r\n\r\n\r\n---\r\n#### Approach 1: Iterations\r\n\r\n**Algorithm**\r\n\r\nFirst of all, here is the definition of the ```TreeNode``` which we would use\r\nin the following implementation.\r\n\r\n<iframe src=\"https://leetcode.com/playground/PRVwEYsQ/shared\" frameBorder=\"0\" width=\"100%\" height=\"259\" name=\"PRVwEYsQ\"></iframe>\r\n\r\nLet's start from the root and then at each iteration \r\npop the current node out of the stack and\r\npush its child nodes. \r\nIn the implemented strategy we push nodes into stack following the order ```Top->Bottom``` and ```Left->Right```.\r\nSince DFS postorder traversal is ```Bottom->Top``` and ```Left->Right``` the output list\r\nshould be reverted after the end of loop.\r\n\r\n<iframe src=\"https://leetcode.com/playground/iqMZtskW/shared\" frameBorder=\"0\" width=\"100%\" height=\"412\" name=\"iqMZtskW\"></iframe>\r\n\r\n\r\n\r\n**Complexity Analysis**\r\n\r\n* Time complexity : we visit each node exactly once, thus the \r\ntime complexity is $$\\mathcal{O}(N)$$,\r\nwhere $$N$$ is the number of nodes, *i.e.* the size of tree.\r\n\r\n* Space complexity : depending on the tree structure, \r\nwe could keep up to the entire tree, therefore, the space complexity is $$\\mathcal{O}(N)$$.\r\n\r\nAnalysis written by @[liaison](https://leetcode.com/liaison/)\r\nand @[andvary](https://leetcode.com/andvary/)",
    "contentTypeId": "107",
    "rating": {
      "id": "581",
      "count": 7,
      "average": 5,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "[1,null,3,2,4,null,5,6]\r",
  "metaData": "{\n  \"name\": \"postorder\",\n  \"params\": [\n    {\n      \"name\": \"root\",\n      \"type\": \"Node\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"list<integer>\"\n  },\n  \"structures\": [\n    {\n      \"name\": \"Node\",\n      \"comment\": \"Definition for a Node.\",\n      \"members\": [\n        {\n          \"name\": \"val\",\n          \"type\": \"integer\"\n        },\n        {\n          \"name\": \"children\",\n          \"type\": \"list<Node>\"\n        }\n      ]\n    }\n  ],\n  \"languages\": [\n    \"cpp\",\n    \"java\",\n    \"python\",\n    \"csharp\",\n    \"javascript\",\n    \"python3\"\n  ],\n  \"manual\": true\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
