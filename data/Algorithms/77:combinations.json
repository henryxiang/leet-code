{
  "questionId": "77",
  "questionFrontendId": "77",
  "boundTopicId": null,
  "title": "Combinations",
  "titleSlug": "combinations",
  "categoryTitle": "Algorithms",
  "content": "<p>Given two integers <em>n</em> and <em>k</em>, return all possible combinations of <em>k</em> numbers out of 1 ... <em>n</em>.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>&nbsp;n = 4, k = 2\r\n<strong>Output:</strong>\r\n[\r\n  [2,4],\r\n  [3,4],\r\n  [2,3],\r\n  [1,2],\r\n  [1,3],\r\n  [1,4],\r\n]\r\n</pre>\r\n",
  "isPaidOnly": false,
  "difficulty": "Medium",
  "likes": 1073,
  "dislikes": 59,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"Combination Sum\", \"titleSlug\": \"combination-sum\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Permutations\", \"titleSlug\": \"permutations\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
  "contributors": [],
  "topicTags": [
    {
      "name": "Backtracking",
      "slug": "backtracking"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": false, \"name\": \"Facebook\", \"slug\": \"facebook\", \"timesEncountered\": 2}], \"1\": [{\"taggedByAdmin\": false, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 3}, {\"taggedByAdmin\": false, \"name\": \"Microsoft\", \"slug\": \"microsoft\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Apple\", \"slug\": \"apple\", \"timesEncountered\": 2}], \"2\": [{\"taggedByAdmin\": false, \"name\": \"Adobe\", \"slug\": \"adobe\", \"timesEncountered\": 2}]}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    vector<vector<int>> combine(int n, int k) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public List<List<Integer>> combine(int n, int k) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def combine(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: List[List[int]]\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def combine(self, n: int, k: int) -> List[List[int]]:\n        "
    },
    {
      "lang": "C",
      "code": "\n\n/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** combine(int n, int k, int* returnSize, int** returnColumnSizes){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public IList<IList<int>> Combine(int n, int k) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number} n\n * @param {number} k\n * @return {number[][]}\n */\nvar combine = function(n, k) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer} n\n# @param {Integer} k\n# @return {Integer[][]}\ndef combine(n, k)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func combine(_ n: Int, _ k: Int) -> [[Int]] {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func combine(n int, k int) [][]int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def combine(n: Int, k: Int): List[List[Int]] = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun combine(n: Int, k: Int): List<List<Int>> {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn combine(n: i32, k: i32) -> Vec<Vec<i32>> {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $k\n     * @return Integer[][]\n     */\n    function combine($n, $k) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"245.2K\", \"totalSubmission\": \"479K\", \"totalAcceptedRaw\": 245158, \"totalSubmissionRaw\": 479033, \"acRate\": \"51.2%\"}",
  "hints": [],
  "solution": {
    "id": "710",
    "canSeeDetail": true,
    "url": "/articles/combinations/",
    "content": "[TOC]\r\n\r\n## Solution\r\n\r\n---\r\n\r\n#### Approach 1: Backtracking\r\n\r\n**Algorithm**\r\n\r\n[Backtracking](https://en.wikipedia.org/wiki/Backtracking) \r\nis an algorithm for finding all\r\nsolutions by exploring all potential candidates.\r\nIf the solution candidate turns to be _not_ a solution \r\n(or at least not the _last_ one), \r\nbacktracking algorithm discards it by making some changes \r\non the previous step, *i.e.* _backtracks_ and then try again.\r\n\r\nHere is a backtrack function \r\nwhich takes a first integer to add and \r\na current combination as arguments `backtrack(first, curr)`.\r\n\r\n* If the current combination is done - add it to output.\r\n\r\n* Iterate over the integers from `first` to `n`.\r\n\r\n    * Add integer `i` into the current combination `curr`.\r\n\r\n    * Proceed to add more integers into the combination : \r\n    `backtrack(i + 1, curr)`.\r\n\r\n    * Backtrack by removing `i` from `curr`.\r\n\r\n**Implementation**\r\n\r\n!?!../Documents/77_LIS.json:1000,528!?!\r\n\r\n<iframe src=\"https://leetcode.com/playground/m5QGJitr/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"m5QGJitr\"></iframe>\r\n\r\n**Complexity Analysis**\r\n\r\n* Time complexity : $$\\mathcal{O}(k C_N^k)$$, where \r\n$$C_N^k = \\frac{N!}{(N - k)! k!}$$ is a number of combinations to build.\r\n`append / pop` (`add / removeLast`) operations are constant-time ones\r\nand the only consuming part here is to append the built combination of\r\nlength `k` to the output.\r\n \r\n* Space complexity : $$\\mathcal{O}(C_N^k)$$ to keep all\r\nthe combinations for an output.\r\n<br />\r\n<br />\r\n\r\n\r\n---\r\n#### Approach 2: Lexicographic (binary sorted) combinations\r\n\r\n**Intuition**\r\n\r\nThe idea here is not just to get the combinations but\r\nto generate them in a lexicographic sorted order. \r\n\r\n![postorder](../Figures/77/77_lex.png)\r\n\r\n**Algorithm**\r\n\r\nThe algorithm is quite straightforward : \r\n\r\n* Initiate `nums` as a list of integers from `1` to `k`. Add `n + 1`\r\nas a last element, it will serve as a sentinel. \r\nSet the pointer in the beginning of the list `j = 0`.\r\n\r\n* While `j < k` :\r\n    \r\n    * Add the first k elements from `nums` into the output, i.e.\r\n    all elements but the sentinel.\r\n    \r\n    * Find the first number in nums such that `nums[j] + 1 != nums[j + 1]`\r\n    and increase it by one `nums[j]++` to move to the next combination.\r\n\r\n**Implementation**\r\n\r\n<iframe src=\"https://leetcode.com/playground/avMz4DZQ/shared\" frameBorder=\"0\" width=\"100%\" height=\"446\" name=\"avMz4DZQ\"></iframe>\r\n\r\n**Complexity Analysis**\r\n\r\n* Time complexity : $$\\mathcal{O}(k C_N^k)$$, where \r\n$$C_N^k = \\frac{N!}{(N - k)! k!}$$ is a number of combinations to build.\r\n\r\n    The external while loop is executed $$C_N^k$$ times since the\r\nnumber of combinations is $$C_N^k$$. \r\nThe inner while loop is performed $$C_{N - j}^{k - j}$$ times for a given `j`. \r\nIn average over $$C_N^k$$ visits from the external loop \r\nthat results in less than one execution per visit.   \r\nHence the most consuming part here is to append each combination \r\nof length $$k$$ ($$C_N^k$$ combinations in total) to the output,\r\nthat takes $$\\mathcal{O}(k C_N^k)$$ time.\r\n\r\n    You could notice that the second algorithm is much faster than the \r\n    first one despite they both have the same time complexity.\r\n    It's a consequence of dealing \r\n    with the recursive call stack frame for the first algorithm,\r\n    and the effect is much more pronounced in Python than in Java.\r\n    \r\n* Space complexity : $$\\mathcal{O}(C_N^k)$$ to keep all\r\nthe combinations for an output. \r\n\r\n**Links**\r\n\r\n[Donald E. Knuth, The Art of Computer Programming, 4A (2011)](https://www-cs-faculty.stanford.edu/~knuth/taocp.html)\r\n\r\nAnalysis written by @[liaison](https://leetcode.com/liaison/)\r\nand @[andvary](https://leetcode.com/andvary/)",
    "contentTypeId": "107",
    "rating": {
      "id": "695",
      "count": 14,
      "average": 4.286,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "4\n2",
  "metaData": "{\r\n  \"name\": \"combine\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"n\",\r\n      \"type\": \"integer\"\r\n    },\r\n    {\r\n      \"name\": \"k\",\r\n      \"type\": \"integer\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"list<list<integer>>\",\r\n    \"dealloc\": true\r\n  }\r\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
