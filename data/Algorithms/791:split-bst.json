{
  "questionId": "791",
  "questionFrontendId": "776",
  "boundTopicId": null,
  "title": "Split BST",
  "titleSlug": "split-bst",
  "categoryTitle": "Algorithms",
  "content": "<p>Given a Binary Search Tree (BST) with root node <code>root</code>, and a target value <code>V</code>, split the tree into two subtrees&nbsp;where one subtree has nodes that are all smaller or equal to the target value, while the other subtree has all nodes that are greater than the target value.&nbsp; It&#39;s not necessarily the case that the tree contains a node with value <code>V</code>.</p>\r\n\r\n<p>Additionally, most of the structure of the original tree should remain.&nbsp; Formally, for any child C with parent P in the original tree, if they are both in the same subtree after the split, then node C should still have the parent P.</p>\r\n\r\n<p>You should output the root TreeNode of&nbsp;both subtrees after splitting, in any order.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> root = [4,2,6,1,3,5,7], V = 2\r\n<strong>Output:</strong> [[2,1],[4,3,6,null,null,5,7]]\r\n<strong>Explanation:</strong>\r\nNote that root, output[0], and output[1] are TreeNode objects, not arrays.\r\n\r\nThe given tree [4,2,6,1,3,5,7] is represented by the following diagram:\r\n\r\n          4\r\n        /   \\\r\n      2      6\r\n     / \\    / \\\r\n    1   3  5   7\r\n\r\nwhile the diagrams for the outputs are:\r\n\r\n          4\r\n        /   \\\r\n      3      6      and    2\r\n            / \\           /\r\n           5   7         1\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li>The size of the BST will not exceed <code>50</code>.</li>\r\n\t<li>The BST is always valid and each node&#39;s value is different.</li>\r\n</ol>",
  "isPaidOnly": true,
  "difficulty": "Medium",
  "likes": 493,
  "dislikes": 32,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"Delete Node in a BST\", \"titleSlug\": \"delete-node-in-a-bst\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
  "contributors": [
    {
      "username": "fishercoder",
      "profileUrl": "/fishercoder/",
      "avatarUrl": "https://assets.leetcode.com/users/fishercoder/avatar_1576991018.png"
    }
  ],
  "topicTags": [
    {
      "name": "Tree",
      "slug": "tree"
    },
    {
      "name": "Recursion",
      "slug": "recursion"
    }
  ],
  "companyTagStats": "{\"1\": [{\"taggedByAdmin\": false, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 2}], \"3\": [{\"taggedByAdmin\": true, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 0}, {\"taggedByAdmin\": true, \"name\": \"Coupang\", \"slug\": \"coupang\", \"timesEncountered\": 0}], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    vector<TreeNode*> splitBST(TreeNode* root, int V) {\r\n        \r\n    }\r\n};"
    },
    {
      "lang": "Java",
      "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public TreeNode[] splitBST(TreeNode root, int V) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def splitBST(self, root, V):\n        \"\"\"\n        :type root: TreeNode\n        :type V: int\n        :rtype: List[TreeNode]\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def splitBST(self, root: TreeNode, V: int) -> List[TreeNode]:\n        "
    },
    {
      "lang": "C",
      "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nstruct TreeNode** splitBST(struct TreeNode* root, int V, int* returnSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public int val;\r\n *     public TreeNode left;\r\n *     public TreeNode right;\r\n *     public TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public TreeNode[] SplitBST(TreeNode root, int V) {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {number} V\n * @return {TreeNode[]}\n */\nvar splitBST = function(root, V) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# Definition for a binary tree node.\r\n# class TreeNode\r\n#     attr_accessor :val, :left, :right\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @left, @right = nil, nil\r\n#     end\r\n# end\r\n\r\n# @param {TreeNode} root\r\n# @param {Integer} v\r\n# @return {TreeNode[]}\r\ndef split_bst(root, v)\r\n    \r\nend"
    },
    {
      "lang": "Swift",
      "code": "/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public var val: Int\r\n *     public var left: TreeNode?\r\n *     public var right: TreeNode?\r\n *     public init(_ val: Int) {\r\n *         self.val = val\r\n *         self.left = nil\r\n *         self.right = nil\r\n *     }\r\n * }\r\n */\r\nclass Solution {\r\n    func splitBST(_ root: TreeNode?, _ V: Int) -> [TreeNode?] {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Go",
      "code": "/**\r\n * Definition for a binary tree node.\r\n * type TreeNode struct {\r\n *     Val int\r\n *     Left *TreeNode\r\n *     Right *TreeNode\r\n * }\r\n */\r\nfunc splitBST(root *TreeNode, V int) []*TreeNode {\r\n    \r\n}"
    },
    {
      "lang": "Scala",
      "code": "/**\r\n * Definition for a binary tree node.\r\n * class TreeNode(var _value: Int) {\r\n *   var value: Int = _value\r\n *   var left: TreeNode = null\r\n *   var right: TreeNode = null\r\n * }\r\n */\r\nobject Solution {\r\n    def splitBST(root: TreeNode, V: Int): Array[TreeNode] = {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Kotlin",
      "code": "/**\r\n * Example:\r\n * var ti = TreeNode(5)\r\n * var v = ti.`val`\r\n * Definition for a binary tree node.\r\n * class TreeNode(var `val`: Int) {\r\n *     var left: TreeNode? = null\r\n *     var right: TreeNode? = null\r\n * }\r\n */\r\nclass Solution {\r\n    fun splitBST(root: TreeNode?, V: Int): Array<TreeNode?> {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Rust",
      "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn split_bst(root: Option<Rc<RefCell<TreeNode>>>, v: i32) -> Vec<Option<Rc<RefCell<TreeNode>>>> {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($value) { $this->val = $value; }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $root\n     * @param Integer $V\n     * @return TreeNode[]\n     */\n    function splitBST($root, $V) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"13.4K\", \"totalSubmission\": \"24.9K\", \"totalAcceptedRaw\": 13402, \"totalSubmissionRaw\": 24922, \"acRate\": \"53.8%\"}",
  "hints": [
    "Use recursion.  If root.val <= V, you split root.right into two halves, then join it's left half back on root.right."
  ],
  "solution": {
    "id": "407",
    "canSeeDetail": true,
    "url": "/articles/split-bst/",
    "content": "[TOC]\r\n\r\n---\r\n#### Approach #1: Recursion [Accepted]\r\n\r\n**Intuition and Algorithm**\r\n\r\nThe `root` node either belongs to the first half or the second half.  Let's say it belongs to the first half.\r\n\r\nThen, because the given tree is a *binary search tree* (BST), the entire subtree at `root.left` must be in the first half.  However, the subtree at `root.right` may have nodes in either halves, so it needs to be split.\r\n\r\n<br />\r\n<center>\r\n    <img src=\"../Figures/776/split_line.png\" alt=\"Diagram of tree being split\" width=\"350\"/>\r\n</center>\r\n<br />\r\n\r\nIn the diagram above, the thick lines represent the main child relationships between the nodes, while the thinner colored lines represent the subtrees after the split.\r\n\r\nLets say our secondary answer `bns = split(root.right)` is the result of such a split.  Recall that `bns[0]` and `bns[1]` will both be BSTs on either side of the split.  The left half of `bns` must be in the first half, and it must be to the right of `root` for the first half to remain a BST.  The right half of `bns` is the right half in the final answer.\r\n\r\n<br />\r\n<center>\r\n    <img src=\"../Figures/776/sub_tree.png\" alt=\"Diagram of how root tree connects to split of subtree at root.right\" width=\"350\"/>\r\n</center>\r\n<br />\r\n\r\nThe diagram above explains how we merge the two halves of `split(root.right)` with the main tree, and illustrates the line of code `root.right = bns[0]` in the implementations.\r\n\r\n<iframe src=\"https://leetcode.com/playground/gpExRgec/shared\" frameBorder=\"0\" width=\"100%\" height=\"344\" name=\"gpExRgec\"></iframe>\r\n\r\n**Complexity Analysis**\r\n\r\n* Time Complexity:  $$O(N)$$, where $$N$$ is the number of nodes in the input tree, as each node is checked once.\r\n\r\n* Space Complexity:  $$O(N)$$.\r\n\r\n---\r\n\r\nAnalysis written by: [@awice](https://leetcode.com/awice).",
    "contentTypeId": "107",
    "rating": {
      "id": "402",
      "count": 25,
      "average": 4.56,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "[4,2,6,1,3,5,7]\n2",
  "metaData": "{\r\n  \"name\": \"splitBST\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"root\",\r\n      \"type\": \"TreeNode\"\r\n    },\r\n    {\r\n      \"name\": \"V\",\r\n      \"type\": \"integer\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"TreeNode[]\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
