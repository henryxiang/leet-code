{
  "questionId": "793",
  "questionFrontendId": "777",
  "boundTopicId": null,
  "title": "Swap Adjacent in LR String",
  "titleSlug": "swap-adjacent-in-lr-string",
  "categoryTitle": "Algorithms",
  "content": "<p>In a string composed of <code>&#39;L&#39;</code>, <code>&#39;R&#39;</code>, and <code>&#39;X&#39;</code> characters, like <code>&quot;RXXLRXRXL&quot;</code>, a move consists of either replacing one occurrence of <code>&quot;XL&quot;</code> with <code>&quot;LX&quot;</code>, or replacing one occurrence of <code>&quot;RX&quot;</code> with <code>&quot;XR&quot;</code>. Given the starting string <code>start</code> and the ending string <code>end</code>, return <code>True</code> if and only if there exists a sequence of moves to transform one string to the other.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> start = &quot;RXXLRXRXL&quot;, end = &quot;XRLXXRRLX&quot;\r\n<strong>Output:</strong> True\r\n<strong>Explanation:</strong>\r\nWe can transform start to end following these steps:\r\nRXXLRXRXL -&gt;\r\nXRXLRXRXL -&gt;\r\nXRLXRXRXL -&gt;\r\nXRLXXRRXL -&gt;\r\nXRLXXRRLX\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= len(start) = len(end) &lt;= 10000</code>.</li>\r\n\t<li>Both start and end will only consist of characters in <code>{&#39;L&#39;, &#39;R&#39;, &#39;X&#39;}</code>.</li>\r\n</ol>\r\n",
  "isPaidOnly": false,
  "difficulty": "Medium",
  "likes": 274,
  "dislikes": 254,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [
    {
      "username": "awice",
      "profileUrl": "/awice/",
      "avatarUrl": "https://assets.leetcode.com/users/awice/avatar_1576905115.png"
    }
  ],
  "topicTags": [
    {
      "name": "Brainteaser",
      "slug": "brainteaser"
    }
  ],
  "companyTagStats": "{\"1\": [{\"taggedByAdmin\": true, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 2}], \"2\": [], \"3\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    bool canTransform(string start, string end) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public boolean canTransform(String start, String end) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def canTransform(self, start, end):\n        \"\"\"\n        :type start: str\n        :type end: str\n        :rtype: bool\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def canTransform(self, start: str, end: str) -> bool:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nbool canTransform(char * start, char * end){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public bool CanTransform(string start, string end) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {string} start\n * @param {string} end\n * @return {boolean}\n */\nvar canTransform = function(start, end) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {String} start\n# @param {String} end\n# @return {Boolean}\ndef can_transform(start, end)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func canTransform(_ start: String, _ end: String) -> Bool {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func canTransform(start string, end string) bool {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def canTransform(start: String, end: String): Boolean = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun canTransform(start: String, end: String): Boolean {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn can_transform(start: String, end: String) -> bool {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param String $start\n     * @param String $end\n     * @return Boolean\n     */\n    function canTransform($start, $end) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"19.4K\", \"totalSubmission\": \"56.5K\", \"totalAcceptedRaw\": 19363, \"totalSubmissionRaw\": 56458, \"acRate\": \"34.3%\"}",
  "hints": [
    "Think of the L and R's as people on a horizontal line, where X is a space.  The people can't cross each other, and also you can't go from XRX to RXX."
  ],
  "solution": {
    "id": "406",
    "canSeeDetail": true,
    "url": "/articles/swap-adjacent-in-lr-string/",
    "content": "[TOC]\r\n\r\n---\r\n#### Approach #1: Invariant [Accepted]\r\n\r\n**Intuition**\r\n\r\nLet's think of `'L'` and `'R'` as people facing left and right standing on one line, and `'X'` as an empty space on that line.\r\n\r\nWe can ask: what invariants (conditions that remain true after making any move) there are.  This is natural for any question that involves transforming some state and asking whether a final state is possible.\r\n\r\n**Algorithm**\r\n\r\nOne invariant is that `'L'` and `'R'` characters in the string can never cross each other - people walking on the line cannot pass through each other.  That means the starting and target strings must be the same when reading only the `'L'` and `'R'`s.  With respect to some starting string, let's call such a target string \"*solid*\" (since the people don't pass through each other).\r\n\r\nAdditionally, the `n`-th `'L'` can never go to the right of it's original position, and similarly the `n`-th `'R'` can never go to the left of it's original position.  We'll call this \"*accessibility*\".  Formally, if $$(i_1, i_2, \\cdots )$$ and $$(i^{'}_1, i^{'}_2, \\cdots )$$ are the positions of each `'L'` character in the source and target string, and similarly for $$(j_i \\cdots ), (j^{'}_1 \\cdots )$$ and positions of `'R'` characters, then we will say a target string is *accessible* if $$i_k \\geq i^{'}_k$$ and $$j_k \\leq j^{'}_k$$.\r\n\r\nThis shows being solid and accessible are necessary conditions.  With an induction on the number of people, we can show that they are sufficient conditions.  The basic idea of the proof is this: A person on the end either walks away from the others, or walks towards.  If they walk away, then let them walk first and it is true; if they walk towards, then let them walk last and it is true (by virtue of the target being solid).\r\n\r\nWith these ideas in hand, we'll investigate the two properties individually.  If they are both true, then the answer is `True`, otherwise it is `False`.\r\n\r\n<iframe src=\"https://leetcode.com/playground/qtzn7Sgz/shared\" frameBorder=\"0\" width=\"100%\" height=\"429\" name=\"qtzn7Sgz\"></iframe>\r\n\r\n**Complexity Analysis**\r\n\r\n* Time Complexity:  $$O(N)$$, where $$N$$ is the length of `start` and `end`.\r\n\r\n* Space Complexity:  $$O(N)$$.  The replacement operation is $$O(N)$$, while the remaining operations use $$O(1)$$ additional space.  We could amend the replace part of our algorithm to use pointers so as to reduce the total complexity to $$O(1)$$.\r\n\r\n---\r\n\r\n#### Approach #2: Two Pointers [Accepted]\r\n\r\n**Intuition and Algorithm**\r\n\r\nFollowing the explanation in *Approach #1*, the target string must be solid and accessible.\r\n\r\nWe use two pointers to solve it.  Each pointer `i`, `j` points to an index of `start`, `end` with `start[i] != 'X'`, `end[j] != 'X'`.\r\n\r\nThen, if `start[i] != end[j]`, the target string isn't solid.  Also, if `start[i] == 'L' and i < j`, (or `start[i] == 'R' and i > j`), the string is not accessible.\r\n\r\nIn our Python implementation, we use generators to handle moving `i, j` to the next index where `start[i] != 'X', end[j] != 'X'`.\r\n\r\n<iframe src=\"https://leetcode.com/playground/QrFtNkZG/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"QrFtNkZG\"></iframe>\r\n\r\n**Complexity Analysis**\r\n\r\n* Time Complexity:  $$O(N)$$, where $$N$$ is the length of `start` and `end`.\r\n\r\n* Space Complexity:  $$O(1)$$.\r\n\r\n---\r\n\r\nAnalysis written by: [@awice](https://leetcode.com/awice).  Approach #2 inspired by [vegito2002](https://discuss.leetcode.com/post/246144).",
    "contentTypeId": "107",
    "rating": {
      "id": "401",
      "count": 18,
      "average": 3.556,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "\"X\"\n\"L\"",
  "metaData": "{\r\n  \"name\": \"canTransform\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"start\",\r\n      \"type\": \"string\"\r\n    },\r\n    {\r\n      \"name\": \"end\",\r\n      \"type\": \"string\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"boolean\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
