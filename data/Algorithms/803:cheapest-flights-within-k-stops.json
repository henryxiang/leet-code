{
  "questionId": "803",
  "questionFrontendId": "787",
  "boundTopicId": null,
  "title": "Cheapest Flights Within K Stops",
  "titleSlug": "cheapest-flights-within-k-stops",
  "categoryTitle": "Algorithms",
  "content": "<p>There are <code>n</code> cities connected by&nbsp;<code>m</code> flights. Each fight starts from city&nbsp;<code>u </code>and arrives at&nbsp;<code>v</code> with a price <code>w</code>.</p>\r\n\r\n<p>Now given all the cities and flights, together with starting city <code>src</code> and the destination&nbsp;<code>dst</code>, your task is to find the cheapest price from <code>src</code> to <code>dst</code> with up to <code>k</code> stops. If there is no such route, output <code>-1</code>.</p>\r\n\r\n<pre>\r\n<strong>Example 1:</strong>\r\n<strong>Input:</strong> \r\nn = 3, edges = [[0,1,100],[1,2,100],[0,2,500]]\r\nsrc = 0, dst = 2, k = 1\r\n<strong>Output:</strong> 200\r\n<strong>Explanation:</strong> \r\nThe graph looks like this:\r\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/02/16/995.png\" style=\"height:180px; width:246px\" />\r\n\r\nThe cheapest price from city <code>0</code> to city <code>2</code> with at most 1 stop costs 200, as marked red in the picture.</pre>\r\n\r\n<pre>\r\n<strong>Example 2:</strong>\r\n<strong>Input:</strong> \r\nn = 3, edges = [[0,1,100],[1,2,100],[0,2,500]]\r\nsrc = 0, dst = 2, k = 0\r\n<strong>Output:</strong> 500\r\n<strong>Explanation:</strong> \r\nThe graph looks like this:\r\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/02/16/995.png\" style=\"height:180px; width:246px\" />\r\n\r\nThe cheapest price from city <code>0</code> to city <code>2</code> with at most 0 stop costs 500, as marked blue in the picture.</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>The number of&nbsp;nodes&nbsp;<code>n</code> will be&nbsp;in range <code>[1, 100]</code>, with nodes labeled from <code>0</code> to <code>n</code><code> - 1</code>.</li>\r\n\t<li>The&nbsp;size of <code>flights</code> will be&nbsp;in range <code>[0, n * (n - 1) / 2]</code>.</li>\r\n\t<li>The format of each flight will be <code>(src, </code><code>dst</code><code>, price)</code>.</li>\r\n\t<li>The price of each flight will be in the range <code>[1, 10000]</code>.</li>\r\n\t<li><code>k</code> is in the range of <code>[0, n - 1]</code>.</li>\r\n\t<li>There&nbsp;will&nbsp;not&nbsp;be&nbsp;any&nbsp;duplicated&nbsp;flights or&nbsp;self&nbsp;cycles.</li>\r\n</ul>\r\n",
  "isPaidOnly": false,
  "difficulty": "Medium",
  "likes": 1105,
  "dislikes": 39,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"Maximum Vacation Days\", \"titleSlug\": \"maximum-vacation-days\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
  "contributors": [
    {
      "username": "1337c0d3r",
      "profileUrl": "/1337c0d3r/",
      "avatarUrl": "https://assets.leetcode.com/users/1337c0d3r/avatar_1547177258.png"
    }
  ],
  "topicTags": [
    {
      "name": "Dynamic Programming",
      "slug": "dynamic-programming"
    },
    {
      "name": "Heap",
      "slug": "heap"
    },
    {
      "name": "Breadth-first Search",
      "slug": "breadth-first-search"
    }
  ],
  "companyTagStats": "{\"1\": [{\"taggedByAdmin\": true, \"name\": \"Airbnb\", \"slug\": \"airbnb\", \"timesEncountered\": 13}, {\"taggedByAdmin\": false, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 4}], \"3\": [{\"taggedByAdmin\": false, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 7}, {\"taggedByAdmin\": false, \"name\": \"Microsoft\", \"slug\": \"microsoft\", \"timesEncountered\": 2}], \"2\": [{\"taggedByAdmin\": false, \"name\": \"Bloomberg\", \"slug\": \"bloomberg\", \"timesEncountered\": 2}]}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int K) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int findCheapestPrice(int n, int[][] flights, int src, int dst, int K) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def findCheapestPrice(self, n, flights, src, dst, K):\n        \"\"\"\n        :type n: int\n        :type flights: List[List[int]]\n        :type src: int\n        :type dst: int\n        :type K: int\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def findCheapestPrice(self, n: int, flights: List[List[int]], src: int, dst: int, K: int) -> int:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nint findCheapestPrice(int n, int** flights, int flightsSize, int* flightsColSize, int src, int dst, int K){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public int FindCheapestPrice(int n, int[][] flights, int src, int dst, int K) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number} n\n * @param {number[][]} flights\n * @param {number} src\n * @param {number} dst\n * @param {number} K\n * @return {number}\n */\nvar findCheapestPrice = function(n, flights, src, dst, K) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer} n\n# @param {Integer[][]} flights\n# @param {Integer} src\n# @param {Integer} dst\n# @param {Integer} k\n# @return {Integer}\ndef find_cheapest_price(n, flights, src, dst, k)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func findCheapestPrice(_ n: Int, _ flights: [[Int]], _ src: Int, _ dst: Int, _ K: Int) -> Int {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func findCheapestPrice(n int, flights [][]int, src int, dst int, K int) int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def findCheapestPrice(n: Int, flights: Array[Array[Int]], src: Int, dst: Int, K: Int): Int = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun findCheapestPrice(n: Int, flights: Array<IntArray>, src: Int, dst: Int, K: Int): Int {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn find_cheapest_price(n: i32, flights: Vec<Vec<i32>>, src: i32, dst: i32, k: i32) -> i32 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $flights\n     * @param Integer $src\n     * @param Integer $dst\n     * @param Integer $K\n     * @return Integer\n     */\n    function findCheapestPrice($n, $flights, $src, $dst, $K) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"61.4K\", \"totalSubmission\": \"166.5K\", \"totalAcceptedRaw\": 61364, \"totalSubmissionRaw\": 166539, \"acRate\": \"36.8%\"}",
  "hints": [],
  "solution": {
    "id": "418",
    "canSeeDetail": true,
    "url": "/articles/cheapest-flights-within-k-stops/",
    "content": "[TOC]\r\n\r\n---\r\n#### Approach #1: Maintain Cheapest To Target [Accepted]\r\n\r\n**Intuition and Algorithm**\r\n\r\nSay `pre[node]` is the smallest distance to that node within `T` stops.  Let's try to find the smallest distance `dis[node]` to that node within `T+1` rounds.  For every `edge in flights` that connects places `u` and `v` with cost `w`, the new distance would be `dis[v] = min(dis[v], pre[u] + w)`.\r\n\r\nActually, we'll use `dis = dist[0]` and `pre = dist[1]` initially.  That will let us reuse the arrays `dis = dist[1]` and `pre = dist[0]` for the next iteration `(i = 1)` in our loop, and so on.\r\n\r\n<iframe src=\"https://leetcode.com/playground/M9sPwuuL/shared\" frameBorder=\"0\" width=\"100%\" height=\"310\" name=\"M9sPwuuL\"></iframe>\r\n\r\n**Complexity Analysis**\r\n\r\n* Time Complexity:  $$O(E * K)$$, where $$E$$ is the length of `flights`.\r\n\r\n* Space Complexity:  $$O(n)$$, the space used to store `dis` and `pre`.\r\n\r\n\r\n---\r\n#### Approach #2: Dijkstra's [Accepted]\r\n\r\n**Intuition**\r\n\r\nInstead of nodes being places, use places and number of stops.  We want to find the lowest cost from source to target, which makes Dijkstra's a good candidate algorithm.\r\n\r\nIf we continually extend our potential flightpaths in order of cost, we know once we've reached the destination `dst` that it was the lowest cost way to get there.  This is the idea behind Dijkstra's algorithm.\r\n\r\n**Algorithm**\r\n\r\nDijkstra's algorithm uses a priority queue to continually search the next node with the lowest cost.  \r\n\r\nIf we've come to a node and it has a lower recorded cost or we've taken too many steps, we don't need to search it.  If we reach our destination, because we are searching in order of lowest cost first, it must have the lowest cost.\r\n\r\nOtherwise, for every outbound flight from `node` that is better, we'll add it to our priority queue of things to search.\r\n\r\n<iframe src=\"https://leetcode.com/playground/ZUecitsh/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"ZUecitsh\"></iframe>\r\n\r\n**Complexity Analysis**\r\n\r\n* Time Complexity:  $$O(E + n \\log n)$$, where $$E$$ is the total number of flights.\r\n\r\n* Space Complexity:  $$O(n)$$, the size of the heap.\r\n\r\n---\r\n\r\nAnalysis written by: [@awice](https://leetcode.com/awice).  Approach #1 inspired by @chenl3.",
    "contentTypeId": "107",
    "rating": {
      "id": "413",
      "count": 82,
      "average": 1.744,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "3\n[[0,1,100],[1,2,100],[0,2,500]]\n0\n2\n1",
  "metaData": "{\r\n  \"name\": \"findCheapestPrice\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"n\",\r\n      \"type\": \"integer\"\r\n    },\r\n    {\r\n      \"name\": \"flights\",\r\n      \"type\": \"integer[][]\"\r\n    },\r\n    {\r\n      \"name\": \"src\",\r\n      \"type\": \"integer\"\r\n    },\r\n    {\r\n      \"name\": \"dst\",\r\n      \"type\": \"integer\"\r\n    },\r\n    {\r\n      \"name\": \"K\",\r\n      \"type\": \"integer\"\r\n    }\r\n\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
