{
  "questionId": "806",
  "questionFrontendId": "790",
  "boundTopicId": null,
  "title": "Domino and Tromino Tiling",
  "titleSlug": "domino-and-tromino-tiling",
  "categoryTitle": "Algorithms",
  "content": "<p>We have two types of tiles: a 2x1 domino shape, and an &quot;L&quot; tromino shape. These shapes may be rotated.</p>\r\n\r\n<pre>\r\nXX  &lt;- domino\r\n\r\nXX  &lt;- &quot;L&quot; tromino\r\nX\r\n</pre>\r\n\r\n<p>Given N, how many ways are there to tile a 2 x N board? <strong>Return your answer modulo 10^9 + 7</strong>.</p>\r\n\r\n<p>(In a tiling, every square must be covered by a tile. Two tilings are different if and only if there are two 4-directionally adjacent cells on the board such that exactly one of the tilings has both squares occupied by a tile.)</p>\r\n\r\n\r\n<pre>\r\n<strong>Example:</strong>\r\n<strong>Input:</strong> 3\r\n<strong>Output:</strong> 5\r\n<strong>Explanation:</strong> \r\nThe five different ways are listed below, different letters indicates different tiles:\r\nXYZ XXZ XYY XXY XYY\r\nXYZ YYZ XZZ XYY XXY</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>N&nbsp; will be in range <code>[1, 1000]</code>.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n",
  "isPaidOnly": false,
  "difficulty": "Medium",
  "likes": 303,
  "dislikes": 159,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [
    {
      "username": "awice",
      "profileUrl": "/awice/",
      "avatarUrl": "https://assets.leetcode.com/users/awice/avatar_1576905115.png"
    }
  ],
  "topicTags": [
    {
      "name": "Dynamic Programming",
      "slug": "dynamic-programming"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 2}], \"1\": [], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    int numTilings(int N) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int numTilings(int N) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def numTilings(self, N):\n        \"\"\"\n        :type N: int\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def numTilings(self, N: int) -> int:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nint numTilings(int N){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public int NumTilings(int N) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number} N\n * @return {number}\n */\nvar numTilings = function(N) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer} n\n# @return {Integer}\ndef num_tilings(n)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func numTilings(_ N: Int) -> Int {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func numTilings(N int) int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def numTilings(N: Int): Int = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun numTilings(N: Int): Int {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn num_tilings(n: i32) -> i32 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer $N\n     * @return Integer\n     */\n    function numTilings($N) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"11K\", \"totalSubmission\": \"29.2K\", \"totalAcceptedRaw\": 10954, \"totalSubmissionRaw\": 29236, \"acRate\": \"37.5%\"}",
  "hints": [],
  "solution": {
    "id": "420",
    "canSeeDetail": true,
    "url": "/articles/domino-and-tromino-tiling/",
    "content": "[TOC]\r\n\r\n---\r\n#### Approach #1: Dynamic Programming [Accepted]\r\n\r\n**Intuition**\r\n\r\nLet `dp[state]` be the previous number of ways to fill `i` columns where the i-th row of the last column is filled if the i-th bit of `state` is 1.\r\n\r\nIn particular, `dp[0]` will be the number of ways to fill `i` columns where the last column has nothing filled; `dp[1]` will be the number of ways with the square in the last row filled; `dp[2]` will be the number of ways with the square in the first row filled; and `dp[3]` will be the number of ways with the squares in both rows filled.\r\n\r\nFrom there, we only have to accurately record the transitions.\r\n\r\n**Algorithm**\r\n\r\nIf in the future we have:\r\n\r\n* 0 rows filled - it could have come from either:\r\n    * having 0 rows filled and a vertical domino, or\r\n    * both rows filled and nothing.\r\n\r\n* last row filled - it could have come from either:\r\n    * having 0 rows filled and an L shaped tromino, or\r\n    * having top row filled and a horizontal domino\r\n\r\n\r\n* first row filled - case is symmetric to the 'last row filled' case\r\n\r\n* both rows filled - could have come from either:\r\n    * having 0 rows filled and two horizontal dominos, or\r\n    * having 1 row filled and an L shaped tromino (two cases.)\r\n\r\nAfter writing the recurrence correctly, the solution follows.\r\n\r\n<br />\r\n<center>\r\n    <img src=\"../Figures/790/possible.png\" alt=\"Diagram of domino/tromino possibilities\" width=\"350\"/>\r\n</center>\r\n<br />\r\n\r\n<iframe src=\"https://leetcode.com/playground/d4TBwqoQ/shared\" frameBorder=\"0\" width=\"100%\" height=\"310\" name=\"d4TBwqoQ\"></iframe>\r\n\r\n**Complexity Analysis**\r\n\r\n* Time Complexity:  $$O(N)$$.  We update the state `N` times.\r\n\r\n* Space Complexity:  $$O(1)$$.\r\n\r\n---\r\n#### Approach #2: Matrix Exponentiation\r\n\r\n**Intuition**\r\n\r\nThe recurrence expressed in *Approach #1* expressed states that transitioned to a linear combination of other states.  Any time this happens, we can represent the entire transition as a matrix of those linear combinations.  Then, the $$n$$-th power of this matrix represents the transition of $$n$$ moves, and thus we can reduce the problem to a problem of matrix exponentiation.\r\n\r\n**Algorithm**\r\n\r\nLet $$T$$ be the linear transformation taking `dp -> ndp` under the notation in *Approach #1*.  Then, the matrix $$T^n$$ represents the transformation $$n$$ times in a row.\r\n\r\nTo compute $$T^n$$ efficiently, we use the trick $$T^{2k} = T^k * T^k$$ and $$T^{2k + 1} = T * T^{2k}$$ to reduce the exponentiation to $$O(\\log n)$$ multiplications.  To multiply two matrices, we use the textbook definition.\r\n\r\n<iframe src=\"https://leetcode.com/playground/gJC3nNkc/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"gJC3nNkc\"></iframe>\r\n\r\n**Complexity Analysis**\r\n\r\n* Time Complexity:  $$O(\\log N)$$.  We perform $$O(\\log N)$$ multiplications.\r\n\r\n* Space Complexity:  $$O(\\log N)$$, the size of the recursive call stack.\r\n\r\n---\r\n\r\nAnalysis written by: [@awice](https://leetcode.com/awice).  Approach #2 inspired by [@ngoc_lam](https://leetcode.com/problems/domino-and-tromino-tiling/discuss/116546/Using-recurrence-Log(N)-very-Quick-LOG(N)-in-java-can-run-with-N-1000000000).",
    "contentTypeId": "107",
    "rating": {
      "id": "415",
      "count": 14,
      "average": 4.357,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "3",
  "metaData": "{\r\n  \"name\": \"numTilings\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"N\",\r\n      \"type\": \"integer\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
