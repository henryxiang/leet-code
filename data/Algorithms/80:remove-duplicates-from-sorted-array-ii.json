{
  "questionId": "80",
  "questionFrontendId": "80",
  "boundTopicId": null,
  "title": "Remove Duplicates from Sorted Array II",
  "titleSlug": "remove-duplicates-from-sorted-array-ii",
  "categoryTitle": "Algorithms",
  "content": "<p>Given a sorted array <em>nums</em>, remove the duplicates <a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\"><strong>in-place</strong></a> such that duplicates appeared at most&nbsp;<em>twice</em> and return the new length.</p>\r\n\r\n<p>Do not allocate extra space for another array, you must do this by <strong>modifying the input array <a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\">in-place</a></strong> with O(1) extra memory.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\nGiven <em>nums</em> = <strong>[1,1,1,2,2,3]</strong>,\r\n\r\nYour function should return length = <strong><code>5</code></strong>, with the first five elements of <em><code>nums</code></em> being <strong><code>1, 1, 2, 2</code></strong> and <strong>3</strong> respectively.\r\n\r\nIt doesn&#39;t matter what you leave beyond the returned length.</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\nGiven <em>nums</em> = <strong>[0,0,1,1,1,1,2,3,3]</strong>,\r\n\r\nYour function should return length = <strong><code>7</code></strong>, with the first seven elements of <em><code>nums</code></em> being modified to&nbsp;<strong><code>0</code></strong>, <strong>0</strong>, <strong>1</strong>, <strong>1</strong>, <strong>2</strong>, <strong>3</strong> and&nbsp;<strong>3</strong> respectively.\r\n\r\nIt doesn&#39;t matter what values are set beyond&nbsp;the returned length.\r\n</pre>\r\n\r\n<p><strong>Clarification:</strong></p>\r\n\r\n<p>Confused why the returned value is an integer but your answer is an array?</p>\r\n\r\n<p>Note that the input array is passed in by <strong>reference</strong>, which means modification to the input array will be known to the caller as well.</p>\r\n\r\n<p>Internally you can think of this:</p>\r\n\r\n<pre>\r\n// <strong>nums</strong> is passed in by reference. (i.e., without making a copy)\r\nint len = removeDuplicates(nums);\r\n\r\n// any modification to <strong>nums</strong> in your function would be known by the caller.\r\n// using the length returned by your function, it prints the first <strong>len</strong> elements.\r\nfor (int i = 0; i &lt; len; i++) {\r\n&nbsp; &nbsp; print(nums[i]);\r\n}\r\n</pre>\r\n",
  "isPaidOnly": false,
  "difficulty": "Medium",
  "likes": 840,
  "dislikes": 620,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"Remove Duplicates from Sorted Array\", \"titleSlug\": \"remove-duplicates-from-sorted-array\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
  "contributors": [],
  "topicTags": [
    {
      "name": "Array",
      "slug": "array"
    },
    {
      "name": "Two Pointers",
      "slug": "two-pointers"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": false, \"name\": \"Bloomberg\", \"slug\": \"bloomberg\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Baidu\", \"slug\": \"baidu\", \"timesEncountered\": 2}, {\"taggedByAdmin\": true, \"name\": \"Facebook\", \"slug\": \"facebook\", \"timesEncountered\": 0}], \"1\": [], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    int removeDuplicates(vector<int>& nums) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int removeDuplicates(int[] nums) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def removeDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def removeDuplicates(self, nums: List[int]) -> int:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nint removeDuplicates(int* nums, int numsSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public int RemoveDuplicates(int[] nums) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar removeDuplicates = function(nums) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef remove_duplicates(nums)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func removeDuplicates(_ nums: inout [Int]) -> Int {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func removeDuplicates(nums []int) int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def removeDuplicates(nums: Array[Int]): Int = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun removeDuplicates(nums: IntArray): Int {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn remove_duplicates(nums: &mut Vec<i32>) -> i32 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function removeDuplicates(&$nums) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"231.9K\", \"totalSubmission\": \"551.2K\", \"totalAcceptedRaw\": 231896, \"totalSubmissionRaw\": 551174, \"acRate\": \"42.1%\"}",
  "hints": [],
  "solution": {
    "id": "809",
    "canSeeDetail": true,
    "url": "/articles/remove-duplicates-from-sorted-array-ii/",
    "content": "[TOC]\r\n\r\n## Solution\r\n\r\n#### Approach 1: Popping Unwanted Duplicates\r\n\r\n**Intuition**\r\n\r\nThe input array is already sorted and hence, all the duplicates appear next to each other. The problem statement mentions that we are not allowed to use any additional space and we have to modify the array in-place. The easiest approach for in-place modifications would be to get rid of all the unwanted duplicates. For every number in the array, if we detect `> 2` duplicates, we simply remove them from the list of elements and we do this for all the elements in the array.\r\n\r\n<center>\r\n<img src=\"../Figures/80/img1.png\" width=\"600\"/>\r\n</center>\r\n\r\n**Algorithm**\r\n\r\n1. The implementation is slightly tricky so to say since we will be removing elements from the array and iterating over it at the same time. So, we need to keep updating the array's indexes as and when we pop an element else we'll be accessing invalid indexes.\r\n2. Say we have two variables, `i` which is the array pointer and `count` which keeps track of the count of a particular element in the array. Note that the minimum count would always be 1. \r\n\r\n    <center>\r\n    <img src=\"../Figures/80/img2.png\" width=\"600\"/>\r\n    </center>\r\n\r\n3. We start with index `1` and process one element at a time in the array.\r\n4. If we find that the current element is the *same* as the previous element i.e. `nums[i] == nums[i - 1]`, then we increment the `count`. If the value of `count > 2`, then we have encountered an unwanted duplicate element and we can remove it from the array. Since we know the index of this element, we can use the `del` or `pop` or `remove` operation (or whatever corresponding operation is supported in your language of choice) to delete the element at index `i` from the array. Since we popped an element, we decrement the index by 1 as well.\r\n\r\n    <center>\r\n    <img src=\"../Figures/80/img3.png\" width=\"600\"/>\r\n    </center>\r\n\r\n\r\n5. If we encounter that the current element is *not* the same as the previous element i.e. `nums[i] != nums[i - 1]`, then it means we have a new element at hand and so accordingly, we update `count = 1`.\r\n\r\n    <center>\r\n    <img src=\"../Figures/80/img4.png\" width=\"600\"/>\r\n    </center>\r\n\r\n6. Since we are removing all the unwanted duplicates from the original array, the final array that remains after process all the elements will only contain the valid elements and hence we simply return the length of this array.\r\n\r\n<iframe src=\"https://leetcode.com/playground/vqxVci78/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"vqxVci78\"></iframe>\r\n\r\n**Complexity Analysis**\r\n\r\n* Time Complexity: Let's see what the costly operations in our array are:\r\n    - We have to iterate over all the elements in the array. Suppose that the original array contains `N` elements, the time taken here would be $$O(N)$$.\r\n    - Next, for every unwanted duplicate element, we will have to perform a delete operation and deletions in arrays are also $$O(N)$$.\r\n    - The worst case would be when all the elements in the array are the same. In that case, we would be performing $$N - 2$$ deletions thus giving us $$O(N^2)$$ complexity for deletions\r\n    - Overall complexity = $$O(N) + O(N^2) \\equiv O(N^2)$$.\r\n* Space Complexity: $$O(1)$$ since we are modifying the array in-place. \r\n<br>\r\n<br>\r\n\r\n---\r\n#### Approach 2: Overwriting unwanted duplicates\r\n\r\n**Intuition**\r\n\r\nThe second approach is really inspired by the fact that the problem statement asks us to return the *new length of the array* from the function. If all we had to do was *remove elements*, the function would not really ask us to return the updated length. However, in our scenario, this is really an indication that we don't need to actually remove elements from the array. Instead, we can do something better and simply overwrite the duplicate elements that are unwanted. \r\n\r\n> We won't be able to achieve this using a single pointer. We will be using a two-pointer approach where one pointer iterates over the original set of elements and another one that keeps track of the next \"empty\" location in the array or the next location that can be overwritten in the array.\r\n\r\n**Algorithm**\r\n\r\n1. We define two pointers, `i` and `j` for our algorithm. The pointer `i` iterates of the array processing one element at a time and `j` keeps track of the next location in the array where we can overwrite an element. \r\n2. We also keep a variable `count` which keeps track of the count of a particular element in the array. Note that the minimum count would always be 1. \r\n3. We start with index `1` and process one element at a time in the array.\r\n4. If we find that the current element is the *same* as the previous element i.e. `nums[i] == nums[i - 1]`, then we increment the `count`. If the value of `count > 2`, then we have encountered an unwanted duplicate element. In this case, we simply move forward i.e. we increment `i` but not `j`.\r\n5. However, if the count is `<= 2`, then we can move the element from index `i` to index `j`. \r\n\r\n    <center>\r\n    <img src=\"../Figures/80/img5.png\" width=\"600\"/>\r\n    </center>\r\n\r\n6. If we encounter that the current element is *not* the same as the previous element i.e. `nums[i] != nums[i - 1]`, then it means we have a new element at hand and so accordingly, we update `count = 1` and also move this element to index `j`.\r\n\r\n    <center>\r\n    <img src=\"../Figures/80/img6.png\" width=\"600\"/>\r\n    </center>\r\n\r\n7. It goes without saying that whenever we copy a new element to `nums[j]`, we have to update the value of `j` as well since `j` always points to the location where the next element can be copied to in the array.\r\n\r\n    <center>\r\n    <img src=\"../Figures/80/img7.png\" width=\"600\"/>\r\n    </center>\r\n\r\n<iframe src=\"https://leetcode.com/playground/GaitpZcw/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"GaitpZcw\"></iframe>\r\n        \r\n**Complexity Analysis**\r\n\r\n* Time Complexity: $$O(N)$$ since we process each element exactly once.\r\n* Space Complexity: $$O(1)$$.\r\n<br>\r\n<br>\r\n---\r\nAnalysis written by: [@sachinmalhotra1993](https://leetcode.com/sachinmalhotra1993/).",
    "contentTypeId": "107",
    "rating": {
      "id": "777",
      "count": 11,
      "average": 4.818,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "[1,1,1,2,2,3]",
  "metaData": "{\r\n  \"name\": \"removeDuplicates\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"nums\",\r\n      \"type\": \"integer[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  },\r\n  \"output\": {\r\n    \"paramindex\": 0,\r\n    \"size\": \"ret\"\r\n  }\r\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
