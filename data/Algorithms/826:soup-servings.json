{
  "questionId": "826",
  "questionFrontendId": "808",
  "boundTopicId": null,
  "title": "Soup Servings",
  "titleSlug": "soup-servings",
  "categoryTitle": "Algorithms",
  "content": "<p>There are two types of soup: type A and type B. Initially we have <code>N</code> ml of each type of soup. There are four kinds of operations:</p>\r\n\r\n<ol>\r\n\t<li>Serve&nbsp;100 ml of soup A and 0 ml of soup B</li>\r\n\t<li>Serve&nbsp;75 ml of soup A and 25&nbsp;ml of soup B</li>\r\n\t<li>Serve 50 ml of soup A and 50 ml of soup B</li>\r\n\t<li>Serve 25&nbsp;ml of soup A and 75&nbsp;ml of soup B</li>\r\n</ol>\r\n\r\n<p>When we serve some soup, we give it to someone and we no longer have it.&nbsp; Each turn,&nbsp;we will choose from the four operations with equal probability 0.25. If the remaining volume of soup is not enough to complete the operation, we will serve&nbsp;as much as we can.&nbsp; We stop once we no longer have some quantity of both types of soup.</p>\r\n\r\n<p>Note that we do not have the operation where all 100 ml&#39;s of soup B are used first.&nbsp;&nbsp;</p>\r\n\r\n<p>Return the probability that soup A will be empty&nbsp;first, plus half the probability that A and B become empty at the same time.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<pre>\r\n<strong>Example:</strong>\r\n<strong>Input:</strong> N = 50\r\n<strong>Output:</strong> 0.625\r\n<strong>Explanation:</strong> \r\nIf we choose the first two operations, A will become empty first. For the third operation, A and B will become empty at the same time. For the fourth operation, B will become empty first. So the total probability of A becoming empty first plus half the probability that A and B become empty at the same time, is 0.25 * (1 + 1 + 0.5 + 0) = 0.625.\r\n\r\n</pre>\r\n\r\n<p><strong>Notes: </strong></p>\r\n\r\n<ul>\r\n\t<li><code>0 &lt;= N &lt;= 10^9</code>.&nbsp;</li>\r\n\t<li>Answers within&nbsp;<code>10^-6</code>&nbsp;of the true value will be accepted as correct.</li>\r\n</ul>\r\n",
  "isPaidOnly": false,
  "difficulty": "Medium",
  "likes": 120,
  "dislikes": 418,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [
    {
      "username": "awice",
      "profileUrl": "/awice/",
      "avatarUrl": "https://assets.leetcode.com/users/awice/avatar_1576905115.png"
    }
  ],
  "topicTags": [
    {
      "name": "Dynamic Programming",
      "slug": "dynamic-programming"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 0}], \"1\": [], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    double soupServings(int N) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public double soupServings(int N) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def soupServings(self, N):\n        \"\"\"\n        :type N: int\n        :rtype: float\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def soupServings(self, N: int) -> float:\n        "
    },
    {
      "lang": "C",
      "code": "\n\ndouble soupServings(int N){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public double SoupServings(int N) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number} N\n * @return {number}\n */\nvar soupServings = function(N) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer} n\n# @return {Float}\ndef soup_servings(n)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func soupServings(_ N: Int) -> Double {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func soupServings(N int) float64 {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def soupServings(N: Int): Double = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun soupServings(N: Int): Double {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn soup_servings(n: i32) -> f64 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer $N\n     * @return Float\n     */\n    function soupServings($N) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"7.7K\", \"totalSubmission\": \"20K\", \"totalAcceptedRaw\": 7724, \"totalSubmissionRaw\": 19993, \"acRate\": \"38.6%\"}",
  "hints": [],
  "solution": {
    "id": "441",
    "canSeeDetail": true,
    "url": "/articles/soup-servings/",
    "content": "[TOC]\n\n---\n#### Approach #1: Dynamic Programming [Accepted]\n\n**Intuition**\n\nFirst, we can simplify all the numbers by dividing by 25.  More specifically, each unit is 25ml, and partial quantities of 25ml are rounded up to a full quantity.\n\nWhen `N` is small, this is a relatively straightforward dynamic programming problem: we have quantities of soup represented by the state `(x, y)`, and we can either go to `(x-4, y-0)`, `(x-3, y-1)`, `(x-2, y-2)`, or `(x-1, y-3)` each with equal probability.  \n\nWhen `N` is very large, this approach fails, so we need a different idea.\n\nInstead of serving in batches of `(4, 0), (3, 1), (2, 2), (1, 3)`, pretend we serve `(1, 0)` on the side first, and then serve from the fair distribution `(3, 0), (2, 1), (1, 2), (0, 3)`.  If the pots of soup initially start at `(N, N)`, then after roughly less than `N/2` servings, one pot will still have soup.  Because of the `(1, 0)` servings on the side, this means that roughly speaking, pot `A` is used first if we serve `N/2` fairly from the first pot before `N` from the second pot.\n\nWhen `N` is very large, this almost always happens (better than 99.9999%, so we can output 1), and we can check this either experimentally or mathematically.\n\n**Algorithm**\n\nWe convert all units by dividing by 25 and rounding up.  If `N >= 500` (in new units), then by the above argument the answer is `1`.\n\nOtherwise, we will perform a dynamic programming algorithm to find the answer.  Our Java implementation showcases a \"bottom-up\" approach, that fills `memo` diagonally from top left to bottom right, where `s = i + j` is the sum of the indices.  Our Python implemtation showcases a \"top-down\" approach that uses memoization.\n\n<iframe src=\"https://leetcode.com/playground/aS5JpTPa/shared\" frameBorder=\"0\" width=\"100%\" height=\"497\" name=\"aS5JpTPa\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: $$O(1)$$.  (There exists a constant `C` such that the algorithm never performs more than `C` steps.)\n\n* Space Complexity: $$O(1)$$.  (There exists a constant `C` such that the algorithm never uses more than `C` space.)\n\n---\n\nAnalysis written by: [@awice](https://leetcode.com/awice).",
    "contentTypeId": "107",
    "rating": {
      "id": "436",
      "count": 33,
      "average": 1.879,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "50",
  "metaData": "{\r\n  \"name\": \"soupServings\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"N\",\r\n      \"type\": \"integer\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"double\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
