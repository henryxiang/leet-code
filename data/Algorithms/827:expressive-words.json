{
  "questionId": "827",
  "questionFrontendId": "809",
  "boundTopicId": null,
  "title": "Expressive Words",
  "titleSlug": "expressive-words",
  "categoryTitle": "Algorithms",
  "content": "<p>Sometimes people repeat letters to represent extra feeling, such as &quot;hello&quot; -&gt; &quot;heeellooo&quot;, &quot;hi&quot; -&gt; &quot;hiiii&quot;.&nbsp; In these strings like &quot;heeellooo&quot;, we have <em>groups</em> of adjacent letters that are all the same:&nbsp; &quot;h&quot;, &quot;eee&quot;, &quot;ll&quot;, &quot;ooo&quot;.</p>\r\n\r\n<p>For some given string <code>S</code>, a query word is <em>stretchy</em> if it can be made to be equal to <code>S</code> by any&nbsp;number of&nbsp;applications of the following <em>extension</em> operation: choose a group consisting of&nbsp;characters <code>c</code>, and add some number of characters <code>c</code> to the group so that the size of the group is 3 or more.</p>\r\n\r\n<p>For example, starting with &quot;hello&quot;, we could do an extension on the group &quot;o&quot; to get &quot;hellooo&quot;, but we cannot get &quot;helloo&quot; since the group &quot;oo&quot; has size less than 3.&nbsp; Also, we could do another extension like &quot;ll&quot; -&gt; &quot;lllll&quot; to get &quot;helllllooo&quot;.&nbsp; If <code>S = &quot;helllllooo&quot;</code>, then the query word &quot;hello&quot; would be stretchy because of these two extension operations:&nbsp;<code>query = &quot;hello&quot; -&gt; &quot;hellooo&quot; -&gt;&nbsp;&quot;helllllooo&quot; = S</code>.</p>\r\n\r\n<p>Given a list of query words, return the number of words that are stretchy.&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<pre>\r\n<strong>Example:</strong>\r\n<strong>Input:</strong> \r\nS = &quot;heeellooo&quot;\r\nwords = [&quot;hello&quot;, &quot;hi&quot;, &quot;helo&quot;]\r\n<strong>Output:</strong> 1\r\n<strong>Explanation:</strong> \r\nWe can extend &quot;e&quot; and &quot;o&quot; in the word &quot;hello&quot; to get &quot;heeellooo&quot;.\r\nWe can&#39;t extend &quot;helo&quot; to get &quot;heeellooo&quot; because the group &quot;ll&quot; is not size 3 or more.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Notes: </strong></p>\r\n\r\n<ul>\r\n\t<li><code>0 &lt;= len(S) &lt;= 100</code>.</li>\r\n\t<li><code>0 &lt;= len(words) &lt;= 100</code>.</li>\r\n\t<li><code>0 &lt;= len(words[i]) &lt;= 100</code>.</li>\r\n\t<li><code>S</code> and all words in <code>words</code>&nbsp;consist only of&nbsp;lowercase letters</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n",
  "isPaidOnly": false,
  "difficulty": "Medium",
  "likes": 158,
  "dislikes": 507,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [
    {
      "username": "awice",
      "profileUrl": "/awice/",
      "avatarUrl": "https://assets.leetcode.com/users/awice/avatar_1576905115.png"
    }
  ],
  "topicTags": [
    {
      "name": "String",
      "slug": "string"
    }
  ],
  "companyTagStats": "{\"1\": [{\"taggedByAdmin\": true, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 15}], \"2\": [], \"3\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    int expressiveWords(string S, vector<string>& words) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int expressiveWords(String S, String[] words) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def expressiveWords(self, S, words):\n        \"\"\"\n        :type S: str\n        :type words: List[str]\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def expressiveWords(self, S: str, words: List[str]) -> int:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nint expressiveWords(char * S, char ** words, int wordsSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public int ExpressiveWords(string S, string[] words) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {string} S\n * @param {string[]} words\n * @return {number}\n */\nvar expressiveWords = function(S, words) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {String} s\n# @param {String[]} words\n# @return {Integer}\ndef expressive_words(s, words)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func expressiveWords(_ S: String, _ words: [String]) -> Int {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func expressiveWords(S string, words []string) int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def expressiveWords(S: String, words: Array[String]): Int = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun expressiveWords(S: String, words: Array<String>): Int {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn expressive_words(s: String, words: Vec<String>) -> i32 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param String $S\n     * @param String[] $words\n     * @return Integer\n     */\n    function expressiveWords($S, $words) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"24.2K\", \"totalSubmission\": \"52.6K\", \"totalAcceptedRaw\": 24177, \"totalSubmissionRaw\": 52633, \"acRate\": \"45.9%\"}",
  "hints": [],
  "solution": {
    "id": "442",
    "canSeeDetail": true,
    "url": "/articles/expressive-words/",
    "content": "[TOC]\n\n---\n#### Approach #1: Run Length Encoding [Accepted]\n\n**Intuition**\n\nFor some word, write the head character of every group, and the count of that group.  For example, for `\"abbcccddddaaaaa\"`, we'll write the \"key\" of `\"abcda\"`, and the \"count\" `[1,2,3,4,5]`.\n\nLet's see if a `word` is stretchy.  Evidently, it needs to have the same key as `S`.\n\nNow, let's say we have individual counts `c1 = S.count[i]` and `c2 = word.count[i]`.\n\n* If `c1 < c2`, then we can't make the `i`th group of `word` equal to the `i`th word of `S` by adding characters.\n\n* If `c1 >= 3`, then we can add letters to the `i`th group of `word` to match the `i`th group of `S`, as the latter is *extended*.\n\n* Else, if `c1 < 3`, then we must have `c2 == c1` for the `i`th groups of `word` and `S` to match.\n\n<iframe src=\"https://leetcode.com/playground/CtqN5Fqo/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"CtqN5Fqo\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity:  $$O(QK)$$, where $$Q$$ is the length of `words` (at least 1), and $$K$$ is the maximum length of a word.\n\n* Space Complexity: $$O(K)$$.\n\n---\n\nAnalysis written by: [@awice](https://leetcode.com/awice).",
    "contentTypeId": "107",
    "rating": {
      "id": "437",
      "count": 19,
      "average": 4,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "\"heeellooo\"\n[\"hello\", \"hi\", \"helo\"]",
  "metaData": "{\r\n  \"name\": \"expressiveWords\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"S\",\r\n      \"type\": \"string\"\r\n    },\r\n    {\r\n      \"name\": \"words\",\r\n      \"type\": \"string[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
