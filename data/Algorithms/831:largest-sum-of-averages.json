{
  "questionId": "831",
  "questionFrontendId": "813",
  "boundTopicId": null,
  "title": "Largest Sum of Averages",
  "titleSlug": "largest-sum-of-averages",
  "categoryTitle": "Algorithms",
  "content": "<p>We partition a row of numbers <code>A</code>&nbsp;into at most <code>K</code> adjacent (non-empty) groups, then our score is the sum of the average of each group. What is the largest score we can achieve?</p>\r\n\r\n<p>Note that our partition must use every number in A, and that scores are not necessarily integers.</p>\r\n\r\n<pre>\r\n<strong>Example:</strong>\r\n<strong>Input:</strong> \r\nA = [9,1,2,3,9]\r\nK = 3\r\n<strong>Output:</strong> 20\r\n<strong>Explanation:</strong> \r\nThe best choice is to partition A into [9], [1, 2, 3], [9]. The answer is 9 + (1 + 2 + 3) / 3 + 9 = 20.\r\nWe could have also partitioned A into [9, 1], [2], [3, 9], for example.\r\nThat partition would lead to a score of 5 + 2 + 6 = 13, which is worse.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note: </strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= A.length &lt;= 100</code>.</li>\r\n\t<li><code>1 &lt;= A[i] &lt;= 10000</code>.</li>\r\n\t<li><code>1 &lt;= K &lt;= A.length</code>.</li>\r\n\t<li>Answers within <code>10^-6</code> of the correct answer will be accepted as correct.</li>\r\n</ul>\r\n",
  "isPaidOnly": false,
  "difficulty": "Medium",
  "likes": 668,
  "dislikes": 27,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [
    {
      "username": "ngoc_lam",
      "profileUrl": "/ngoc_lam/",
      "avatarUrl": "https://assets.leetcode.com/users/ngoc_lam/avatar_1528594557.png"
    }
  ],
  "topicTags": [
    {
      "name": "Dynamic Programming",
      "slug": "dynamic-programming"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": false, \"name\": \"Baidu\", \"slug\": \"baidu\", \"timesEncountered\": 2}, {\"taggedByAdmin\": true, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 0}], \"1\": [], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    double largestSumOfAverages(vector<int>& A, int K) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public double largestSumOfAverages(int[] A, int K) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def largestSumOfAverages(self, A, K):\n        \"\"\"\n        :type A: List[int]\n        :type K: int\n        :rtype: float\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def largestSumOfAverages(self, A: List[int], K: int) -> float:\n        "
    },
    {
      "lang": "C",
      "code": "\n\ndouble largestSumOfAverages(int* A, int ASize, int K){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public double LargestSumOfAverages(int[] A, int K) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number[]} A\n * @param {number} K\n * @return {number}\n */\nvar largestSumOfAverages = function(A, K) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer[]} a\n# @param {Integer} k\n# @return {Float}\ndef largest_sum_of_averages(a, k)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func largestSumOfAverages(_ A: [Int], _ K: Int) -> Double {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func largestSumOfAverages(A []int, K int) float64 {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def largestSumOfAverages(A: Array[Int], K: Int): Double = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun largestSumOfAverages(A: IntArray, K: Int): Double {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn largest_sum_of_averages(a: Vec<i32>, k: i32) -> f64 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer[] $A\n     * @param Integer $K\n     * @return Float\n     */\n    function largestSumOfAverages($A, $K) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"17.9K\", \"totalSubmission\": \"37.7K\", \"totalAcceptedRaw\": 17918, \"totalSubmissionRaw\": 37681, \"acRate\": \"47.6%\"}",
  "hints": [],
  "solution": {
    "id": "446",
    "canSeeDetail": true,
    "url": "/articles/largest-sum-of-averages/",
    "content": "[TOC]\n\n---\n#### Approach #1: Dynamic Programming [Accepted]\n\n**Intuition**\n\nThe best score partitioning `A[i:]` into at most `K` parts depends on answers to paritioning `A[j:]` (`j > i`) into less parts.  We can use dynamic programming as the states form a directed acyclic graph.\n\n**Algorithm**\n\nLet `dp(i, k)` be the best score partioning `A[i:]` into at most `K` parts.\n\nIf the first group we partition `A[i:]` into ends before `j`, then our candidate partition has score `average(i, j) + dp(j, k-1))`, where `average(i, j) = (A[i] + A[i+1] + ... + A[j-1]) / (j - i)` (floating point division).  We take the highest score of these, keeping in mind we don't necessarily need to partition - `dp(i, k)` can also be just `average(i, N)`.\n\nIn total, our recursion in the general case is `dp(i, k) = max(average(i, N), max_{j > i}(average(i, j) + dp(j, k-1)))`.\n\nWe can calculate `average` a little bit faster by remembering prefix sums.  If `P[x+1] = A[0] + A[1] + ... + A[x]`, then `average(i, j) = (P[j] - P[i]) / (j - i)`.\n\nOur implementation showcases a \"bottom-up\" style of dp.  Here at loop number `k` in our outer-most loop, `dp[i]` represents `dp(i, k)` from the discussion above, and we are calculating the next layer `dp(i, k+1)`.  The end of our second loop `for i = 0..N-1` represents finishing the calculation of the correct value for `dp(i, t)`, and the inner-most loop performs the calculation `max_{j > i}(average(i, j) + dp(j, k))`.\n\n<iframe src=\"https://leetcode.com/playground/Eem7Vreg/shared\" frameBorder=\"0\" width=\"100%\" height=\"378\" name=\"Eem7Vreg\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity:  $$O(K * N^2)$$, where $$N$$ is the length of `A`.\n\n* Space Complexity: $$O(N)$$, the size of `dp`.\n\n---\n\nAnalysis written by: [@awice](https://leetcode.com/awice).",
    "contentTypeId": "107",
    "rating": {
      "id": "441",
      "count": 27,
      "average": 3.926,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "[9,1,2,3,9]\n3",
  "metaData": "{\r\n  \"name\": \"largestSumOfAverages\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"A\",\r\n      \"type\": \"integer[]\"\r\n    },\r\n    {\r\n      \"name\": \"K\",\r\n      \"type\": \"integer\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"double\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
