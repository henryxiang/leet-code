{
  "questionId": "834",
  "questionFrontendId": "816",
  "boundTopicId": null,
  "title": "Ambiguous Coordinates",
  "titleSlug": "ambiguous-coordinates",
  "categoryTitle": "Algorithms",
  "content": "<p>We had some 2-dimensional coordinates, like <code>&quot;(1, 3)&quot;</code> or <code>&quot;(2, 0.5)&quot;</code>.&nbsp; Then, we removed&nbsp;all commas, decimal points, and spaces, and ended up with the string&nbsp;<code>S</code>.&nbsp; Return a list of strings representing&nbsp;all possibilities for what our original coordinates could have been.</p>\r\n\r\n<p>Our original representation never had extraneous zeroes, so we never started with numbers like &quot;00&quot;, &quot;0.0&quot;, &quot;0.00&quot;, &quot;1.0&quot;, &quot;001&quot;, &quot;00.01&quot;, or any other number that can be represented with&nbsp;less digits.&nbsp; Also, a decimal point within a number never occurs without at least one digit occuring before it, so we never started with numbers like &quot;.1&quot;.</p>\r\n\r\n<p>The final answer list can be returned in any order.&nbsp; Also note that all coordinates in the final answer&nbsp;have exactly one space between them (occurring after the comma.)</p>\r\n\r\n<pre>\r\n<strong>Example 1:</strong>\r\n<strong>Input:</strong> &quot;(123)&quot;\r\n<strong>Output:</strong> [&quot;(1, 23)&quot;, &quot;(12, 3)&quot;, &quot;(1.2, 3)&quot;, &quot;(1, 2.3)&quot;]\r\n</pre>\r\n\r\n<pre>\r\n<strong>Example 2:</strong>\r\n<strong>Input:</strong> &quot;(00011)&quot;\r\n<strong>Output:</strong> &nbsp;[&quot;(0.001, 1)&quot;, &quot;(0, 0.011)&quot;]\r\n<strong>Explanation:</strong> \r\n0.0, 00, 0001 or 00.01 are not allowed.\r\n</pre>\r\n\r\n<pre>\r\n<strong>Example 3:</strong>\r\n<strong>Input:</strong> &quot;(0123)&quot;\r\n<strong>Output:</strong> [&quot;(0, 123)&quot;, &quot;(0, 12.3)&quot;, &quot;(0, 1.23)&quot;, &quot;(0.1, 23)&quot;, &quot;(0.1, 2.3)&quot;, &quot;(0.12, 3)&quot;]\r\n</pre>\r\n\r\n<pre>\r\n<strong>Example 4:</strong>\r\n<strong>Input:</strong> &quot;(100)&quot;\r\n<strong>Output:</strong> [(10, 0)]\r\n<strong>Explanation:</strong> \r\n1.0 is not allowed.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note: </strong></p>\r\n\r\n<ul>\r\n\t<li><code>4 &lt;= S.length &lt;= 12</code>.</li>\r\n\t<li><code>S[0]</code> = &quot;(&quot;, <code>S[S.length - 1]</code> = &quot;)&quot;, and the other elements in <code>S</code> are digits.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n",
  "isPaidOnly": false,
  "difficulty": "Medium",
  "likes": 93,
  "dislikes": 183,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [
    {
      "username": "awice",
      "profileUrl": "/awice/",
      "avatarUrl": "https://assets.leetcode.com/users/awice/avatar_1576905115.png"
    }
  ],
  "topicTags": [
    {
      "name": "String",
      "slug": "string"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 0}], \"1\": [], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    vector<string> ambiguousCoordinates(string S) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public List<String> ambiguousCoordinates(String S) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def ambiguousCoordinates(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: List[str]\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def ambiguousCoordinates(self, S: str) -> List[str]:\n        "
    },
    {
      "lang": "C",
      "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar ** ambiguousCoordinates(char * S, int* returnSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public IList<string> AmbiguousCoordinates(string S) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {string} S\n * @return {string[]}\n */\nvar ambiguousCoordinates = function(S) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {String} s\n# @return {String[]}\ndef ambiguous_coordinates(s)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func ambiguousCoordinates(_ S: String) -> [String] {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func ambiguousCoordinates(S string) []string {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def ambiguousCoordinates(S: String): List[String] = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun ambiguousCoordinates(S: String): List<String> {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn ambiguous_coordinates(s: String) -> Vec<String> {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param String $S\n     * @return String[]\n     */\n    function ambiguousCoordinates($S) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"8.2K\", \"totalSubmission\": \"17.8K\", \"totalAcceptedRaw\": 8163, \"totalSubmissionRaw\": 17822, \"acRate\": \"45.8%\"}",
  "hints": [],
  "solution": {
    "id": "451",
    "canSeeDetail": true,
    "url": "/articles/ambiguous-coordinates/",
    "content": "[TOC]\n\n---\n#### Approach #1: Cartesian Product [Accepted]\n\n**Intuition and Algorithm**\n\nFor each place to put the comma, we separate the string into two fragments.  For example, with a string like `\"1234\"`, we could separate it into fragments `\"1\" and \"234\"`, `\"12\" and \"34\"`, or `\"123\"` and `\"4\"`.\n\nThen, for each fragment, we have a choice of where to put the period, to create a list `make(...)` of choices.  For example, `\"123\"` could be made into `\"1.23\"`, `\"12.3\"`, or `\"123\"`.\n\nBecause of extranneous zeroes, we should ignore possibilities where the part of the fragment to the `left` of the decimal starts with `\"0\"` (unless it is exactly `\"0\"`), and ignore possibilities where the part of the fragment to the `right` of the decimal ends with `\"0\"`, as these are not allowed.\n\nNote that this process could result in an empty answer, such as for the case `S = \"(000)\"`.\n\n<iframe src=\"https://leetcode.com/playground/Gdyt4CNE/shared\" frameBorder=\"0\" width=\"100%\" height=\"463\" name=\"Gdyt4CNE\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity:  $$O(N^3)$$, where $$N$$ is the length `S`.  We evaluate the sum $$O(\\sum_k k(N-k))$$.\n\n* Space Complexity: $$O(N^3)$$, to store the answer.\n\n---\n\nAnalysis written by: [@awice](https://leetcode.com/awice).",
    "contentTypeId": "107",
    "rating": {
      "id": "446",
      "count": 4,
      "average": 5,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "\"(123)\"",
  "metaData": "{\r\n  \"name\": \"ambiguousCoordinates\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"S\",\r\n      \"type\": \"string\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"list<string>\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
