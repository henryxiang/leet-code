{
  "questionId": "836",
  "questionFrontendId": "818",
  "boundTopicId": null,
  "title": "Race Car",
  "titleSlug": "race-car",
  "categoryTitle": "Algorithms",
  "content": "<p>Your car starts at position 0 and speed +1 on an infinite number line.&nbsp; (Your car can go into negative positions.)</p>\r\n\r\n<p>Your car drives automatically according to a sequence of instructions A (accelerate) and R (reverse).</p>\r\n\r\n<p>When you get an instruction &quot;A&quot;, your car does the following:&nbsp;<code>position += speed, speed *= 2</code>.</p>\r\n\r\n<p>When you get an instruction &quot;R&quot;, your car does the following: if your speed is positive then&nbsp;<code>speed = -1</code>&nbsp;, otherwise&nbsp;<code>speed = 1</code>.&nbsp; (Your position stays the same.)</p>\r\n\r\n<p>For example, after commands &quot;AAR&quot;, your car goes to positions 0-&gt;1-&gt;3-&gt;3, and your speed goes to 1-&gt;2-&gt;4-&gt;-1.</p>\r\n\r\n<p>Now for some target position, say the <strong>length</strong> of the shortest sequence of instructions to get there.</p>\r\n\r\n<pre>\r\n<strong>Example 1:</strong>\r\n<strong>Input:</strong> \r\ntarget = 3\r\n<strong>Output:</strong> 2\r\n<strong>Explanation:</strong> \r\nThe shortest instruction sequence is &quot;AA&quot;.\r\nYour position goes from 0-&gt;1-&gt;3.\r\n</pre>\r\n\r\n<pre>\r\n<strong>Example 2:</strong>\r\n<strong>Input:</strong> \r\ntarget = 6\r\n<strong>Output:</strong> 5\r\n<strong>Explanation:</strong> \r\nThe shortest instruction sequence is &quot;AAARA&quot;.\r\nYour position goes from 0-&gt;1-&gt;3-&gt;7-&gt;7-&gt;6.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note: </strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= target &lt;= 10000</code>.</li>\r\n</ul>\r\n",
  "isPaidOnly": false,
  "difficulty": "Hard",
  "likes": 371,
  "dislikes": 45,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [
    {
      "username": "awice",
      "profileUrl": "/awice/",
      "avatarUrl": "https://assets.leetcode.com/users/awice/avatar_1576905115.png"
    }
  ],
  "topicTags": [
    {
      "name": "Dynamic Programming",
      "slug": "dynamic-programming"
    },
    {
      "name": "Heap",
      "slug": "heap"
    }
  ],
  "companyTagStats": "{\"1\": [{\"taggedByAdmin\": true, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 3}], \"2\": [], \"3\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    int racecar(int target) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int racecar(int target) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def racecar(self, target):\n        \"\"\"\n        :type target: int\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def racecar(self, target: int) -> int:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nint racecar(int target){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public int Racecar(int target) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number} target\n * @return {number}\n */\nvar racecar = function(target) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer} target\n# @return {Integer}\ndef racecar(target)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func racecar(_ target: Int) -> Int {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func racecar(target int) int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def racecar(target: Int): Int = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun racecar(target: Int): Int {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn racecar(target: i32) -> i32 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer $target\n     * @return Integer\n     */\n    function racecar($target) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"14.6K\", \"totalSubmission\": \"39.1K\", \"totalAcceptedRaw\": 14594, \"totalSubmissionRaw\": 39118, \"acRate\": \"37.3%\"}",
  "hints": [],
  "solution": {
    "id": "448",
    "canSeeDetail": true,
    "url": "/articles/race-car/",
    "content": "[TOC]\n\n---\n\n#### Approach Framework\n\n**Explanation**\n\nLet $$A^k$$ denote the command $$A A A \\cdots A$$ (k times).\n\nStarting with an `\"R\"` command doesn't help, and as the final sequence does not end on an `\"R\"`, so we have some sequence like $$R A^{k_1} R A^{k_2} \\cdots R A^{k_n}$$ which could be instead $$A^{k_2} R A^{k_3} R \\cdots A^{k_n} R R A^{k_1}$$ for the same final position of the car.  (Here, $$k_i \\geq 0$$, where $$A^0$$ means no command.)\n\nSo let's suppose our command is always of the form $$A^{k_1} R A^{k_2} R \\cdots A^{k_n}$$.  Note that under such a command, the car will move to final position $$(2^{k_1} - 1) - (2^{k_2} - 1) + (2^{k_3} - 1) - \\cdots $$.\n\nWithout loss of generality, we can say that ($$k_i$$, $$i$$ odd) is monotone decreasing, and ($$k_i$$, $$i$$ even) is also monotone decreasing.\n\nAlso because terms will cancel out, we can also ignore the possibility that $$k_i = k_j$$ (for $$i, j$$ with different parity).\n\nA key claim is that $$k_i$$ is bounded by $$a+1$$, where $$a$$ is the smallest integer such that $$2^a \\geq \\text{target}$$ - basically, if you drive past the target, you don't need to keep driving.  This is because it adds another power of two (as $$2^{k_i} - 1 = \\sum_{j < k_i} 2^j$$) to the position that must get erased by one or more negative terms later (in whole or in part), as it is not part of the target.\n\n---\n\n#### Approach #1: Dijkstra's [Accepted]\n\n**Intuition**\n\nWith some `target`, we have different moves we can perform (such as $$k_1 = 0, 1, 2, \\cdots$$, using the notation from our *Approach Framework*), with different costs.\n\nThis is an ideal setup for Dijkstra's algorithm, which can help us find the shortest cost path in a weighted graph.  \n\n**Algorithm**\n\nDijkstra's algorithm uses a priority queue to continually searches the path with the lowest cost to destination, so that when we reach the target, we know it must have been through the lowest cost path.  Refer to [this link](https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm) for more detail.\n\nBack to the problem, as described above, we have some `barrier` where we are guaranteed to never cross.  We will also handle negative targets; in total we will have `2 * barrier + 1` nodes.\n\nAfter, we could move `walk = 2**k - 1` steps for a cost of `k + 1` (the `1` is to reverse).  If we reach our destination exactly, we don't need the `R`, so it is just `k` steps.\n\n<iframe src=\"https://leetcode.com/playground/qNruc33Y/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"qNruc33Y\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity:  $$O(T \\log T)$$.  There are $$O(T)$$ nodes, we process each one using $$O(\\log T)$$ work (both popping from the heap and adding the edges).\n\n* Space Complexity: $$O(T)$$.\n\n---\n\n#### Approach #2: Dynamic Programming [Accepted]\n\n**Intuition and Algorithm**\n\nAs in our *Approach Framework*, we've framed the problem as a series of moves $$k_i$$.\n\nNow say we have some target `2**(k-1) <= t < 2**k` and we want to know the cost to go there, if we know all the other costs `dp[u]` (for `u < t`).\n\nIf `t == 2**k - 1`, the cost is just `k`: we use the command $$A^k$$, and clearly we can't do better.\n\nOtherwise, we might drive without crossing the target for a position change of $$2^{k-1} - 2**j$$, by the command $$A^{k-1} R A^{j} R$$, for a total cost of $$k - 1 + j + 2$$.\n\nFinally, we might drive $$2^k - 1$$ which crosses the target, by the command $$A^k R$$, for a total cost of $$k + 1$$.\n\nWe can use dynamic programming together with the above recurrence to implement the code below.\n\n<iframe src=\"https://leetcode.com/playground/ZF65uxfa/shared\" frameBorder=\"0\" width=\"100%\" height=\"412\" name=\"ZF65uxfa\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity:  $$O(T \\log T)$$.  Each node `i` does $$\\log i$$ work.\n\n* Space Complexity: $$O(T)$$.\n\n---\n\nAnalysis written by: [@awice](https://leetcode.com/awice).",
    "contentTypeId": "107",
    "rating": {
      "id": "443",
      "count": 51,
      "average": 2.882,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "3",
  "metaData": "{\r\n  \"name\": \"racecar\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"target\",\r\n      \"type\": \"integer\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
