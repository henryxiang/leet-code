{
  "questionId": "842",
  "questionFrontendId": "822",
  "boundTopicId": null,
  "title": "Card Flipping Game",
  "titleSlug": "card-flipping-game",
  "categoryTitle": "Algorithms",
  "content": "<p>On a table are <code>N</code> cards, with a positive integer printed on the front and back of each card (possibly different).</p>\r\n\r\n<p>We flip any number of cards, and after we choose one&nbsp;card.&nbsp;</p>\r\n\r\n<p>If the number <code>X</code> on the back of the chosen&nbsp;card is not on the front of any card, then this number X is good.</p>\r\n\r\n<p>What is the smallest number that is good?&nbsp; If no number is good, output <code>0</code>.</p>\r\n\r\n<p>Here, <code>fronts[i]</code> and <code>backs[i]</code> represent the number on the front and back of card <code>i</code>.&nbsp;</p>\r\n\r\n<p>A&nbsp;flip swaps the front and back numbers, so the value on the front is now on the back and vice versa.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> fronts = [1,2,4,4,7], backs = [1,3,4,1,3]\r\n<strong>Output:</strong> <code>2</code>\r\n<strong>Explanation:</strong> If we flip the second card, the fronts are <code>[1,3,4,4,7]</code> and the backs are <code>[1,2,4,1,3]</code>.\r\nWe choose the second card, which has number 2 on the back, and it isn&#39;t on the front of any card, so <code>2</code> is good.</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= fronts.length == backs.length&nbsp;&lt;=&nbsp;1000</code>.</li>\r\n\t<li><code>1 &lt;=&nbsp;fronts[i]&nbsp;&lt;= 2000</code>.</li>\r\n\t<li><code>1 &lt;= backs[i]&nbsp;&lt;= 2000</code>.</li>\r\n</ol>\r\n",
  "isPaidOnly": false,
  "difficulty": "Medium",
  "likes": 61,
  "dislikes": 392,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [
    {
      "username": "awice",
      "profileUrl": "/awice/",
      "avatarUrl": "https://assets.leetcode.com/users/awice/avatar_1576905115.png"
    }
  ],
  "topicTags": [],
  "companyTagStats": "{\"1\": [], \"2\": [], \"3\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    int flipgame(vector<int>& fronts, vector<int>& backs) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int flipgame(int[] fronts, int[] backs) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def flipgame(self, fronts, backs):\n        \"\"\"\n        :type fronts: List[int]\n        :type backs: List[int]\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def flipgame(self, fronts: List[int], backs: List[int]) -> int:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nint flipgame(int* fronts, int frontsSize, int* backs, int backsSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public int Flipgame(int[] fronts, int[] backs) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number[]} fronts\n * @param {number[]} backs\n * @return {number}\n */\nvar flipgame = function(fronts, backs) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer[]} fronts\n# @param {Integer[]} backs\n# @return {Integer}\ndef flipgame(fronts, backs)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func flipgame(_ fronts: [Int], _ backs: [Int]) -> Int {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func flipgame(fronts []int, backs []int) int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def flipgame(fronts: Array[Int], backs: Array[Int]): Int = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun flipgame(fronts: IntArray, backs: IntArray): Int {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn flipgame(fronts: Vec<i32>, backs: Vec<i32>) -> i32 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer[] $fronts\n     * @param Integer[] $backs\n     * @return Integer\n     */\n    function flipgame($fronts, $backs) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"7.6K\", \"totalSubmission\": \"18.1K\", \"totalAcceptedRaw\": 7581, \"totalSubmissionRaw\": 18123, \"acRate\": \"41.8%\"}",
  "hints": [],
  "solution": {
    "id": "452",
    "canSeeDetail": true,
    "url": "/articles/card-flipping-game/",
    "content": "[TOC]\n\n---\n#### Approach #1: Hash Set [Accepted]\n\n**Intuition**\n\nIf a card has the same value `x` on the front and back, it is impossible to win with `x`.  Otherwise, it has two different values, and if we win with `x`, we can put `x` face down on the rest of the cards.\n\n**Algorithm**\n\nRemember all values `same` that occur twice on a single card.  Then for every value `x` on any card that isn't in `same`, `x` is a candidate answer.  If we have no candidate answers, the final answer is zero.\n\n<iframe src=\"https://leetcode.com/playground/DvJ47nbA/shared\" frameBorder=\"0\" width=\"100%\" height=\"378\" name=\"DvJ47nbA\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity:  $$O(N)$$, where $$N$$ is the length of `fronts` (and `backs`).  We scan through the arrays.\n\n* Space Complexity: $$O(N)$$.\n\n---\n\nAnalysis written by: [@awice](https://leetcode.com/awice).",
    "contentTypeId": "107",
    "rating": {
      "id": "448",
      "count": 14,
      "average": 2.071,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "[1,2,4,4,7]\n[1,3,4,1,3]",
  "metaData": "{\r\n  \"name\": \"flipgame\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"fronts\",\r\n      \"type\": \"integer[]\"\r\n    },\r\n    {\r\n      \"name\": \"backs\",\r\n      \"type\": \"integer[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
