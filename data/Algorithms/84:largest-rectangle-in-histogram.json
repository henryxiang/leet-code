{
  "questionId": "84",
  "questionFrontendId": "84",
  "boundTopicId": null,
  "title": "Largest Rectangle in Histogram",
  "titleSlug": "largest-rectangle-in-histogram",
  "categoryTitle": "Algorithms",
  "content": "<p>Given <em>n</em> non-negative integers representing the histogram&#39;s bar height where the width of each bar is 1, find the area of largest rectangle in the histogram.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img src=\"https://assets.leetcode.com/uploads/2018/10/12/histogram.png\" style=\"width: 188px; height: 204px;\" /><br />\r\n<small>Above is a histogram where width of each bar is 1, given height = <code>[2,1,5,6,2,3]</code>.</small></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img src=\"https://assets.leetcode.com/uploads/2018/10/12/histogram_area.png\" style=\"width: 188px; height: 204px;\" /><br />\r\n<small>The largest rectangle is shown in the shaded area, which has area = <code>10</code> unit.</small></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [2,1,5,6,2,3]\r\n<strong>Output:</strong> 10\r\n</pre>\r\n",
  "isPaidOnly": false,
  "difficulty": "Hard",
  "likes": 2605,
  "dislikes": 65,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"Maximal Rectangle\", \"titleSlug\": \"maximal-rectangle\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
  "contributors": [],
  "topicTags": [
    {
      "name": "Array",
      "slug": "array"
    },
    {
      "name": "Stack",
      "slug": "stack"
    }
  ],
  "companyTagStats": "{\"2\": [{\"taggedByAdmin\": false, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 4}, {\"taggedByAdmin\": false, \"name\": \"Bloomberg\", \"slug\": \"bloomberg\", \"timesEncountered\": 2}], \"1\": [{\"taggedByAdmin\": false, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 4}, {\"taggedByAdmin\": false, \"name\": \"Microsoft\", \"slug\": \"microsoft\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Flipkart\", \"slug\": \"flipkart\", \"timesEncountered\": 2}], \"3\": [{\"taggedByAdmin\": false, \"name\": \"Adobe\", \"slug\": \"adobe\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Facebook\", \"slug\": \"facebook\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Twitter\", \"slug\": \"twitter\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Walmart Labs\", \"slug\": \"walmart-labs\", \"timesEncountered\": 2}]}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    int largestRectangleArea(vector<int>& heights) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int largestRectangleArea(int[] heights) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def largestRectangleArea(self, heights: List[int]) -> int:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nint largestRectangleArea(int* heights, int heightsSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public int LargestRectangleArea(int[] heights) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number[]} heights\n * @return {number}\n */\nvar largestRectangleArea = function(heights) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer[]} heights\n# @return {Integer}\ndef largest_rectangle_area(heights)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func largestRectangleArea(_ heights: [Int]) -> Int {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func largestRectangleArea(heights []int) int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def largestRectangleArea(heights: Array[Int]): Int = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun largestRectangleArea(heights: IntArray): Int {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn largest_rectangle_area(heights: Vec<i32>) -> i32 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer[] $heights\n     * @return Integer\n     */\n    function largestRectangleArea($heights) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"212.4K\", \"totalSubmission\": \"644.5K\", \"totalAcceptedRaw\": 212403, \"totalSubmissionRaw\": 644480, \"acRate\": \"33.0%\"}",
  "hints": [],
  "solution": {
    "id": "67",
    "canSeeDetail": true,
    "url": "/articles/largest-rectangle-in-histogram/",
    "content": "[TOC]\n## Summary\n\nWe need to find the rectangle of largest area that can be formed by using the given bars of histogram.\n\n## Solution\n\n---\n#### Approach 1: Brute Force\n\nFirstly, we need to take into account the fact that the height of the rectangle\nformed between any two bars will always be limited by the height of the shortest\nbar lying between them which can be understood by looking at the figure below:\n\n![Largest Rectangle](https://leetcode.com/media/original_images/84_Largest_Rectangle1.PNG)\n\nThus, we can simply start off by considering every possible\npair of bars and finding the area of the rectangle formed between them using the\nheight of the shortest bar lying between them as the height\n and the spacing between\nthem as the width of the rectangle. We can thus, find the required rectangle with the\n maximum area.\n\n\n <iframe src=\"https://leetcode.com/playground/Ajp6g5ny/shared\" frameBorder=\"0\" width=\"100%\" height=\"310\" name=\"Ajp6g5ny\"></iframe>\n\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n^3)$$. We have to find the minimum height bar $$O(n)$$ lying\nbetween every pair $$O(n^2)$$.\n\n* Space complexity : $$O(1)$$. Constant space is used.\n<br />\n<br />\n---\n#### Approach 2: Better Brute Force\n\n**Algorithm**\n\nWe can do one slight modification in the previous approach to optimize it to some extent.\n Instead of taking every possible pair and then finding the bar of minimum height\n lying between them everytime, we can find the bar of minimum height for\n current pair by using the minimum height bar of the previous pair.\n\nIn mathematical terms, $$minheight=\\min(minheight, heights(j))$$, where $$heights(j)$$\n refers to the height of the $$j$$th bar.\n\n\n <iframe src=\"https://leetcode.com/playground/ZBhW9Xc7/shared\" frameBorder=\"0\" width=\"100%\" height=\"276\" name=\"ZBhW9Xc7\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n^2)$$. Every possible pair is considered\n\n* Space complexity : $$O(1)$$. No extra space is used.\n<br />\n<br />\n---\n#### Approach 3: Divide and Conquer Approach\n\n**Algorithm**\n\nThis approach relies on the observation that the rectangle with maximum area will be\nthe maximum of:\n\n1. The widest possible rectangle with height equal to the height of the shortest bar.\n\n2. The largest rectangle confined to the left of the shortest bar(subproblem).\n\n3. The largest rectangle confined to the right of the shortest bar(subproblem).\n\nLet's take an example:\n```\n[6, 4, 5, 2, 4, 3, 9]\n```\n\n Here, the shortest bar is of height 2. The area of the widest rectangle using this\n  bar as height is 2x8=16. Now, we need to look for cases 2 and 3 mentioned above.\n  Thus, we repeat the same process to the left and right of 2. In the left of 2, 4\n  is the minimum, forming an area of rectangle 4x3=12. Further, rectangles of area 6x1=6 and\n   5x1=5 exist in its left and right respectively. Similarly we find an area of 3x3=9, 4x1=4 and 9x1=9\n   to the left of 2. Thus, we get 16 as the correct maximum area. See the figure below for further clarification:\n\n   ![Divide and Conquer](https://leetcode.com/media/original_images/84_Largest_Rectangle2.PNG)\n\n\n<iframe src=\"https://leetcode.com/playground/xg5CtMHZ/shared\" frameBorder=\"0\" width=\"100%\" height=\"293\" name=\"xg5CtMHZ\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity :\n\n    Average Case: $$O\\big(n \\log n\\big)$$.\n\n    Worst Case: $$O(n^2)$$. If the numbers in the array are sorted, we don't gain the advantage of divide and conquer.\n\n* Space complexity : $$O(n)$$. Recursion with worst case depth $$n$$.\n<br />\n<br />\n---\n#### Approach 4: Better Divide and Conquer\n\n**Algorithm**\n\nYou can observe that in the Divide and Conquer Approach, we gain the advantage, since\n the large problem is divided into substantially smaller subproblems. But, we won't gain\n  much advantage with that approach if the array happens to be sorted in either\n  ascending or descending order, since every time we need to find the minimum number in a\n   large subarray $$O(n)$$. Thus, the overall complexity becomes $$O(n^2)$$ in the worst case.\n   We can reduce the time complexity by using a Segment Tree to find the minimum every time which\n   can be done in $$O\\big(\\log n\\big)$$ time.\n\n   For implementation, click [here](https://leetcode.com/problems/largest-rectangle-in-histogram/discuss/28941/segment-tree-solution-just-another-idea-onlogn-solution).\n\n**Complexity Analysis**\n\n* Time complexity : $$O\\big(n\\log n\\big)$$. Segment tree takes $$\\log n$$ for a total of $$n$$ times.\n\n* Space complexity : $$O(n)$$. Space required for Segment Tree.\n<br />\n<br />\n---\n#### Approach 5: Using Stack\n\n**Algorithm**\n\nIn this approach, we maintain a stack. Initially, we push a -1 onto the stack to mark the end.\nWe start with the leftmost bar and keep\npushing the current bar's index onto the stack until we get two successive numbers\n in descending order, i.e. until we get $$a[i]<a[i-1]$$. Now, we start popping the\n numbers from the stack until we hit a number $$stack[j]$$ on the stack such that $$a\\big[stack[j]\\big] \\leq a[i]$$.\n Every time we pop, we find out the area of rectangle formed using the current element as the height\n  of the rectangle and the difference between the the current element's index pointed to in the original array and the element $$stack[top-1] -1$$ as the width\n  i.e. if we pop an element $$stack[top]$$ and i is the current index to which we are pointing in the original array, the current area of the rectangle will be considered as:\n\n  $$\n  (i-stack[top-1]-1) \\times a\\big[stack[top]\\big].\n  $$\n\n  Further, if we reach the end of the array, we pop all the elements of the\n  stack and at every pop, this time we use the following equation to find the area:\n     $$(stack[top]-stack[top-1]) \\times a\\big[stack[top]\\big]$$, where $$stack[top]$$ refers to the\n      element just popped. Thus, we can get the area of the\n   of the largest rectangle by comparing the new area found everytime.\n\n   The following example will clarify the process further:\n   ```\n[6, 7, 5, 2, 4, 5, 9, 3]\n   ```\n\n!?!../Documents/84_Largest_Rectangle.json:1000,563!?!\n\n<iframe src=\"https://leetcode.com/playground/vMvUjZy9/shared\" frameBorder=\"0\" width=\"100%\" height=\"310\" name=\"vMvUjZy9\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n)$$. $$n$$ numbers are pushed and popped.\n\n* Space complexity : $$O(n)$$. Stack is used.",
    "contentTypeId": "107",
    "rating": {
      "id": "65",
      "count": 55,
      "average": 4.782,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "[2,1,5,6,2,3]",
  "metaData": "{\r\n  \"name\": \"largestRectangleArea\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"heights\",\r\n      \"type\": \"integer[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
