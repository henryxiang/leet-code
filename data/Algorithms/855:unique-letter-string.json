{
  "questionId": "855",
  "questionFrontendId": "828",
  "boundTopicId": null,
  "title": "Unique Letter String",
  "titleSlug": "unique-letter-string",
  "categoryTitle": "Algorithms",
  "content": "<p>A character is unique in string <code>S</code> if it occurs exactly once in it.</p>\r\n\r\n<p>For example, in string <code>S = &quot;LETTER&quot;</code>, the only unique characters are <code>&quot;L&quot;</code> and <code>&quot;R&quot;</code>.</p>\r\n\r\n<p>Let&#39;s define <code>UNIQ(S)</code> as the number of unique characters in string <code>S</code>.</p>\r\n\r\n<p>For example, <code>UNIQ(&quot;LETTER&quot;) =&nbsp; 2</code>.</p>\r\n\r\n<p>Given a string <code>S</code> with only uppercases, calculate the sum of <code>UNIQ(substring)</code> over all non-empty substrings of <code>S</code>.</p>\r\n\r\n<p>If there are two or more equal substrings at different positions in <code>S</code>, we consider them different.</p>\r\n\r\n<p>Since the answer can be very large, return&nbsp;the answer&nbsp;modulo&nbsp;<code>10 ^ 9 + 7</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>&quot;ABC&quot;\r\n<strong>Output: </strong>10\r\n<strong>Explanation: </strong>All possible substrings are: &quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;AB&quot;,&quot;BC&quot; and &quot;ABC&quot;.\r\nEvey substring is composed with only unique letters.\r\nSum of lengths of all substring is 1 + 1 + 1 + 2 + 2 + 3 = 10</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>&quot;ABA&quot;\r\n<strong>Output: </strong>8\r\n<strong>Explanation: </strong>The same as example 1, except uni(&quot;ABA&quot;) = 1.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong> <code>0 &lt;= S.length &lt;= 10000</code>.</p>\r\n",
  "isPaidOnly": false,
  "difficulty": "Hard",
  "likes": 286,
  "dislikes": 32,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [
    {
      "username": "lee215",
      "profileUrl": "/lee215/",
      "avatarUrl": "https://assets.leetcode.com/users/lee215/avatar_1551541889.png"
    }
  ],
  "topicTags": [
    {
      "name": "Two Pointers",
      "slug": "two-pointers"
    }
  ],
  "companyTagStats": "{\"2\": [{\"taggedByAdmin\": false, \"name\": \"Twitch\", \"slug\": \"twitch\", \"timesEncountered\": 5}], \"3\": [{\"taggedByAdmin\": true, \"name\": \"ForUsAll\", \"slug\": \"forusall\", \"timesEncountered\": 0}], \"1\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    int uniqueLetterString(string S) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int uniqueLetterString(String S) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def uniqueLetterString(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def uniqueLetterString(self, S: str) -> int:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nint uniqueLetterString(char * S){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public int UniqueLetterString(string S) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {string} S\n * @return {number}\n */\nvar uniqueLetterString = function(S) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {String} s\n# @return {Integer}\ndef unique_letter_string(s)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func uniqueLetterString(_ S: String) -> Int {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func uniqueLetterString(S string) int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def uniqueLetterString(S: String): Int = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun uniqueLetterString(S: String): Int {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn unique_letter_string(s: String) -> i32 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param String $S\n     * @return Integer\n     */\n    function uniqueLetterString($S) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"7.3K\", \"totalSubmission\": \"17.3K\", \"totalAcceptedRaw\": 7348, \"totalSubmissionRaw\": 17317, \"acRate\": \"42.4%\"}",
  "hints": [],
  "solution": {
    "id": "460",
    "canSeeDetail": true,
    "url": "/articles/unique-letter-string/",
    "content": "[TOC]\n\n---\n#### Approach #1: Maintain Answer of Suffix [Accepted]\n\n**Intuition**\n\nWe can think of substrings as two for-loops, for the left and right boundary of the substring.  To get a handle on this problem, let's try to answer the question: what is the answer over all substrings that start at index `i`?  Let's call this $$F(i)$$.  If we can compute this faster than linear (brute force), we have an approach.\n\nNow let $$U$$ be the unique letters function, eg. $$U(\\text{\"LETTER\"}) = 2$$.\n\nThe key idea is we can write $$U$$ as a sum of disjoint functions over each character.  Let $$U_{\\text{\"A\"}}(x)$$ be $$1$$ if $$\\text{\"A\"}$$ occurs exactly once in $$x$$, otherwise $$0$$, and so on with every letter.  Then $$U(x) = \\sum_{c \\in \\mathcal{A}} U_c(x)$$, where $$\\mathcal{A} = \\{ \\text{\"A\"}, \\text{\"B\"}, \\dots \\}$$ is the alphabet.\n\n**Algorithm**\n\nThis means we only need to answer the following question (26 times, one for each character): how many substrings have exactly one $$\\text{\"A\"}$$?  If we knew that `S[10] = S[14] = S[20] = \"A\"` (and only those indexes have an `\"A\"`), then when `i = 8`, the answer is `4` (`j = 10, 11, 12, 13`); when `i = 12` the answer is `6` (`j = 14, 15, 16, 17, 18, 19`), and so on.\n\nIn total, $$F(0) = \\sum_{c \\in \\mathcal{A}} \\text{index}[c][1] - \\text{index}[c][0]$$, where `index[c]` are the indices `i` (in order) where `S[i] == c` (and padded with `S.length` if out of bounds).  In the above example, `index[\"A\"] = [10, 14, 20]`.\n\nNow, we want the final answer of $$\\sum_{i \\geq 0} F(i)$$.  There is a two pointer approach: how does $$F(1)$$ differ from $$F(0)$$?  If for example `S[0] == \"B\"`, then most of the sum remains unchanged (specifically, $$\\sum_{c \\in \\mathcal{A}, c \\neq \\text{\"B\"}} \\text{index}[c][1] - \\text{index}[c][0]$$), and only the $$c = \\text{\"B\"}$$ part changes, from $$\\text{index}[\\text{\"B\"}][1] - \\text{index}[\\text{\"B\"}][0]$$ to $$\\text{index}[\\text{\"B\"}][2] - \\text{index}[\\text{\"B\"}][1]$$.\n\nWe can manage this in general by keeping track of `peek[c]`, which tells us the correct index `i = peek[c]` such that our current contribution by character `c` of $$F(i)$$ is `index[c][peek[c] + 1] - index[c][peek[c]]`.\n\n\n<iframe src=\"https://leetcode.com/playground/fkvb227q/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"fkvb227q\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity:  $$O(N)$$, where $$N$$ is the length of `S`.\n\n* Space Complexity: $$O(N)$$.\n\n---\n#### Approach #2: Split by Character [Accepted]\n\n**Intuition**\n\nAs in *Approach #1*, we have $$U(x) = \\sum_{c \\in \\mathcal{A}} U_c(x)$$, where $$\\mathcal{A} = \\{ \\text{\"A\"}, \\text{\"B\"}, \\dots \\}$$ is the alphabet, and we only need to answer the following question (26 times, one for each character): how many substrings have exactly one $$\\text{\"A\"}$$?\n\n**Algorithm**\n\nConsider how many substrings have a specific $$\\text{\"A\"}$$.  For example, let's say `S` only has three `\"A\"`'s, at '`S[10] = S[14] = S[20] = \"A\"`; and we want to know the number of substrings that contain `S[14]`.  The answer is that there are 4 choices for the left boundary of the substring `(11, 12, 13, 14)`, and 6 choices for the right boundary `(14, 15, 16, 17, 18, 19)`.  So in total, there are 24 substrings that have `S[14]` as their unique `\"A\"`.\n\nContinuing our example, if we wanted to count the number of substrings that have `S[10]`, this would be `10 * 4` - note that when there is no more `\"A\"` characters to the left of `S[10]`, we have to count up to the left edge of the string.\n\nWe can add up all these possibilities to get our final answer.\n\n<iframe src=\"https://leetcode.com/playground/qiRvovcd/shared\" frameBorder=\"0\" width=\"100%\" height=\"395\" name=\"qiRvovcd\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity:  $$O(N)$$, where $$N$$ is the length of `S`.\n\n* Space Complexity: $$O(N)$$.  We could reduce this to $$O(\\mathcal{A})$$ if we do not store all the indices, but compute the answer on the fly.\n\n---\n\nAnalysis written by: [@awice](https://leetcode.com/awice).  Approach #2 inspired by [@lee215](http://leetcode.com/lee215).",
    "contentTypeId": "107",
    "rating": {
      "id": "455",
      "count": 15,
      "average": 3.4,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "\"ABC\"",
  "metaData": "{\r\n  \"name\": \"uniqueLetterString\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"S\",\r\n      \"type\": \"string\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
