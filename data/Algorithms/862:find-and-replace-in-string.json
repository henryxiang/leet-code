{
  "questionId": "862",
  "questionFrontendId": "833",
  "boundTopicId": null,
  "title": "Find And Replace in String",
  "titleSlug": "find-and-replace-in-string",
  "categoryTitle": "Algorithms",
  "content": "<p>To some string <code>S</code>, we will perform some&nbsp;replacement&nbsp;operations that replace groups of letters with new ones (not necessarily the same size).</p>\r\n\r\n<p>Each replacement operation has <code>3</code> parameters: a starting index <code>i</code>, a source word&nbsp;<code>x</code>&nbsp;and a target word&nbsp;<code>y</code>.&nbsp; The rule is that if <code><font face=\"monospace\">x</font></code>&nbsp;starts at position <code>i</code>&nbsp;in the <strong>original</strong> <strong>string</strong> <strong><code>S</code></strong>, then we will replace that occurrence of&nbsp;<code>x</code>&nbsp;with&nbsp;<code>y</code>.&nbsp; If not, we do nothing.</p>\r\n\r\n<p>For example, if we have&nbsp;<code>S = &quot;abcd&quot;</code>&nbsp;and we have some replacement operation&nbsp;<code>i = 2, x = &quot;cd&quot;, y = &quot;ffff&quot;</code>, then because&nbsp;<code>&quot;cd&quot;</code>&nbsp;starts at position <code><font face=\"monospace\">2</font></code>&nbsp;in the original string <code>S</code>, we will replace it with <code>&quot;ffff&quot;</code>.</p>\r\n\r\n<p>Using another example on <code>S = &quot;abcd&quot;</code>, if we have both the replacement operation <code>i = 0, x = &quot;ab&quot;, y = &quot;eee&quot;</code>, as well as another replacement operation&nbsp;<code>i = 2, x = &quot;ec&quot;, y = &quot;ffff&quot;</code>, this second operation does nothing because in the original string&nbsp;<code>S[2] = &#39;c&#39;</code>, which doesn&#39;t match&nbsp;<code>x[0] = &#39;e&#39;</code>.</p>\r\n\r\n<p>All these operations occur simultaneously.&nbsp; It&#39;s guaranteed that there won&#39;t be any overlap in replacement: for example,&nbsp;<code>S = &quot;abc&quot;, indexes = [0, 1],&nbsp;sources = [&quot;ab&quot;,&quot;bc&quot;]</code> is not a valid test case.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>S = &quot;abcd&quot;, indexes = [0,2], sources = [&quot;a&quot;,&quot;cd&quot;], targets = [&quot;eee&quot;,&quot;ffff&quot;]\r\n<strong>Output: </strong>&quot;eeebffff&quot;\r\n<strong>Explanation:</strong> &quot;a&quot; starts at index 0 in S, so it&#39;s replaced by &quot;eee&quot;.\r\n&quot;cd&quot; starts at index 2 in S, so it&#39;s replaced by &quot;ffff&quot;.\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>S = &quot;abcd&quot;, indexes = [0,2], sources = [&quot;ab&quot;,&quot;ec&quot;], targets = [&quot;eee&quot;,&quot;ffff&quot;]\r\n<strong>Output: </strong>&quot;eeecd&quot;\r\n<strong>Explanation:</strong> &quot;ab&quot; starts at index 0 in S, so it&#39;s replaced by &quot;eee&quot;. \r\n&quot;ec&quot; doesn&#39;t starts at index 2 in the <strong>original</strong> S, so we do nothing.\r\n</pre>\r\n\r\n<p>Notes:</p>\r\n\r\n<ol>\r\n\t<li><code>0 &lt;=&nbsp;indexes.length =&nbsp;sources.length =&nbsp;targets.length &lt;= 100</code></li>\r\n\t<li><code>0&nbsp;&lt;&nbsp;indexes[i]&nbsp;&lt; S.length &lt;= 1000</code></li>\r\n\t<li>All characters in given inputs are lowercase letters.</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n",
  "isPaidOnly": false,
  "difficulty": "Medium",
  "likes": 222,
  "dislikes": 300,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [
    {
      "username": "awice",
      "profileUrl": "/awice/",
      "avatarUrl": "https://assets.leetcode.com/users/awice/avatar_1576905115.png"
    }
  ],
  "topicTags": [
    {
      "name": "String",
      "slug": "string"
    }
  ],
  "companyTagStats": "{\"1\": [{\"taggedByAdmin\": true, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 4}, {\"taggedByAdmin\": false, \"name\": \"Microsoft\", \"slug\": \"microsoft\", \"timesEncountered\": 2}], \"3\": [{\"taggedByAdmin\": false, \"name\": \"LinkedIn\", \"slug\": \"linkedin\", \"timesEncountered\": 2}], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    string findReplaceString(string S, vector<int>& indexes, vector<string>& sources, vector<string>& targets) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public String findReplaceString(String S, int[] indexes, String[] sources, String[] targets) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def findReplaceString(self, S, indexes, sources, targets):\n        \"\"\"\n        :type S: str\n        :type indexes: List[int]\n        :type sources: List[str]\n        :type targets: List[str]\n        :rtype: str\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def findReplaceString(self, S: str, indexes: List[int], sources: List[str], targets: List[str]) -> str:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nchar * findReplaceString(char * S, int* indexes, int indexesSize, char ** sources, int sourcesSize, char ** targets, int targetsSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public string FindReplaceString(string S, int[] indexes, string[] sources, string[] targets) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {string} S\n * @param {number[]} indexes\n * @param {string[]} sources\n * @param {string[]} targets\n * @return {string}\n */\nvar findReplaceString = function(S, indexes, sources, targets) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {String} s\n# @param {Integer[]} indexes\n# @param {String[]} sources\n# @param {String[]} targets\n# @return {String}\ndef find_replace_string(s, indexes, sources, targets)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func findReplaceString(_ S: String, _ indexes: [Int], _ sources: [String], _ targets: [String]) -> String {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func findReplaceString(S string, indexes []int, sources []string, targets []string) string {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def findReplaceString(S: String, indexes: Array[Int], sources: Array[String], targets: Array[String]): String = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun findReplaceString(S: String, indexes: IntArray, sources: Array<String>, targets: Array<String>): String {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn find_replace_string(s: String, indexes: Vec<i32>, sources: Vec<String>, targets: Vec<String>) -> String {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param String $S\n     * @param Integer[] $indexes\n     * @param String[] $sources\n     * @param String[] $targets\n     * @return String\n     */\n    function findReplaceString($S, $indexes, $sources, $targets) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"27.7K\", \"totalSubmission\": \"57.1K\", \"totalAcceptedRaw\": 27717, \"totalSubmissionRaw\": 57114, \"acRate\": \"48.5%\"}",
  "hints": [],
  "solution": {
    "id": "466",
    "canSeeDetail": true,
    "url": "/articles/find-and-replace-in-string/",
    "content": "[TOC]\n\n---\n#### Approach #1: Direct [Accepted]\n\n**Intuition and Algorithm**\n\nWe showcase two different approaches.  In both approaches, we build some answer string `ans`, that starts as `S`.  Our main motivation in these approaches is to be able to identify and handle when a given replacement operation does nothing.\n\nIn *Java*, the idea is to build an array `match` that tells us `match[ix] = j` whenever `S[ix]` is the head of a successful replacement operation `j`: that is, whenever `S[ix:].startswith(sources[j])`.\n\nAfter, we build the answer using this match array.  For each index `ix` in `S`, we can use `match` to check whether `S[ix]` is being replaced or not.  We repeatedly either write the next character `S[ix]`, or groups of characters `targets[match[ix]]`, depending on the value of `match[ix]`.\n\nIn *Python*, we sort our replacement jobs `(i, x, y)` in reverse order.  If `S[i:].startswith(x)`, then we can replace that section `S[i:i+len(x)]` with the target `y`.  We used a reverse order so that edits to `S` do not interfere with the rest of the queries.\n\n<iframe src=\"https://leetcode.com/playground/2qLJpytD/shared\" frameBorder=\"0\" width=\"100%\" height=\"480\" name=\"2qLJpytD\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: $$O(NQ)$$, where $$N$$ is the length of `S`, and we have $$Q$$ replacement operations.  (Our complexity could be faster with a more accurate implementation, but it isn't necessary.)\n\n* Space Complexity: $$O(N)$$, if we consider `targets[i].length <= 100` as a constant bound.\n\n---\n\nAnalysis written by: [@awice](https://leetcode.com/awice).",
    "contentTypeId": "107",
    "rating": {
      "id": "462",
      "count": 18,
      "average": 2.556,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "\"abcd\"\n[0, 2]\n[\"a\", \"cd\"]\n[\"eee\", \"ffff\"]",
  "metaData": "{\r\n  \"name\": \"findReplaceString\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"S\",\r\n      \"type\": \"string\"\r\n    },\r\n    {\r\n      \"name\": \"indexes\",\r\n      \"type\": \"integer[]\"\r\n    },\r\n    {\r\n      \"name\": \"sources\",\r\n      \"type\": \"string[]\"\r\n    },\r\n    {\r\n      \"name\": \"targets\",\r\n      \"type\": \"string[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"string\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
