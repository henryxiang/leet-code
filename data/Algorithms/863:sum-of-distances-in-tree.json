{
  "questionId": "863",
  "questionFrontendId": "834",
  "boundTopicId": null,
  "title": "Sum of Distances in Tree",
  "titleSlug": "sum-of-distances-in-tree",
  "categoryTitle": "Algorithms",
  "content": "<p>An undirected, connected&nbsp;tree with <code>N</code> nodes labelled <code>0...N-1</code> and <code>N-1</code> <code>edges</code>&nbsp;are&nbsp;given.</p>\r\n\r\n<p>The <code>i</code>th edge connects nodes&nbsp;<code>edges[i][0] </code>and<code>&nbsp;edges[i][1]</code>&nbsp;together.</p>\r\n\r\n<p>Return a list <code>ans</code>, where <code>ans[i]</code> is the sum of the distances between node <code>i</code> and all other nodes.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>N = 6, edges = [[0,1],[0,2],[2,3],[2,4],[2,5]]\r\n<strong>Output: </strong>[8,12,6,10,10,10]\r\n<strong>Explanation: </strong>\r\nHere is a diagram of the given tree:\r\n  0\r\n / \\\r\n1   2\r\n   /|\\\r\n  3 4 5\r\nWe can see that dist(0,1) + dist(0,2) + dist(0,3) + dist(0,4) + dist(0,5)\r\nequals 1 + 1 + 2 + 2 + 2 = 8.  Hence, answer[0] = 8, and so on.\r\n</pre>\r\n\r\n<p>Note:<font face=\"monospace\">&nbsp;<code>1 &lt;= N &lt;= 10000</code></font></p>\r\n",
  "isPaidOnly": false,
  "difficulty": "Hard",
  "likes": 580,
  "dislikes": 27,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"Distribute Coins in Binary Tree\", \"titleSlug\": \"distribute-coins-in-binary-tree\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
  "contributors": [
    {
      "username": "lee215",
      "profileUrl": "/lee215/",
      "avatarUrl": "https://assets.leetcode.com/users/lee215/avatar_1551541889.png"
    }
  ],
  "topicTags": [
    {
      "name": "Tree",
      "slug": "tree"
    },
    {
      "name": "Depth-first Search",
      "slug": "depth-first-search"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 2}], \"1\": [], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    vector<int> sumOfDistancesInTree(int N, vector<vector<int>>& edges) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int[] sumOfDistancesInTree(int N, int[][] edges) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def sumOfDistancesInTree(self, N, edges):\n        \"\"\"\n        :type N: int\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def sumOfDistancesInTree(self, N: int, edges: List[List[int]]) -> List[int]:\n        "
    },
    {
      "lang": "C",
      "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* sumOfDistancesInTree(int N, int** edges, int edgesSize, int* edgesColSize, int* returnSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public int[] SumOfDistancesInTree(int N, int[][] edges) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number} N\n * @param {number[][]} edges\n * @return {number[]}\n */\nvar sumOfDistancesInTree = function(N, edges) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer} n\n# @param {Integer[][]} edges\n# @return {Integer[]}\ndef sum_of_distances_in_tree(n, edges)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func sumOfDistancesInTree(_ N: Int, _ edges: [[Int]]) -> [Int] {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func sumOfDistancesInTree(N int, edges [][]int) []int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def sumOfDistancesInTree(N: Int, edges: Array[Array[Int]]): Array[Int] = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun sumOfDistancesInTree(N: Int, edges: Array<IntArray>): IntArray {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn sum_of_distances_in_tree(n: i32, edges: Vec<Vec<i32>>) -> Vec<i32> {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer $N\n     * @param Integer[][] $edges\n     * @return Integer[]\n     */\n    function sumOfDistancesInTree($N, $edges) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"10.6K\", \"totalSubmission\": \"25.3K\", \"totalAcceptedRaw\": 10607, \"totalSubmissionRaw\": 25261, \"acRate\": \"42.0%\"}",
  "hints": [],
  "solution": {
    "id": "465",
    "canSeeDetail": true,
    "url": "/articles/sum-of-distances-in-tree/",
    "content": "[TOC]\n\n---\n#### Approach #1: Subtree Sum and Count [Accepted]\n\n**Intuition**\n\nLet `ans` be the returned answer, so that in particular `ans[x]` be the answer for node `x`.\n\nNaively, finding each `ans[x]` would take $$O(N)$$ time  (where $$N$$ is the number of nodes in the graph), which is too slow.  This is the motivation to find out how `ans[x]` and `ans[y]` are related, so that we cut down on repeated work.\n\nLet's investigate the answers of neighboring nodes $$x$$ and $$y$$.  In particular, say $$xy$$ is an edge of the graph, that if cut would form two trees $$X$$ (containing $$x$$) and $$Y$$ (containing $$y$$).\n\n<center>\n    <img src=\"../Figures/834/sketch1.png\" alt=\"Tree diagram illustrating recurrence for ans[child]\" style=\"width: 1000px;\"/>\n</center>\n\nThen, as illustrated in the diagram, the answer for $$x$$ in the entire tree, is the answer of $$x$$ on $$X$$ `\"x@X\"`, plus the answer of $$y$$ on $$Y$$ `\"y@Y\"`, plus the number of nodes in $$Y$$ `\"#(Y)\"`.  The last part `\"#(Y)\"` is specifically because for any node `z in Y`, `dist(x, z) = dist(y, z) + 1`.\n\nBy similar reasoning, the answer for $$y$$ in the entire tree is `ans[y] = x@X + y@Y + #(X)`.  Hence, for neighboring nodes $$x$$ and $$y$$, `ans[x] - ans[y] = #(Y) - #(X)`.\n\n**Algorithm**\n\nRoot the tree.  For each node, consider the subtree $$S_{\\text{node}}$$ of that node plus all descendants.  Let `count[node]` be the number of nodes in $$S_{\\text{node}}$$, and `stsum[node]` (\"subtree sum\") be the sum of the distances from `node` to the nodes in $$S_{\\text{node}}$$.\n\nWe can calculate `count` and `stsum` using a post-order traversal, where on exiting some `node`, the `count` and `stsum` of all descendants of this node is correct, and we now calculate `count[node] += count[child]` and `stsum[node] += stsum[child] + count[child]`.\n\nThis will give us the right answer for the `root`: `ans[root] = stsum[root]`.\n\nNow, to use the insight explained previously: if we have a node `parent` and it's child `child`, then these are neighboring nodes, and so `ans[child] = ans[parent] - count[child] + (N - count[child])`.  This is because there are `count[child]` nodes that are `1` easier to get to from `child` than `parent`, and `N-count[child]` nodes that are `1` harder to get to from `child` than `parent`.\n\n<center>\n    <img src=\"../Figures/834/sketch2.png\" alt=\"Tree diagram illustrating recurrence for ans[child]\" style=\"height: 200px;\"/>\n</center>\n\nUsing a second, pre-order traversal, we can update our answer in linear time for all of our nodes.\n\n<iframe src=\"https://leetcode.com/playground/u5mhW6AL/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"u5mhW6AL\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity:  $$O(N)$$, where $$N$$ is the number of nodes in the graph.\n\n* Space Complexity:  $$O(N)$$.\n\n---\n\nAnalysis written by: [@awice](https://leetcode.com/awice).",
    "contentTypeId": "107",
    "rating": {
      "id": "461",
      "count": 58,
      "average": 4,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "6\n[[0,1],[0,2],[2,3],[2,4],[2,5]]",
  "metaData": "{\r\n  \"name\": \"sumOfDistancesInTree\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"N\",\r\n      \"type\": \"integer\"\r\n    },\r\n    {\r\n      \"name\": \"edges\",\r\n      \"type\": \"integer[][]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer[]\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
