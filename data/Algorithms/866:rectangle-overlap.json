{
  "questionId": "866",
  "questionFrontendId": "836",
  "boundTopicId": null,
  "title": "Rectangle Overlap",
  "titleSlug": "rectangle-overlap",
  "categoryTitle": "Algorithms",
  "content": "<p>A rectangle is&nbsp;represented as a&nbsp;list <code>[x1, y1, x2, y2]</code>, where&nbsp;<code>(x1, y1)</code>&nbsp;are the coordinates of its bottom-left corner, and <code>(x2,&nbsp;y2)</code>&nbsp;are the coordinates of its top-right corner.</p>\r\n\r\n<p>Two rectangles overlap if the area of their intersection is positive.&nbsp; To be clear, two rectangles that only touch at the corner or edges do not overlap.</p>\r\n\r\n<p>Given two (axis-aligned) rectangles, return whether&nbsp;they overlap.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>rec1 = [0,0,2,2], rec2 = [1,1,3,3]\r\n<strong>Output: </strong>true\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>rec1 = [0,0,1,1], rec2 = [1,0,2,1]\r\n<strong>Output: </strong>false\r\n</pre>\r\n\r\n<p><strong>Notes:</strong></p>\r\n\r\n<ol>\r\n\t<li>Both rectangles <code>rec1</code> and <code>rec2</code> are lists of 4 integers.</li>\r\n\t<li>All coordinates in rectangles will be between&nbsp;<code>-10^9 </code>and<code> 10^9</code>.</li>\r\n</ol>\r\n",
  "isPaidOnly": false,
  "difficulty": "Easy",
  "likes": 473,
  "dislikes": 90,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"Rectangle Area\", \"titleSlug\": \"rectangle-area\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
  "contributors": [
    {
      "username": "lee215",
      "profileUrl": "/lee215/",
      "avatarUrl": "https://assets.leetcode.com/users/lee215/avatar_1551541889.png"
    }
  ],
  "topicTags": [
    {
      "name": "Math",
      "slug": "math"
    }
  ],
  "companyTagStats": "{\"2\": [{\"taggedByAdmin\": false, \"name\": \"Bloomberg\", \"slug\": \"bloomberg\", \"timesEncountered\": 3}, {\"taggedByAdmin\": false, \"name\": \"Oracle\", \"slug\": \"oracle\", \"timesEncountered\": 2}], \"1\": [{\"taggedByAdmin\": false, \"name\": \"Microsoft\", \"slug\": \"microsoft\", \"timesEncountered\": 5}, {\"taggedByAdmin\": false, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 3}, {\"taggedByAdmin\": false, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Adobe\", \"slug\": \"adobe\", \"timesEncountered\": 2}], \"3\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    bool isRectangleOverlap(vector<int>& rec1, vector<int>& rec2) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public boolean isRectangleOverlap(int[] rec1, int[] rec2) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def isRectangleOverlap(self, rec1, rec2):\n        \"\"\"\n        :type rec1: List[int]\n        :type rec2: List[int]\n        :rtype: bool\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def isRectangleOverlap(self, rec1: List[int], rec2: List[int]) -> bool:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nbool isRectangleOverlap(int* rec1, int rec1Size, int* rec2, int rec2Size){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public bool IsRectangleOverlap(int[] rec1, int[] rec2) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number[]} rec1\n * @param {number[]} rec2\n * @return {boolean}\n */\nvar isRectangleOverlap = function(rec1, rec2) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer[]} rec1\n# @param {Integer[]} rec2\n# @return {Boolean}\ndef is_rectangle_overlap(rec1, rec2)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func isRectangleOverlap(_ rec1: [Int], _ rec2: [Int]) -> Bool {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func isRectangleOverlap(rec1 []int, rec2 []int) bool {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def isRectangleOverlap(rec1: Array[Int], rec2: Array[Int]): Boolean = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun isRectangleOverlap(rec1: IntArray, rec2: IntArray): Boolean {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn is_rectangle_overlap(rec1: Vec<i32>, rec2: Vec<i32>) -> bool {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer[] $rec1\n     * @param Integer[] $rec2\n     * @return Boolean\n     */\n    function isRectangleOverlap($rec1, $rec2) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"36.6K\", \"totalSubmission\": \"76.3K\", \"totalAcceptedRaw\": 36646, \"totalSubmissionRaw\": 76276, \"acRate\": \"48.0%\"}",
  "hints": [],
  "solution": {
    "id": "468",
    "canSeeDetail": true,
    "url": "/articles/rectangle-overlap/",
    "content": "[TOC]\n\n#### Approach #1: Check Position [Accepted]\n\n**Intuition**\n\nIf the rectangles do not overlap, then `rec1` must either be higher, lower, to the left, or to the right of `rec2`.\n\n**Algorithm**\n\nThe answer for whether they *don't* overlap is `LEFT OR RIGHT OR UP OR DOWN`, where `OR` is the logical OR, and `LEFT` is a boolean that represents whether `rec1` is to the left of `rec2`.  The answer for whether they do overlap is the negation of this.\n\nThe condition \"`rec1` is to the left of `rec2`\" is `rec1[2] <= rec2[0]`, that is the right-most x-coordinate of `rec1` is left of the left-most x-coordinate of `rec2`.  The other cases are similar.\n\n<iframe src=\"https://leetcode.com/playground/XsHWyYAa/shared\" frameBorder=\"0\" width=\"100%\" height=\"191\" name=\"XsHWyYAa\"></iframe>\n\n**Complexity Analysis**\n\n* Time and Space Complexity:  $$O(1)$$.\n\n---\n#### Approach #2: Check Area [Accepted]\n\n**Intuition**\n\nIf the rectangles overlap, they have positive area.  This area must be a rectangle where both dimensions are positive, since the boundaries of the intersection are axis aligned.\n\nThus, we can reduce the problem to the one-dimensional problem of determining whether two line segments overlap.\n\n**Algorithm**\n\nSay the area of the intersection is `width * height`, where `width` is the intersection of the rectangles projected onto the x-axis, and `height` is the same for the y-axis.  We want both quantities to be positive.\n\nThe `width` is positive when `min(rec1[2], rec2[2]) > max(rec1[0], rec2[0])`, that is when the smaller of (the largest x-coordinates) is larger than the larger of (the smallest x-coordinates).  The `height` is similar.\n\n<iframe src=\"https://leetcode.com/playground/gthZq8DL/shared\" frameBorder=\"0\" width=\"100%\" height=\"157\" name=\"gthZq8DL\"></iframe>\n\n**Complexity Analysis**\n\n* Time and Space Complexity:  $$O(1)$$.\n\n---\n\nAnalysis written by: [@awice](https://leetcode.com/awice).",
    "contentTypeId": "107",
    "rating": {
      "id": "463",
      "count": 18,
      "average": 4.111,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "[0,0,2,2]\n[1,1,3,3]",
  "metaData": "{\r\n  \"name\": \"isRectangleOverlap\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"rec1\",\r\n      \"type\": \"integer[]\"\r\n    },\r\n    {\r\n      \"name\": \"rec2\",\r\n      \"type\": \"integer[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"boolean\"\r\n  }\r\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
