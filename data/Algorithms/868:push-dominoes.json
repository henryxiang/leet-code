{
  "questionId": "868",
  "questionFrontendId": "838",
  "boundTopicId": null,
  "title": "Push Dominoes",
  "titleSlug": "push-dominoes",
  "categoryTitle": "Algorithms",
  "content": "<p>There are<font face=\"monospace\">&nbsp;<code>N</code></font> dominoes in a line, and we place each domino vertically upright.</p>\r\n\r\n<p>In the beginning, we simultaneously push&nbsp;some of the dominoes either to the left or to the right.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/05/18/domino.png\" style=\"height: 160px;\" /></p>\r\n\r\n<p>After each second, each domino that is falling to the left pushes the adjacent domino on the left.</p>\r\n\r\n<p>Similarly, the dominoes falling to the right push their adjacent dominoes standing on the right.</p>\r\n\r\n<p>When a vertical domino has dominoes falling on it from both sides, it stays still due to the balance of the forces.</p>\r\n\r\n<p>For the purposes of this question, we will consider that a falling domino&nbsp;expends no additional force to a falling or already fallen domino.</p>\r\n\r\n<p>Given a string &quot;S&quot; representing the initial state.&nbsp;<code>S[i] = &#39;L&#39;</code>, if the i-th domino has been pushed to the left; <code>S[i] = &#39;R&#39;</code>, if the i-th domino has been pushed to the right; <code>S[i] = &#39;.&#39;</code>,&nbsp;if the <code>i</code>-th domino has not been pushed.</p>\r\n\r\n<p>Return a string representing the final state.&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>&quot;.L.R...LR..L..&quot;\r\n<strong>Output: </strong>&quot;LL.RR.LLRRLL..&quot;\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>&quot;RR.L&quot;\r\n<strong>Output: </strong>&quot;RR.L&quot;\r\n<strong>Explanation: </strong>The first domino expends no additional force on the second domino.\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>0 &lt;= N&nbsp;&lt;= 10^5</code></li>\r\n\t<li>String&nbsp;<code>dominoes</code> contains only&nbsp;<code>&#39;L</code>&#39;, <code>&#39;R&#39;</code> and <code>&#39;.&#39;</code></li>\r\n</ol>\r\n",
  "isPaidOnly": false,
  "difficulty": "Medium",
  "likes": 396,
  "dislikes": 47,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [
    {
      "username": "lee215",
      "profileUrl": "/lee215/",
      "avatarUrl": "https://assets.leetcode.com/users/lee215/avatar_1551541889.png"
    }
  ],
  "topicTags": [
    {
      "name": "Two Pointers",
      "slug": "two-pointers"
    },
    {
      "name": "Dynamic Programming",
      "slug": "dynamic-programming"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 0}], \"1\": [], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    string pushDominoes(string dominoes) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public String pushDominoes(String dominoes) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def pushDominoes(self, dominoes):\n        \"\"\"\n        :type dominoes: str\n        :rtype: str\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def pushDominoes(self, dominoes: str) -> str:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nchar * pushDominoes(char * dominoes){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public string PushDominoes(string dominoes) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {string} dominoes\n * @return {string}\n */\nvar pushDominoes = function(dominoes) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {String} dominoes\n# @return {String}\ndef push_dominoes(dominoes)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func pushDominoes(_ dominoes: String) -> String {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func pushDominoes(dominoes string) string {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def pushDominoes(dominoes: String): String = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun pushDominoes(dominoes: String): String {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn push_dominoes(dominoes: String) -> String {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param String $dominoes\n     * @return String\n     */\n    function pushDominoes($dominoes) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"16K\", \"totalSubmission\": \"34.5K\", \"totalAcceptedRaw\": 15989, \"totalSubmissionRaw\": 34513, \"acRate\": \"46.3%\"}",
  "hints": [],
  "solution": {
    "id": "470",
    "canSeeDetail": true,
    "url": "/articles/push-dominoes/",
    "content": "[TOC]\n\n---\n#### Approach #1: Adjacent Symbols [Accepted]\n\n**Intuition**\n\nBetween every group of vertical dominoes (`'.'`), we have up to two non-vertical dominoes bordering this group.  Since additional dominoes outside this group do not affect the outcome, we can analyze these situations individually: there are 9 of them (as the border could be empty). Actually, if we border the dominoes by `'L'` and `'R'`, there are only 4 cases.  We'll write new letters between these symbols depending on each case.\n\n**Algorithm**\n\nContinuing our explanation, we analyze cases:\n\n* If we have say `\"A....B\"`, where A = B, then we should write `\"AAAAAA\"`.\n\n* If we have `\"R....L\"`, then we will write `\"RRRLLL\"`, or `\"RRR.LLL\"` if we have an odd number of dots.  If the initial symbols are at positions `i` and `j`, we can check our distance `k-i` and `j-k` to decide at position `k` whether to write `'L'`, `'R'`, or `'.'`.\n\n* (If we have `\"L....R\"` we don't do anything.  We can skip this case.)\n\n<iframe src=\"https://leetcode.com/playground/X63wt96u/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"X63wt96u\"></iframe>\n\n**Complexity Analysis**\n\n* Time and Space Complexity:  $$O(N)$$, where $$N$$ is the length of `dominoes`.\n\n---\n#### Approach #2: Calculate Force [Accepted]\n\n**Intuition**\n\nWe can calculate the net force applied on every domino.  The forces we care about are how close a domino is to a leftward `'R'`, and to a rightward `'L'`: the closer we are, the stronger the force.\n\n**Algorithm**\n\nScanning from left to right, our force decays by 1 every iteration, and resets to `N` if we meet an `'R'`, so that `force[i]` is higher (than `force[j]`) if and only if `dominoes[i]` is closer (looking leftward) to `'R'` (than `dominoes[j]`).\n\nSimilarly, scanning from right to left, we can find the force going rightward (closeness to `'L'`).\n\nFor some domino `answer[i]`, if the forces are equal, then the answer is `'.'`.  Otherwise, the answer is implied by whichever force is stronger.\n\n**Example**\n\nHere is a worked example on the string `S = 'R.R...L'`:  We find the force going from left to right is `[7, 6, 7, 6, 5, 4, 0]`.  The force going from right to left is `[0, 0, 0, -4, -5, -6, -7]`.  Combining them (taking their vector addition), the combined force is `[7, 6, 7, 2, 0, -2, -7]`, for a final answer of `RRRR.LL`.\n\n<iframe src=\"https://leetcode.com/playground/xrAD5knD/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"xrAD5knD\"></iframe>\n\n**Complexity Analysis**\n\n* Time and Space Complexity:  $$O(N)$$.\n\n---\n\nAnalysis written by: [@awice](https://leetcode.com/awice).",
    "contentTypeId": "107",
    "rating": {
      "id": "465",
      "count": 17,
      "average": 4.412,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "\".L.R...LR..L..\"",
  "metaData": "{\r\n  \"name\": \"pushDominoes\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"dominoes\",\r\n      \"type\": \"string\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"string\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
