{
  "questionId": "874",
  "questionFrontendId": "844",
  "boundTopicId": null,
  "title": "Backspace String Compare",
  "titleSlug": "backspace-string-compare",
  "categoryTitle": "Algorithms",
  "content": "<p>Given two&nbsp;strings&nbsp;<code>S</code>&nbsp;and <code>T</code>,&nbsp;return if they are equal when both are typed into empty text editors. <code>#</code> means a backspace character.</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>S = <span id=\"example-input-1-1\">&quot;ab#c&quot;</span>, T = <span id=\"example-input-1-2\">&quot;ad#c&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">true\r\n</span><span><strong>Explanation</strong>: Both S and T become &quot;ac&quot;.</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>S = <span id=\"example-input-2-1\">&quot;ab##&quot;</span>, T = <span id=\"example-input-2-2\">&quot;c#d#&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">true\r\n</span><span><strong>Explanation</strong>: Both S and T become &quot;&quot;.</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>S = <span id=\"example-input-3-1\">&quot;a##c&quot;</span>, T = <span id=\"example-input-3-2\">&quot;#a#c&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">true\r\n</span><span><strong>Explanation</strong>: Both S and T become &quot;c&quot;.</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>S = <span id=\"example-input-4-1\">&quot;a#c&quot;</span>, T = <span id=\"example-input-4-2\">&quot;b&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-4\">false\r\n</span><span><strong>Explanation</strong>: S becomes &quot;c&quot; while T becomes &quot;b&quot;.</span>\r\n</pre>\r\n\r\n<p><span><strong>Note</strong>:</span></p>\r\n\r\n<ol>\r\n\t<li><code><span>1 &lt;= S.length &lt;= 200</span></code></li>\r\n\t<li><code><span>1 &lt;= T.length &lt;= 200</span></code></li>\r\n\t<li><span><code>S</code>&nbsp;and <code>T</code> only contain&nbsp;lowercase letters and <code>&#39;#&#39;</code> characters.</span></li>\r\n</ol>\r\n\r\n<p><strong>Follow up:</strong></p>\r\n\r\n<ul>\r\n\t<li>Can you solve it in <code>O(N)</code> time and <code>O(1)</code> space?</li>\r\n</ul>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n",
  "isPaidOnly": false,
  "difficulty": "Easy",
  "likes": 929,
  "dislikes": 55,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [
    {
      "username": "terranblake",
      "profileUrl": "/terranblake/",
      "avatarUrl": "https://assets.leetcode.com/users/terranblake/avatar_1526225445.png"
    }
  ],
  "topicTags": [
    {
      "name": "Two Pointers",
      "slug": "two-pointers"
    },
    {
      "name": "Stack",
      "slug": "stack"
    }
  ],
  "companyTagStats": "{\"1\": [{\"taggedByAdmin\": true, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 11}, {\"taggedByAdmin\": false, \"name\": \"Atlassian\", \"slug\": \"atlassian\", \"timesEncountered\": 3}, {\"taggedByAdmin\": false, \"name\": \"Facebook\", \"slug\": \"facebook\", \"timesEncountered\": 2}], \"2\": [{\"taggedByAdmin\": false, \"name\": \"Uber\", \"slug\": \"uber\", \"timesEncountered\": 2}], \"3\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    bool backspaceCompare(string S, string T) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public boolean backspaceCompare(String S, String T) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def backspaceCompare(self, S, T):\n        \"\"\"\n        :type S: str\n        :type T: str\n        :rtype: bool\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def backspaceCompare(self, S: str, T: str) -> bool:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nbool backspaceCompare(char * S, char * T){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public bool BackspaceCompare(string S, string T) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {string} S\n * @param {string} T\n * @return {boolean}\n */\nvar backspaceCompare = function(S, T) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {String} s\n# @param {String} t\n# @return {Boolean}\ndef backspace_compare(s, t)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func backspaceCompare(_ S: String, _ T: String) -> Bool {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func backspaceCompare(S string, T string) bool {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def backspaceCompare(S: String, T: String): Boolean = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun backspaceCompare(S: String, T: String): Boolean {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn backspace_compare(s: String, t: String) -> bool {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param String $S\n     * @param String $T\n     * @return Boolean\n     */\n    function backspaceCompare($S, $T) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"89.7K\", \"totalSubmission\": \"191.3K\", \"totalAcceptedRaw\": 89700, \"totalSubmissionRaw\": 191318, \"acRate\": \"46.9%\"}",
  "hints": [],
  "solution": {
    "id": "476",
    "canSeeDetail": true,
    "url": "/articles/backspace-string-compare/",
    "content": "[TOC]\n\n---\n#### Approach #1: Build String [Accepted]\n\n**Intuition**\n\nLet's individually build the result of each string (`build(S)` and `build(T)`), then compare if they are equal.\n\n**Algorithm**\n\nTo build the result of a string `build(S)`, we'll use a stack based approach, simulating the result of each keystroke.\n\n<iframe src=\"https://leetcode.com/playground/oeguUYg8/shared\" frameBorder=\"0\" width=\"100%\" height=\"327\" name=\"oeguUYg8\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity:  $$O(M + N)$$, where $$M, N$$ are the lengths of `S` and `T` respectively.\n\n* Space Complexity:  $$O(M + N)$$.\n\n\n---\n#### Approach #2: Two Pointer [Accepted]\n\n**Intuition**\n\nWhen writing a character, it may or may not be part of the final string depending on how many backspace keystrokes occur in the future.\n\nIf instead we iterate through the string in reverse, then we will know how many backspace characters we have seen, and therefore whether the result includes our character.\n\n**Algorithm**\n\nIterate through the string in reverse.  If we see a backspace character, the next non-backspace character is skipped.  If a character isn't skipped, it is part of the final answer.\n\nSee the comments in the code for more details.\n\n<iframe src=\"https://leetcode.com/playground/sqdQBEmS/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"sqdQBEmS\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity:  $$O(M + N)$$, where $$M, N$$ are the lengths of `S` and `T` respectively.\n\n* Space Complexity:  $$O(1)$$.\n\n---\n\nAnalysis written by: [@awice](https://leetcode.com/awice).",
    "contentTypeId": "107",
    "rating": {
      "id": "471",
      "count": 40,
      "average": 4.5,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "\"ab#c\"\n\"ad#c\"",
  "metaData": "{\r\n  \"name\": \"backspaceCompare\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"S\",\r\n      \"type\": \"string\"\r\n    },\r\n    {\r\n      \"name\": \"T\",\r\n      \"type\": \"string\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"boolean\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
