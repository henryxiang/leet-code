{
  "questionId": "877",
  "questionFrontendId": "847",
  "boundTopicId": null,
  "title": "Shortest Path Visiting All Nodes",
  "titleSlug": "shortest-path-visiting-all-nodes",
  "categoryTitle": "Algorithms",
  "content": "<p>An undirected, connected graph of N nodes (labeled&nbsp;<code>0, 1, 2, ..., N-1</code>) is given as <code>graph</code>.</p>\r\n\r\n<p><code>graph.length = N</code>, and <code>j != i</code>&nbsp;is in the list&nbsp;<code>graph[i]</code>&nbsp;exactly once, if and only if nodes <code>i</code> and <code>j</code> are connected.</p>\r\n\r\n<p>Return the length of the shortest path that visits every node. You may start and stop at any node, you may revisit nodes multiple times, and you may reuse edges.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ol>\r\n</ol>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>[[1,2,3],[0],[0],[0]]\r\n<strong>Output: </strong>4\r\n<strong>Explanation</strong>: One possible path is [1,0,2,0,3]</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>[[1],[0,2,4],[1,3,4],[2],[1,2]]\r\n<strong>Output: </strong>4\r\n<strong>Explanation</strong>: One possible path is [0,1,4,2,3]\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= graph.length &lt;= 12</code></li>\r\n\t<li><code>0 &lt;= graph[i].length &lt;&nbsp;graph.length</code></li>\r\n</ol>\r\n",
  "isPaidOnly": false,
  "difficulty": "Hard",
  "likes": 424,
  "dislikes": 43,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [
    {
      "username": "awice",
      "profileUrl": "/awice/",
      "avatarUrl": "https://assets.leetcode.com/users/awice/avatar_1576905115.png"
    }
  ],
  "topicTags": [
    {
      "name": "Dynamic Programming",
      "slug": "dynamic-programming"
    },
    {
      "name": "Breadth-first Search",
      "slug": "breadth-first-search"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": false, \"name\": \"Meituan\", \"slug\": \"meituan\", \"timesEncountered\": 2}, {\"taggedByAdmin\": true, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 0}], \"2\": [{\"taggedByAdmin\": false, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 2}], \"1\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    int shortestPathLength(vector<vector<int>>& graph) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int shortestPathLength(int[][] graph) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def shortestPathLength(self, graph):\n        \"\"\"\n        :type graph: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def shortestPathLength(self, graph: List[List[int]]) -> int:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nint shortestPathLength(int** graph, int graphSize, int* graphColSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public int ShortestPathLength(int[][] graph) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number[][]} graph\n * @return {number}\n */\nvar shortestPathLength = function(graph) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer[][]} graph\n# @return {Integer}\ndef shortest_path_length(graph)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func shortestPathLength(_ graph: [[Int]]) -> Int {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func shortestPathLength(graph [][]int) int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def shortestPathLength(graph: Array[Array[Int]]): Int = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun shortestPathLength(graph: Array<IntArray>): Int {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn shortest_path_length(graph: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer[][] $graph\n     * @return Integer\n     */\n    function shortestPathLength($graph) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"11.9K\", \"totalSubmission\": \"23.9K\", \"totalAcceptedRaw\": 11861, \"totalSubmissionRaw\": 23867, \"acRate\": \"49.7%\"}",
  "hints": [],
  "solution": {
    "id": "477",
    "canSeeDetail": true,
    "url": "/articles/shortest-path-visiting-all-nodes/",
    "content": "[TOC]\n\n---\n#### Approach #1: Breadth First Search [Accepted]\n\n**Intuition**\n\nA path 'state' can be represented as the subset of nodes visited, plus the current 'head' node.  Then, the problem reduces to a shortest path problem among these states, which can be solved with a breadth-first search.\n\n**Algorithm**\n\nLet's call the set of nodes visited by a path so far the *cover*, and the current node as the *head*.  We'll store the `cover` states using set bits: `k` is in the cover if the `k`th bit of `cover` is 1.\n\nFor states `state = (cover, head)`, we can perform a breadth-first search on these states.  The neighbors are `(cover | (1 << child), child)` for each `child in graph[head]`.\n\nIf at any point we find a state with all set bits in it's cover, because it is a breadth-first search, we know this must represent the shortest path length.\n\n<iframe src=\"https://leetcode.com/playground/RSKL3uRn/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"RSKL3uRn\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity:  $$O(2^N * N)$$.\n\n* Space Complexity:  $$O(2^N * N)$$.\n\n---\n#### Approach #2: Dynamic Programming [Accepted]\n\n**Intuition**\n\nA path 'state' can be represented as the subset of nodes visited, plus the current 'head' node.  As in Approach #1, we have a recurrence in states: `answer(cover, head)` is `min(1 + answer(cover | (1<<child), child) for child in graph[head])`.  Because these states form a DAG (a directed graph with no cycles), we can do dynamic programming.\n\n**Algorithm**\n\nLet's call the set of nodes visited by a path so far the *cover*, and the current node as the *head*.  We'll store `dist[cover][head]` as the length of the shortest path with that cover and head.  We'll store the `cover` states using set bits, and maintain the loop invariant (on `cover`), that `dist[k][...]` is correct for `k < cover`.\n\nFor every state `(cover, head)`, the possible `next` (neighbor) nodes in the path are found in `graph[head]`.  The new `cover2` is the old cover plus `next`.\n\nFor each of these, we perform a \"relaxation step\" (for those familiar with the Bellman-Ford algorithm), where if the new candidate distance for `dist[cover2][next]` is larger than `dist[cover][head] + 1`, we'll update it to `dist[cover][head] + 1`.\n\nCare must be taken to perform the relaxation step multiple times on the same cover if `cover = cover2`.  This is because a minimum state for `dist[cover][head]` might only be achieved through multiple steps through some path.\n\nFinally, it should be noted that we are using implicitly the fact that when iterating `cover = 0 .. (1<<N) - 1`, that each new cover `cover2 = cover | 1 << x` is such that `cover2 >= cover`.  This implies a topological ordering, which means that the recurrence on these states form a DAG.\n\n<iframe src=\"https://leetcode.com/playground/f8jJAcDL/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"f8jJAcDL\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity:  $$O(2^N * N)$$.\n\n* Space Complexity:  $$O(2^N * N)$$.\n\n---\n\nAnalysis written by: [@awice](https://leetcode.com/awice).",
    "contentTypeId": "107",
    "rating": {
      "id": "472",
      "count": 60,
      "average": 2.267,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "[[1,2,3],[0],[0],[0]]",
  "metaData": "{\r\n  \"name\": \"shortestPathLength\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"graph\",\r\n      \"type\": \"integer[][]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
