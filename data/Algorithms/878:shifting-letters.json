{
  "questionId": "878",
  "questionFrontendId": "848",
  "boundTopicId": null,
  "title": "Shifting Letters",
  "titleSlug": "shifting-letters",
  "categoryTitle": "Algorithms",
  "content": "<p>We have a string <code>S</code> of lowercase letters, and an integer array <code>shifts</code>.</p>\r\n\r\n<p>Call the <em>shift</em> of a letter, the next letter in the alphabet, (wrapping around so that <code>&#39;z&#39;</code> becomes <code>&#39;a&#39;</code>).&nbsp;</p>\r\n\r\n<p>For example, <code>shift(&#39;a&#39;) = &#39;b&#39;</code>, <code>shift(&#39;t&#39;) = &#39;u&#39;</code>, and <code>shift(&#39;z&#39;) = &#39;a&#39;</code>.</p>\r\n\r\n<p>Now for each <code>shifts[i] = x</code>, we want to shift the first <code>i+1</code>&nbsp;letters of <code>S</code>, <code>x</code> times.</p>\r\n\r\n<p>Return the final string&nbsp;after all such shifts to <code>S</code> are applied.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>S = &quot;abc&quot;, shifts = [3,5,9]\r\n<strong>Output: </strong>&quot;rpl&quot;\r\n<strong>Explanation: </strong>\r\nWe start with &quot;abc&quot;.\r\nAfter shifting the first 1 letters of S by 3, we have &quot;dbc&quot;.\r\nAfter shifting the first 2 letters of S by 5, we have &quot;igc&quot;.\r\nAfter shifting the first 3 letters of S by 9, we have &quot;rpl&quot;, the answer.\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= S.length = shifts.length &lt;= 20000</code></li>\r\n\t<li><code>0 &lt;= shifts[i] &lt;= 10 ^ 9</code></li>\r\n</ol>\r\n",
  "isPaidOnly": false,
  "difficulty": "Medium",
  "likes": 204,
  "dislikes": 43,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [
    {
      "username": "awice",
      "profileUrl": "/awice/",
      "avatarUrl": "https://assets.leetcode.com/users/awice/avatar_1576905115.png"
    }
  ],
  "topicTags": [
    {
      "name": "String",
      "slug": "string"
    }
  ],
  "companyTagStats": "{\"2\": [{\"taggedByAdmin\": false, \"name\": \"Facebook\", \"slug\": \"facebook\", \"timesEncountered\": 2}], \"1\": [], \"3\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    string shiftingLetters(string S, vector<int>& shifts) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public String shiftingLetters(String S, int[] shifts) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def shiftingLetters(self, S, shifts):\n        \"\"\"\n        :type S: str\n        :type shifts: List[int]\n        :rtype: str\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def shiftingLetters(self, S: str, shifts: List[int]) -> str:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nchar * shiftingLetters(char * S, int* shifts, int shiftsSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public string ShiftingLetters(string S, int[] shifts) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {string} S\n * @param {number[]} shifts\n * @return {string}\n */\nvar shiftingLetters = function(S, shifts) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {String} s\n# @param {Integer[]} shifts\n# @return {String}\ndef shifting_letters(s, shifts)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func shiftingLetters(_ S: String, _ shifts: [Int]) -> String {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func shiftingLetters(S string, shifts []int) string {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def shiftingLetters(S: String, shifts: Array[Int]): String = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun shiftingLetters(S: String, shifts: IntArray): String {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn shifting_letters(s: String, shifts: Vec<i32>) -> String {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param String $S\n     * @param Integer[] $shifts\n     * @return String\n     */\n    function shiftingLetters($S, $shifts) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"17.9K\", \"totalSubmission\": \"41.6K\", \"totalAcceptedRaw\": 17859, \"totalSubmissionRaw\": 41569, \"acRate\": \"43.0%\"}",
  "hints": [],
  "solution": {
    "id": "482",
    "canSeeDetail": true,
    "url": "/articles/shifting-letters/",
    "content": "[TOC]\n\n---\n#### Approach #1: Prefix Sum [Accepted]\n\n**Intuition**\n\nLet's ask how many times the `i`th character is shifted.\n\n**Algorithm**\n\nThe `i`th character is shifted `shifts[i] + shifts[i+1] + ... + shifts[shifts.length - 1]` times.  That's because only operations at the `i`th operation and after, affect the `i`th character.\n\nLet `X` be the number of times the current `i`th character is shifted.  Then the next character `i+1` is shifted `X - shifts[i]` times.\n\nFor example, if `S.length = 4` and `S[0]` is shifted `X = shifts[0] + shifts[1] + shifts[2] + shifts[3]` times, then `S[1]` is shifted `shifts[1] + shifts[2] + shifts[3]` times, `S[2]` is shifted `shifts[2] + shifts[3]` times, and so on.\n\nIn general, we need to do `X -= shifts[i]` to maintain the correct value of `X` as we increment `i`.\n\n<iframe src=\"https://leetcode.com/playground/eh9zG8Q2/shared\" frameBorder=\"0\" width=\"100%\" height=\"327\" name=\"eh9zG8Q2\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity:  $$O(N)$$, where $$N$$ is the length of `S` (and `shifts`).\n\n* Space Complexity:  $$O(N)$$, the space needed to output the answer.\n\n---\n\nAnalysis written by: [@awice](https://leetcode.com/awice).",
    "contentTypeId": "107",
    "rating": {
      "id": "477",
      "count": 11,
      "average": 4.273,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "\"abc\"\n[3,5,9]",
  "metaData": "{\r\n  \"name\": \"shiftingLetters\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"S\",\r\n      \"type\": \"string\"\r\n    },\r\n    {\r\n      \"name\": \"shifts\",\r\n      \"type\": \"integer[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"string\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
