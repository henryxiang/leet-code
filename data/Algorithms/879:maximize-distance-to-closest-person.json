{
  "questionId": "879",
  "questionFrontendId": "849",
  "boundTopicId": null,
  "title": "Maximize Distance to Closest Person",
  "titleSlug": "maximize-distance-to-closest-person",
  "categoryTitle": "Algorithms",
  "content": "<p>In a row of <code>seats</code>, <code>1</code> represents a person sitting in that seat, and <code>0</code> represents that the seat is empty.&nbsp;</p>\r\n\r\n<p>There is at least one empty seat, and at least one person sitting.</p>\r\n\r\n<p>Alex wants to sit in the seat such that the distance between him and the closest person to him is maximized.&nbsp;</p>\r\n\r\n<p>Return that maximum distance to closest person.</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[1,0,0,0,1,0,1]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">2</span>\r\n<strong>Explanation: </strong>\r\nIf Alex sits in the second open seat (seats[2]), then the closest person has distance 2.\r\nIf Alex sits in any other open seat, the closest person has distance 1.\r\nThus, the maximum distance to the closest person is 2.</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[1,0,0,0]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">3</span>\r\n<strong>Explanation: </strong>\r\nIf Alex sits in the last seat, the closest person is 3 seats away.\r\nThis is the maximum distance possible, so the answer is 3.\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= seats.length &lt;= 20000</code></li>\r\n\t<li><code>seats</code>&nbsp;contains only 0s or 1s, at least one <code>0</code>, and at least one <code>1</code>.</li>\r\n</ol>\r\n</div>\r\n</div>\r\n",
  "isPaidOnly": false,
  "difficulty": "Easy",
  "likes": 566,
  "dislikes": 87,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"Exam Room\", \"titleSlug\": \"exam-room\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
  "contributors": [
    {
      "username": "awice",
      "profileUrl": "/awice/",
      "avatarUrl": "https://assets.leetcode.com/users/awice/avatar_1576905115.png"
    }
  ],
  "topicTags": [
    {
      "name": "Array",
      "slug": "array"
    }
  ],
  "companyTagStats": "{\"1\": [{\"taggedByAdmin\": true, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 2}], \"3\": [{\"taggedByAdmin\": false, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 2}], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    int maxDistToClosest(vector<int>& seats) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int maxDistToClosest(int[] seats) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def maxDistToClosest(self, seats):\n        \"\"\"\n        :type seats: List[int]\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def maxDistToClosest(self, seats: List[int]) -> int:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nint maxDistToClosest(int* seats, int seatsSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public int MaxDistToClosest(int[] seats) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number[]} seats\n * @return {number}\n */\nvar maxDistToClosest = function(seats) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer[]} seats\n# @return {Integer}\ndef max_dist_to_closest(seats)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func maxDistToClosest(_ seats: [Int]) -> Int {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func maxDistToClosest(seats []int) int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def maxDistToClosest(seats: Array[Int]): Int = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun maxDistToClosest(seats: IntArray): Int {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn max_dist_to_closest(seats: Vec<i32>) -> i32 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer[] $seats\n     * @return Integer\n     */\n    function maxDistToClosest($seats) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"47K\", \"totalSubmission\": \"112.1K\", \"totalAcceptedRaw\": 46955, \"totalSubmissionRaw\": 112094, \"acRate\": \"41.9%\"}",
  "hints": [],
  "solution": {
    "id": "481",
    "canSeeDetail": true,
    "url": "/articles/maximize-distance-to-closest-person/",
    "content": "[TOC]\n\n---\n#### Approach #1: Next Array [Accepted]\n\n**Intuition**\n\nLet `left[i]` be the distance from seat `i` to the closest person sitting to the left of `i`.  Similarly, let `right[i]` be the distance to the closest person sitting to the right of `i`.  This is motivated by the idea that the closest person in seat `i` sits a distance `min(left[i], right[i])` away.\n\n**Algorithm**\n\nTo construct `left[i]`, notice it is either `left[i-1] + 1` if the seat is empty, or `0` if it is full.  `right[i]` is constructed in a similar way.\n\n<iframe src=\"https://leetcode.com/playground/Mdkek4gh/shared\" frameBorder=\"0\" width=\"100%\" height=\"480\" name=\"Mdkek4gh\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity:  $$O(N)$$, where $$N$$ is the length of `seats`.\n\n* Space Complexity:  $$O(N)$$, the space used by `left` and `right`.\n\n\n---\n#### Approach #2: Two Pointer [Accepted]\n\n**Intuition**\n\nAs we iterate through seats, we'll update the closest person sitting to our left, and closest person sitting to our right.\n\n**Algorithm**\n\nKeep track of `prev`, the filled seat at or to the left of `i`, and `future`, the filled seat at or to the right of `i`.\n\nThen at seat `i`, the closest person is `min(i - prev, future - i)`, with one exception.  `i - prev` should be considered infinite if there is no person to the left of seat `i`, and similarly `future - i` is infinite if there is no one to the right of seat `i`.\n\n<iframe src=\"https://leetcode.com/playground/VSP6cs27/shared\" frameBorder=\"0\" width=\"100%\" height=\"429\" name=\"VSP6cs27\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity:  $$O(N)$$, where $$N$$ is the length of `seats`.\n\n* Space Complexity:  $$O(1)$$.\n\n\n\n---\n#### Approach #3: Group by Zero [Accepted]\n\n**Intuition**\n\nIn a group of `K` adjacent empty seats between two people, the answer is `(K+1) / 2`.\n\n**Algorithm**\n\nFor each group of `K` empty seats between two people, we can take into account the candidate answer `(K+1) / 2`.\n\nFor groups of empty seats between the edge of the row and one other person, the answer is `K`, and we should take into account those answers too.\n\n<iframe src=\"https://leetcode.com/playground/wKJwsWbr/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"wKJwsWbr\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity:  $$O(N)$$, where $$N$$ is the length of `seats`.\n\n* Space Complexity:  $$O(1)$$.  (In Python, `seats[::-1]` uses $$O(N)$$ space, but this can be remedied.)\n\n\n---\n\nAnalysis written by: [@awice](https://leetcode.com/awice).",
    "contentTypeId": "107",
    "rating": {
      "id": "476",
      "count": 23,
      "average": 4.652,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "[1,0,0,0,1,0,1]",
  "metaData": "{\r\n  \"name\": \"maxDistToClosest\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"seats\",\r\n      \"type\": \"integer[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
