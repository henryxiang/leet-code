{
  "questionId": "880",
  "questionFrontendId": "850",
  "boundTopicId": null,
  "title": "Rectangle Area II",
  "titleSlug": "rectangle-area-ii",
  "categoryTitle": "Algorithms",
  "content": "<p>We are given a list of (axis-aligned)&nbsp;<code>rectangles</code>.&nbsp; Each&nbsp;<code>rectangle[i] = [x1, y1, x2, y2]&nbsp;</code>, where (x1, y1) are the coordinates of the bottom-left corner, and (x2, y2) are the coordinates of the top-right corner of the <code>i</code>th rectangle.</p>\r\n\r\n<p>Find the total area covered by all <code>rectangles</code> in the plane.&nbsp; Since the answer&nbsp;may be too large, <strong>return it modulo 10^9 + 7</strong>.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/06/06/rectangle_area_ii_pic.png\" style=\"width: 480px; height: 360px;\" /></p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>[[0,0,2,2],[1,0,2,3],[1,0,3,1]]\r\n<strong>Output: </strong>6\r\n<strong>Explanation: </strong>As illustrated in the picture.\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>[[0,0,1000000000,1000000000]]\r\n<strong>Output: </strong>49\r\n<strong>Explanation: </strong>The answer is 10^18 modulo (10^9 + 7), which is (10^9)^2 = (-7)^2 = 49.\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= rectangles.length &lt;= 200</code></li>\r\n\t<li><code><font face=\"monospace\">rectanges[i].length = 4</font></code></li>\r\n\t<li><code>0 &lt;= rectangles[i][j] &lt;= 10^9</code></li>\r\n\t<li>The total area covered by all rectangles will never exceed&nbsp;<code>2^63 - 1</code>&nbsp;and thus will fit in a 64-bit signed integer.</li>\r\n</ul>",
  "isPaidOnly": false,
  "difficulty": "Hard",
  "likes": 239,
  "dislikes": 26,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [
    {
      "username": "lee215",
      "profileUrl": "/lee215/",
      "avatarUrl": "https://assets.leetcode.com/users/lee215/avatar_1551541889.png"
    }
  ],
  "topicTags": [
    {
      "name": "Segment Tree",
      "slug": "segment-tree"
    },
    {
      "name": "Line Sweep",
      "slug": "line-sweep"
    }
  ],
  "companyTagStats": "{\"2\": [{\"taggedByAdmin\": false, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 3}, {\"taggedByAdmin\": false, \"name\": \"Sumologic\", \"slug\": \"sumologic\", \"timesEncountered\": 2}], \"1\": [], \"3\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\r\npublic:\r\n    int rectangleArea(vector<vector<int>>& rectangles) {\r\n        \r\n    }\r\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int rectangleArea(int[][] rectangles) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def rectangleArea(self, rectangles):\n        \"\"\"\n        :type rectangles: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def rectangleArea(self, rectangles: List[List[int]]) -> int:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nint rectangleArea(int** rectangles, int rectanglesSize, int* rectanglesColSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\r\n    public int RectangleArea(int[][] rectangles) {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number[][]} rectangles\n * @return {number}\n */\nvar rectangleArea = function(rectangles) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer[][]} rectangles\r\n# @return {Integer}\r\ndef rectangle_area(rectangles)\r\n    \r\nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\r\n    func rectangleArea(_ rectangles: [[Int]]) -> Int {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Go",
      "code": "func rectangleArea(rectangles [][]int) int {\r\n    \r\n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\r\n    def rectangleArea(rectangles: Array[Array[Int]]): Int = {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\r\n    fun rectangleArea(rectangles: Array<IntArray>): Int {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn rectangle_area(rectangles: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer[][] $rectangles\n     * @return Integer\n     */\n    function rectangleArea($rectangles) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"9.1K\", \"totalSubmission\": \"19.7K\", \"totalAcceptedRaw\": 9108, \"totalSubmissionRaw\": 19727, \"acRate\": \"46.2%\"}",
  "hints": [],
  "solution": {
    "id": "480",
    "canSeeDetail": true,
    "url": "/articles/rectangle-area-ii/",
    "content": "[TOC]\n\n\n## Solution\n---\n#### Approach #1: Principle of Inclusion-Exclusion\n\n**Intuition**\n\nSay we have two rectangles, $$A$$ and $$B$$.  The area of their union is:\n\n$$\n|A \\cup B| = |A| + |B| - |A \\cap B|\n$$\n\nSay we have three rectangles, $$A, B, C$$.  The area of their union is:\n\n$$\n|A \\cup B \\cup C| = |A| + |B| + |C| - |A \\cap B| - |A \\cap C| - |B \\cap C| + |A \\cap B \\cap C|\n$$\n\nThis can be seen by drawing a Venn diagram.\n\nSay we have four rectangles, $$A, B, C, D$$.  The area of their union is:\n\n$$\n\\begin{align}\n|A \\cup B \\cup C \\cup D| =\\,&\\left( |A| + |B| + |C| + |D| \\right) - \\\\\n\\,&\\left(|A \\cap B| + |A \\cap C| + |A \\cap D| + |B \\cap C| + |B \\cap D| + |C \\cap D|\\right) +\\\\\n\\,&\\left(|A \\cap B \\cap C| + |A \\cap B \\cap D| + |A \\cap C \\cap D| + |B \\cap C \\cap D|\\right) -\\\\\n\\,&\\left(|A \\cap B \\cap C \\cap D|\\right)\n\\end{align}\n$$\n\nIn general, the area of the union of $$n$$ rectangles $$A_1, A_2, \\cdots , A_n$$ will be:\n\n$$\n\\bigg|\\bigcup_{i=1}^n A_i\\bigg| = \\sum_{\\emptyset \\neq S \\subseteq [n]} (-1)^{|S| + 1} \\bigg| \\bigcap_{i \\in S} A_i \\bigg|\n$$\n\n**Algorithm**\n\nIf we do not know the above fact, we can prove it by considering any point in $$\\bigg|\\bigcup_{i=1}^n A_i\\bigg|$$.  Say this point occurs in all $$A_i (i \\in S)$$, and let $$|S| = n$$.  Then on the right side, it is counted $$\\binom{n}{1} - \\binom{n}{2} + \\binom{n}{3} - \\cdots \\pm \\binom{n}{n}$$ times.  By considering the binomial expansion of $$(1 - 1)^n$$, this is in fact equal to $$1$$.\n\nFrom *Rectangle Area I*, we know that the intersection of two axis-aligned rectangles is another axis-aligned rectangle (or nothing).  So in particular, the intersection $$\\bigcap_{i \\in S} A_i$$ is always a rectangle (or nothing).\n\nNow our algorithm proceeds as follows:  for every subset $$S$$ of $$\\{1, 2, 3, \\cdots, N\\}$$ (where $$N$$ is the number of rectangles), we'll calculate the intersection of the rectangles in that subset $$\\bigcap_{i \\in S} A_i$$, and then the area of that rectangle.  This allows us to calculate algorithmically the right-hand side of the general equation we wrote earlier.\n\n<iframe src=\"https://leetcode.com/playground/LVWa7ckv/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"LVWa7ckv\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity:  $$O(N * 2^N)$$, where $$N$$ is the number of rectangles.\n\n* Space Complexity:  $$O(N)$$.\n<br />\n<br />\n\n\n---\n#### Approach #2: Coordinate Compression\n\n**Intuition**\n\n<center>\n    <img src=\"../Figures/850/example.png\" alt=\"Image from problem description\" style=\"height: 200px;\"/>\n</center>\n\nSuppose instead of `rectangles = [[0,0,2,2],[1,0,2,3],[1,0,3,1]]`, we had `[[0,0,200,200],[100,0,200,300],[100,0,300,100]]`.  The answer would just be 100 times bigger.\n\nWhat about if `rectangles = [[0,0,2,2],[1,0,2,3],[1,0,30002,1]]` ?  Only the blue region would have area `30000` instead of `1`.\n\nOur idea is this: we'll take all the `x` and `y` coordinates, and re-map them to `0, 1, 2, ...` etc.  For example, if `rectangles  = [[0,0,200,200],[100,0,200,300],[100,0,300,100]]`, we could re-map it to `[[0,0,2,2],[1,0,2,3],[1,0,3,1]]`.  Then, we can solve the problem with brute force.  However, each region may actually represent some larger area, so we'll need to adjust for that at the end.\n\n**Algorithm**\n\nRe-map each `x` coordinate to `0, 1, 2, ...`.  Independently, re-map all `y` coordinates too.\n\nWe then have a problem that can be solved by brute force: for each rectangle with re-mapped coordinates `(rx1, ry1, rx2, ry2)`, we can fill the grid `grid[x][y] = True` for `rx1 <= x < rx2` and `ry1 <= y < ry2`.\n\nAfterwards, each `grid[rx][ry]` represents the area `(imapx(rx+1) - imapx(rx)) * (imapy(ry+1) - imapy(ry))`, where if `x` got remapped to `rx`, then `imapx(rx) = x` (\"inverse-map-x of remapped-x equals x\"), and similarly for `imapy`.\n\n<iframe src=\"https://leetcode.com/playground/hp6mu9MY/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"hp6mu9MY\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity:  $$O(N^3)$$, where $$N$$ is the number of rectangles.\n\n* Space Complexity:  $$O(N^2)$$.\n<br />\n<br />\n\n\n---\n#### Approach #3: Line Sweep\n\n**Intuition**\n\nImagine we pass a horizontal line from bottom to top over the shape.  We have some active intervals on this horizontal line, which gets updated twice for each rectangle.  In total, there are $$2 * N$$ events, and we can update our (up to $$N$$) active horizontal intervals for each update.\n\n**Algorithm**\n\nFor a rectangle like `rec = [1,0,3,1]`, the first update is to add `[1, 3]` to the active set at `y = 0`, and the second update is to remove `[1, 3]` at `y = 1`.  Note that adding and removing respects multiplicity - if we also added `[0, 2]` at `y = 0`, then removing `[1, 3]` at `y = 1` will still leave us with `[0, 2]` active.\n\nThis gives us a plan: create these two events for each rectangle, then process all the events in sorted order of `y`.  The issue now is deciding how to process the events `add(x1, x2)` and `remove(x1, x2)` such that we are able to `query()` the total horizontal length of our active intervals.\n\nWe can use the fact that our `remove(...)` operation will always be on an interval that was previously added.  Let's store all the `(x1, x2)` intervals in sorted order.  Then, we can `query()` in linear time using a technique similar to a classic LeetCode problem, [Merge Intervals](https://leetcode.com/problems/merge-intervals/).\n\n<iframe src=\"https://leetcode.com/playground/vyrMx2Y9/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"vyrMx2Y9\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity:  $$O(N^2 \\log N)$$, where $$N$$ is the number of rectangles.\n\n* Space Complexity:  $$O(N)$$.\n<br />\n<br />\n\n\n---\n#### Approach #4: Segment Tree\n\n**Intuition and Algorithm**\n\nAs in *Approach #3*, we want to support `add(x1, x2)`, `remove(x1, x2)`, and `query()`.  While outside the scope of a typical interview, this is the perfect setting for using a *segment tree*.  For completeness, we include the following implementation.\n\nYou can learn more about Segment Trees by visiting the articles of these problems: [Falling Squares](https://leetcode.com/problems/falling-squares/), [Number of Longest Increasing Subsequence](https://leetcode.com/problems/number-of-longest-increasing-subsequence/).\n\n\n<iframe src=\"https://leetcode.com/playground/MmabC4t6/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"MmabC4t6\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity:  $$O(N \\log N)$$, where $$N$$ is the number of rectangles.\n\n* Space Complexity:  $$O(N)$$.\n<br />\n<br />\n\n\n---\n\n\nAnalysis written by: [@awice](https://leetcode.com/awice).  Idea for Solution #4 by [@lee215](http://leetcode.com/lee215).",
    "contentTypeId": "107",
    "rating": {
      "id": "475",
      "count": 37,
      "average": 4.514,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "[[0,0,2,2],[1,0,2,3],[1,0,3,1]]",
  "metaData": "{\r\n  \"name\": \"rectangleArea\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"rectangles\",\r\n      \"type\": \"integer[][]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
