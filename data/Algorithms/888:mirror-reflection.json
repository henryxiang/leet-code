{
  "questionId": "888",
  "questionFrontendId": "858",
  "boundTopicId": null,
  "title": "Mirror Reflection",
  "titleSlug": "mirror-reflection",
  "categoryTitle": "Algorithms",
  "content": "<p>There is&nbsp;a special square room with mirrors on each of the four&nbsp;walls.&nbsp; Except for the southwest&nbsp;corner, there are receptors on each of the remaining corners, numbered <code>0</code>, <code>1</code>, and <code>2</code>.</p>\r\n\r\n<p>The square room has walls of length <code>p</code>, and a laser ray from the southwest corner&nbsp;first meets the east wall at a distance <code>q</code>&nbsp;from the <code>0</code>th receptor.</p>\r\n\r\n<p>Return the number of the receptor that the ray meets first.&nbsp; (It is guaranteed that the ray will meet&nbsp;a receptor eventually.)</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>p = <span id=\"example-input-1-1\">2</span>, q = <span id=\"example-input-1-2\">1</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">2</span>\r\n<strong>Explanation: </strong>The ray meets receptor 2 the first time it gets reflected back to the left wall.\r\n<p><img alt=\"\" src=\"https://ibb.co/mYSFJT\" /><img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/06/18/reflection.png\" style=\"width: 218px; height: 217px;\" /></p>\r\n</pre>\r\n\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= p &lt;= 1000</code></li>\r\n\t<li><code>0 &lt;= q &lt;= p</code></li>\r\n</ol>\r\n</div>\r\n",
  "isPaidOnly": false,
  "difficulty": "Medium",
  "likes": 153,
  "dislikes": 251,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [
    {
      "username": "future_googler",
      "profileUrl": "/future_googler/",
      "avatarUrl": "https://assets.leetcode.com/users/sinkachan/avatar_1515482532.png"
    }
  ],
  "topicTags": [
    {
      "name": "Math",
      "slug": "math"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": false, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 2}], \"1\": [], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    int mirrorReflection(int p, int q) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int mirrorReflection(int p, int q) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def mirrorReflection(self, p, q):\n        \"\"\"\n        :type p: int\n        :type q: int\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def mirrorReflection(self, p: int, q: int) -> int:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nint mirrorReflection(int p, int q){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public int MirrorReflection(int p, int q) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number} p\n * @param {number} q\n * @return {number}\n */\nvar mirrorReflection = function(p, q) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer} p\n# @param {Integer} q\n# @return {Integer}\ndef mirror_reflection(p, q)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func mirrorReflection(_ p: Int, _ q: Int) -> Int {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func mirrorReflection(p int, q int) int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def mirrorReflection(p: Int, q: Int): Int = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun mirrorReflection(p: Int, q: Int): Int {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn mirror_reflection(p: i32, q: i32) -> i32 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer $p\n     * @param Integer $q\n     * @return Integer\n     */\n    function mirrorReflection($p, $q) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"7.9K\", \"totalSubmission\": \"15K\", \"totalAcceptedRaw\": 7945, \"totalSubmissionRaw\": 15049, \"acRate\": \"52.8%\"}",
  "hints": [],
  "solution": {
    "id": "494",
    "canSeeDetail": true,
    "url": "/articles/mirror-reflection/",
    "content": "[TOC]\n\n## Solution\n---\n#### Approach 1: Simulation\n\n**Intuition**\n\nThe initial ray can be described as going from an origin `(x, y) = (0, 0)` in the direction `(rx, ry) = (p, q)`.  From this, we can figure out which wall it will meet and where, and what the appropriate new ray will be (based on reflection.)  We keep simulating the ray until it finds it's destination.\n\n**Algorithm**\n\nThe parameterized position of the laser after time `t` will be `(x + rx * t, y + ry * t)`.  From there, we know when it will meet the east wall (if `x + rx * t == p`), and so on.  For a positive (and nonnegligible) time `t`, it meets the next wall.\n\nWe can then calculate how the ray reflects.  If it hits an east or west wall, then `rx *= -1`, else `ry *= -1`.\n\nIn Java, care must be taken with floating point operations.\n\n<iframe src=\"https://leetcode.com/playground/Ds4FZeYo/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"Ds4FZeYo\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity:  $$O(p)$$.  We can prove (using *Approach #2*) that the number of bounces is bounded by this.\n\n* Space Complexity:  $$O(1)$$.\n<br />\n<br />\n\n\n---\n#### Approach 2: Mathematical\n\n**Intuition and Algorithm**\n\nInstead of modelling the ray as a bouncing line, model it as a straight line through reflections of the room.\n\nFor example, if `p = 2, q = 1`, then we can reflect the room horizontally, and draw a straight line from `(0, 0)` to `(4, 2)`.  The ray meets the receptor `2`, which was reflected from `(0, 2)` to `(4, 2)`.\n\nIn general, the ray goes to the first integer point `(kp, kq)` where `k` is an integer, and `kp` and `kq` are multiples of `p`.  Thus, the goal is just to find the smallest `k` for which `kq` is a multiple of `p`.\n\nThe mathematical answer is `k = p / gcd(p, q)`.\n\n<iframe src=\"https://leetcode.com/playground/srjkydcW/shared\" frameBorder=\"0\" width=\"100%\" height=\"327\" name=\"srjkydcW\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity:  $$O(\\log P)$$, the complexity of the `gcd` operation.\n\n* Space Complexity:  $$O(1)$$.\n<br />\n<br />\n\n\n---\n\n\nAnalysis written by: [@awice](https://leetcode.com/awice).",
    "contentTypeId": "107",
    "rating": {
      "id": "487",
      "count": 12,
      "average": 3.417,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "2\n1",
  "metaData": "{\r\n  \"name\": \"mirrorReflection\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"p\",\r\n      \"type\": \"integer\"\r\n    },\r\n    {\r\n      \"name\": \"q\",\r\n      \"type\": \"integer\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
