{
  "questionId": "899",
  "questionFrontendId": "868",
  "boundTopicId": null,
  "title": "Binary Gap",
  "titleSlug": "binary-gap",
  "categoryTitle": "Algorithms",
  "content": "<p>Given a positive&nbsp;integer <code>N</code>, find and return the longest distance between two consecutive 1&#39;s in the binary representation of <code>N</code>.</p>\r\n\r\n<p>If there aren&#39;t two consecutive 1&#39;s, return <font face=\"monospace\">0</font>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<div>\r\n<div>\r\n<ul>\r\n</ul>\r\n</div>\r\n</div>\r\n</div>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">22</span>\r\n<strong>Output: </strong>2\r\n<strong>Explanation: </strong>\r\n22 in binary is 0b10110.\r\nIn the binary representation of 22, there are three ones, and two consecutive pairs of 1&#39;s.\r\nThe first consecutive pair of 1&#39;s have distance 2.\r\nThe second consecutive pair of 1&#39;s have distance 1.\r\nThe answer is the largest of these two distances, which is 2.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">5</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">2</span>\r\n<strong>Explanation: </strong>\r\n5 in binary is 0b101.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">6</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">1</span>\r\n<strong>Explanation: </strong>\r\n6 in binary is 0b110.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-4-1\">8</span>\r\n<strong>Output: </strong><span id=\"example-output-4\">0</span>\r\n<strong>Explanation: </strong>\r\n8 in binary is 0b1000.\r\nThere aren&#39;t any consecutive pairs of 1&#39;s in the binary representation of 8, so we return 0.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<div>\r\n<div>\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= N &lt;= 10^9</code></li>\r\n</ul>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n",
  "isPaidOnly": false,
  "difficulty": "Easy",
  "likes": 165,
  "dislikes": 403,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [
    {
      "username": "dbhaskaran",
      "profileUrl": "/dbhaskaran/",
      "avatarUrl": "https://www.gravatar.com/avatar/4c263fbc6c627a1836c9a4092aff0322.png?s=200"
    }
  ],
  "topicTags": [
    {
      "name": "Math",
      "slug": "math"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"Twitter\", \"slug\": \"twitter\", \"timesEncountered\": 0}, {\"taggedByAdmin\": true, \"name\": \"eBay\", \"slug\": \"ebay\", \"timesEncountered\": 0}], \"1\": [], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    int binaryGap(int N) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int binaryGap(int N) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def binaryGap(self, N):\n        \"\"\"\n        :type N: int\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def binaryGap(self, N: int) -> int:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nint binaryGap(int N){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public int BinaryGap(int N) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number} N\n * @return {number}\n */\nvar binaryGap = function(N) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer} n\n# @return {Integer}\ndef binary_gap(n)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func binaryGap(_ N: Int) -> Int {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func binaryGap(N int) int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def binaryGap(N: Int): Int = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun binaryGap(N: Int): Int {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn binary_gap(n: i32) -> i32 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer $N\n     * @return Integer\n     */\n    function binaryGap($N) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"30.3K\", \"totalSubmission\": \"50.5K\", \"totalAcceptedRaw\": 30335, \"totalSubmissionRaw\": 50472, \"acRate\": \"60.1%\"}",
  "hints": [],
  "solution": {
    "id": "509",
    "canSeeDetail": true,
    "url": "/articles/binary-gap/",
    "content": "[TOC]\n\n## Solution\n---\n#### Approach 1: Store Indexes\n\n**Intuition**\n\nSince we wanted to inspect the distance between consecutive 1s in the binary representation of `N`, let's write down the index of each `1` in that binary representation.  For example, if `N = 22 = 0b10110`, then we'll write `A = [1, 2, 4]`.  This makes it easier to proceed, as now we have a problem about adjacent values in an array.\n\n**Algorithm**\n\nLet's make a list `A` of indices `i` such that `N` has the `i`th bit set.\n\nWith this array `A`, finding the maximum distance between consecutive `1`s is much easier: it's the maximum distance between adjacent values of this array.\n\n<iframe src=\"https://leetcode.com/playground/vjdm4iZG/shared\" frameBorder=\"0\" width=\"100%\" height=\"293\" name=\"vjdm4iZG\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity:  $$O(\\log N)$$.  Note that $$\\log N$$ is the number of digits in the binary representation of $$N$$.\n\n* Space Complexity:  $$O(\\log N)$$, the space used by `A`.\n<br />\n<br />\n\n\n---\n#### Approach 2: One Pass\n\n**Intuition**\n\nIn *Approach 1*, we created an array `A` of indices `i` for which `N` had the `i`th bit set.\n\nSince we only care about consecutive values of this array `A`, we don't need to store the whole array.  We only need to remember the last value seen.\n\n**Algorithm**\n\nWe'll store `last`, the last value added to the *virtual* array `A`.  If `N` has the `i`th bit set, a candidate answer is `i - last`, and then the new last value added to `A` would be `last = i`.\n\n<iframe src=\"https://leetcode.com/playground/Pae8eWML/shared\" frameBorder=\"0\" width=\"100%\" height=\"276\" name=\"Pae8eWML\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity:  $$O(\\log N)$$.  Note that $$\\log N$$ is the number of digits in the binary representation of $$N$$.\n\n* Space Complexity:  $$O(1)$$.\n<br />\n<br />\n\n\n---\n\n\nAnalysis written by: [@awice](https://leetcode.com/awice).",
    "contentTypeId": "107",
    "rating": {
      "id": "502",
      "count": 14,
      "average": 3.143,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "22",
  "metaData": "{\r\n  \"name\": \"binaryGap\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"N\",\r\n      \"type\": \"integer\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
