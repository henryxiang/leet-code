{
  "questionId": "911",
  "questionFrontendId": "879",
  "boundTopicId": null,
  "title": "Profitable Schemes",
  "titleSlug": "profitable-schemes",
  "categoryTitle": "Algorithms",
  "content": "<p>There are G people in a gang, and a list of various crimes they could commit.</p>\r\n\r\n<p>The <code>i</code>-th crime generates a <code>profit[i]</code> and requires <code>group[i]</code> gang members to participate.</p>\r\n\r\n<p>If a gang member participates in one crime, that member can&#39;t participate in another crime.</p>\r\n\r\n<p>Let&#39;s call a <em>profitable&nbsp;scheme</em>&nbsp;any subset of these crimes that generates at least <code>P</code> profit, and the total number of gang members participating in that subset of crimes is at most G.</p>\r\n\r\n<p>How many schemes can be chosen?&nbsp; Since the answer may be very&nbsp;large, <strong>return it modulo</strong> <code>10^9 + 7</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>G = <span id=\"example-input-1-1\">5</span>, P = <span id=\"example-input-1-2\">3</span>, group = <span id=\"example-input-1-3\">[2,2]</span>, profit = <span id=\"example-input-1-4\">[2,3]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">2</span>\r\n<strong>Explanation: </strong>\r\nTo make a profit of at least 3, the gang could either commit crimes 0 and 1, or just crime 1.\r\nIn total, there are 2 schemes.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>G = <span id=\"example-input-2-1\">10</span>, P = <span id=\"example-input-2-2\">5</span>, group = <span id=\"example-input-2-3\">[2,3,5]</span>, profit = <span id=\"example-input-2-4\">[6,7,8]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">7</span>\r\n<strong>Explanation: </strong>\r\nTo make a profit of at least 5, the gang could commit any crimes, as long as they commit one.\r\nThere are 7 possible schemes: (0), (1), (2), (0,1), (0,2), (1,2), and (0,1,2).\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n</div>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= G &lt;= 100</code></li>\r\n\t<li><code>0 &lt;= P &lt;= 100</code></li>\r\n\t<li><code>1 &lt;= group[i] &lt;= 100</code></li>\r\n\t<li><code>0 &lt;= profit[i] &lt;= 100</code></li>\r\n\t<li><code>1 &lt;= group.length = profit.length &lt;= 100</code></li>\r\n</ol>\r\n\r\n<div>\r\n<div>&nbsp;</div>\r\n</div>\r\n",
  "isPaidOnly": false,
  "difficulty": "Hard",
  "likes": 184,
  "dislikes": 23,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [
    {
      "username": "awice",
      "profileUrl": "/awice/",
      "avatarUrl": "https://assets.leetcode.com/users/awice/avatar_1576905115.png"
    }
  ],
  "topicTags": [
    {
      "name": "Dynamic Programming",
      "slug": "dynamic-programming"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": false, \"name\": \"LinkedIn\", \"slug\": \"linkedin\", \"timesEncountered\": 2}, {\"taggedByAdmin\": true, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 0}], \"1\": [], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    int profitableSchemes(int G, int P, vector<int>& group, vector<int>& profit) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int profitableSchemes(int G, int P, int[] group, int[] profit) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def profitableSchemes(self, G, P, group, profit):\n        \"\"\"\n        :type G: int\n        :type P: int\n        :type group: List[int]\n        :type profit: List[int]\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def profitableSchemes(self, G: int, P: int, group: List[int], profit: List[int]) -> int:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nint profitableSchemes(int G, int P, int* group, int groupSize, int* profit, int profitSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public int ProfitableSchemes(int G, int P, int[] group, int[] profit) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number} G\n * @param {number} P\n * @param {number[]} group\n * @param {number[]} profit\n * @return {number}\n */\nvar profitableSchemes = function(G, P, group, profit) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer} g\n# @param {Integer} p\n# @param {Integer[]} group\n# @param {Integer[]} profit\n# @return {Integer}\ndef profitable_schemes(g, p, group, profit)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func profitableSchemes(_ G: Int, _ P: Int, _ group: [Int], _ profit: [Int]) -> Int {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func profitableSchemes(G int, P int, group []int, profit []int) int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def profitableSchemes(G: Int, P: Int, group: Array[Int], profit: Array[Int]): Int = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun profitableSchemes(G: Int, P: Int, group: IntArray, profit: IntArray): Int {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn profitable_schemes(g: i32, p: i32, group: Vec<i32>, profit: Vec<i32>) -> i32 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer $G\n     * @param Integer $P\n     * @param Integer[] $group\n     * @param Integer[] $profit\n     * @return Integer\n     */\n    function profitableSchemes($G, $P, $group, $profit) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"7.4K\", \"totalSubmission\": \"19.6K\", \"totalAcceptedRaw\": 7436, \"totalSubmissionRaw\": 19567, \"acRate\": \"38.0%\"}",
  "hints": [],
  "solution": {
    "id": "523",
    "canSeeDetail": true,
    "url": "/articles/profitable-schemes/",
    "content": "[TOC]\n\n## Solution\n---\n#### Approach 1: Dynamic Programming\n\n**Intuition**\n\nWe don't care about the profit of the scheme if it is $$\\geq P$$, because it surely will be over the threshold of profitability required.  Similarly, we don't care about the number of people required in the scheme if it is $$> G$$, since we know the scheme will be too big for the gang to execute.\n\nAs a result, the bounds are small enough to use dynamic programming.  Let's keep track of `cur[p][g]`, the number of schemes with profitability $$p$$ and requiring $$g$$ gang members: except we'll say (without changing the answer) that all schemes that profit *at least* `P` dollars will instead profit *exactly* `P` dollars.\n\n**Algorithm**\n\nKeeping track of `cur[p][g]` as defined above, let's understand how it changes as we consider 1 extra crime that will profit `p0` and require `g0` gang members.  We will put the updated counts into `cur2`.\n\nFor each possible scheme with profit `p1` and group size `g1`, that scheme plus the extra crime (`p0, g0`) being considered, has a profit of `p2 = min(p1 + p0, P)`, and uses a group size of `g2 = g1 + g0`.\n\n<iframe src=\"https://leetcode.com/playground/gFHdtSWS/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"gFHdtSWS\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity:  $$O(N * P * G)$$, where $$N$$ is the number of crimes available to the gang.\n\n* Space Complexity:  $$O(P * G)$$.\n<br />\n<br />\n\n\n---\n\n\nAnalysis written by: [@awice](https://leetcode.com/awice).",
    "contentTypeId": "107",
    "rating": {
      "id": "516",
      "count": 7,
      "average": 4.286,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "5\n3\n[2,2]\n[2,3]",
  "metaData": "{\r\n  \"name\": \"profitableSchemes\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"G\",\r\n      \"type\": \"integer\"\r\n    },\r\n    {\r\n      \"name\": \"P\",\r\n      \"type\": \"integer\"\r\n    },\r\n    {\r\n      \"name\": \"group\",\r\n      \"type\": \"integer[]\"\r\n    },\r\n    {\r\n      \"name\": \"profit\",\r\n      \"type\": \"integer[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
