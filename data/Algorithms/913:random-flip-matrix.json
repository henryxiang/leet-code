{
  "questionId": "913",
  "questionFrontendId": "519",
  "boundTopicId": null,
  "title": "Random Flip Matrix",
  "titleSlug": "random-flip-matrix",
  "categoryTitle": "Algorithms",
  "content": "<p>You are given the number of rows <code>n_rows</code>&nbsp;and number of columns <code>n_cols</code>&nbsp;of a&nbsp;2D&nbsp;binary matrix&nbsp;where all values are initially 0.&nbsp;Write a function <code>flip</code>&nbsp;which chooses&nbsp;a 0 value&nbsp;<a href=\"https://en.wikipedia.org/wiki/Discrete_uniform_distribution\" target=\"_blank\">uniformly at random</a>,&nbsp;changes it to 1,&nbsp;and then returns the position <code>[row.id, col.id]</code> of that value. Also, write a function <code>reset</code> which sets all values back to 0.&nbsp;<strong>Try to minimize the number of calls to system&#39;s Math.random()</strong> and optimize the time and&nbsp;space complexity.</p>\r\n\r\n<p>Note:</p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= n_rows, n_cols&nbsp;&lt;= 10000</code></li>\r\n\t<li><code>0 &lt;= row.id &lt; n_rows</code> and <code>0 &lt;= col.id &lt; n_cols</code></li>\r\n\t<li><code>flip</code>&nbsp;will not be called when the matrix has no&nbsp;0 values left.</li>\r\n\t<li>the total number of calls to&nbsp;<code>flip</code>&nbsp;and <code>reset</code>&nbsp;will not exceed&nbsp;1000.</li>\r\n</ol>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: \r\n</strong><span id=\"example-input-1-1\">[&quot;Solution&quot;,&quot;flip&quot;,&quot;flip&quot;,&quot;flip&quot;,&quot;flip&quot;]\r\n</span><span id=\"example-input-1-2\">[[2,3],[],[],[],[]]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[null,[0,1],[1,2],[1,0],[1,1]]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: \r\n</strong><span id=\"example-input-2-1\">[&quot;Solution&quot;,&quot;flip&quot;,&quot;flip&quot;,&quot;reset&quot;,&quot;flip&quot;]\r\n</span><span id=\"example-input-2-2\">[[1,2],[],[],[],[]]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">[null,[0,0],[0,1],null,[0,0]]</span></pre>\r\n</div>\r\n\r\n<p><strong>Explanation of Input Syntax:</strong></p>\r\n\r\n<p>The input is two lists:&nbsp;the subroutines called&nbsp;and their&nbsp;arguments. <code>Solution</code>&#39;s constructor&nbsp;has two arguments, <code>n_rows</code> and <code>n_cols</code>.&nbsp;<code>flip</code>&nbsp;and <code>reset</code> have&nbsp;no&nbsp;arguments.&nbsp;Arguments&nbsp;are&nbsp;always wrapped with a list, even if there aren&#39;t any.</p>\r\n",
  "isPaidOnly": false,
  "difficulty": "Medium",
  "likes": 139,
  "dislikes": 48,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [
    {
      "username": "1337c0d3r",
      "profileUrl": "/1337c0d3r/",
      "avatarUrl": "https://assets.leetcode.com/users/1337c0d3r/avatar_1547177258.png"
    }
  ],
  "topicTags": [
    {
      "name": "Random",
      "slug": "random"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 0}], \"1\": [], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    Solution(int n_rows, int n_cols) {\n        \n    }\n    \n    vector<int> flip() {\n        \n    }\n    \n    void reset() {\n        \n    }\n};\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution* obj = new Solution(n_rows, n_cols);\n * vector<int> param_1 = obj->flip();\n * obj->reset();\n */"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n\n    public Solution(int n_rows, int n_cols) {\n        \n    }\n    \n    public int[] flip() {\n        \n    }\n    \n    public void reset() {\n        \n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution obj = new Solution(n_rows, n_cols);\n * int[] param_1 = obj.flip();\n * obj.reset();\n */"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n\n    def __init__(self, n_rows, n_cols):\n        \"\"\"\n        :type n_rows: int\n        :type n_cols: int\n        \"\"\"\n        \n\n    def flip(self):\n        \"\"\"\n        :rtype: List[int]\n        \"\"\"\n        \n\n    def reset(self):\n        \"\"\"\n        :rtype: None\n        \"\"\"\n        \n\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution(n_rows, n_cols)\n# param_1 = obj.flip()\n# obj.reset()"
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n\n    def __init__(self, n_rows: int, n_cols: int):\n        \n\n    def flip(self) -> List[int]:\n        \n\n    def reset(self) -> None:\n        \n\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution(n_rows, n_cols)\n# param_1 = obj.flip()\n# obj.reset()"
    },
    {
      "lang": "C",
      "code": "\n\n\ntypedef struct {\n    \n} Solution;\n\n\nSolution* solutionCreate(int n_rows, int n_cols) {\n    \n}\n\nint* solutionFlip(Solution* obj, int* retSize) {\n  \n}\n\nvoid solutionReset(Solution* obj) {\n  \n}\n\nvoid solutionFree(Solution* obj) {\n    \n}\n\n/**\n * Your Solution struct will be instantiated and called as such:\n * Solution* obj = solutionCreate(n_rows, n_cols);\n * int* param_1 = solutionFlip(obj, retSize);\n \n * solutionReset(obj);\n \n * solutionFree(obj);\n*/"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n\n    public Solution(int n_rows, int n_cols) {\n        \n    }\n    \n    public int[] Flip() {\n        \n    }\n    \n    public void Reset() {\n        \n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution obj = new Solution(n_rows, n_cols);\n * int[] param_1 = obj.Flip();\n * obj.Reset();\n */"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number} n_rows\n * @param {number} n_cols\n */\nvar Solution = function(n_rows, n_cols) {\n    \n};\n\n/**\n * @return {number[]}\n */\nSolution.prototype.flip = function() {\n    \n};\n\n/**\n * @return {void}\n */\nSolution.prototype.reset = function() {\n    \n};\n\n/** \n * Your Solution object will be instantiated and called as such:\n * var obj = new Solution(n_rows, n_cols)\n * var param_1 = obj.flip()\n * obj.reset()\n */"
    },
    {
      "lang": "Ruby",
      "code": "class Solution\n\n=begin\n    :type n_rows: Integer\n    :type n_cols: Integer\n=end\n    def initialize(n_rows, n_cols)\n        \n    end\n\n\n=begin\n    :rtype: Integer[]\n=end\n    def flip()\n        \n    end\n\n\n=begin\n    :rtype: Void\n=end\n    def reset()\n        \n    end\n\n\nend\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution.new(n_rows, n_cols)\n# param_1 = obj.flip()\n# obj.reset()"
    },
    {
      "lang": "Swift",
      "code": "\nclass Solution {\n\n    init(_ n_rows: Int, _ n_cols: Int) {\n        \n    }\n    \n    func flip() -> [Int] {\n        \n    }\n    \n    func reset() {\n        \n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * let obj = Solution(n_rows, n_cols)\n * let ret_1: [Int] = obj.flip()\n * obj.reset()\n */"
    },
    {
      "lang": "Go",
      "code": "type Solution struct {\n    \n}\n\n\nfunc Constructor(n_rows int, n_cols int) Solution {\n    \n}\n\n\nfunc (this *Solution) Flip() []int {\n    \n}\n\n\nfunc (this *Solution) Reset()  {\n    \n}\n\n\n/**\n * Your Solution object will be instantiated and called as such:\n * obj := Constructor(n_rows, n_cols);\n * param_1 := obj.Flip();\n * obj.Reset();\n */"
    },
    {
      "lang": "Scala",
      "code": "class Solution(_n_rows: Int, _n_cols: Int) {\n\n    def flip(): Array[Int] = {\n        \n    }\n\n    def reset() {\n        \n    }\n\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * var obj = new Solution(n_rows, n_cols)\n * var param_1 = obj.flip()\n * obj.reset()\n */"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution(n_rows: Int, n_cols: Int) {\n\n    fun flip(): IntArray {\n        \n    }\n\n    fun reset() {\n        \n    }\n\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * var obj = Solution(n_rows, n_cols)\n * var param_1 = obj.flip()\n * obj.reset()\n */"
    },
    {
      "lang": "Rust",
      "code": "struct Solution {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl Solution {\n\n    fn new(n_rows: i32, n_cols: i32) -> Self {\n        \n    }\n    \n    fn flip(&self) -> Vec<i32> {\n        \n    }\n    \n    fn reset(&self) {\n        \n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * let obj = Solution::new(n_rows, n_cols);\n * let ret_1: Vec<i32> = obj.flip();\n * obj.reset();\n */"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n    /**\n     * @param Integer $n_rows\n     * @param Integer $n_cols\n     */\n    function __construct($n_rows, $n_cols) {\n        \n    }\n  \n    /**\n     * @return Integer[]\n     */\n    function flip() {\n        \n    }\n  \n    /**\n     * @return NULL\n     */\n    function reset() {\n        \n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * $obj = Solution($n_rows, $n_cols);\n * $ret_1 = $obj->flip();\n * $obj->reset();\n */"
    }
  ],
  "stats": "{\"totalAccepted\": \"6K\", \"totalSubmission\": \"17K\", \"totalAcceptedRaw\": 5965, \"totalSubmissionRaw\": 16988, \"acRate\": \"35.1%\"}",
  "hints": [],
  "solution": {
    "id": "518",
    "canSeeDetail": true,
    "url": "/articles/random-flip-matrix/",
    "content": "[TOC]\n\n## Solution\n---\n\n#### Preface:\n\nBecause the matrix is given to us in an abstract way, we must design our own representation of the matrix. In addition to being accurate, we would want our representation to have the following properties:\n\n1. It utilizes less space than $$O(\\text{n_rows} \\cdot \\text{n_cols})$$, since $$\\text{n_rows}$$ and $$\\text{n_cols}$$ can be very large.\n2. It allows us to generate a random $$0$$ position efficiently, using significantly less than $$O(\\text{n_rows} \\cdot \\text{n_cols})$$ time and only one call to the random number generator.\n\nDescribed below are two different representations which have these properties.\n\n#### Approach 1: Virtual Array\n\n**Intuition**\n\nLet assume that we are given an array-like data structure $$V$$ of size $$\\text{n_rows} \\cdot \\text{n_cols}$$, where all cells $$V[i]$$ have been initialized to $$i$$th entry in the matrix, and each assignment and access takes $$O(1)$$ time.\n\nThis data structure can encode the state of the matrix. How can it encode the state of the matrix in a way that enables efficient generation of random $$0$$ positions?\n\nAlso, since this data structure isn't actually given to us, how can we construct this data structure in less than $$O(\\text{n_rows} \\cdot \\text{n_cols})$$ time?\n\n**Algorithm**\n\nData structure $$V$$, described above, obviously cannot be constructed in less than $$O(\\text{n_rows} \\cdot \\text{n_cols})$$ time if the initializations are explicit. We must approach it in another way.\n\nWe create a new data type which is a slight modification of HashMap, where access to uninitialized key $$k$$ will initialize $$V[k]$$ to the $$k$$th entry in the matrix and then return it, rather than throwing an error. In this way, it is implied that all $$V[k]$$ are initialized to $$k$$th entry in the matrix.\n\nLet the number of $$0$$ entries remaining in the matrix be denoted as $$\\text{rem}$$. As we perform $$\\text{flip}$$ and $$\\text{reset}$$ operations, we update $$V$$ to maintain the invariant that $$V[0] \\dots V[\\text{rem}-1]$$ map to all $$0$$ entries and $$V[\\text{rem}] \\dots V[\\text{n_rows} \\cdot \\text{n_cols}-1]$$ map to all $$1$$ entries.\n\n　$$\\text{flip}$$ will change the $$0$$ entry stored at $$V[k]$$ to $$1$$, where $$k$$ is a random integer in the range $$[0, \\text{rem})$$. Then, it will decrement rem and swap $$V[k]$$ with $$V[\\text{rem}]$$.\n\n　$$\\text{reset}$$ will clear $$V$$ of all assigned values and set $$\\text{rem}$$ to $$\\text{n_rows} \\cdot \\text{n_cols}$$.\n\n<iframe src=\"https://leetcode.com/playground/jm6vxgX6/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"jm6vxgX6\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: $$O(1)$$ preprocessing. $$O(1)$$ $$\\text{flip}$$. $$O(\\text{min}(\\text{F}, \\text{n_rows} \\cdot \\text{n_cols}))$$ $$\\text{reset}$$, where $$\\text{F}$$ is the total number of flips.\n* Space Complexity: $$O(\\text{min}(\\text{F}, \\text{n_rows} \\cdot \\text{n_cols}))$$.\n\n<br/>\n\n---\n\n#### Approach 2: Square-Root Decomposition\n\n**Intuition**\n\nSay that we have $$\\text{rem}$$ $$0$$ entries left in the matrix and have randomly chosen the $$k$$th $$0$$ entry to be flipped, where $$0 \\leq k < \\text{rem}$$. Traversing through all $$\\text{n_rows} \\cdot \\text{n_cols}$$ cells to find its position is too costly. If we split the matrix into roughly $$\\sqrt{\\text{n_rows} \\cdot \\text{n_cols}}$$ contiguous groups of roughly size $$\\sqrt{\\text{n_rows} \\cdot \\text{n_cols}}$$ each, we can find the containing group in $$O\\!\\left( \\sqrt{\\text{n_rows} \\cdot \\text{n_cols}}\\, \\right)$$ time and then search through that group in $$O\\!\\left( \\sqrt{\\text{n_rows} \\cdot \\text{n_cols}}\\, \\right)$$ time to find the $$k$$th $$0$$ entry.\n\n**Algorithm**\n\nCreate roughly $$\\sqrt{\\text{n_rows} \\cdot \\text{n_cols}}$$ buckets, and have the $$i$$th entry in the matrix belong to bucket number $$\\dfrac{i}{\\sqrt{\\text{n_rows} \\cdot \\text{n_cols}}}$$.\n\nEach bucket has a $$\\text{size}$$ attribute which represents the number of entries in the matrix that map to it. Also, each bucket tracks which of its entries are $$1$$-valued vs $$0$$-valued by storing its $$1$$-valued entries in a HashSet.\n\nTo find the $$k$$th remaining $$0$$ entry in the matrix, loop through the list of buckets and use the $$\\text{size}$$ and the count of $$1$$s in each bucket to calculate which bucket contains the $$k$$th remaining $$0$$ entry. Then, loop through all entries which belong to this bucket, checking which are $$0$$-valued and which are not, to find out what the $$k$$th remaining $$0$$ entry is.\n\n<iframe src=\"https://leetcode.com/playground/SGFC3j6D/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"SGFC3j6D\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: $$O\\!\\left( \\sqrt{\\text{n_rows} \\cdot \\text{n_cols}}\\, \\right)$$ preprocessing. $$O\\!\\left( \\sqrt{\\text{n_rows} \\cdot \\text{n_cols}}\\, \\right)$$ $$\\text{flip}$$. $$O(\\sqrt{\\text{n_rows} \\cdot \\text{n_cols}} + \\min (\\text{F}, (\\text{n_rows} \\cdot \\text{n_cols})))$$ $$\\text{reset}$$, where $$\\text{F}$$ is the total number of flips.\n* Space Complexity: $$O(\\sqrt{\\text{n_rows} \\cdot \\text{n_cols}} + \\min (\\text{F}, (\\text{n_rows} \\cdot \\text{n_cols})))$$.",
    "contentTypeId": "107",
    "rating": {
      "id": "511",
      "count": 11,
      "average": 1.364,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "[\"Solution\", \"flip\", \"flip\", \"flip\", \"flip\"]\n[[2, 2], [], [], [], []]",
  "metaData": "{\r\n    \"classname\": \"Solution\",\r\n    \"maxbytesperline\": 200000,\r\n    \"constructor\": {\r\n        \"params\": [\r\n            {\r\n                \"name\": \"n_rows\",\r\n                \"type\": \"integer\"\r\n            },\r\n            {\r\n                \"name\": \"n_cols\",\r\n                \"type\": \"integer\"\r\n            }\r\n        ]\r\n    },\r\n    \"methods\": [\r\n        {\r\n            \"name\" : \"flip\",\r\n            \"params\": [\r\n            ],\r\n            \"return\": {\r\n                \"type\": \"integer[]\"\r\n            }\r\n        },\r\n        {\r\n            \"name\" : \"reset\",\r\n            \"params\": [\r\n            ],\r\n            \"return\": {\r\n                \"type\": \"void\"\r\n            }\r\n        }\r\n    ],\r\n    \"systemdesign\": true,\r\n    \"params\": [\r\n        {\r\n            \"name\": \"inputs\",\r\n            \"type\": \"integer[]\"\r\n        },\r\n        {\r\n            \"name\": \"inputs\",\r\n            \"type\": \"integer[]\"\r\n        }\r\n    ],\r\n    \"return\": {\r\n        \"type\": \"list<String>\",\r\n        \"dealloc\": true\r\n    }\r\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
