{
  "questionId": "917",
  "questionFrontendId": "881",
  "boundTopicId": null,
  "title": "Boats to Save People",
  "titleSlug": "boats-to-save-people",
  "categoryTitle": "Algorithms",
  "content": "<p>The <code>i</code>-th person has weight <code>people[i]</code>, and each boat can carry a maximum weight of <code>limit</code>.</p>\r\n\r\n<p>Each boat carries at most 2 people at the same time, provided the sum of the&nbsp;weight of those people is at most <code>limit</code>.</p>\r\n\r\n<p>Return the minimum number of boats to carry every given person.&nbsp; (It is guaranteed each person can be carried by a boat.)</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>people = <span id=\"example-input-1-1\">[1,2]</span>, limit = <span id=\"example-input-1-2\">3</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">1</span>\r\n<strong>Explanation: </strong>1 boat (1, 2)\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>people = <span id=\"example-input-2-1\">[3,2,2,1]</span>, limit = <span id=\"example-input-2-2\">3</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">3</span>\r\n<strong>Explanation</strong>: 3 boats (1, 2), (2) and (3)\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>people = <span id=\"example-input-3-1\">[3,5,3,4]</span>, limit = <span id=\"example-input-3-2\">5</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">4</span>\r\n<strong>Explanation</strong>: 4 boats (3), (3), (4), (5)</pre>\r\n\r\n<p><strong>Note</strong>:</p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;=&nbsp;people.length &lt;= 50000</code></li>\r\n\t<li><code>1 &lt;= people[i] &lt;=&nbsp;limit &lt;= 30000</code></li>\r\n</ul>\r\n</div>\r\n</div>\r\n</div>\r\n",
  "isPaidOnly": false,
  "difficulty": "Medium",
  "likes": 361,
  "dislikes": 26,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [],
  "topicTags": [
    {
      "name": "Two Pointers",
      "slug": "two-pointers"
    },
    {
      "name": "Greedy",
      "slug": "greedy"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": false, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 2}], \"1\": [], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    int numRescueBoats(vector<int>& people, int limit) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int numRescueBoats(int[] people, int limit) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def numRescueBoats(self, people, limit):\n        \"\"\"\n        :type people: List[int]\n        :type limit: int\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nint numRescueBoats(int* people, int peopleSize, int limit){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public int NumRescueBoats(int[] people, int limit) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number[]} people\n * @param {number} limit\n * @return {number}\n */\nvar numRescueBoats = function(people, limit) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer[]} people\n# @param {Integer} limit\n# @return {Integer}\ndef num_rescue_boats(people, limit)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func numRescueBoats(_ people: [Int], _ limit: Int) -> Int {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func numRescueBoats(people []int, limit int) int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def numRescueBoats(people: Array[Int], limit: Int): Int = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun numRescueBoats(people: IntArray, limit: Int): Int {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn num_rescue_boats(people: Vec<i32>, limit: i32) -> i32 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer[] $people\n     * @param Integer $limit\n     * @return Integer\n     */\n    function numRescueBoats($people, $limit) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"21.8K\", \"totalSubmission\": \"48.3K\", \"totalAcceptedRaw\": 21848, \"totalSubmissionRaw\": 48326, \"acRate\": \"45.2%\"}",
  "hints": [],
  "solution": {
    "id": "525",
    "canSeeDetail": true,
    "url": "/articles/boats-to-save-people/",
    "content": "[TOC]\n\n## Solution\n---\n#### Approach 1: Greedy (Two Pointer)\n\n**Intuition**\n\nIf the heaviest person can share a boat with the lightest person, then do so.  Otherwise, the heaviest person can't pair with anyone, so they get their own boat.\n\nThe reason this works is because if the lightest person can pair with anyone, they might as well pair with the heaviest person.\n\n**Algorithm**\n\nLet `people[i]` to the currently lightest person, and `people[j]` to the heaviest.\n\nThen, as described above, if the heaviest person can share a boat with the lightest person (if `people[j] + people[i] <= limit`) then do so; otherwise, the heaviest person sits in their own boat.\n\n<iframe src=\"https://leetcode.com/playground/Vy4ovfs7/shared\" frameBorder=\"0\" width=\"100%\" height=\"344\" name=\"Vy4ovfs7\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity:  $$O(N \\log N)$$, where $$N$$ is the length of `people`.\n\n* Space Complexity:  $$O(N)$$.\n<br />\n<br />\n\n\n---\n\n\nAnalysis written by: [@awice](https://leetcode.com/awice).",
    "contentTypeId": "107",
    "rating": {
      "id": "518",
      "count": 16,
      "average": 5,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "[1,2]\n3",
  "metaData": "{\r\n  \"name\": \"numRescueBoats\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"people\",\r\n      \"type\": \"integer[]\"\r\n    },\r\n    {\r\n      \"name\": \"limit\",\r\n      \"type\": \"integer\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
