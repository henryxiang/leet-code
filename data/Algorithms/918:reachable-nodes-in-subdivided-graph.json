{
  "questionId": "918",
  "questionFrontendId": "882",
  "boundTopicId": null,
  "title": "Reachable Nodes In Subdivided Graph",
  "titleSlug": "reachable-nodes-in-subdivided-graph",
  "categoryTitle": "Algorithms",
  "content": "<p>Starting with an&nbsp;<strong>undirected</strong> graph (the &quot;original graph&quot;) with nodes from <code>0</code> to <code>N-1</code>, subdivisions are made to some of the edges.</p>\r\n\r\n<p>The graph is given as follows: <code>edges[k]</code> is a list of integer pairs <code>(i, j, n)</code> such that <code>(i, j)</code> is an edge of the original graph,</p>\r\n\r\n<p>and <code>n</code> is the total number of <strong>new</strong> nodes on that edge.&nbsp;</p>\r\n\r\n<p>Then, the edge <code>(i, j)</code> is deleted from the original graph,&nbsp;<code>n</code>&nbsp;new nodes <code>(x_1, x_2, ..., x_n)</code> are added to the original graph,</p>\r\n\r\n<p>and <code>n+1</code> new&nbsp;edges <code>(i, x_1), (x_1, x_2), (x_2, x_3), ..., (x_{n-1}, x_n), (x_n, j)</code>&nbsp;are added to the original&nbsp;graph.</p>\r\n\r\n<p>Now, you start at node <code>0</code>&nbsp;from the original graph, and in each move, you travel along one&nbsp;edge.&nbsp;</p>\r\n\r\n<p>Return how many nodes you can reach in at most <code>M</code> moves.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><code>edges </code>= <span id=\"example-input-1-1\">[[0,1,10],[0,2,1],[1,2,2]]</span>, M = <span id=\"example-input-1-2\">6</span>, N = <span id=\"example-input-1-3\">3</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">13</span>\r\n<strong>Explanation: </strong>\r\nThe nodes that are reachable in the final graph after M = 6 moves are indicated below.\r\n<span><img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/08/01/origfinal.png\" style=\"width: 487px; height: 200px;\" /></span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><code>edges </code>= <span id=\"example-input-2-1\">[[0,1,4],[1,2,6],[0,2,8],[1,3,1]]</span>, M = <span id=\"example-input-2-2\">10</span>, N = <span id=\"example-input-2-3\">4</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">23</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n</div>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>0 &lt;= edges.length &lt;= 10000</code></li>\r\n\t<li><code>0 &lt;= edges[i][0] &lt;&nbsp;edges[i][1] &lt; N</code></li>\r\n\t<li>There does not exist any&nbsp;<code>i != j</code> for which <code>edges[i][0] == edges[j][0]</code> and <code>edges[i][1] == edges[j][1]</code>.</li>\r\n\t<li>The original graph&nbsp;has no parallel edges.</li>\r\n\t<li><code>0 &lt;= edges[i][2] &lt;= 10000</code></li>\r\n\t<li><code>0 &lt;= M &lt;= 10^9</code></li>\r\n\t<li><code><font face=\"monospace\">1 &lt;= N &lt;= 3000</font></code></li>\r\n\t<li>A reachable node is a node that can be travelled to&nbsp;using at most&nbsp;M moves starting from&nbsp;node 0.</li>\r\n</ol>\r\n\r\n<div>\r\n<div>&nbsp;</div>\r\n</div>\r\n",
  "isPaidOnly": false,
  "difficulty": "Hard",
  "likes": 120,
  "dislikes": 111,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [
    {
      "username": "mzchen",
      "profileUrl": "/mzchen/",
      "avatarUrl": "https://assets.leetcode.com/users/mzchen/avatar_1569978943.png"
    }
  ],
  "topicTags": [
    {
      "name": "Heap",
      "slug": "heap"
    }
  ],
  "companyTagStats": "{\"1\": [], \"2\": [], \"3\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    int reachableNodes(vector<vector<int>>& edges, int M, int N) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int reachableNodes(int[][] edges, int M, int N) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def reachableNodes(self, edges, M, N):\n        \"\"\"\n        :type edges: List[List[int]]\n        :type M: int\n        :type N: int\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def reachableNodes(self, edges: List[List[int]], M: int, N: int) -> int:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nint reachableNodes(int** edges, int edgesSize, int* edgesColSize, int M, int N){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public int ReachableNodes(int[][] edges, int M, int N) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number[][]} edges\n * @param {number} M\n * @param {number} N\n * @return {number}\n */\nvar reachableNodes = function(edges, M, N) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer[][]} edges\n# @param {Integer} m\n# @param {Integer} n\n# @return {Integer}\ndef reachable_nodes(edges, m, n)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func reachableNodes(_ edges: [[Int]], _ M: Int, _ N: Int) -> Int {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func reachableNodes(edges [][]int, M int, N int) int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def reachableNodes(edges: Array[Array[Int]], M: Int, N: Int): Int = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun reachableNodes(edges: Array<IntArray>, M: Int, N: Int): Int {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn reachable_nodes(edges: Vec<Vec<i32>>, m: i32, n: i32) -> i32 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer[][] $edges\n     * @param Integer $M\n     * @param Integer $N\n     * @return Integer\n     */\n    function reachableNodes($edges, $M, $N) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"4.3K\", \"totalSubmission\": \"11K\", \"totalAcceptedRaw\": 4342, \"totalSubmissionRaw\": 11036, \"acRate\": \"39.3%\"}",
  "hints": [],
  "solution": {
    "id": "524",
    "canSeeDetail": true,
    "url": "/articles/reachable-nodes-in-subdivided-graph/",
    "content": "[TOC]\n\n## Solution\n---\n#### Approach 1: Dijkstra's\n\n**Intuition**\n\nTreating the original graph as a weighted, undirected graph, we can use Dijkstra's algorithm to find all reachable nodes in the original graph.  However, this won't be enough to solve examples where subdivided edges are only used partially.\n\nWhen we travel along an edge (in either direction), we can keep track of how much we use it.  At the end, we want to know every node we reached in the original graph, plus the sum of the utilization of each edge.\n\n**Algorithm**\n\nWe use *Dijkstra's algorithm* to find the shortest distance from our source to all targets.  This is a textbook algorithm, refer to [this link](https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm) for more details.\n\nAdditionally, for each (directed) edge `(node, nei)`, we'll keep track of how many \"new\" nodes (new from subdivision of the original edge) were `used`.  At the end, we'll sum up the utilization of each edge.\n\nPlease see the inline comments for more details.\n\n<iframe src=\"https://leetcode.com/playground/obqv6gh4/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"obqv6gh4\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity:  $$O(E \\log N)$$, where $$E$$ is the length of `edges`.\n\n* Space Complexity:  $$O(N)$$.\n<br />\n<br />\n\n\n---\n\n\nAnalysis written by: [@awice](https://leetcode.com/awice).",
    "contentTypeId": "107",
    "rating": {
      "id": "517",
      "count": 9,
      "average": 4.444,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "[[0,1,10],[0,2,1],[1,2,2]]\n6\n3",
  "metaData": "{\r\n  \"name\": \"reachableNodes\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"edges\",\r\n      \"type\": \"integer[][]\"\r\n    },\r\n    {\r\n      \"name\": \"M\",\r\n      \"type\": \"integer\"\r\n    },\r\n    {\r\n      \"name\": \"N\",\r\n      \"type\": \"integer\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
