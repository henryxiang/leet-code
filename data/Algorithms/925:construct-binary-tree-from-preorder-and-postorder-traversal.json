{
  "questionId": "925",
  "questionFrontendId": "889",
  "boundTopicId": null,
  "title": "Construct Binary Tree from Preorder and Postorder Traversal",
  "titleSlug": "construct-binary-tree-from-preorder-and-postorder-traversal",
  "categoryTitle": "Algorithms",
  "content": "<p>Return any binary tree that matches the given preorder and postorder traversals.</p>\r\n\r\n<p>Values in the traversals&nbsp;<code>pre</code> and <code>post</code>&nbsp;are distinct&nbsp;positive integers.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>pre = <span id=\"example-input-1-1\">[1,2,4,5,3,6,7]</span>, post = <span id=\"example-input-1-2\">[4,5,2,6,7,3,1]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[1,2,3,4,5,6,7]</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong><span>Note:</span></strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= pre.length == post.length &lt;= 30</code></li>\r\n\t<li><code>pre[]</code> and <code>post[]</code>&nbsp;are both permutations of <code>1, 2, ..., pre.length</code>.</li>\r\n\t<li>It is guaranteed an answer exists. If there exists multiple answers, you can return any of them.</li>\r\n</ul>\r\n</div>\r\n",
  "isPaidOnly": false,
  "difficulty": "Medium",
  "likes": 560,
  "dislikes": 37,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [
    {
      "username": "1337c0d3r",
      "profileUrl": "/1337c0d3r/",
      "avatarUrl": "https://assets.leetcode.com/users/1337c0d3r/avatar_1547177258.png"
    }
  ],
  "topicTags": [
    {
      "name": "Tree",
      "slug": "tree"
    }
  ],
  "companyTagStats": "{\"1\": [{\"taggedByAdmin\": true, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 7}], \"3\": [{\"taggedByAdmin\": false, \"name\": \"Facebook\", \"slug\": \"facebook\", \"timesEncountered\": 2}], \"2\": [{\"taggedByAdmin\": false, \"name\": \"Bloomberg\", \"slug\": \"bloomberg\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 2}]}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* constructFromPrePost(vector<int>& pre, vector<int>& post) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public TreeNode constructFromPrePost(int[] pre, int[] post) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def constructFromPrePost(self, pre, post):\n        \"\"\"\n        :type pre: List[int]\n        :type post: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def constructFromPrePost(self, pre: List[int], post: List[int]) -> TreeNode:\n        "
    },
    {
      "lang": "C",
      "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n\n\nstruct TreeNode* constructFromPrePost(int* pre, int preSize, int* post, int postSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public TreeNode ConstructFromPrePost(int[] pre, int[] post) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {number[]} pre\n * @param {number[]} post\n * @return {TreeNode}\n */\nvar constructFromPrePost = function(pre, post) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val)\n#         @val = val\n#         @left, @right = nil, nil\n#     end\n# end\n\n# @param {Integer[]} pre\n# @param {Integer[]} post\n# @return {TreeNode}\ndef construct_from_pre_post(pre, post)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func constructFromPrePost(_ pre: [Int], _ post: [Int]) -> TreeNode? {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc constructFromPrePost(pre []int, post []int) *TreeNode {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def constructFromPrePost(pre: Array[Int], post: Array[Int]): TreeNode = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun constructFromPrePost(pre: IntArray, post: IntArray): TreeNode? {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn construct_from_pre_post(pre: Vec<i32>, post: Vec<i32>) -> Option<Rc<RefCell<TreeNode>>> {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($value) { $this->val = $value; }\n * }\n */\nclass Solution {\n\n    /**\n     * @param Integer[] $pre\n     * @param Integer[] $post\n     * @return TreeNode\n     */\n    function constructFromPrePost($pre, $post) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"25.4K\", \"totalSubmission\": \"39.9K\", \"totalAcceptedRaw\": 25355, \"totalSubmissionRaw\": 39917, \"acRate\": \"63.5%\"}",
  "hints": [],
  "solution": {
    "id": "533",
    "canSeeDetail": true,
    "url": "/articles/construct-binary-tree-from-preorder-and-postorder-/",
    "content": "[TOC]\n\n## Solution\n---\n#### Approach 1: Recursion\n\n**Intuition**\n\nA preorder traversal is:\n\n* `(root node) (preorder of left branch) (preorder of right branch)`\n\nWhile a postorder traversal is:\n\n* `(postorder of left branch) (postorder of right branch) (root node)`\n\nFor example, if the final binary tree is `[1, 2, 3, 4, 5, 6, 7]` (serialized), then the preorder traversal is `[1] + [2, 4, 5] + [3, 6, 7]`, while the postorder traversal is `[4, 5, 2] + [6, 7, 3] + [1]`.\n\nIf we knew how many nodes the left branch had, we could partition these arrays as such, and use recursion to generate each branch of the tree.\n\n**Algorithm**\n\nLet's say the left branch has $$L$$ nodes.  We know the head node of that left branch is `pre[1]`, but it also occurs last in the postorder representation of the left branch.  So `pre[1] = post[L-1]` (because of uniqueness of the node values.)  Hence, `L = post.indexOf(pre[1]) + 1`.\n\nNow in our recursion step, the left branch is represnted by `pre[1 : L+1]` and `post[0 : L]`, while the right branch is represented by `pre[L+1 : N]` and `post[L : N-1]`.\n\n<iframe src=\"https://leetcode.com/playground/rRvx9C7Q/shared\" frameBorder=\"0\" width=\"100%\" height=\"378\" name=\"rRvx9C7Q\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity:  $$O(N^2)$$, where $$N$$ is the number of nodes.\n\n* Space Complexity:  $$O(N^2)$$.\n<br />\n<br />\n\n\n---\n#### Approach 2: Recursion (Space Saving Variant)\n\n**Explanation**\n\nWe present a variation of *Approach 1* that uses indexes to refer to the subarrays of `pre` and `post`, instead of passing copies of those subarrays.  Here, `(i0, i1, N)` refers to `pre[i0:i0+N], post[i1:i1+N]`.\n\n<iframe src=\"https://leetcode.com/playground/P82iKheu/shared\" frameBorder=\"0\" width=\"100%\" height=\"446\" name=\"P82iKheu\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity:  $$O(N^2)$$, where $$N$$ is the number of nodes.\n\n* Space Complexity:  $$O(N)$$, the space used by the answer.\n<br />\n<br />\n\n---\n\n\nAnalysis written by: [@awice](https://leetcode.com/awice).",
    "contentTypeId": "107",
    "rating": {
      "id": "526",
      "count": 34,
      "average": 3.5,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "[1,2,4,5,3,6,7]\n[4,5,2,6,7,3,1]",
  "metaData": "{\r\n  \"name\": \"constructFromPrePost\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"pre\",\r\n      \"type\": \"integer[]\"\r\n    },\r\n    {\r\n      \"name\": \"post\",\r\n      \"type\": \"integer[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"TreeNode\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
