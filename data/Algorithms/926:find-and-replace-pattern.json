{
  "questionId": "926",
  "questionFrontendId": "890",
  "boundTopicId": null,
  "title": "Find and Replace Pattern",
  "titleSlug": "find-and-replace-pattern",
  "categoryTitle": "Algorithms",
  "content": "<p>You have a list of&nbsp;<code>words</code> and a <code>pattern</code>, and you want to know which words in <code>words</code> matches the pattern.</p>\r\n\r\n<p>A word matches the pattern if there exists a permutation of letters <code>p</code> so that after replacing every letter <code>x</code> in the pattern with <code>p(x)</code>, we get the desired word.</p>\r\n\r\n<p>(<em>Recall that a permutation of letters is a bijection from letters to letters: every letter maps to another letter, and no two letters map to the same letter.</em>)</p>\r\n\r\n<p>Return a list of the words in <code>words</code>&nbsp;that match the given pattern.&nbsp;</p>\r\n\r\n<p>You may return the answer in any order.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>words = <span id=\"example-input-1-1\">[&quot;abc&quot;,&quot;deq&quot;,&quot;mee&quot;,&quot;aqq&quot;,&quot;dkd&quot;,&quot;ccc&quot;]</span>, pattern = <span id=\"example-input-1-2\">&quot;abb&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[&quot;mee&quot;,&quot;aqq&quot;]</span>\r\n<strong><span>Explanation: </span></strong>&quot;mee&quot; matches the pattern because there is a permutation {a -&gt; m, b -&gt; e, ...}. \r\n&quot;ccc&quot; does not match the pattern because {a -&gt; c, b -&gt; c, ...} is not a permutation,\r\nsince a and b map to the same letter.</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= words.length &lt;= 50</code></li>\r\n\t<li><code>1 &lt;= pattern.length = words[i].length&nbsp;&lt;= 20</code></li>\r\n</ul>\r\n</div>\r\n",
  "isPaidOnly": false,
  "difficulty": "Medium",
  "likes": 510,
  "dislikes": 55,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [],
  "topicTags": [
    {
      "name": "String",
      "slug": "string"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": false, \"name\": \"Apple\", \"slug\": \"apple\", \"timesEncountered\": 2}, {\"taggedByAdmin\": true, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 0}], \"1\": [{\"taggedByAdmin\": false, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 2}], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    vector<string> findAndReplacePattern(vector<string>& words, string pattern) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public List<String> findAndReplacePattern(String[] words, String pattern) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def findAndReplacePattern(self, words, pattern):\n        \"\"\"\n        :type words: List[str]\n        :type pattern: str\n        :rtype: List[str]\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def findAndReplacePattern(self, words: List[str], pattern: str) -> List[str]:\n        "
    },
    {
      "lang": "C",
      "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar ** findAndReplacePattern(char ** words, int wordsSize, char * pattern, int* returnSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public IList<string> FindAndReplacePattern(string[] words, string pattern) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {string[]} words\n * @param {string} pattern\n * @return {string[]}\n */\nvar findAndReplacePattern = function(words, pattern) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {String[]} words\n# @param {String} pattern\n# @return {String[]}\ndef find_and_replace_pattern(words, pattern)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func findAndReplacePattern(_ words: [String], _ pattern: String) -> [String] {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func findAndReplacePattern(words []string, pattern string) []string {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def findAndReplacePattern(words: Array[String], pattern: String): List[String] = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun findAndReplacePattern(words: Array<String>, pattern: String): List<String> {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn find_and_replace_pattern(words: Vec<String>, pattern: String) -> Vec<String> {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param String[] $words\n     * @param String $pattern\n     * @return String[]\n     */\n    function findAndReplacePattern($words, $pattern) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"40.6K\", \"totalSubmission\": \"56.1K\", \"totalAcceptedRaw\": 40626, \"totalSubmissionRaw\": 56096, \"acRate\": \"72.4%\"}",
  "hints": [],
  "solution": {
    "id": "534",
    "canSeeDetail": true,
    "url": "/articles/find-and-replace-pattern/",
    "content": "[TOC]\r\n\r\n## Solution\r\n---\r\n#### Approach 1: Two Maps\r\n\r\n**Intuition and Algorithm**\r\n\r\nIf say, the first letter of the pattern is `\"a\"`, and the first letter of the word is `\"x\"`, then in the permutation, `\"a\"` must map to `\"x\"`.\r\n\r\nWe can write this bijection using two maps: a forward map $$\\text{m1}$$ and a backwards map $$\\text{m2}$$.\r\n\r\n$$\r\n\\text{m1} : \\text{\"a\"} \\rightarrow \\text{\"x\"}\r\n$$\r\n$$\r\n\\text{m2} : \\text{\"x\"} \\rightarrow \\text{\"a\"}\r\n$$\r\n\r\nThen, if there is a contradiction later, we can catch it via one of the two maps.  For example, if the `(word, pattern)` is `(\"aa\", \"xy\")`, we will catch the mistake in $$\\text{m1}$$ (namely, $$\\text{m1}(\\text{\"a\"}) = \\text{\"x\"} = \\text{\"y\"}$$).  Similarly, with `(word, pattern) = (\"ab\", \"xx\")`, we will catch the mistake in $$\\text{m2}$$.\r\n\r\n<iframe src=\"https://leetcode.com/playground/9TL6xVWm/shared\" frameBorder=\"0\" width=\"100%\" height=\"480\" name=\"9TL6xVWm\"></iframe>\r\n\r\n**Complexity Analysis**\r\n\r\n* Time Complexity:  $$O(N * K)$$, where $$N$$ is the number of words, and $$K$$ is the length of each word.\r\n\r\n* Space Complexity:  $$O(N * K)$$, the space used by the answer.\r\n<br />\r\n<br />\r\n\r\n\r\n---\r\n#### Approach 2: One Map\r\n\r\n**Intuition and Algorithm**\r\n\r\nAs in *Approach 1*, we can have some forward map $$\\text{m1} : \\mathbb{L} \\rightarrow \\mathbb{L}$$, where $$\\mathbb{L}$$ is the set of letters.  \r\n\r\nHowever, instead of keeping track of the reverse map $$\\text{m2}$$, we could simply make sure that every value $$\\text{m1}(x)$$ in the codomain is reached at most once.  This would guarantee the desired permutation exists.\r\n\r\nSo our algorithm is this: after defining $$\\text{m1}(x)$$ in the same way as *Approach 1* (the forward map of the permutation), afterwards we make sure it reaches distinct values.\r\n\r\n<iframe src=\"https://leetcode.com/playground/3vbeWuoq/shared\" frameBorder=\"0\" width=\"100%\" height=\"497\" name=\"3vbeWuoq\"></iframe>\r\n\r\n**Complexity Analysis**\r\n\r\n* Time Complexity:  $$O(N * K)$$, where $$N$$ is the number of words, and $$K$$ is the length of each word.\r\n\r\n* Space Complexity:  $$O(N * K)$$, the space used by the answer.\r\n<br />\r\n<br />\r\n\r\n\r\n---\r\n\r\n\r\nAnalysis written by: [@awice](https://leetcode.com/awice).",
    "contentTypeId": "107",
    "rating": {
      "id": "527",
      "count": 16,
      "average": 4.812,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "[\"abc\",\"deq\",\"mee\",\"aqq\",\"dkd\",\"ccc\"]\n\"abb\"",
  "metaData": "{\r\n  \"name\": \"findAndReplacePattern\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"words\",\r\n      \"type\": \"string[]\"\r\n    },\r\n    {\r\n      \"name\": \"pattern\",\r\n      \"type\": \"string\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"list<string>\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
