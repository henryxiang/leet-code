{
  "questionId": "934",
  "questionFrontendId": "898",
  "boundTopicId": null,
  "title": "Bitwise ORs of Subarrays",
  "titleSlug": "bitwise-ors-of-subarrays",
  "categoryTitle": "Algorithms",
  "content": "<p>We have an array <code>A</code> of non-negative integers.</p>\r\n\r\n<p>For every (contiguous) subarray <code>B =&nbsp;[A[i], A[i+1], ..., A[j]]</code> (with <code>i &lt;= j</code>), we take the bitwise OR of all the elements in <code>B</code>, obtaining a result <font face=\"monospace\"><code>A[i] | A[i+1] | ... | A[j]</code>.</font></p>\r\n\r\n<p>Return the number of possible&nbsp;results.&nbsp; (Results that occur more than once are only counted once in the final answer.)</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[0]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">1</span>\r\n<strong>Explanation: </strong>\r\nThere is only one possible result: 0.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[1,1,2]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">3</span>\r\n<strong>Explanation: </strong>\r\nThe possible subarrays are [1], [1], [2], [1, 1], [1, 2], [1, 1, 2].\r\nThese yield the results 1, 1, 2, 1, 3, 3.\r\nThere are 3 unique values, so the answer is 3.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">[1,2,4]</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">6</span>\r\n<strong>Explanation: </strong>\r\nThe possible results are 1, 2, 3, 4, 6, and 7.\r\n</pre>\r\n</div>\r\n</div>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= A.length &lt;= 50000</code></li>\r\n\t<li><code>0 &lt;= A[i] &lt;= 10^9</code></li>\r\n</ol>\r\n",
  "isPaidOnly": false,
  "difficulty": "Medium",
  "likes": 327,
  "dislikes": 64,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [],
  "topicTags": [
    {
      "name": "Dynamic Programming",
      "slug": "dynamic-programming"
    },
    {
      "name": "Bit Manipulation",
      "slug": "bit-manipulation"
    }
  ],
  "companyTagStats": "{\"1\": [], \"2\": [], \"3\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    int subarrayBitwiseORs(vector<int>& A) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int subarrayBitwiseORs(int[] A) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def subarrayBitwiseORs(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def subarrayBitwiseORs(self, A: List[int]) -> int:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nint subarrayBitwiseORs(int* A, int ASize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public int SubarrayBitwiseORs(int[] A) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number[]} A\n * @return {number}\n */\nvar subarrayBitwiseORs = function(A) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer[]} a\n# @return {Integer}\ndef subarray_bitwise_o_rs(a)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func subarrayBitwiseORs(_ A: [Int]) -> Int {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func subarrayBitwiseORs(A []int) int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def subarrayBitwiseORs(A: Array[Int]): Int = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun subarrayBitwiseORs(A: IntArray): Int {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn subarray_bitwise_o_rs(a: Vec<i32>) -> i32 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer[] $A\n     * @return Integer\n     */\n    function subarrayBitwiseORs($A) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"11K\", \"totalSubmission\": \"30.7K\", \"totalAcceptedRaw\": 11044, \"totalSubmissionRaw\": 30726, \"acRate\": \"35.9%\"}",
  "hints": [],
  "solution": {
    "id": "545",
    "canSeeDetail": true,
    "url": "/articles/bitwise-ors-of-subarrays/",
    "content": "[TOC]\n\n## Solution\n---\n#### Approach 1: Frontier Set\n\n**Intuition**\n\nLet's try to speed up a brute force answer.  Evidently, the brute force approach is to calculate every result `result(i, j) = A[i] | A[i+1] | ... | A[j]`.  We can speed this up by taking note of the fact that `result(i, j+1) = result(i, j) | A[j+1]`.  Naively, this approach has time complexity $$O(N^2)$$, where $$N$$ is the length of the array.\n\nActually, this approach can be better than that.  At the `k`th step, say we have all the `result(i, k)` in some set `cur`.  Then we can find the next `cur` set (for `k -> k+1`) by using `result(i, k+1) = result(i, k) | A[k+1]`.\n\nHowever, the number of unique values in this set `cur` is at most 32, since the list `result(k, k), result(k-1, k), result(k-2, k), ...` is monotone increasing, and any subsequent values that are different must have more 1s in it's binary representation (to a maximum of 32 ones).\n\n**Algorithm**\n\nIn the `k`th step, we'll maintain `cur`: the set of results `A[i] | ... | A[k]` for all `i`.  These results will be included in our final answer set.\n\n<iframe src=\"https://leetcode.com/playground/rDNmUE84/shared\" frameBorder=\"0\" width=\"100%\" height=\"344\" name=\"rDNmUE84\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity:  $$O(N \\log W)$$, where $$N$$ is the length of `A`, and $$W$$ is the maximum size of elements in `A`.\n\n* Space Complexity:  $$O(N \\log W)$$, the size of the answer.\n<br />\n<br />\n\n\n---\n\n\nAnalysis written by: [@awice](https://leetcode.com/awice).",
    "contentTypeId": "107",
    "rating": {
      "id": "536",
      "count": 16,
      "average": 4,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "[0]",
  "metaData": "{\r\n  \"name\": \"subarrayBitwiseORs\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"A\",\r\n      \"type\": \"integer[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
