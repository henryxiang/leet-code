{
  "questionId": "935",
  "questionFrontendId": "899",
  "boundTopicId": null,
  "title": "Orderly Queue",
  "titleSlug": "orderly-queue",
  "categoryTitle": "Algorithms",
  "content": "<p>A string <code>S</code> of lowercase letters is given.&nbsp; Then, we may make any number of <em>moves</em>.</p>\r\n\r\n<p>In each move, we&nbsp;choose one&nbsp;of the first <code>K</code> letters (starting from the left), remove it,&nbsp;and place it at the end of the string.</p>\r\n\r\n<p>Return the lexicographically smallest string we could have after any number of moves.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>S = <span id=\"example-input-1-1\">&quot;cba&quot;</span>, K = <span id=\"example-input-1-2\">1</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">&quot;acb&quot;</span>\r\n<strong>Explanation: </strong>\r\nIn the first move, we move the 1st character (&quot;c&quot;) to the end, obtaining the string &quot;bac&quot;.\r\nIn the second move, we move the 1st character (&quot;b&quot;) to the end, obtaining the final result &quot;acb&quot;.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>S = <span id=\"example-input-2-1\">&quot;baaca&quot;</span>, K = <span id=\"example-input-2-2\">3</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">&quot;aaabc&quot;</span>\r\n<strong>Explanation: </strong>\r\nIn the first move, we move the 1st character (&quot;b&quot;) to the end, obtaining the string &quot;aacab&quot;.\r\nIn the second move, we move the 3rd character (&quot;c&quot;) to the end, obtaining the final result &quot;aaabc&quot;.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= K &lt;= S.length&nbsp;&lt;= 1000</code></li>\r\n\t<li><code>S</code>&nbsp;consists of lowercase letters only.</li>\r\n</ol>\r\n</div>\r\n</div>\r\n",
  "isPaidOnly": false,
  "difficulty": "Hard",
  "likes": 133,
  "dislikes": 164,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [
    {
      "username": "awice",
      "profileUrl": "/awice/",
      "avatarUrl": "https://assets.leetcode.com/users/awice/avatar_1576905115.png"
    }
  ],
  "topicTags": [
    {
      "name": "Math",
      "slug": "math"
    },
    {
      "name": "String",
      "slug": "string"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 0}], \"1\": [], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    string orderlyQueue(string S, int K) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public String orderlyQueue(String S, int K) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def orderlyQueue(self, S, K):\n        \"\"\"\n        :type S: str\n        :type K: int\n        :rtype: str\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def orderlyQueue(self, S: str, K: int) -> str:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nchar * orderlyQueue(char * S, int K){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public string OrderlyQueue(string S, int K) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {string} S\n * @param {number} K\n * @return {string}\n */\nvar orderlyQueue = function(S, K) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {String} s\n# @param {Integer} k\n# @return {String}\ndef orderly_queue(s, k)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func orderlyQueue(_ S: String, _ K: Int) -> String {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func orderlyQueue(S string, K int) string {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def orderlyQueue(S: String, K: Int): String = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun orderlyQueue(S: String, K: Int): String {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn orderly_queue(s: String, k: i32) -> String {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param String $S\n     * @param Integer $K\n     * @return String\n     */\n    function orderlyQueue($S, $K) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"5.7K\", \"totalSubmission\": \"11.5K\", \"totalAcceptedRaw\": 5673, \"totalSubmissionRaw\": 11490, \"acRate\": \"49.4%\"}",
  "hints": [],
  "solution": {
    "id": "544",
    "canSeeDetail": true,
    "url": "/articles/orderly-queue/",
    "content": "[TOC]\n\n## Solution\n---\n#### Approach 1: Mathematical\n\n**Intuition**\n\nCall the move that takes the `K`th letter from the beginning and puts it on the end, a \"*`K`-kick*\" move.\n\nExamining 1-kick moves, they let us consider the string as a \"necklace\" that may be rotated freely, where each bead of the necklace corresponds to a letter in the string.  (Formally, this is the equivalence class under 1-kick moves.)\n\nExamining 2-kick moves (in the context of treating the string as a necklace), they allow us to swap the positions of two adjacent beads.  Thus, with 2-kick moves, every permutation of necklace is possible.  (To actually construct the necklace, we bring the second smallest bead to be after the smallest, then the third smallest to be after the second smallest, and so on.)\n\nThe previous insight may be difficult to find.  Another strategy is to write a brute force program to examine the result of 2-kick moves - then we might notice that 2-kick moves allow any permutation of the string.\n\nYet another strategy might be to explicitly construct new moves based on previous moves.  If we perform a 2 kick move followed by many 1 kick moves, we can move a string like `\"xyzzzzzz\" -> \"xzzzzzzy\" -> \"yxzzzzzz\"`, proving we can swap the positions of any two adjacent letters.\n\n**Algorithm**\n\nIf `K = 1`, only rotations of `S` are possible, and the answer is the smallest rotation.\n\nIf `K > 1`, any permutation of `S` is possible, and the answer is the letters of `S` written in lexicographic order.\n\n<iframe src=\"https://leetcode.com/playground/DCwCw7ZJ/shared\" frameBorder=\"0\" width=\"100%\" height=\"327\" name=\"DCwCw7ZJ\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity:  $$O(N^2)$$, where $$N$$ is the length of `S`.\n\n* Space Complexity:  $$O(N^2)$$.\n<br />\n<br />\n\n\n---\n\n\nAnalysis written by: [@awice](https://leetcode.com/awice).",
    "contentTypeId": "107",
    "rating": {
      "id": "535",
      "count": 16,
      "average": 4.438,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "\"cba\"\n1",
  "metaData": "{\r\n  \"name\": \"orderlyQueue\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"S\",\r\n      \"type\": \"string\"\r\n    },\r\n    {\r\n      \"name\": \"K\",\r\n      \"type\": \"integer\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"string\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
