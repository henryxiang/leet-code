{
  "questionId": "939",
  "questionFrontendId": "903",
  "boundTopicId": null,
  "title": "Valid Permutations for DI Sequence",
  "titleSlug": "valid-permutations-for-di-sequence",
  "categoryTitle": "Algorithms",
  "content": "<p>We are given <code>S</code>, a length <code>n</code> string of characters from the set <code>{&#39;D&#39;, &#39;I&#39;}</code>. (These letters stand for &quot;decreasing&quot; and &quot;increasing&quot;.)</p>\r\n\r\n<p>A&nbsp;<em>valid permutation</em>&nbsp;is a permutation <code>P[0], P[1], ..., P[n]</code> of integers&nbsp;<code>{0, 1, ..., n}</code>, such that for all <code>i</code>:</p>\r\n\r\n<ul>\r\n\t<li>If <code>S[i] == &#39;D&#39;</code>, then <code>P[i] &gt; P[i+1]</code>, and;</li>\r\n\t<li>If <code>S[i] == &#39;I&#39;</code>, then <code>P[i] &lt; P[i+1]</code>.</li>\r\n</ul>\r\n\r\n<p>How many valid permutations are there?&nbsp; Since the answer may be large, <strong>return your answer modulo <code>10^9 + 7</code></strong>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">&quot;DID&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">5</span>\r\n<strong>Explanation: </strong>\r\nThe 5 valid permutations of (0, 1, 2, 3) are:\r\n(1, 0, 3, 2)\r\n(2, 0, 3, 1)\r\n(2, 1, 3, 0)\r\n(3, 0, 2, 1)\r\n(3, 1, 2, 0)\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= S.length &lt;= 200</code></li>\r\n\t<li><code>S</code> consists only of characters from the set <code>{&#39;D&#39;, &#39;I&#39;}</code>.</li>\r\n</ol>\r\n\r\n<div>\r\n<p>&nbsp;</p>\r\n</div>\r\n",
  "isPaidOnly": false,
  "difficulty": "Hard",
  "likes": 214,
  "dislikes": 26,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [
    {
      "username": "laiden",
      "profileUrl": "/laiden/",
      "avatarUrl": "https://www.gravatar.com/avatar/da5b31fc40120c709be663929906e707.png?s=200"
    }
  ],
  "topicTags": [
    {
      "name": "Divide and Conquer",
      "slug": "divide-and-conquer"
    },
    {
      "name": "Dynamic Programming",
      "slug": "dynamic-programming"
    }
  ],
  "companyTagStats": "{\"1\": [], \"2\": [], \"3\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    int numPermsDISequence(string S) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int numPermsDISequence(String S) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def numPermsDISequence(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def numPermsDISequence(self, S: str) -> int:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nint numPermsDISequence(char * S){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public int NumPermsDISequence(string S) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {string} S\n * @return {number}\n */\nvar numPermsDISequence = function(S) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {String} s\n# @return {Integer}\ndef num_perms_di_sequence(s)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func numPermsDISequence(_ S: String) -> Int {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func numPermsDISequence(S string) int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def numPermsDISequence(S: String): Int = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun numPermsDISequence(S: String): Int {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn num_perms_di_sequence(s: String) -> i32 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param String $S\n     * @return Integer\n     */\n    function numPermsDISequence($S) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"4.2K\", \"totalSubmission\": \"9K\", \"totalAcceptedRaw\": 4232, \"totalSubmissionRaw\": 9027, \"acRate\": \"46.9%\"}",
  "hints": [],
  "solution": {
    "id": "553",
    "canSeeDetail": true,
    "url": "/articles/valid-permutations-for-di-sequence/",
    "content": "[TOC]\n\n## Solution\n---\n#### Approach 1: Dynamic Programming\n\n**Intuition**\n\nWhen writing the permutation `P = P_0, P_1, ..., P_N` from left to right, we only care about the relative rank of the last element placed.  For example, if `N = 5` (so that we have elements `{0, 1, 2, 3, 4, 5}`), and our permutation starts `2, 3, 4`, then it is similar to a situation where we have placed `?, ?, 2` and the remaining elements are `{0, 1, 3}`, in terms of how many possibilities there are to place the remaining elements in a valid way.\n\nTo this end, let `dp(i, j)` be the number of ways to place every number up to and inlcuding `P_i`, such that `P_i` when placed had relative rank `j`.  (Namely, there are `j` remaining numbers less than `P_i`.)\n\n**Algorithm**\n\nWhen placing `P_i` following a decreasing instruction `S[i-1] == 'D'`, we want `P_{i-1}` to have a higher value.  When placing `P_i` following an increasing instruction, we want `P_{i-1}` to have a lower value.  It is relatively easy to deduce the recursion from this fact.\n\n<iframe src=\"https://leetcode.com/playground/ymMfbxds/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"ymMfbxds\"></iframe>\n\n\n**Optimization**\n\nActually, we can do better than this.  For any given `i`, let's look at how the sum of `D_k = dp(i-1, k)` is queried.  Assuming `S[i-1] == 'I'`, we query `D_0, D_0 + D_1, D_0 + D_1 + D_2, ...` etc.  The case for `S[i-1] == 'D'` is similar.\n\nThus, we don't need to query the sum every time.  Instead, we could use (for `S[i-1] == 'I'`) the fact that `dp(i, j) = dp(i, j-1) + dp(i-1, j-1)`.  For `S[i-1] == 'D'`, we have the similar fact that `dp(i, j) = dp(i, j+1) + dp(i-1, j)`.  \n\nThese two facts make the work done for each state of `dp` have $$O(1)$$ (amortized) complexity, leading to a total time complexity of $$O(N^2)$$ for this solution.\n\n<iframe src=\"https://leetcode.com/playground/yKpXsoX7/shared\" frameBorder=\"0\" width=\"100%\" height=\"395\" name=\"yKpXsoX7\"></iframe>\n\n\n**Complexity Analysis**\n\n* Time Complexity:  $$O(N^3)$$, where $$N$$ is the length of `S`, or $$O(N^2)$$ with the optimized version.\n\n* Space Complexity:  $$O(N^2)$$.\n<br />\n<br />\n\n\n---\n#### Approach 2: Divide and Conquer\n\n**Intuition**\n\nLet's place the zero of the permutation first.  It either goes between a `'DI'` part of the sequence, or it could go on the ends (the left end if it starts with `'I'`, and the right end if it ends in `'D'`.)  Afterwards, this splits the problem into two disjoint subproblems that we can solve with similar logic.\n\n**Algorithm**\n\nLet `dp(i, j)` be the number of valid permutations (of `n = j-i+2` total integers from `0` to `n-1`) corresponding to the DI sequence `S[i], S[i+1], ..., S[j]`.  If we can successfully place a zero between `S[k-1]` and `S[k]`, then there are two disjoint problems `S[i], ..., S[k-2]` and `S[k+1], ..., S[j]`.\n\nTo count the number of valid permutations in this case, we should choose `k-i` elements from `n-1` (`n` total integers, minus the zero) to put in the left group; then the answer is this, times the number of ways to arrange the left group [`dp(i, k-2)`], times the number of ways to arrange the right group [`dp(k+1, j)`].\n\n<iframe src=\"https://leetcode.com/playground/KreEbZYZ/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"KreEbZYZ\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity:  $$O(N^2)$$, where $$N$$ is the length of `S`.\n\n* Space Complexity:  $$O(N^2)$$.\n<br />\n<br />\n\n\n---\n\n\nAnalysis written by: [@awice](https://leetcode.com/awice).",
    "contentTypeId": "107",
    "rating": {
      "id": "544",
      "count": 27,
      "average": 2.741,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "\"DID\"",
  "metaData": "{\r\n  \"name\": \"numPermsDISequence\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"S\",\r\n      \"type\": \"string\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
