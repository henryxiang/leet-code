{
  "questionId": "941",
  "questionFrontendId": "905",
  "boundTopicId": null,
  "title": "Sort Array By Parity",
  "titleSlug": "sort-array-by-parity",
  "categoryTitle": "Algorithms",
  "content": "<p>Given an array <code>A</code> of non-negative integers, return an array consisting of all the even elements of <code>A</code>, followed by all the odd elements of <code>A</code>.</p>\r\n\r\n<p>You may return any answer array that satisfies this condition.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[3,1,2,4]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[2,4,3,1]</span>\r\nThe outputs [4,2,3,1], [2,4,1,3], and [4,2,1,3] would also be accepted.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= A.length &lt;= 5000</code></li>\r\n\t<li><code>0 &lt;= A[i] &lt;= 5000</code></li>\r\n</ol>\r\n</div>\r\n",
  "isPaidOnly": false,
  "difficulty": "Easy",
  "likes": 645,
  "dislikes": 64,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [
    {
      "username": "hrxx",
      "profileUrl": "/hrxx/",
      "avatarUrl": "https://assets.leetcode.com/users/hrxx/avatar_1533173097.png"
    }
  ],
  "topicTags": [
    {
      "name": "Array",
      "slug": "array"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": false, \"name\": \"Facebook\", \"slug\": \"facebook\", \"timesEncountered\": 2}], \"2\": [{\"taggedByAdmin\": false, \"name\": \"Microsoft\", \"slug\": \"microsoft\", \"timesEncountered\": 2}], \"1\": [{\"taggedByAdmin\": false, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 2}]}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    vector<int> sortArrayByParity(vector<int>& A) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int[] sortArrayByParity(int[] A) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def sortArrayByParity(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: List[int]\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def sortArrayByParity(self, A: List[int]) -> List[int]:\n        "
    },
    {
      "lang": "C",
      "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* sortArrayByParity(int* A, int ASize, int* returnSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public int[] SortArrayByParity(int[] A) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number[]} A\n * @return {number[]}\n */\nvar sortArrayByParity = function(A) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer[]} a\n# @return {Integer[]}\ndef sort_array_by_parity(a)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func sortArrayByParity(_ A: [Int]) -> [Int] {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func sortArrayByParity(A []int) []int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def sortArrayByParity(A: Array[Int]): Array[Int] = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun sortArrayByParity(A: IntArray): IntArray {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn sort_array_by_parity(a: Vec<i32>) -> Vec<i32> {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer[] $A\n     * @return Integer[]\n     */\n    function sortArrayByParity($A) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"147.9K\", \"totalSubmission\": \"201.8K\", \"totalAcceptedRaw\": 147900, \"totalSubmissionRaw\": 201796, \"acRate\": \"73.3%\"}",
  "hints": [],
  "solution": {
    "id": "559",
    "canSeeDetail": true,
    "url": "/articles/sort-array-by-parity/",
    "content": "[TOC]\n\n## Solution\n---\n#### Approach 1: Sort\n\n**Intuition and Algorithm**\n\nUse a custom comparator when sorting, to sort by parity.\n\n<iframe src=\"https://leetcode.com/playground/W3y95UXv/shared\" frameBorder=\"0\" width=\"100%\" height=\"412\" name=\"W3y95UXv\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity:  $$O(N \\log N)$$, where $$N$$ is the length of `A`.\n\n* Space Complexity:  $$O(N)$$ for the sort, depending on the built-in implementation of `sort`.\n<br />\n<br />\n\n\n---\n#### Approach 2: Two Pass\n\n**Intuition and Algorithm**\n\nWrite all the even elements first, then write all the odd elements.\n\n<iframe src=\"https://leetcode.com/playground/njbDtgFc/shared\" frameBorder=\"0\" width=\"100%\" height=\"327\" name=\"njbDtgFc\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity:  $$O(N)$$, where $$N$$ is the length of `A`.\n\n* Space Complexity:  $$O(N)$$, the space used by the answer.\n<br />\n<br />\n\n\n---\n#### Approach 3: In-Place\n\n**Intuition**\n\nIf we want to do the sort in-place, we can use quicksort, a standard textbook algorithm.\n\n**Algorithm**\n\nWe'll maintain two pointers `i` and `j`.  The loop invariant is everything below `i` has parity `0` (ie. `A[k] % 2 == 0` when `k < i`), and everything above `j` has parity `1`.\n\nThen, there are 4 cases for `(A[i] % 2, A[j] % 2)`:\n\n* If it is `(0, 1)`, then everything is correct: `i++` and `j--`.\n\n* If it is `(1, 0)`, we swap them so they are correct, then continue.\n\n* If it is `(0, 0)`, only the `i` place is correct, so we `i++` and continue.\n\n* If it is `(1, 1)`, only the `j` place is correct, so we `j--` and continue.\n\nThroughout all 4 cases, the loop invariant is maintained, and `j-i` is getting smaller.  So eventually we will be done with the array sorted as desired.\n\n<iframe src=\"https://leetcode.com/playground/WJ8WbNh4/shared\" frameBorder=\"0\" width=\"100%\" height=\"344\" name=\"WJ8WbNh4\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity:  $$O(N)$$, where $$N$$ is the length of `A`.  Each step of the while loop makes `j-i` decrease by at least one.  (Note that while quicksort is $$O(N \\log N)$$ normally, this is $$O(N)$$ because we only need one pass to sort the elements.)\n\n* Space Complexity:  $$O(1)$$ in additional space complexity.\n<br />\n<br />\n\n\n---\n\nAnalysis written by: [@awice](https://leetcode.com/awice).",
    "contentTypeId": "107",
    "rating": {
      "id": "549",
      "count": 22,
      "average": 4.773,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "[3,1,2,4]",
  "metaData": "{\r\n  \"name\": \"sortArrayByParity\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"A\",\r\n      \"type\": \"integer[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer[]\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
