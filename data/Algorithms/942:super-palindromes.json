{
  "questionId": "942",
  "questionFrontendId": "906",
  "boundTopicId": null,
  "title": "Super Palindromes",
  "titleSlug": "super-palindromes",
  "categoryTitle": "Algorithms",
  "content": "<p>Let&#39;s say a positive integer is a&nbsp;<em>superpalindrome</em>&nbsp;if it is a palindrome, and it is also the square of a palindrome.</p>\r\n\r\n<p>Now, given two positive&nbsp;integers <code>L</code> and <code>R</code> (represented as strings), return the number of superpalindromes in the inclusive range <code>[L, R]</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>L = <span id=\"example-input-1-1\">&quot;4&quot;</span>, R = <span id=\"example-input-1-2\">&quot;1000&quot;</span>\r\n<strong>Output: </strong>4\r\n<span><strong>Explanation</strong>: </span>4, 9, 121, and 484 are superpalindromes.\r\nNote that 676 is not a superpalindrome: 26 * 26 = 676, but 26 is not a palindrome.</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= len(L) &lt;= 18</code></li>\r\n\t<li><code>1 &lt;= len(R) &lt;= 18</code></li>\r\n\t<li><code>L</code> and <code>R</code> are strings representing integers in the range <code>[1, 10^18)</code>.</li>\r\n\t<li><code>int(L) &lt;= int(R)</code></li>\r\n</ol>\r\n\r\n<div>\r\n<p>&nbsp;</p>\r\n</div>\r\n",
  "isPaidOnly": false,
  "difficulty": "Hard",
  "likes": 62,
  "dislikes": 144,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [
    {
      "username": "ngoc_lam",
      "profileUrl": "/ngoc_lam/",
      "avatarUrl": "https://assets.leetcode.com/users/ngoc_lam/avatar_1528594557.png"
    }
  ],
  "topicTags": [
    {
      "name": "Math",
      "slug": "math"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 0}], \"1\": [], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    int superpalindromesInRange(string L, string R) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int superpalindromesInRange(String L, String R) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def superpalindromesInRange(self, L, R):\n        \"\"\"\n        :type L: str\n        :type R: str\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def superpalindromesInRange(self, L: str, R: str) -> int:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nint superpalindromesInRange(char * L, char * R){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public int SuperpalindromesInRange(string L, string R) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {string} L\n * @param {string} R\n * @return {number}\n */\nvar superpalindromesInRange = function(L, R) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {String} l\n# @param {String} r\n# @return {Integer}\ndef superpalindromes_in_range(l, r)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func superpalindromesInRange(_ L: String, _ R: String) -> Int {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func superpalindromesInRange(L string, R string) int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def superpalindromesInRange(L: String, R: String): Int = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun superpalindromesInRange(L: String, R: String): Int {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn superpalindromes_in_range(l: String, r: String) -> i32 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param String $L\n     * @param String $R\n     * @return Integer\n     */\n    function superpalindromesInRange($L, $R) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"4.3K\", \"totalSubmission\": \"13.9K\", \"totalAcceptedRaw\": 4303, \"totalSubmissionRaw\": 13859, \"acRate\": \"31.0%\"}",
  "hints": [],
  "solution": {
    "id": "562",
    "canSeeDetail": true,
    "url": "/articles/super-palindromes/",
    "content": "[TOC]\n\n## Solution\n---\n#### Approach 1: Mathematical\n\n**Intuition**\n\nSay $$P = R^2$$ is a superpalindrome.\n\nBecause $$R$$ is a palindrome, the first half of the digits in $$R$$ determine $$R$$ up to two possibilities.  We can iterate through these digits: let $$k$$ be the first half of the digits in $$R$$.  For example, if $$k = 1234$$, then $$R = 1234321$$ or $$R = 12344321$$.  Each possibility has either an odd or an even number of digits in $$R$$.\n\nNotice because $$P < 10^{18}$$, $$R < (10^{18})^{\\frac{1}{2}} = 10^9$$, and $$R = k \\| k'$$ (concatenation), where $$k'$$ is $$k$$ reversed (and also possibly truncated by one digit); so that $$k < 10^5 = \\small\\text{MAGIC}$$, our magic constant.\n\n**Algorithm**\n\nFor each $$1 \\leq k < \\small\\text{MAGIC}$$, let's create the associated palindrome $$R$$, and check whether $$R^2$$ is a palindrome.\n\nWe should handle the odd and even possibilities separately, as we would like to break early so as not to do extra work.\n\nTo check whether an integer is a palindrome, we could check whether it is equal to its reverse.  To create the reverse of an integer, we can do it digit by digit.\n\n<iframe src=\"https://leetcode.com/playground/ZRTHqoUW/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"ZRTHqoUW\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity:  $$O(W^{\\frac{1}{4}} * \\log W)$$, where $$W = 10^{18}$$ is our upper limit for $$R$$.  The $$\\log W$$ term comes from checking whether each candidate is the root of a palindrome.\n\n* Space Complexity:  $$O(\\log W)$$, the space used to create the candidate palindrome.\n<br />\n<br />\n\n\n---\n\nAnalysis written by: [@awice](https://leetcode.com/awice).",
    "contentTypeId": "107",
    "rating": {
      "id": "551",
      "count": 8,
      "average": 5,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "\"4\"\n\"1000\"",
  "metaData": "{\r\n  \"name\": \"superpalindromesInRange\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"L\",\r\n      \"type\": \"string\"\r\n    },\r\n    {\r\n      \"name\": \"R\",\r\n      \"type\": \"string\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
