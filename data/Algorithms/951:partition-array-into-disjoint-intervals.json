{
  "questionId": "951",
  "questionFrontendId": "915",
  "boundTopicId": null,
  "title": "Partition Array into Disjoint Intervals",
  "titleSlug": "partition-array-into-disjoint-intervals",
  "categoryTitle": "Algorithms",
  "content": "<p>Given an array <code>A</code>, partition it&nbsp;into two (contiguous) subarrays&nbsp;<code>left</code>&nbsp;and <code>right</code>&nbsp;so that:</p>\r\n\r\n<ul>\r\n\t<li>Every element in <code>left</code>&nbsp;is less than or equal to every element in <code>right</code>.</li>\r\n\t<li><code>left</code> and <code>right</code> are non-empty.</li>\r\n\t<li><code>left</code>&nbsp;has the smallest possible size.</li>\r\n</ul>\r\n\r\n<p>Return the <strong>length</strong> of <code>left</code> after such a partitioning.&nbsp; It is guaranteed that such a partitioning exists.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[5,0,3,8,6]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">3</span>\r\n<strong>Explanation: </strong>left = [5,0,3], right = [8,6]\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[1,1,1,0,6,12]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">4</span>\r\n<strong>Explanation: </strong>left = [1,1,1,0], right = [6,12]\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n</div>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>2 &lt;= A.length&nbsp;&lt;= 30000</code></li>\r\n\t<li><code>0 &lt;= A[i] &lt;= 10^6</code></li>\r\n\t<li>It is guaranteed there is at least one way to partition <code>A</code> as described.</li>\r\n</ol>\r\n\r\n<div>\r\n<div>&nbsp;</div>\r\n</div>\r\n",
  "isPaidOnly": false,
  "difficulty": "Medium",
  "likes": 256,
  "dislikes": 20,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [
    {
      "username": "Vadim1988",
      "profileUrl": "/vadim1988/",
      "avatarUrl": "https://www.gravatar.com/avatar/9d918e040f997c062b7ca786eed67f89.png?s=200"
    }
  ],
  "topicTags": [
    {
      "name": "Array",
      "slug": "array"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"TandemG\", \"slug\": \"tandemg\", \"timesEncountered\": 0}], \"2\": [{\"taggedByAdmin\": false, \"name\": \"Grab\", \"slug\": \"grab\", \"timesEncountered\": 3}], \"1\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    int partitionDisjoint(vector<int>& A) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int partitionDisjoint(int[] A) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def partitionDisjoint(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def partitionDisjoint(self, A: List[int]) -> int:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nint partitionDisjoint(int* A, int ASize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public int PartitionDisjoint(int[] A) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number[]} A\n * @return {number}\n */\nvar partitionDisjoint = function(A) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer[]} a\n# @return {Integer}\ndef partition_disjoint(a)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func partitionDisjoint(_ A: [Int]) -> Int {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func partitionDisjoint(A []int) int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def partitionDisjoint(A: Array[Int]): Int = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun partitionDisjoint(A: IntArray): Int {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn partition_disjoint(a: Vec<i32>) -> i32 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer[] $A\n     * @return Integer\n     */\n    function partitionDisjoint($A) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"15.3K\", \"totalSubmission\": \"34.5K\", \"totalAcceptedRaw\": 15253, \"totalSubmissionRaw\": 34492, \"acRate\": \"44.2%\"}",
  "hints": [],
  "solution": {
    "id": "574",
    "canSeeDetail": true,
    "url": "/articles/parition-array-into-disjoint-intervals/",
    "content": "[TOC]\n\n## Solution\n---\n#### Approach 1: Next Array\n\n**Intuition**\n\nInstead of checking whether `all(L <= R for L in left for R in right)`, let's check whether `max(left) <= min(right)`.\n\n**Algorithm**\n\nLet's try to find `max(left)` for subarrays `left = A[:1], left = A[:2], left =  A[:3], ...` etc.  Specifically, `maxleft[i]` will be the maximum of subarray `A[:i]`.  They are related to each other: `max(A[:4]) = max(max(A[:3]), A[3])`, so `maxleft[4] = max(maxleft[3], A[3])`.\n\nSimilarly, `min(right)` for every possible `right` can be found in linear time.\n\nAfter we have a way to query `max(left)` and `min(right)` quickly, the solution is straightforward.\n\n<iframe src=\"https://leetcode.com/playground/icvccGCi/shared\" frameBorder=\"0\" width=\"100%\" height=\"480\" name=\"icvccGCi\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity:  $$O(N)$$, where $$N$$ is the length of `A`.\n\n* Space Complexity:  $$O(N)$$.\n<br />\n<br />\n\n\n---\n\n\nAnalysis written by: [@awice](https://leetcode.com/awice).",
    "contentTypeId": "107",
    "rating": {
      "id": "562",
      "count": 13,
      "average": 4.385,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "[5,0,3,8,6]",
  "metaData": "{\r\n  \"name\": \"partitionDisjoint\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"A\",\r\n      \"type\": \"integer[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
