{
  "questionId": "95",
  "questionFrontendId": "95",
  "boundTopicId": null,
  "title": "Unique Binary Search Trees II",
  "titleSlug": "unique-binary-search-trees-ii",
  "categoryTitle": "Algorithms",
  "content": "<p>Given an integer <em>n</em>, generate all structurally unique <strong>BST&#39;s</strong> (binary search trees) that store values 1 ...&nbsp;<em>n</em>.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 3\r\n<strong>Output:</strong>\r\n[\r\n&nbsp; [1,null,3,2],\r\n&nbsp; [3,2,null,1],\r\n&nbsp; [3,1,null,null,2],\r\n&nbsp; [2,1,3],\r\n&nbsp; [1,null,2,null,3]\r\n]\r\n<strong>Explanation:</strong>\r\nThe above output corresponds to the 5 unique BST&#39;s shown below:\r\n\r\n   1         3     3      2      1\r\n    \\       /     /      / \\      \\\r\n     3     2     1      1   3      2\r\n    /     /       \\                 \\\r\n   2     1         2                 3\r\n</pre>\r\n",
  "isPaidOnly": false,
  "difficulty": "Medium",
  "likes": 1647,
  "dislikes": 134,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"Unique Binary Search Trees\", \"titleSlug\": \"unique-binary-search-trees\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Different Ways to Add Parentheses\", \"titleSlug\": \"different-ways-to-add-parentheses\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
  "contributors": [],
  "topicTags": [
    {
      "name": "Dynamic Programming",
      "slug": "dynamic-programming"
    },
    {
      "name": "Tree",
      "slug": "tree"
    }
  ],
  "companyTagStats": "{\"1\": [{\"taggedByAdmin\": false, \"name\": \"Microsoft\", \"slug\": \"microsoft\", \"timesEncountered\": 2}], \"3\": [{\"taggedByAdmin\": false, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 2}], \"2\": [{\"taggedByAdmin\": false, \"name\": \"Adobe\", \"slug\": \"adobe\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Yahoo\", \"slug\": \"yahoo\", \"timesEncountered\": 2}]}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    vector<TreeNode*> generateTrees(int n) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public List<TreeNode> generateTrees(int n) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def generateTrees(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[TreeNode]\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def generateTrees(self, n: int) -> List[TreeNode]:\n        "
    },
    {
      "lang": "C",
      "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nstruct TreeNode** generateTrees(int n, int* returnSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public IList<TreeNode> GenerateTrees(int n) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {number} n\n * @return {TreeNode[]}\n */\nvar generateTrees = function(n) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val)\n#         @val = val\n#         @left, @right = nil, nil\n#     end\n# end\n\n# @param {Integer} n\n# @return {TreeNode[]}\ndef generate_trees(n)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func generateTrees(_ n: Int) -> [TreeNode?] {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc generateTrees(n int) []*TreeNode {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def generateTrees(n: Int): List[TreeNode] = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun generateTrees(n: Int): List<TreeNode?> {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn generate_trees(n: i32) -> Vec<Option<Rc<RefCell<TreeNode>>>> {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($value) { $this->val = $value; }\n * }\n */\nclass Solution {\n\n    /**\n     * @param Integer $n\n     * @return TreeNode[]\n     */\n    function generateTrees($n) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"162.7K\", \"totalSubmission\": \"430.2K\", \"totalAcceptedRaw\": 162714, \"totalSubmissionRaw\": 430213, \"acRate\": \"37.8%\"}",
  "hints": [],
  "solution": {
    "id": "604",
    "canSeeDetail": true,
    "url": "/articles/unique-binary-search-trees-ii/",
    "content": "[TOC]\r\n\r\n## Solution\r\n\r\n**Tree definition**\r\n\r\nFirst of all, here is the definition of the ```TreeNode``` which we would use.\r\n\r\n<iframe src=\"https://leetcode.com/playground/eHhcmmEU/shared\" frameBorder=\"0\" width=\"100%\" height=\"225\" name=\"eHhcmmEU\"></iframe>\r\n<br />\r\n<br />\r\n\r\n\r\n---\r\n#### Approach 1: Recursion\r\n\r\nFirst of all let's count how many trees do we have to construct.\r\nAs you could check in [this article](https://leetcode.com/articles/unique-binary-search-trees/),\r\nthe number of possible BST is actually a [Catalan number](https://en.wikipedia.org/wiki/Catalan_number). \r\n\r\nLet's follow the logic from the above article, this time not to count but\r\nto actually construct the trees. \r\n \r\n**Algorithm**\r\n\r\nLet's pick up number `i` out of the sequence `1 ..n` and use it as the root\r\nof the current tree. \r\nThen there are ```i - 1``` elements available for the construction of the\r\nleft subtree and ```n - i``` elements available for the right subtree. \r\nAs we [already discussed](https://leetcode.com/articles/unique-binary-search-trees/)\r\nthat results in ```G(i - 1)``` different left subtrees and ```G(n - i)```\r\ndifferent right subtrees, where ```G``` is a Catalan number. \r\n\r\n![BST](../Figures/96_BST.png)\r\n\r\nNow let's repeat the step above for the sequence `1 ... i - 1` to construct\r\nall left subtrees, and then for the sequence `i + 1 ... n` to construct all\r\nright subtrees. \r\n\r\nThis way we have a root `i` and two lists for the possible left and right subtrees.\r\nThe final step is to loop over both lists to link left and right\r\nsubtrees to the root.  \r\n\r\n<iframe src=\"https://leetcode.com/playground/dFTaeqjY/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"dFTaeqjY\"></iframe>\r\n\r\n**Complexity analysis**\r\n\r\n* Time complexity : The main computations are to construct all possible \r\ntrees with a given root, that is actually Catalan number $$G_n$$ as was discussed\r\nabove. This is done `n` times, that results in time complexity $$n G_n$$.\r\nCatalan numbers grow as $$\\frac{4^n}{n^{3/2}}$$ that gives the \r\nfinal complexity $$\\mathcal{O}(\\frac{4^n}{n^{1/2}})$$.\r\nSeems to be large but let's not forget that here we're asked to generate\r\n$$G_n \\sim \\frac{4^n}{n^{3/2}}$$ tree objects as output.\r\n\r\n* Space complexity : $$n G_n$$ as we keep $$G_n$$ trees with `n` elements each, \r\nthat results in $$\\mathcal{O}(\\frac{4^n}{n^{1/2}})$$\r\ncomplexity.  \r\n \r\nAnalysis written by @[liaison](https://leetcode.com/liaison/)\r\nand @[andvary](https://leetcode.com/andvary/)",
    "contentTypeId": "107",
    "rating": {
      "id": "590",
      "count": 18,
      "average": 4.889,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "3",
  "metaData": "{\r\n  \"name\": \"generateTrees\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"n\",\r\n      \"type\": \"integer\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"list<TreeNode>\"\r\n  }\r\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
