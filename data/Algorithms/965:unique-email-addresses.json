{
  "questionId": "965",
  "questionFrontendId": "929",
  "boundTopicId": null,
  "title": "Unique Email Addresses",
  "titleSlug": "unique-email-addresses",
  "categoryTitle": "Algorithms",
  "content": "<p>Every email consists of a local name and a domain name, separated by the @ sign.</p>\r\n\r\n<p>For example, in <code>alice@leetcode.com</code>,&nbsp;<code>alice</code> is the local name, and <code>leetcode.com</code> is the domain name.</p>\r\n\r\n<p>Besides lowercase letters, these emails may contain <code>&#39;.&#39;</code>s or <code>&#39;+&#39;</code>s.</p>\r\n\r\n<p>If you add periods (<code>&#39;.&#39;</code>) between some characters in the <strong>local name</strong> part of an email address, mail sent there will be forwarded to the same address without dots in the local name.&nbsp; For example, <code>&quot;alice.z@leetcode.com&quot;</code> and <code>&quot;alicez@leetcode.com&quot;</code> forward to the same email address.&nbsp; (Note that this rule does not apply for domain names.)</p>\r\n\r\n<p>If you add a plus (<code>&#39;+&#39;</code>) in the <strong>local name</strong>, everything after the first plus sign will be&nbsp;<strong>ignored</strong>. This allows certain emails to be filtered, for example&nbsp;<code>m.y+name@email.com</code>&nbsp;will be forwarded to&nbsp;<code>my@email.com</code>.&nbsp; (Again, this rule does not apply for domain names.)</p>\r\n\r\n<p>It is possible to use both of these rules at the same time.</p>\r\n\r\n<p>Given a list of <code>emails</code>, we send one email to each address in the list.&nbsp;&nbsp;How many different addresses actually receive mails?&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[&quot;test.email+alex@leetcode.com&quot;,&quot;test.e.mail+bob.cathy@leetcode.com&quot;,&quot;testemail+david@lee.tcode.com&quot;]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">2</span>\r\n<strong><span>Explanation:</span></strong><span>&nbsp;&quot;</span><span id=\"example-input-1-1\">testemail@leetcode.com&quot; and &quot;testemail@lee.tcode.com&quot; </span>actually receive mails\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= emails[i].length&nbsp;&lt;= 100</code></li>\r\n\t<li><code>1 &lt;= emails.length &lt;= 100</code></li>\r\n\t<li>Each <code>emails[i]</code> contains exactly one <code>&#39;@&#39;</code> character.</li>\r\n\t<li>All local and domain names are non-empty.</li>\r\n\t<li>Local names do not start with a <code>&#39;+&#39;</code> character.</li>\r\n</ul>\r\n</div>\r\n",
  "isPaidOnly": false,
  "difficulty": "Easy",
  "likes": 627,
  "dislikes": 165,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [],
  "topicTags": [
    {
      "name": "String",
      "slug": "string"
    }
  ],
  "companyTagStats": "{\"2\": [{\"taggedByAdmin\": true, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 76}, {\"taggedByAdmin\": false, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 6}, {\"taggedByAdmin\": false, \"name\": \"Adobe\", \"slug\": \"adobe\", \"timesEncountered\": 3}], \"1\": [], \"3\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    int numUniqueEmails(vector<string>& emails) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int numUniqueEmails(String[] emails) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def numUniqueEmails(self, emails):\n        \"\"\"\n        :type emails: List[str]\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def numUniqueEmails(self, emails: List[str]) -> int:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nint numUniqueEmails(char ** emails, int emailsSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\r\n    public int NumUniqueEmails(string[] emails) {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {string[]} emails\n * @return {number}\n */\nvar numUniqueEmails = function(emails) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {String[]} emails\r\n# @return {Integer}\r\ndef num_unique_emails(emails)\r\n    \r\nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\r\n    func numUniqueEmails(_ emails: [String]) -> Int {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Go",
      "code": "func numUniqueEmails(emails []string) int {\r\n    \r\n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\r\n    def numUniqueEmails(emails: Array[String]): Int = {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\r\n    fun numUniqueEmails(emails: Array<String>): Int {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn num_unique_emails(emails: Vec<String>) -> i32 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param String[] $emails\n     * @return Integer\n     */\n    function numUniqueEmails($emails) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"164K\", \"totalSubmission\": \"241.2K\", \"totalAcceptedRaw\": 163960, \"totalSubmissionRaw\": 241177, \"acRate\": \"68.0%\"}",
  "hints": [],
  "solution": {
    "id": "599",
    "canSeeDetail": true,
    "url": "/articles/unique-email-addresses/",
    "content": "[TOC]\n\n## Solution\n---\n#### Approach 1: Canonical Form\n\n**Intuition and Algorithm**\n\nFor each email address, convert it to the *canonical* address that actually receives the mail.  This involves a few steps:\n\n* Separate the email address into a `local` part and the `rest` of the address.\n\n* If the `local` part has a `'+'` character, remove it and everything beyond it from the `local` part.\n\n* Remove all the zeros from the `local` part.\n\n* The canonical address is `local + rest`.\n\nAfter, we can count the number of unique canonical addresses with a `Set` structure.\n\n<iframe src=\"https://leetcode.com/playground/z2pkvpLG/shared\" frameBorder=\"0\" width=\"100%\" height=\"344\" name=\"z2pkvpLG\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity:  $$O(\\mathcal{C})$$, where $$\\mathcal{C}$$ is the total content of `emails`.\n\n* Space Complexity:  $$O(\\mathcal{C})$$.\n<br />\n<br />\n\n\n---\n\n\nAnalysis written by: [@awice](https://leetcode.com/awice).",
    "contentTypeId": "107",
    "rating": {
      "id": "585",
      "count": 86,
      "average": 2.419,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "[\"test.email+alex@leetcode.com\",\"test.e.mail+bob.cathy@leetcode.com\",\"testemail+david@lee.tcode.com\"]",
  "metaData": "{\r\n  \"name\": \"numUniqueEmails\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"emails\",\r\n      \"type\": \"string[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
