{
  "questionId": "966",
  "questionFrontendId": "930",
  "boundTopicId": null,
  "title": "Binary Subarrays With Sum",
  "titleSlug": "binary-subarrays-with-sum",
  "categoryTitle": "Algorithms",
  "content": "<p>In an array <code>A</code> of <code>0</code>s and <code>1</code>s, how many <strong>non-empty</strong> subarrays have sum <code>S</code>?</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-1-1\">[1,0,1,0,1]</span>, S = <span id=\"example-input-1-2\">2</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">4</span>\r\n<strong>Explanation: </strong>\r\nThe 4 subarrays are bolded below:\r\n[<strong>1,0,1</strong>,0,1]\r\n[<strong>1,0,1,0</strong>,1]\r\n[1,<strong>0,1,0,1</strong>]\r\n[1,0,<strong>1,0,1</strong>]\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>A.length &lt;= 30000</code></li>\r\n\t<li><code>0 &lt;= S &lt;= A.length</code></li>\r\n\t<li><code>A[i]</code>&nbsp;is either <code>0</code>&nbsp;or <code>1</code>.</li>\r\n</ol>",
  "isPaidOnly": false,
  "difficulty": "Medium",
  "likes": 314,
  "dislikes": 18,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [
    {
      "username": "AlphaZero",
      "profileUrl": "/alphazero/",
      "avatarUrl": "https://assets.leetcode.com/users/alphazero/avatar_1519395551.png"
    }
  ],
  "topicTags": [
    {
      "name": "Hash Table",
      "slug": "hash-table"
    },
    {
      "name": "Two Pointers",
      "slug": "two-pointers"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"C3 IoT\", \"slug\": \"c3-iot\", \"timesEncountered\": 0}], \"1\": [], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    int numSubarraysWithSum(vector<int>& A, int S) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int numSubarraysWithSum(int[] A, int S) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def numSubarraysWithSum(self, A, S):\n        \"\"\"\n        :type A: List[int]\n        :type S: int\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def numSubarraysWithSum(self, A: List[int], S: int) -> int:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nint numSubarraysWithSum(int* A, int ASize, int S){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public int NumSubarraysWithSum(int[] A, int S) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number[]} A\n * @param {number} S\n * @return {number}\n */\nvar numSubarraysWithSum = function(A, S) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer[]} a\n# @param {Integer} s\n# @return {Integer}\ndef num_subarrays_with_sum(a, s)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func numSubarraysWithSum(_ A: [Int], _ S: Int) -> Int {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func numSubarraysWithSum(A []int, S int) int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def numSubarraysWithSum(A: Array[Int], S: Int): Int = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun numSubarraysWithSum(A: IntArray, S: Int): Int {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn num_subarrays_with_sum(a: Vec<i32>, s: i32) -> i32 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer[] $A\n     * @param Integer $S\n     * @return Integer\n     */\n    function numSubarraysWithSum($A, $S) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"14.2K\", \"totalSubmission\": \"35.1K\", \"totalAcceptedRaw\": 14173, \"totalSubmissionRaw\": 35145, \"acRate\": \"40.3%\"}",
  "hints": [],
  "solution": {
    "id": "600",
    "canSeeDetail": true,
    "url": "/articles/binary-subarrays-with-sum/",
    "content": "[TOC]\n\n## Solution\n---\n#### Approach 1: Index of Ones\n\n**Intuition**\n\nSay we number the `1`s in `A`: $$(x_1, x_2, \\cdots, x_n)$$ with $$A[x_i] = 1$$.\n\nThen, if we have a subarray of sum $$S$$, it has to use the ones $$x_i, x_{i+1}, \\cdots, x_{i+S-1}$$.  For each $$i$$, we can count the number of such subarrays individually.\n\n**Algorithm**\n\nIn general, the number of such subarrays (for $$i$$) is $$(x_i - x_{i-1}) * (x_{i+S} - x_{i+S-1})$$.\n\nFor example, if $$S = 2$$, then in `A = [1,0,1,0,1,0,0,1]`, let's count the number of subarrays `[i, j]` that use the middle two `1`s.  There are 2 choices for the `i` `(i = 1, 2)` and 3 choices for the `j` `(j = 4, 5, 6)`.\n\nThe corner cases are when $$S = 0$$, $$i = 1$$, or $$i+S = n+1$$. We can handle these gracefully.\n\n<iframe src=\"https://leetcode.com/playground/xeXqLmYy/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"xeXqLmYy\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity:  $$O(N)$$, where $$N$$ is the length of `A`.\n\n* Space Complexity:  $$O(N)$$.\n<br />\n<br />\n\n\n---\n#### Approach 2: Prefix Sums\n\n**Intuition**\n\nLet `P[i] = A[0] + A[1] + ... + A[i-1]`.  Then `P[j+1] - P[i] = A[i] + A[i+1] + ... + A[j]`, the sum of the subarray `[i, j]`.\n\nHence, we are looking for the number of `i < j` with `P[j] - P[i] = S`.\n\n**Algorithm**\n\nFor each `j`, let's count the number of `i` with `P[j] = P[i] + S`.  This is analogous to counting the number of subarrays ending in `j` with sum `S`.\n\nIt comes down to counting how many `P[i] + S` we've seen before.  We can keep this count on the side to help us find the final answer.\n\n<iframe src=\"https://leetcode.com/playground/nAHXHKUL/shared\" frameBorder=\"0\" width=\"100%\" height=\"344\" name=\"nAHXHKUL\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity:  $$O(N)$$, where $$N$$ is the length of `A`.\n\n* Space Complexity:  $$O(N)$$.\n<br />\n<br />\n\n\n---\n#### Approach 3: Three Pointer\n\n**Intuition**\n\nFor each `j`, let's try to count the number of `i`'s that have the subarray `[i, j]` equal to `S`.\n\nIt is easy to see these `i`'s form an interval `[i_lo, i_hi]`, and each of `i_lo`, `i_hi` are increasing with respect to `j`.  So we can use a \"two pointer\" style approach.\n\n**Algorithm**\n\nFor each `j` (in increasing order), let's maintain 4 variables:\n\n* `sum_lo` : the sum of subarray `[i_lo, j]`\n* `sum_hi` : the sum of subarray `[i_hi, j]`\n* `i_lo` : the smallest `i` so that `sum_lo <= S`\n* `i_hi` : the largest `i` so that `sum_hi <= S`\n\nThen, (provided that `sum_lo == S`), the number of subarrays ending in `j` is `i_hi - i_lo + 1`.\n\nAs an example, with `A = [1,0,0,1,0,1]` and `S = 2`, when `j = 5`, we want `i_lo = 1` and `i_hi = 3`.\n\n<iframe src=\"https://leetcode.com/playground/7oyzRqG8/shared\" frameBorder=\"0\" width=\"100%\" height=\"480\" name=\"7oyzRqG8\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity:  $$O(N)$$, where $$N$$ is the length of `A`.\n\n* Space Complexity:  $$O(1)$$.\n<br />\n<br />\n\n\n---\n\n\nAnalysis written by: [@awice](https://leetcode.com/awice).",
    "contentTypeId": "107",
    "rating": {
      "id": "586",
      "count": 18,
      "average": 4.556,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "[1,0,1,0,1]\n2",
  "metaData": "{\r\n  \"name\": \"numSubarraysWithSum\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"A\",\r\n      \"type\": \"integer[]\"\r\n    },\r\n    {\r\n      \"name\": \"S\",\r\n      \"type\": \"integer\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
