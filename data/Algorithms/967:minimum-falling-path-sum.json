{
  "questionId": "967",
  "questionFrontendId": "931",
  "boundTopicId": null,
  "title": "Minimum Falling Path Sum",
  "titleSlug": "minimum-falling-path-sum",
  "categoryTitle": "Algorithms",
  "content": "<p>Given a <strong>square</strong> array of integers <code>A</code>, we want the <strong>minimum</strong> sum of a <em>falling path</em> through <code>A</code>.</p>\r\n\r\n<p>A falling path starts at any element in the first row, and chooses one element from each row.&nbsp; The next row&#39;s choice must be in a column that is different from the previous row&#39;s column by at most one.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[[1,2,3],[4,5,6],[7,8,9]]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">12</span>\r\n<strong>Explanation: </strong>\r\nThe possible falling paths are:\r\n</pre>\r\n\r\n<ul>\r\n\t<li><code>[1,4,7], [1,4,8], [1,5,7], [1,5,8], [1,5,9]</code></li>\r\n\t<li><code>[2,4,7], [2,4,8], [2,5,7], [2,5,8], [2,5,9], [2,6,8], [2,6,9]</code></li>\r\n\t<li><code>[3,5,7], [3,5,8], [3,5,9], [3,6,8], [3,6,9]</code></li>\r\n</ul>\r\n\r\n<p>The falling path with the smallest sum is <code>[1,4,7]</code>, so the answer is <code>12</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= A.length == A[0].length &lt;= 100</code></li>\r\n\t<li><code>-100 &lt;= A[i][j] &lt;= 100</code></li>\r\n</ol>",
  "isPaidOnly": false,
  "difficulty": "Medium",
  "likes": 385,
  "dislikes": 39,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"Minimum Falling Path Sum II\", \"titleSlug\": \"minimum-falling-path-sum-ii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
  "contributors": [],
  "topicTags": [
    {
      "name": "Dynamic Programming",
      "slug": "dynamic-programming"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": false, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 2}], \"2\": [{\"taggedByAdmin\": true, \"name\": \"Goldman Sachs\", \"slug\": \"goldman-sachs\", \"timesEncountered\": 2}], \"1\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    int minFallingPathSum(vector<vector<int>>& A) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int minFallingPathSum(int[][] A) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def minFallingPathSum(self, A):\n        \"\"\"\n        :type A: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def minFallingPathSum(self, A: List[List[int]]) -> int:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nint minFallingPathSum(int** A, int ASize, int* AColSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public int MinFallingPathSum(int[][] A) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number[][]} A\n * @return {number}\n */\nvar minFallingPathSum = function(A) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer[][]} a\n# @return {Integer}\ndef min_falling_path_sum(a)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func minFallingPathSum(_ A: [[Int]]) -> Int {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func minFallingPathSum(A [][]int) int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def minFallingPathSum(A: Array[Array[Int]]): Int = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun minFallingPathSum(A: Array<IntArray>): Int {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn min_falling_path_sum(a: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer[][] $A\n     * @return Integer\n     */\n    function minFallingPathSum($A) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"29.1K\", \"totalSubmission\": \"48.5K\", \"totalAcceptedRaw\": 29121, \"totalSubmissionRaw\": 48510, \"acRate\": \"60.0%\"}",
  "hints": [],
  "solution": {
    "id": "598",
    "canSeeDetail": true,
    "url": "/articles/minimum-path-falling-sum/",
    "content": "[TOC]\n\n## Solution\n---\n#### Approach 1: Dynamic Programming\n\n**Intuition**\n\nThis problem has an optimal substructure, meaning that the solutions to subproblems can be used to solve larger instances of this problem.  This makes dynamic programming an ideal candidate.\n\nLet `dp(r, c)` be the minimum total weight of a falling path starting at `(r, c)` and reaching the bottom row.\n\nThen, `dp(r, c) = A[r][c] + min(dp(r+1, c-1), dp(r+1, c), dp(r+1, c+1))`, and the answer is $$\\min\\limits_c \\text{dp}(0, c)$$.\n\n**Algorithm**\n\nUsually, we would make an auxillary array `dp` to cache intermediate values `dp(r, c)`.  However, this time we will use `A` to cache these values.  Our goal is to transform the values of `A` into the values of `dp`.\n\nWe process each row, starting with the second last.  (The last row is already correct.)  We set `A[r][c] = min(A[r+1][c-1], A[r+1][c], A[r+1][c+1])`, handling boundary conditions gracefully.\n\nLet's look at the recursion a little more to get a handle on why it works.  For an array like `A = [[1,1,1],[5,3,1],[2,3,4]]`, imagine you are at `(1, 0)` (`A[1][0] = 5`).  You can either go to `(2, 0)` and get a weight of 2, or `(2, 1)` and get a weight of 3.  Since 2 is lower, we say that the minimum total weight at `(1, 0)` is `dp(1, 0) = 5 + 2` (5 for the original `A[r][c]`.)\n\nAfter visiting `(1, 0)`, `(1, 1)`, and `(1, 2)`, `A` [which is storing the values of our `dp`], looks like `[[1,1,1],[7,5,4],[2,3,4]]`.  We do this procedure again by visiting `(0, 0)`, `(0, 1)`, `(0, 2)`.  We get `A = [[6,5,5],[7,5,4],[2,3,4]]`, and the final answer is `min(A[0]) = 5`\n\n<iframe src=\"https://leetcode.com/playground/zERoz5Wa/shared\" frameBorder=\"0\" width=\"100%\" height=\"412\" name=\"zERoz5Wa\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity:  $$O(N^2)$$, where $$N$$ is the length of `A`.\n\n* Space Complexity:  $$O(1)$$ in *additional* space complexity.\n<br />\n<br />\n\n\n---\n\n\nAnalysis written by: [@awice](https://leetcode.com/awice).",
    "contentTypeId": "107",
    "rating": {
      "id": "584",
      "count": 11,
      "average": 3.546,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "[[1,2,3],[4,5,6],[7,8,9]]",
  "metaData": "{\r\n  \"name\": \"minFallingPathSum\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"A\",\r\n      \"type\": \"integer[][]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
