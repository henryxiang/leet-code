{
  "questionId": "972",
  "questionFrontendId": "935",
  "boundTopicId": null,
  "title": "Knight Dialer",
  "titleSlug": "knight-dialer",
  "categoryTitle": "Algorithms",
  "content": "<p>A chess knight can move as indicated in the chess diagram below:</p>\r\n\r\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/10/12/knight.png\" style=\"width: 150px; height: 150px;\" />&nbsp;.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/10/30/keypad.png\" style=\"width: 134px; height: 150px;\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>This time, we place our chess knight on any numbered key of a phone pad (indicated above), and the knight makes <code>N-1</code> hops.&nbsp; Each hop must be from one key to another numbered key.</p>\r\n\r\n<p>Each time it lands on a key (including the initial placement of the knight), it presses the number of that key, pressing <code>N</code> digits total.</p>\r\n\r\n<p>How many distinct numbers can you dial in this manner?</p>\r\n\r\n<p>Since the answer may be large, <strong>output the answer&nbsp;modulo <code>10^9 + 7</code></strong>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ul>\r\n</ul>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">1</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">10</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">2</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">20</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">3</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">46</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= N &lt;= 5000</code></li>\r\n</ul>\r\n</div>\r\n</div>\r\n</div>\r\n",
  "isPaidOnly": false,
  "difficulty": "Medium",
  "likes": 356,
  "dislikes": 134,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [],
  "topicTags": [
    {
      "name": "Dynamic Programming",
      "slug": "dynamic-programming"
    }
  ],
  "companyTagStats": "{\"2\": [{\"taggedByAdmin\": false, \"name\": \"Box\", \"slug\": \"box\", \"timesEncountered\": 6}, {\"taggedByAdmin\": false, \"name\": \"Microsoft\", \"slug\": \"microsoft\", \"timesEncountered\": 5}, {\"taggedByAdmin\": true, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 3}], \"3\": [{\"taggedByAdmin\": false, \"name\": \"Twilio\", \"slug\": \"twilio\", \"timesEncountered\": 2}], \"1\": [{\"taggedByAdmin\": false, \"name\": \"Facebook\", \"slug\": \"facebook\", \"timesEncountered\": 2}]}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    int knightDialer(int N) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int knightDialer(int N) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def knightDialer(self, N):\n        \"\"\"\n        :type N: int\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def knightDialer(self, N: int) -> int:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nint knightDialer(int N){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public int KnightDialer(int N) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number} N\n * @return {number}\n */\nvar knightDialer = function(N) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer} n\n# @return {Integer}\ndef knight_dialer(n)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func knightDialer(_ N: Int) -> Int {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func knightDialer(N int) int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def knightDialer(N: Int): Int = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun knightDialer(N: Int): Int {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn knight_dialer(n: i32) -> i32 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer $N\n     * @return Integer\n     */\n    function knightDialer($N) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"22.3K\", \"totalSubmission\": \"51.9K\", \"totalAcceptedRaw\": 22298, \"totalSubmissionRaw\": 51943, \"acRate\": \"42.9%\"}",
  "hints": [],
  "solution": {
    "id": "609",
    "canSeeDetail": true,
    "url": "/articles/knight-dialer/",
    "content": "[TOC]\n\n## Solution\n---\n#### Approach 1: Dynamic Programming\n\n**Intuition**\n\nLet `f(start, n)` be the number of ways to dial an `n` digit number, where the knight starts at square `start`.  We can create a recursion, writing this in terms of `f(x, n-1)`'s.\n\n**Algorithm**\n\nBy hand or otherwise, have a way to query what moves are available at each square.  This implies the exact recursion for `f`.  For example, from `1` we can move to `6, 8`, so `f(1, n) = f(6, n-1) + f(8, n-1)`.\n\nAfter, let's keep track of `dp[start] = f(start, n)`, and update it for each n from `1, 2, ..., N`.\n\nAt the end, the answer is `f(0, N) + f(1, N) + ... + f(9, N) = sum(dp)`.\n\n<iframe src=\"https://leetcode.com/playground/EirthMi4/shared\" frameBorder=\"0\" width=\"100%\" height=\"463\" name=\"EirthMi4\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity:  $$O(N)$$.\n\n* Space Complexity:  $$O(1)$$.\n<br />\n<br />\n\n\n---\n\n\nAnalysis written by: [@awice](https://leetcode.com/awice).",
    "contentTypeId": "107",
    "rating": {
      "id": "595",
      "count": 64,
      "average": 1.938,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "1",
  "metaData": "{\r\n  \"name\": \"knightDialer\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"N\",\r\n      \"type\": \"integer\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
