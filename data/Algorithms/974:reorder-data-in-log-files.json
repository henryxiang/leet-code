{
  "questionId": "974",
  "questionFrontendId": "937",
  "boundTopicId": null,
  "title": "Reorder Data in Log Files",
  "titleSlug": "reorder-data-in-log-files",
  "categoryTitle": "Algorithms",
  "content": "<p>You have an array of <code>logs</code>.&nbsp; Each log is a space delimited string of words.</p>\n\n<p>For each log, the first word in each log is an alphanumeric <em>identifier</em>.&nbsp; Then, either:</p>\n\n<ul>\n\t<li>Each word after the identifier will consist only of lowercase letters, or;</li>\n\t<li>Each word after the identifier will consist only of digits.</li>\n</ul>\n\n<p>We will call these two varieties of logs <em>letter-logs</em> and <em>digit-logs</em>.&nbsp; It is guaranteed that each log has at least one word after its identifier.</p>\n\n<p>Reorder the logs so that all of the letter-logs come before any digit-log.&nbsp; The letter-logs are ordered lexicographically ignoring identifier, with the identifier used in case of ties.&nbsp; The digit-logs should be put in their original order.</p>\n\n<p>Return the final order of the logs.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> logs = [\"dig1 8 1 5 1\",\"let1 art can\",\"dig2 3 6\",\"let2 own kit dig\",\"let3 art zero\"]\n<strong>Output:</strong> [\"let1 art can\",\"let3 art zero\",\"let2 own kit dig\",\"dig1 8 1 5 1\",\"dig2 3 6\"]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ol>\n\t<li><code>0 &lt;= logs.length &lt;= 100</code></li>\n\t<li><code>3 &lt;= logs[i].length &lt;= 100</code></li>\n\t<li><code>logs[i]</code> is guaranteed to have an identifier, and a word after the identifier.</li>\n</ol>\n",
  "isPaidOnly": false,
  "difficulty": "Easy",
  "likes": 357,
  "dislikes": 1123,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [
    {
      "username": "shamanthts",
      "profileUrl": "/shamanthts/",
      "avatarUrl": "https://www.gravatar.com/avatar/4fff4c650c2e67cd93689679033e57af.png?s=200"
    }
  ],
  "topicTags": [
    {
      "name": "String",
      "slug": "string"
    }
  ],
  "companyTagStats": "{\"1\": [{\"taggedByAdmin\": false, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 135}], \"2\": [{\"taggedByAdmin\": false, \"name\": \"Apple\", \"slug\": \"apple\", \"timesEncountered\": 2}], \"3\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\r\npublic:\r\n    vector<string> reorderLogFiles(vector<string>& logs) {\r\n        \r\n    }\r\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public String[] reorderLogFiles(String[] logs) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def reorderLogFiles(self, logs):\n        \"\"\"\n        :type logs: List[str]\n        :rtype: List[str]\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def reorderLogFiles(self, logs: List[str]) -> List[str]:\n        "
    },
    {
      "lang": "C",
      "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar ** reorderLogFiles(char ** logs, int logsSize, int* returnSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\r\n    public string[] ReorderLogFiles(string[] logs) {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {string[]} logs\n * @return {string[]}\n */\nvar reorderLogFiles = function(logs) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {String[]} logs\r\n# @return {String[]}\r\ndef reorder_log_files(logs)\r\n    \r\nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\r\n    func reorderLogFiles(_ logs: [String]) -> [String] {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Go",
      "code": "func reorderLogFiles(logs []string) []string {\r\n    \r\n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\r\n    def reorderLogFiles(logs: Array[String]): Array[String] = {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\r\n    fun reorderLogFiles(logs: Array<String>): Array<String> {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn reorder_log_files(logs: Vec<String>) -> Vec<String> {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param String[] $logs\n     * @return String[]\n     */\n    function reorderLogFiles($logs) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"70.2K\", \"totalSubmission\": \"130.1K\", \"totalAcceptedRaw\": 70155, \"totalSubmissionRaw\": 130127, \"acRate\": \"53.9%\"}",
  "hints": [],
  "solution": {
    "id": "610",
    "canSeeDetail": true,
    "url": "/articles/reorder-log-files/",
    "content": "[TOC]\n\n## Solution\n---\n#### Approach 1: Custom Sort\n\n**Intuition and Algorithm**\n\nInstead of sorting in the default order, we'll sort in a custom order we specify.\n\nThe rules are:\n\n* Letter-logs come before digit-logs;\n* Letter-logs are sorted alphanumerically, by content then identifier;\n* Digit-logs remain in the same order.\n\nIt is straightforward to translate these ideas into code.\n\n<iframe src=\"https://leetcode.com/playground/htguhttj/shared\" frameBorder=\"0\" width=\"100%\" height=\"344\" name=\"htguhttj\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity:  $$O(\\mathcal{A}\\log \\mathcal{A})$$, where $$\\mathcal{A}$$ is the total content of `logs`.\n\n* Space Complexity:  $$O(\\mathcal{A})$$.\n<br />\n<br />\n\n\n---\n\n\nAnalysis written by: [@awice](https://leetcode.com/awice).",
    "contentTypeId": "107",
    "rating": {
      "id": "596",
      "count": 99,
      "average": 2.05,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "[\"dig1 8 1 5 1\",\"let1 art can\",\"dig2 3 6\",\"let2 own kit dig\",\"let3 art zero\"]",
  "metaData": "{\r\n  \"name\": \"reorderLogFiles\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"logs\",\r\n      \"type\": \"string[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"string[]\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
