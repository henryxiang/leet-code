{
  "questionId": "975",
  "questionFrontendId": "938",
  "boundTopicId": null,
  "title": "Range Sum of BST",
  "titleSlug": "range-sum-of-bst",
  "categoryTitle": "Algorithms",
  "content": "<p>Given the <code>root</code> node of a binary search tree, return the sum of values of all nodes with value between <code>L</code> and <code>R</code> (inclusive).</p>\r\n\r\n<p>The binary search tree is guaranteed to have unique values.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>root = <span id=\"example-input-1-1\">[10,5,15,3,7,null,18]</span>, L = <span id=\"example-input-1-2\">7</span>, R = <span id=\"example-input-1-3\">15</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">32</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>root = <span id=\"example-input-2-1\">[10,5,15,3,7,13,18,1,null,6]</span>, L = <span id=\"example-input-2-2\">6</span>, R = <span id=\"example-input-2-3\">10</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">23</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li>The number of nodes in the tree is at most <code>10000</code>.</li>\r\n\t<li>The final answer is guaranteed to be less than <code>2^31</code>.</li>\r\n</ol>\r\n</div>\r\n</div>",
  "isPaidOnly": false,
  "difficulty": "Easy",
  "likes": 674,
  "dislikes": 141,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [],
  "topicTags": [
    {
      "name": "Tree",
      "slug": "tree"
    },
    {
      "name": "Recursion",
      "slug": "recursion"
    }
  ],
  "companyTagStats": "{\"1\": [{\"taggedByAdmin\": true, \"name\": \"Facebook\", \"slug\": \"facebook\", \"timesEncountered\": 10}, {\"taggedByAdmin\": false, \"name\": \"Microsoft\", \"slug\": \"microsoft\", \"timesEncountered\": 3}, {\"taggedByAdmin\": false, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Apple\", \"slug\": \"apple\", \"timesEncountered\": 2}], \"3\": [{\"taggedByAdmin\": false, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 2}], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    int rangeSumBST(TreeNode* root, int L, int R) {\r\n        \r\n    }\r\n};"
    },
    {
      "lang": "Java",
      "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public int rangeSumBST(TreeNode root, int L, int R) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def rangeSumBST(self, root, L, R):\n        \"\"\"\n        :type root: TreeNode\n        :type L: int\n        :type R: int\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def rangeSumBST(self, root: TreeNode, L: int, R: int) -> int:\n        "
    },
    {
      "lang": "C",
      "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n\n\nint rangeSumBST(struct TreeNode* root, int L, int R){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public int val;\r\n *     public TreeNode left;\r\n *     public TreeNode right;\r\n *     public TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public int RangeSumBST(TreeNode root, int L, int R) {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {number} L\n * @param {number} R\n * @return {number}\n */\nvar rangeSumBST = function(root, L, R) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# Definition for a binary tree node.\r\n# class TreeNode\r\n#     attr_accessor :val, :left, :right\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @left, @right = nil, nil\r\n#     end\r\n# end\r\n\r\n# @param {TreeNode} root\r\n# @param {Integer} l\r\n# @param {Integer} r\r\n# @return {Integer}\r\ndef range_sum_bst(root, l, r)\r\n    \r\nend"
    },
    {
      "lang": "Swift",
      "code": "/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public var val: Int\r\n *     public var left: TreeNode?\r\n *     public var right: TreeNode?\r\n *     public init(_ val: Int) {\r\n *         self.val = val\r\n *         self.left = nil\r\n *         self.right = nil\r\n *     }\r\n * }\r\n */\r\nclass Solution {\r\n    func rangeSumBST(_ root: TreeNode?, _ L: Int, _ R: Int) -> Int {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Go",
      "code": "/**\r\n * Definition for a binary tree node.\r\n * type TreeNode struct {\r\n *     Val int\r\n *     Left *TreeNode\r\n *     Right *TreeNode\r\n * }\r\n */\r\nfunc rangeSumBST(root *TreeNode, L int, R int) int {\r\n    \r\n}"
    },
    {
      "lang": "Scala",
      "code": "/**\r\n * Definition for a binary tree node.\r\n * class TreeNode(var _value: Int) {\r\n *   var value: Int = _value\r\n *   var left: TreeNode = null\r\n *   var right: TreeNode = null\r\n * }\r\n */\r\nobject Solution {\r\n    def rangeSumBST(root: TreeNode, L: Int, R: Int): Int = {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Kotlin",
      "code": "/**\r\n * Example:\r\n * var ti = TreeNode(5)\r\n * var v = ti.`val`\r\n * Definition for a binary tree node.\r\n * class TreeNode(var `val`: Int) {\r\n *     var left: TreeNode? = null\r\n *     var right: TreeNode? = null\r\n * }\r\n */\r\nclass Solution {\r\n    fun rangeSumBST(root: TreeNode?, L: Int, R: Int): Int {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Rust",
      "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn range_sum_bst(root: Option<Rc<RefCell<TreeNode>>>, l: i32, r: i32) -> i32 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($value) { $this->val = $value; }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $root\n     * @param Integer $L\n     * @param Integer $R\n     * @return Integer\n     */\n    function rangeSumBST($root, $L, $R) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"131K\", \"totalSubmission\": \"166.5K\", \"totalAcceptedRaw\": 130991, \"totalSubmissionRaw\": 166457, \"acRate\": \"78.7%\"}",
  "hints": [],
  "solution": {
    "id": "611",
    "canSeeDetail": true,
    "url": "/articles/range-sum-of-bst/",
    "content": "[TOC]\n\n## Solution\n---\n#### Approach 1: Depth First Search\n\n**Intuition and Algorithm**\n\nWe traverse the tree using a depth first search.  If `node.val` falls outside the range `[L, R]`, (for example `node.val < L`), then we know that only the right branch could have nodes with value inside `[L, R]`.\n\nWe showcase two implementations - one using a recursive algorithm, and one using an iterative one.\n\n**Recursive Implementation**\n\n<iframe src=\"https://leetcode.com/playground/zwwcTGCT/shared\" frameBorder=\"0\" width=\"100%\" height=\"378\" name=\"zwwcTGCT\"></iframe>\n\n**Iterative Implementation**\n\n<iframe src=\"https://leetcode.com/playground/LyVV4ZSy/shared\" frameBorder=\"0\" width=\"100%\" height=\"378\" name=\"LyVV4ZSy\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity:  $$O(N)$$, where $$N$$ is the number of nodes in the tree.\n\n* Space Complexity:  $$O(H)$$, where $$H$$ is the height of the tree.\n<br />\n<br />\n\n\n---\n\n\nAnalysis written by: [@awice](https://leetcode.com/awice).",
    "contentTypeId": "107",
    "rating": {
      "id": "597",
      "count": 27,
      "average": 4.593,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "[10,5,15,3,7,null,18]\n7\n15",
  "metaData": "{\r\n  \"name\": \"rangeSumBST\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"root\",\r\n      \"type\": \"TreeNode\"\r\n    },\r\n    {\r\n      \"name\": \"L\",\r\n      \"type\": \"integer\"\r\n    },\r\n    {\r\n      \"name\": \"R\",\r\n      \"type\": \"integer\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
