{
  "questionId": "977",
  "questionFrontendId": "940",
  "boundTopicId": null,
  "title": "Distinct Subsequences II",
  "titleSlug": "distinct-subsequences-ii",
  "categoryTitle": "Algorithms",
  "content": "<p>Given a string <code>S</code>, count the number of distinct, non-empty subsequences of <code>S</code> .</p>\r\n\r\n<p>Since the result may be large, <strong>return the answer modulo <code>10^9 + 7</code></strong>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">&quot;abc&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">7</span>\r\n<span><strong>Explanation</strong>: The 7 distinct subsequences are &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;ab&quot;, &quot;ac&quot;, &quot;bc&quot;, and &quot;abc&quot;.</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">&quot;aba&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">6\r\n</span><strong>Explanation</strong>: The 6 distinct subsequences are &quot;a&quot;, &quot;b&quot;, &quot;ab&quot;, &quot;ba&quot;, &quot;aa&quot; and &quot;aba&quot;.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">&quot;aaa&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">3\r\n</span><strong>Explanation</strong>: The 3 distinct subsequences are &quot;a&quot;, &quot;aa&quot; and &quot;aaa&quot;.\r\n</pre>\r\n</div>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>S</code> contains only lowercase letters.</li>\r\n\t<li><code>1 &lt;= S.length &lt;= 2000</code></li>\r\n</ol>\r\n\r\n<div>\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<div>&nbsp;</div>\r\n</div>\r\n</div>",
  "isPaidOnly": false,
  "difficulty": "Hard",
  "likes": 252,
  "dislikes": 12,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [
    {
      "username": "zhiguoxu2017",
      "profileUrl": "/zhiguoxu2017/",
      "avatarUrl": "https://www.gravatar.com/avatar/e7e134d550dbbfcf5dd189f5aa5b1ea7.png?s=200"
    }
  ],
  "topicTags": [
    {
      "name": "Dynamic Programming",
      "slug": "dynamic-programming"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": false, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 2}], \"1\": [], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    int distinctSubseqII(string S) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int distinctSubseqII(String S) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def distinctSubseqII(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def distinctSubseqII(self, S: str) -> int:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nint distinctSubseqII(char * S){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public int DistinctSubseqII(string S) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {string} S\n * @return {number}\n */\nvar distinctSubseqII = function(S) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {String} s\n# @return {Integer}\ndef distinct_subseq_ii(s)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func distinctSubseqII(_ S: String) -> Int {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func distinctSubseqII(S string) int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def distinctSubseqII(S: String): Int = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun distinctSubseqII(S: String): Int {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn distinct_subseq_ii(s: String) -> i32 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param String $S\n     * @return Integer\n     */\n    function distinctSubseqII($S) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"8K\", \"totalSubmission\": \"19.5K\", \"totalAcceptedRaw\": 8021, \"totalSubmissionRaw\": 19522, \"acRate\": \"41.1%\"}",
  "hints": [],
  "solution": {
    "id": "613",
    "canSeeDetail": true,
    "url": "/articles/distinct-subsequences-ii/",
    "content": "[TOC]\n\n## Solution\n---\n#### Approach 1: Dynamic Programming\n\n**Intuition and Algorithm**\n\nEven though the final code for this problem is very short, it is not very intuitive to find the answer.  In the solution below, we'll focus on finding all subsequences (including empty ones), and subtract the empty subsequence at the end.\n\nLet's try for a dynamic programming solution.  In order to not repeat work, our goal is to phrase the current problem in terms of the answer to previous problems.  A typical idea will be to try to count the number of states `dp[k]` (distinct subsequences) that use letters `S[0], S[1], ..., S[k]`.\n\nNaively, for say, `S = \"abcx\"`, we have `dp[k] = dp[k-1] * 2`.  This is because for `dp[2]` which counts `(\"\", \"a\", \"b\", \"c\", \"ab\", \"ac\", \"bc\", \"abc\")`, `dp[3]` counts all of those, plus all of those with the `x` ending, like `(\"x\", \"ax\", \"bx\", \"cx\", \"abx\", \"acx\", \"bcx\", \"abcx\")`.\n\nHowever, for something like `S = \"abab\"`, let's play around with it.  We have:\n\n* `dp[0] = 2`, as it counts `(\"\", \"a\")`\n* `dp[1] = 4`, as it counts `(\"\", \"a\", \"b\", \"ab\")`;\n* `dp[2] = 7` as it counts `(\"\", \"a\", \"b\", \"aa\", \"ab\", \"ba\", \"aba\")`;\n* `dp[3] = 12`, as it counts `(\"\", \"a\", \"b\", \"aa\", \"ab\", \"ba\", \"bb\", \"aab\", \"aba\", \"abb\", \"bab\", \"abab\")`.\n\nWe have that dp[3]` counts `dp[2]`, plus `(\"b\", \"aa\", \"ab\", \"ba\", \"aba\")` with `\"b\"` added to it.  Notice that `(\"\", \"a\")` are missing from this list, as they get double counted.  In general, the sequences that resulted from putting `\"b\"` the last time (ie. `\"b\", \"ab\"`) will get double counted.\n\nThis insight leads to the recurrence:\n\n`dp[k] = 2 * dp[k-1] - dp[last[S[k]] - 1]`\n\nThe number of distinct subsequences ending at `S[k]`, is twice the distinct subsequences counted by `dp[k-1]` (all of them, plus all of them with S[k] appended), minus the amount we double counted, which is `dp[last[S[k]] - 1]`.\n\n<iframe src=\"https://leetcode.com/playground/XejQAwZ4/shared\" frameBorder=\"0\" width=\"100%\" height=\"463\" name=\"XejQAwZ4\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity:  $$O(N)$$, where $$N$$ is the length of `S`.\n\n* Space Complexity:  $$O(N)$$.  It is possible to adapt this solution to take $$O(1)$$ space.\n<br />\n<br />\n\n\n---\n\n\nAnalysis written by: [@awice](https://leetcode.com/awice).",
    "contentTypeId": "107",
    "rating": {
      "id": "599",
      "count": 25,
      "average": 3.8,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "\"abc\"",
  "metaData": "{\r\n  \"name\": \"distinctSubseqII\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"S\",\r\n      \"type\": \"string\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
