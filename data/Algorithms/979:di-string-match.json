{
  "questionId": "979",
  "questionFrontendId": "942",
  "boundTopicId": null,
  "title": "DI String Match",
  "titleSlug": "di-string-match",
  "categoryTitle": "Algorithms",
  "content": "<p>Given a string <code>S</code> that <strong>only</strong> contains &quot;I&quot; (increase) or &quot;D&quot; (decrease), let <code>N = S.length</code>.</p>\r\n\r\n<p>Return <strong>any</strong> permutation <code>A</code> of <code>[0, 1, ..., N]</code> such that for all <code>i = 0,&nbsp;..., N-1</code>:</p>\r\n\r\n<ul>\r\n\t<li>If <code>S[i] == &quot;I&quot;</code>, then <code>A[i] &lt; A[i+1]</code></li>\r\n\t<li>If <code>S[i] == &quot;D&quot;</code>, then <code>A[i] &gt; A[i+1]</code></li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">&quot;IDID&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[0,4,1,3,2]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">&quot;III&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">[0,1,2,3]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">&quot;DDI&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">[3,2,0,1]</span></pre>\r\n</div>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= S.length &lt;= 10000</code></li>\r\n\t<li><code>S</code> only contains characters <code>&quot;I&quot;</code> or <code>&quot;D&quot;</code>.</li>\r\n</ol>",
  "isPaidOnly": false,
  "difficulty": "Easy",
  "likes": 615,
  "dislikes": 225,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [
    {
      "username": "qjhdtc001",
      "profileUrl": "/qjhdtc001/",
      "avatarUrl": "https://assets.leetcode.com/users/qjhdtc001/avatar_1531084974.png"
    }
  ],
  "topicTags": [
    {
      "name": "Math",
      "slug": "math"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 0}], \"2\": [{\"taggedByAdmin\": false, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 2}], \"1\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    vector<int> diStringMatch(string S) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int[] diStringMatch(String S) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def diStringMatch(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: List[int]\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def diStringMatch(self, S: str) -> List[int]:\n        "
    },
    {
      "lang": "C",
      "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* diStringMatch(char * S, int* returnSize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public int[] DiStringMatch(string S) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {string} S\n * @return {number[]}\n */\nvar diStringMatch = function(S) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {String} s\n# @return {Integer[]}\ndef di_string_match(s)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func diStringMatch(_ S: String) -> [Int] {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func diStringMatch(S string) []int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def diStringMatch(S: String): Array[Int] = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun diStringMatch(S: String): IntArray {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn di_string_match(s: String) -> Vec<i32> {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param String $S\n     * @return Integer[]\n     */\n    function diStringMatch($S) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"48.7K\", \"totalSubmission\": \"69.2K\", \"totalAcceptedRaw\": 48679, \"totalSubmissionRaw\": 69162, \"acRate\": \"70.4%\"}",
  "hints": [],
  "solution": {
    "id": "620",
    "canSeeDetail": true,
    "url": "/articles/di-string-match/",
    "content": "[TOC]\n\n## Solution\n---\n#### Approach 1: Ad-Hoc\n\n**Intuition**\n\nIf we see say `S[0] == 'I'`, we can always put `0` as the first element; similarly, if we see `S[0] == 'D'`, we can always put `N` as the first element.\n\nSay we have a match for the rest of the string `S[1], S[2], ...` using `N` distinct elements.  Notice it doesn't matter what the elements are, only that they are distinct and totally ordered.  Then, putting `0` or `N` at the first character will match, and the rest of the elements (`1, 2, ..., N` or `0, 1, ..., N-1`) can use the matching we have.\n\n**Algorithm**\n\nKeep track of the smallest and largest element we haven't placed.  If we see an `'I'`, place the small element; otherwise place the large element.\n\n<iframe src=\"https://leetcode.com/playground/Lornz86n/shared\" frameBorder=\"0\" width=\"100%\" height=\"327\" name=\"Lornz86n\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity:  $$O(N)$$, where $$N$$ is the length of `S`.\n\n* Space Complexity:  $$O(N)$$.\n<br />\n<br />\n\n\n---\n\n\nAnalysis written by: [@awice](https://leetcode.com/awice).",
    "contentTypeId": "107",
    "rating": {
      "id": "606",
      "count": 27,
      "average": 4.333,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "\"IDID\"",
  "metaData": "{\r\n  \"name\": \"diStringMatch\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"S\",\r\n      \"type\": \"string\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer[]\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
