{
  "questionId": "97",
  "questionFrontendId": "97",
  "boundTopicId": null,
  "title": "Interleaving String",
  "titleSlug": "interleaving-string",
  "categoryTitle": "Algorithms",
  "content": "<p>Given <em>s1</em>, <em>s2</em>, <em>s3</em>, find whether <em>s3</em> is formed by the interleaving of <em>s1</em> and <em>s2</em>.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> s1 = &quot;aabcc&quot;, s2 = &quot;dbbca&quot;, <em>s3</em> = &quot;aadbbcbcac&quot;\r\n<strong>Output:</strong> true\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> s1 = &quot;aabcc&quot;, s2 = &quot;dbbca&quot;, <em>s3</em> = &quot;aadbbbaccc&quot;\r\n<strong>Output:</strong> false\r\n</pre>\r\n",
  "isPaidOnly": false,
  "difficulty": "Hard",
  "likes": 1034,
  "dislikes": 64,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [],
  "topicTags": [
    {
      "name": "String",
      "slug": "string"
    },
    {
      "name": "Dynamic Programming",
      "slug": "dynamic-programming"
    }
  ],
  "companyTagStats": "{\"2\": [{\"taggedByAdmin\": false, \"name\": \"Uber\", \"slug\": \"uber\", \"timesEncountered\": 3}, {\"taggedByAdmin\": false, \"name\": \"Microsoft\", \"slug\": \"microsoft\", \"timesEncountered\": 3}], \"3\": [{\"taggedByAdmin\": false, \"name\": \"Aetion\", \"slug\": \"aetion\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Nvidia\", \"slug\": \"nvidia\", \"timesEncountered\": 2}], \"1\": [{\"taggedByAdmin\": false, \"name\": \"Apple\", \"slug\": \"apple\", \"timesEncountered\": 7}, {\"taggedByAdmin\": false, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 4}, {\"taggedByAdmin\": false, \"name\": \"Bloomberg\", \"slug\": \"bloomberg\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 2}]}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\r\npublic:\r\n    bool isInterleave(string s1, string s2, string s3) {\r\n        \r\n    }\r\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public boolean isInterleave(String s1, String s2, String s3) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def isInterleave(self, s1, s2, s3):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :type s3: str\n        :rtype: bool\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nbool isInterleave(char * s1, char * s2, char * s3){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\r\n    public bool IsInterleave(string s1, string s2, string s3) {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {string} s1\n * @param {string} s2\n * @param {string} s3\n * @return {boolean}\n */\nvar isInterleave = function(s1, s2, s3) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {String} s1\r\n# @param {String} s2\r\n# @param {String} s3\r\n# @return {Boolean}\r\ndef is_interleave(s1, s2, s3)\r\n    \r\nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\r\n    func isInterleave(_ s1: String, _ s2: String, _ s3: String) -> Bool {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Go",
      "code": "func isInterleave(s1 string, s2 string, s3 string) bool {\r\n    \r\n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\r\n    def isInterleave(s1: String, s2: String, s3: String): Boolean = {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\r\n    fun isInterleave(s1: String, s2: String, s3: String): Boolean {\r\n        \r\n    }\r\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn is_interleave(s1: String, s2: String, s3: String) -> bool {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param String $s1\n     * @param String $s2\n     * @param String $s3\n     * @return Boolean\n     */\n    function isInterleave($s1, $s2, $s3) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"130.8K\", \"totalSubmission\": \"441.1K\", \"totalAcceptedRaw\": 130838, \"totalSubmissionRaw\": 441085, \"acRate\": \"29.7%\"}",
  "hints": [],
  "solution": {
    "id": "91",
    "canSeeDetail": true,
    "url": "/articles/interleaving-strings/",
    "content": "[TOC]\n## Summary\n\nWe need to determine whether a given string can be formed by interleaving the other two strings.\n\n## Solution\n\n---\n#### Approach 1: Brute Force\n\nThe most basic idea is to find every string possible by all interleavings of the two given strings $$s1$$ and $$s2$$.\nIn order to implement this method, we are using recursion. We start by taking the current character of the\nfirst string $$s1$$ and then appending all possible interleavings of the remaining portion of the first string $$s1$$ and the second string $$s2$$ and comparing each result formed with the required interleaved string $$s3$$.\nSimilarly, we choose one character from the second string $$s2$$ and form all the interleavings with the remaining portion of $$s2$$ and $$s1$$ to check if the required string $$s1$$ can be formed.\n\nFor implementing the recursive function, we make the function call recursively as\n$$is\\_Interleave(s1,i+1,s2,j,res+s1.charAt(i),s3)$$, in which we have chosen the current character from $$s1$$ and then make another function call $$is\\_Interleave(s1,i,s2,j+1,res+s2.charAt(j),s3)$$, in which the current character of $$s2$$ is chosen. Here, $$res$$ refers to that portion(interleaved) of $$s1$$ and $$s2$$ which has already been processed. If anyone of these calls return the result as $$True$$, it means that atleast one interleaving gives the required result $$s3$$. The recursive calls end when both the strings $$s1$$ and $$s2$$ have been fully processed.\n\nLet's look at a small example to see how the execution proceeds.\n\n```\ns1=\"abc\"\ns2=\"bcd\"\ns3=\"abcbdc\"\n```\n\nFirstly we choose 'a' of $$s1$$ as the processed part i.e. res and call the recursive function considering the new strings as $$s1$$=\"bc\",\n$$s2$$=\"bcd\", $$s3$$=\"abcbdc\". When this function returns a result, we again call the recursive function but with the new strings as $$s1$$=\"abc\", $$s2$$=\"cd\", $$s3$$=\"abcbdc\"\n\n\n<iframe src=\"https://leetcode.com/playground/t2zVV2Mu/shared\" frameBorder=\"0\" width=\"100%\" height=\"344\" name=\"t2zVV2Mu\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(2^{m+n})$$. $$m$$ is the length of $$s1$$ and $$n$$ is the length of $$s2$$.\n\n* Space complexity : $$O(m+n)$$. The size of stack for recursive calls can go upto $$m+n$$.\n<br />\n<br />\n---\n#### Approach 2: Recursion with memoization\n\n**Algorithm**\n\nIn the recursive approach discussed above, we are considering every possible string formed by interleaving the two given\nstrings. But, there will be cases encountered in which, the same portion of $$s1$$ and $$s2$$ would have been processed already\nbut in different orders(permutations). But irrespective of the order of processing, if the resultant string formed till now\nis matching with the required string($$s3$$), the final result is dependent only on the remaining portions of $$s1$$ and $$s2$$, but\nnot on the already processed portion. Thus, the recursive approach leads to redundant computations.\n\nThis redundancy can be removed by making use of memoization along with recursion. For this, we maitain 3 pointers $$i, j, k$$\n which correspond to the index of the current character of $$s1, s2, s3$$ respectively. Also, we maintain a 2D memo array to keep a track of the substrings processed so far. $$memo[i][j]$$ stores a 1/0 or -1 depending on\n whether the current portion of strings i.e. upto $$i^{th}$$ index for $$s1$$ and upto $$j^{th}$$ index for s2 has already been evaluated. Again, we start by selecting the current character of $$s1$$ (pointed by $$i$$). If it matches the current character\n of $$s3$$ (pointed by $$k$$), we include it in the processed string and call the same function recurively as:\n $$is\\_Interleave(s1, i+1, s2, j, s3, k+1,memo)$$\n\nThus, here we have called the function by incrementing the pointers $$i$$ and $$k$$ since the portion of strings upto those indices\n has already been processed. Similarly, we choose one character from the second string and continue. The recursive function\n ends when either of the two strings $$s1$$ or $$s2$$ has been fully processed. If, let's say, the string $$s1$$ has been fully processed,\n we directly compare the remaining portion of $$s2$$ with the remaining portion of $$s3$$. When the backtrack occurs from the recursive\n calls, we store the value returned by the recursive functions in the memoization array memo appropriatelys so that when it is encountered the next time, the recursive function won't be called, but the memoization array itself will return the previous generated result.\n\n <iframe src=\"https://leetcode.com/playground/Mikhb9rY/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"Mikhb9rY\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(2^{m+n})$$. $$m$$ is the length of $$s1$$ and $$n$$ is the length of $$s2$$.\n\n* Space complexity : $$O(m+n)$$. The size of stack for recursive calls can go upto $$m+n$$.\n<br />\n<br />\n---\n#### Approach 3: Using 2D Dynamic Programming\n\n**Algorithm**\n\n\nThe recursive approach discussed in above solution included a character from one of the strings $$s1$$ or $$s2$$ in the resultant\ninterleaved string and called a recursive function to check whether the remaining portions of $$s1$$ and $$s2$$ can be interleaved\nto form the remaining portion of $$s3$$. In the current approach, we\n look at the same problem the other way around. Here, we include one character from $$s1$$ or $$s2$$ and check whether the\n resultant string formed so far by one particular interleaving of the the current prefix of $$s1$$ and $$s2$$ form a prefix of $$s3$$.\n\n Thus, this approach relies on the fact that the in order to determine whether a substring\n of $$s3$$(upto index $$k$$), can be formed by interleaving strings $$s1$$ and $$s2$$ upto indices $$i$$ and $$j$$ respectively, solely depends\n on the characters of $$s1$$ and $$s2$$ upto indices $$i$$ and $$j$$ only and not on the characters coming afterwards.\n\n To implement this method, we'll make use of a 2D boolean array $$dp$$. In this array $$dp[i][j]$$ implies if it is possible to\n obtain a substring of length $$(i+j+2)$$ which is a prefix of $$s3$$ by some interleaving of prefixes of strings $$s1$$ and $$s2$$ having\n lengths $$(i+1)$$ and $$(j+1)$$ respectively. For filling in the entry of $$dp[i][j]$$, we need to consider two cases:\n\n 1. The character\n just included i.e. either at $$i^{th}$$ index of $$s1$$ or at $$j^{th}$$ index of $$s2$$ doesn't match the character at $$k^{th}$$ index of $$s3$$, where $$k=i+j+1$$.\n In this case, the resultant string formed using some interleaving of prefixes of $$s1$$ and $$s2$$ can never result in a prefix of length $$k+1$$ in $$s3$$. Thus, we enter $$False$$ at the character $$dp[i][j]$$.\n\n 2. The character\n just included i.e. either at $$i^{th}$$ index of $$s1$$ or at $$j^{th}$$ index of $$s2$$  matches the character at $$k^{th}$$ index of $$s3$$, where $$k=i+j+1$$.\nNow, if the character just included(say $$x$$) which matches the character at $$k^{th}$$ index of $$s3$$, is the character at $$i^{th}$$ index of $$s1$$, we need to keep $$x$$ at the last position in the resultant interleaved string formed so far. Thus, in order to use string $$s1$$ and $$s2$$ upto indices $$i$$ and $$j$$ to form a resultant string of length $$(i+j+2)$$ which is a prefix of $$s3$$, we need to ensure that the strings $$s1$$ and $$s2$$ upto indices $$(i-1)$$ and $$j$$ respectively obey the same property.\n\n Similarly, if we just included the $$j^{th}$$ character of $$s2$$, which matches with the $$k^{th}$$ character of $$s3$$, we need to ensure that the strings $$s1$$ and $$s2$$ upto indices $$i$$ and $$(j-1)$$ also obey the same\nproperty to enter a $$true$$ at $$dp[i][j]$$.\n\nThis can be made clear with the following example:\n\n```\ns1=\"aabcc\"\ns2=\"dbbca\"\ns3=\"aadbbcbcac\"\n```\n\n<!--![97_Interleaving](../Figures/97_Interleaving.gif)-->\n!?!../Documents/97_Interleaving.json:1000,563!?!\n\n\n<iframe src=\"https://leetcode.com/playground/3Bj59cXr/shared\" frameBorder=\"0\" width=\"100%\" height=\"429\" name=\"3Bj59cXr\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(m \\cdot n)$$. dp array of size $$m*n$$ is filled.\n\n* Space complexity : $$O(m \\cdot n)$$. 2D dp of size $$(m+1)*(n+1)$$ is required. $$m$$ and $$n$$ are the lengths of strings $$s1$$ and $$s2$$ respectively.\n<br />\n<br />\n---\n#### Approach 4: Using 1D Dynamic Programming\n\n**Algorithm**\n\nThis approach is the same as the previous approach except that we have used only 1D $$dp$$ array to store the results of the\n prefixes of the strings processed so far. Instead of maintaining a 2D array, we can maintain a 1D array only and update the\n array's element $$dp[i]$$ when needed using $$dp[i-1]$$ and the previous value of $$dp[i]$$.\n\n <iframe src=\"https://leetcode.com/playground/5RbcdJJj/shared\" frameBorder=\"0\" width=\"100%\" height=\"429\" name=\"5RbcdJJj\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(m \\cdot n)$$. dp array of size $$n$$ is filled $$m$$ times.\n\n* Space complexity : $$O(n)$$. $$n$$ is the length of the string $$s1$$.",
    "contentTypeId": "107",
    "rating": {
      "id": "89",
      "count": 41,
      "average": 4.61,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "\"aabcc\"\n\"dbbca\"\n\"aadbbcbcac\"",
  "metaData": "{ \r\n  \"name\": \"isInterleave\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"s1\",\r\n      \"type\": \"string\"\r\n    },\r\n    {\r\n      \"name\": \"s2\",\r\n      \"type\": \"string\"\r\n    },\r\n    {\r\n      \"name\": \"s3\",\r\n      \"type\": \"string\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"boolean\"\r\n  }\r\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
