{
  "questionId": "982",
  "questionFrontendId": "945",
  "boundTopicId": null,
  "title": "Minimum Increment to Make Array Unique",
  "titleSlug": "minimum-increment-to-make-array-unique",
  "categoryTitle": "Algorithms",
  "content": "<p>Given an array of integers A, a <em>move</em> consists of choosing any <code>A[i]</code>, and incrementing it by <code>1</code>.</p>\r\n\r\n<p>Return the least number of moves to make every value in <code>A</code> unique.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[1,2,2]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">1</span>\r\n<strong>Explanation: </strong> After 1 move, the array could be [1, 2, 3].\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[3,2,1,2,1,7]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">6</span>\r\n<strong>Explanation: </strong> After 6 moves, the array could be [3, 4, 1, 2, 5, 7].\r\nIt can be shown with 5 or less moves that it is impossible for the array to have all unique values.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n</div>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>0 &lt;= A.length &lt;= 40000</code></li>\r\n\t<li><code>0 &lt;= A[i] &lt; 40000</code></li>\r\n</ol>\r\n\r\n<div>\r\n<div>&nbsp;</div>\r\n</div>",
  "isPaidOnly": false,
  "difficulty": "Medium",
  "likes": 258,
  "dislikes": 12,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [
    {
      "username": "toastedegg",
      "profileUrl": "/toastedegg/",
      "avatarUrl": "https://assets.leetcode.com/users/toastedegg/avatar_1533794523.png"
    }
  ],
  "topicTags": [
    {
      "name": "Array",
      "slug": "array"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"Coursera\", \"slug\": \"coursera\", \"timesEncountered\": 0}], \"1\": [{\"taggedByAdmin\": false, \"name\": \"Twitter\", \"slug\": \"twitter\", \"timesEncountered\": 3}, {\"taggedByAdmin\": false, \"name\": \"IXL\", \"slug\": \"ixl\", \"timesEncountered\": 2}], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    int minIncrementForUnique(vector<int>& A) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public int minIncrementForUnique(int[] A) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def minIncrementForUnique(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: int\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def minIncrementForUnique(self, A: List[int]) -> int:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nint minIncrementForUnique(int* A, int ASize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public int MinIncrementForUnique(int[] A) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number[]} A\n * @return {number}\n */\nvar minIncrementForUnique = function(A) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer[]} a\n# @return {Integer}\ndef min_increment_for_unique(a)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func minIncrementForUnique(_ A: [Int]) -> Int {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func minIncrementForUnique(A []int) int {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def minIncrementForUnique(A: Array[Int]): Int = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun minIncrementForUnique(A: IntArray): Int {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn min_increment_for_unique(a: Vec<i32>) -> i32 {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer[] $A\n     * @return Integer\n     */\n    function minIncrementForUnique($A) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"17.2K\", \"totalSubmission\": \"38.7K\", \"totalAcceptedRaw\": 17240, \"totalSubmissionRaw\": 38743, \"acRate\": \"44.5%\"}",
  "hints": [],
  "solution": {
    "id": "624",
    "canSeeDetail": true,
    "url": "/articles/minimum-increment-to-make-array-unique/",
    "content": "[TOC]\n\n## Solution\n---\n#### Approach 1: Counting\n\n**Intuition**\n\nLet's count the quantity of each element.  Clearly, we want to increment duplicated values.\n\nFor each duplicate value, we could do a \"brute force\" solution of incrementing it repeatedly until it is not unique.  However, we might do a lot of work - consider the work done by an array of all ones.  We should think of how to amend our solution to solve this case as well.\n\nWhat we can do instead is lazily evaluate our increments.  If for example we have `[1, 1, 1, 1, 3, 5]`, we don't need to process all the increments of duplicated `1`s.  We could take three ones (`taken = [1, 1, 1]`) and continue processing.  When we find an empty place like `2`, `4`, or `6`, we can then recover that our increment will be `2-1`, `4-1`, and `6-1`.\n\n**Algorithm**\n\nCount the values.  For each possible value `x`:\n\n* If there are 2 or more values `x` in `A`, save the extra duplicated values to increment later.\n* If there are 0 values `x` in `A`, then a saved value `v` gets incremented to `x`.\n\nIn Java, the code is less verbose with a slight optimization:  we record only the number of saved values, and we subtract from the answer in advance.  In the `[1, 1, 1, 1, 3, 5]` example, we do `taken = 3` and `ans -= 3` in advance, and later we do `ans += 2; ans += 4; ans += 6`.  This optimization is also used in *Approach 2*.\n\n<iframe src=\"https://leetcode.com/playground/hDLTpYAB/shared\" frameBorder=\"0\" width=\"100%\" height=\"412\" name=\"hDLTpYAB\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity:  $$O(N)$$, where $$N$$ is the length of `A`.\n\n* Space Complexity:  $$O(N)$$.\n<br />\n<br />\n\n\n---\n#### Approach 2: Maintain Duplicate Info\n\n**Intuition**\n\nLet's imagine the array is sorted and we are moving from left to right.  As in Approach 1, we want to take duplicate values to release later.\n\n**Algorithm**\n\nThere are two cases.\n\n* If `A[i-1] == A[i]`, we have a duplicate to take.\n\n* If `A[i-1] < A[i]`, we might be able to place our taken values into those free positions.  Specifically, we have `give = min(taken, A[i] - A[i-1] - 1)` possible values to release, and they will have final values `A[i-1] + 1, A[i-1] + 2, ..., A[i-1] + give`.  This has a sum of $$A[i-1] * \\text{give} + (\\sum_{k=1}^{give})$$.\n\n<iframe src=\"https://leetcode.com/playground/P7fCXnrT/shared\" frameBorder=\"0\" width=\"100%\" height=\"429\" name=\"P7fCXnrT\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity:  $$O(N\\log N)$$, where $$N$$ is the length of `A`.\n\n* Space Complexity:  $$O(N)$$ in additional space complexity, depending on the specific implementation of the built in sort.\n<br />\n<br />\n\n\n---\n\n\nAnalysis written by: [@awice](https://leetcode.com/awice).",
    "contentTypeId": "107",
    "rating": {
      "id": "610",
      "count": 22,
      "average": 3.909,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "[1,2,2]",
  "metaData": "{\r\n  \"name\": \"minIncrementForUnique\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"A\",\r\n      \"type\": \"integer[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
