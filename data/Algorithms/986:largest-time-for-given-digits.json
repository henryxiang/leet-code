{
  "questionId": "986",
  "questionFrontendId": "949",
  "boundTopicId": null,
  "title": "Largest Time for Given Digits",
  "titleSlug": "largest-time-for-given-digits",
  "categoryTitle": "Algorithms",
  "content": "<p>Given an array of 4 digits, return the largest 24 hour time that can be made.</p>\r\n\r\n<p>The smallest 24 hour time is 00:00, and the largest is 23:59.&nbsp; Starting from 00:00, a time is larger if more time has elapsed since midnight.</p>\r\n\r\n<p>Return the answer as a string of length 5.&nbsp; If no valid time can be made, return an empty string.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[1,2,3,4]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">&quot;23:41&quot;</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[5,5,5,5]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">&quot;&quot;</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong><span>Note:</span></strong></p>\r\n\r\n<ol>\r\n\t<li><code>A.length == 4</code></li>\r\n\t<li><code>0 &lt;= A[i] &lt;= 9</code></li>\r\n</ol>\r\n</div>\r\n</div>",
  "isPaidOnly": false,
  "difficulty": "Easy",
  "likes": 110,
  "dislikes": 268,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [
    {
      "username": "Survivor_11",
      "profileUrl": "/survivor_11/",
      "avatarUrl": "https://www.gravatar.com/avatar/47cb741a072a534dec43f2a81a5ed386.png?s=200"
    }
  ],
  "topicTags": [
    {
      "name": "Math",
      "slug": "math"
    }
  ],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"LiveRamp\", \"slug\": \"liveramp\", \"timesEncountered\": 0}], \"1\": [{\"taggedByAdmin\": false, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 2}], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class Solution {\npublic:\n    string largestTimeFromDigits(vector<int>& A) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class Solution {\n    public String largestTimeFromDigits(int[] A) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class Solution(object):\n    def largestTimeFromDigits(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: str\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class Solution:\n    def largestTimeFromDigits(self, A: List[int]) -> str:\n        "
    },
    {
      "lang": "C",
      "code": "\n\nchar * largestTimeFromDigits(int* A, int ASize){\n\n}\n\n"
    },
    {
      "lang": "C#",
      "code": "public class Solution {\n    public string LargestTimeFromDigits(int[] A) {\n        \n    }\n}"
    },
    {
      "lang": "JavaScript",
      "code": "/**\n * @param {number[]} A\n * @return {string}\n */\nvar largestTimeFromDigits = function(A) {\n    \n};"
    },
    {
      "lang": "Ruby",
      "code": "# @param {Integer[]} a\n# @return {String}\ndef largest_time_from_digits(a)\n    \nend"
    },
    {
      "lang": "Swift",
      "code": "class Solution {\n    func largestTimeFromDigits(_ A: [Int]) -> String {\n        \n    }\n}"
    },
    {
      "lang": "Go",
      "code": "func largestTimeFromDigits(A []int) string {\n    \n}"
    },
    {
      "lang": "Scala",
      "code": "object Solution {\n    def largestTimeFromDigits(A: Array[Int]): String = {\n        \n    }\n}"
    },
    {
      "lang": "Kotlin",
      "code": "class Solution {\n    fun largestTimeFromDigits(A: IntArray): String {\n        \n    }\n}"
    },
    {
      "lang": "Rust",
      "code": "impl Solution {\n    pub fn largest_time_from_digits(a: Vec<i32>) -> String {\n        \n    }\n}"
    },
    {
      "lang": "PHP",
      "code": "class Solution {\n\n    /**\n     * @param Integer[] $A\n     * @return String\n     */\n    function largestTimeFromDigits($A) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"12.1K\", \"totalSubmission\": \"34.7K\", \"totalAcceptedRaw\": 12115, \"totalSubmissionRaw\": 34740, \"acRate\": \"34.9%\"}",
  "hints": [],
  "solution": {
    "id": "631",
    "canSeeDetail": true,
    "url": "/articles/largest-time-for-given-digits/",
    "content": "[TOC]\n\n## Solution\n---\n#### Approach 1: Brute Force\n\n**Intuition**\n\nTry all possible times, and remember the largest one.\n\n**Algorithm (Java)**\n\nIterate over all permutations `(i, j, k, l)` of `(0, 1, 2, 3)`.  For each permutation, we can try the time `A[i]A[j] : A[k]A[l]`.\n\nThis is a valid time if and only if the number of hours `10*A[i] + A[j]` is less than `24`; and the number of minutes `10*A[k] + A[l]` is less than `60`.\n\nWe will output the largest valid time.\n\n**Algorithm (Python)**\n\nFor each possible ordering of the 4 digits, if it's a legal time and the time is greater than the one we have stored, update the answer.\n\n<iframe src=\"https://leetcode.com/playground/vzuf8WrS/shared\" frameBorder=\"0\" width=\"100%\" height=\"429\" name=\"vzuf8WrS\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity:  $$O(1)$$.\n\n* Space Complexity:  $$O(1)$$.\n<br />\n<br />\n\n\n---\n\n\nAnalysis written by: [@awice](https://leetcode.com/awice).  Java implementation inspired by [@rock](https://leetcode.com/problems/largest-time-for-given-digits/discuss/200693/Java-11-liner-O(64)-w-comment-6-ms.).",
    "contentTypeId": "107",
    "rating": {
      "id": "616",
      "count": 28,
      "average": 2.464,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "[1,2,3,4]",
  "metaData": "{\r\n  \"name\": \"largestTimeFromDigits\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"A\",\r\n      \"type\": \"integer[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"string\"\r\n  }\r\n}\r\n",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
