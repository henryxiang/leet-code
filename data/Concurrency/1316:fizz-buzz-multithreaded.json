{
  "questionId": "1316",
  "questionFrontendId": "1195",
  "boundTopicId": null,
  "title": "Fizz Buzz Multithreaded",
  "titleSlug": "fizz-buzz-multithreaded",
  "categoryTitle": "Concurrency",
  "content": "<p>Write a program that outputs the string representation of numbers from 1 to&nbsp;<i>n</i>, however:</p>\n\n<ul>\n\t<li>If the number is divisible by 3, output &quot;fizz&quot;.</li>\n\t<li>If the number is divisible by 5, output&nbsp;&quot;buzz&quot;.</li>\n\t<li>If the number is divisible by both 3 and 5, output&nbsp;&quot;fizzbuzz&quot;.</li>\n</ul>\n\n<p>For example, for&nbsp;<code>n = 15</code>, we output:&nbsp;<code>1, 2, fizz, 4, buzz, fizz, 7, 8, fizz, buzz, 11, fizz, 13, 14, fizzbuzz</code>.</p>\n\n<p>Suppose you are given the following code:</p>\n\n<pre>\nclass FizzBuzz {\n&nbsp; public FizzBuzz(int n) { ... }&nbsp;              // constructor\n  public void fizz(printFizz) { ... }          // only output &quot;fizz&quot;\n  public void buzz(printBuzz) { ... }          // only output &quot;buzz&quot;\n  public void fizzbuzz(printFizzBuzz) { ... }  // only output &quot;fizzbuzz&quot;\n  public void number(printNumber) { ... }      // only output the numbers\n}</pre>\n\n<p>Implement a multithreaded version of <code>FizzBuzz</code> with <strong>four</strong> threads. The same instance of <code>FizzBuzz</code> will be passed to four different threads:</p>\n\n<ol>\n\t<li>Thread A will call&nbsp;<code>fizz()</code>&nbsp;to check for divisibility of 3 and outputs&nbsp;<code>fizz</code>.</li>\n\t<li>Thread B will call&nbsp;<code>buzz()</code>&nbsp;to check for divisibility of 5 and outputs&nbsp;<code>buzz</code>.</li>\n\t<li>Thread C will call <code>fizzbuzz()</code>&nbsp;to check for divisibility of 3 and 5 and outputs&nbsp;<code>fizzbuzz</code>.</li>\n\t<li>Thread D will call <code>number()</code> which should only output the numbers.</li>\n</ol>\n",
  "isPaidOnly": false,
  "difficulty": "Medium",
  "likes": 72,
  "dislikes": 28,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"Fizz Buzz\", \"titleSlug\": \"fizz-buzz\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Print Zero Even Odd\", \"titleSlug\": \"print-zero-even-odd\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
  "contributors": [],
  "topicTags": [],
  "companyTagStats": "{\"1\": [], \"2\": [], \"3\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class FizzBuzz {\nprivate:\n    int n;\n\npublic:\n    FizzBuzz(int n) {\n        this->n = n;\n    }\n\n    // printFizz() outputs \"fizz\".\n    void fizz(function<void()> printFizz) {\n        \n    }\n\n    // printBuzz() outputs \"buzz\".\n    void buzz(function<void()> printBuzz) {\n        \n    }\n\n    // printFizzBuzz() outputs \"fizzbuzz\".\n\tvoid fizzbuzz(function<void()> printFizzBuzz) {\n        \n    }\n\n    // printNumber(x) outputs \"x\", where x is an integer.\n    void number(function<void(int)> printNumber) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class FizzBuzz {\n    private int n;\n\n    public FizzBuzz(int n) {\n        this.n = n;\n    }\n\n    // printFizz.run() outputs \"fizz\".\n    public void fizz(Runnable printFizz) throws InterruptedException {\n        \n    }\n\n    // printBuzz.run() outputs \"buzz\".\n    public void buzz(Runnable printBuzz) throws InterruptedException {\n        \n    }\n\n    // printFizzBuzz.run() outputs \"fizzbuzz\".\n    public void fizzbuzz(Runnable printFizzBuzz) throws InterruptedException {\n        \n    }\n\n    // printNumber.accept(x) outputs \"x\", where x is an integer.\n    public void number(IntConsumer printNumber) throws InterruptedException {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class FizzBuzz(object):\n    def __init__(self, n):\n        self.n = n\n\n    # printFizz() outputs \"fizz\"\n    def fizz(self, printFizz):\n        \"\"\"\n        :type printFizz: method\n        :rtype: void\n        \"\"\"\n    \t\n\n    # printBuzz() outputs \"buzz\"\n    def buzz(self, printBuzz):\n        \"\"\"\n        :type printBuzz: method\n        :rtype: void\n        \"\"\"\n    \t\n\n    # printFizzBuzz() outputs \"fizzbuzz\"\n    def fizzbuzz(self, printFizzBuzz):\n        \"\"\"\n        :type printFizzBuzz: method\n        :rtype: void\n        \"\"\"\n        \n\n    # printNumber(x) outputs \"x\", where x is an integer.\n    def number(self, printNumber):\n        \"\"\"\n        :type printNumber: method\n        :rtype: void\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class FizzBuzz:\n    def __init__(self, n: int):\n        self.n = n\n\n    # printFizz() outputs \"fizz\"\n    def fizz(self, printFizz: 'Callable[[], None]') -> None:\n    \t\n\n    # printBuzz() outputs \"buzz\"\n    def buzz(self, printBuzz: 'Callable[[], None]') -> None:\n    \t\n\n    # printFizzBuzz() outputs \"fizzbuzz\"\n    def fizzbuzz(self, printFizzBuzz: 'Callable[[], None]') -> None:\n        \n\n    # printNumber(x) outputs \"x\", where x is an integer.\n    def number(self, printNumber: 'Callable[[int], None]') -> None:\n        "
    },
    {
      "lang": "C",
      "code": "typedef struct {\n    int n;\n} FizzBuzz;\n\nFizzBuzz* fizzBuzzCreate(int n) {\n    FizzBuzz* obj = (FizzBuzz*) malloc(sizeof(FizzBuzz));\n    obj->n = n;\n    return obj;\n}\n\n// printFizz() outputs \"fizz\".\nvoid fizz(FizzBuzz* obj) {\n    \n}\n\n// printBuzz() outputs \"buzz\".\nvoid buzz(FizzBuzz* obj) {\n    \n}\n\n// printFizzBuzz() outputs \"fizzbuzz\".\nvoid fizzbuzz(FizzBuzz* obj) {\n    \n}\n\n// You may call global function `void printNumber(int x)`\n// to output \"x\", where x is an integer.\nvoid number(FizzBuzz* obj) {\n    \n}\n\nvoid fizzBuzzFree(FizzBuzz* obj) {\n    \n}"
    },
    {
      "lang": "C#",
      "code": "public class FizzBuzz {\n    private int n;\n\n    public FizzBuzz(int n) {\n        this.n = n;\n    }\n\n    // printFizz() outputs \"fizz\".\n    public void Fizz(Action printFizz) {\n        \n    }\n\n    // printBuzzz() outputs \"buzz\".\n    public void Buzz(Action printBuzz) {\n        \n    }\n\n    // printFizzBuzz() outputs \"fizzbuzz\".\n    public void Fizzbuzz(Action printFizzBuzz) {\n        \n    }\n\n    // printNumber(x) outputs \"x\", where x is an integer.\n    public void Number(Action<int> printNumber) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"3.8K\", \"totalSubmission\": \"5.9K\", \"totalAcceptedRaw\": 3846, \"totalSubmissionRaw\": 5943, \"acRate\": \"64.7%\"}",
  "hints": [],
  "solution": null,
  "status": null,
  "sampleTestCase": "15",
  "metaData": "{\n  \"name\": \"foobar\",\n  \"params\": [\n    {\n      \"name\": \"nums\",\n      \"type\": \"integer\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"integer\"\n  },\n  \"manual\": true,\n  \"languages\": [\n    \"java\",\n    \"cpp\",\n    \"python3\",\n    \"python\",\n    \"csharp\",\n    \"c\"\n  ]\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
