{
  "questionId": "1410",
  "questionFrontendId": "1279",
  "boundTopicId": null,
  "title": "Traffic Light Controlled Intersection",
  "titleSlug": "traffic-light-controlled-intersection",
  "categoryTitle": "Concurrency",
  "content": "<p>There is an intersection of two roads. First road is road A where cars travel&nbsp;from North to South in direction 1 and from South to North in direction 2. Second road is road B where cars travel from West to East in direction 3 and from East to West in direction 4.</p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/11/11/exp.png\" style=\"width: 600px; height: 417px;\" /></p>\n\n<p>There is a traffic light&nbsp;located on each road before the intersection. A traffic light&nbsp;can&nbsp;either be green or red.</p>\n\n<ol>\n\t<li><strong>Green</strong> means&nbsp;cars can cross the intersection&nbsp;in both directions of the road.</li>\n\t<li><strong>Red</strong> means cars in both directions cannot cross the intersection and must wait until the light turns green.</li>\n</ol>\n\n<p>The traffic lights cannot be green on both roads at the same time. That means when the light is green on road A, it is red on&nbsp;road B and when the light is green on road B, it is red on&nbsp;road A.</p>\n\n<p>Initially, the traffic light is <strong>green</strong> on road A and <strong>red</strong>&nbsp;on road B. When the light is green on one road, all cars can cross the intersection in both directions until the light becomes green on the other road.&nbsp;No two cars traveling on different roads should cross at the same time.</p>\n\n<p>Design a deadlock-free&nbsp;traffic light controlled system at this intersection.</p>\n\n<p>Implement the function&nbsp;<code>void carArrived(carId, roadId, direction, turnGreen, crossCar)</code> where:</p>\n\n<ul>\n\t<li><code>carId</code>&nbsp;is the id of the car that arrived.</li>\n\t<li><code>roadId</code>&nbsp;is the id of the road that the car travels&nbsp;on.</li>\n\t<li><code>direction</code>&nbsp;is the direction of the car.</li>\n\t<li><code>turnGreen</code>&nbsp;is a function you can call to turn the traffic light to green on the current road.</li>\n\t<li><code>crossCar</code>&nbsp;is a function you can call to let the current car cross the intersection.</li>\n</ul>\n\n<p>Your answer is considered correct if it avoids cars deadlock in the intersection.&nbsp;Turning the light green on a road when it was already green is considered a&nbsp;wrong answer.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> cars = [1,3,5,2,4], directions = [2,1,2,4,3], arrivalTimes = [10,20,30,40,50]\n<strong>Output:</strong> [\n&quot;Car 1 Has Passed Road A In Direction 2&quot;,    // Traffic light on road A is green, car 1 can cross the intersection.\n&quot;Car 3 Has Passed Road A In Direction 1&quot;,    // Car 3 crosses the intersection as the light is still green.\n&quot;Car 5 Has Passed Road A In Direction 2&quot;,    // Car 5 crosses the intersection as the light is still green.\n&quot;Traffic Light On Road B Is Green&quot;,          // Car 2 requests green light for road B.\n&quot;Car 2 Has Passed Road B In Direction 4&quot;,    // Car 2 crosses as the light is green on road B now.\n&quot;Car 4 Has Passed Road B In Direction 3&quot;     // Car 4 crosses the intersection as the light is still green.\n]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> cars = [1,2,3,4,5], directions = [2,4,3,3,1], arrivalTimes = [10,20,30,40,40]\n<strong>Output:</strong> [\n&quot;Car 1 Has Passed Road A In Direction 2&quot;,    // Traffic light on road A is green, car 1 can cross the intersection.\n&quot;Traffic Light On Road B Is Green&quot;,          // Car 2 requests green light for road B.\n&quot;Car 2 Has Passed Road B In Direction 4&quot;,    // Car 2 crosses as the light is green on road B now.\n&quot;Car 3 Has Passed Road B In Direction 3&quot;,    // Car 3 crosses as the light is green on road B now.\n&quot;Traffic Light On Road A Is Green&quot;,          // Car 5 requests green light for road A.\n&quot;Car 5 Has Passed Road A In Direction 1&quot;,    // Car 5 crosses as the light is green on road A now.\n&quot;Traffic Light On Road B Is Green&quot;,          // Car 4 requests green light for road B. Car 4 blocked until car 5 crosses and then traffic light is green on road B.\n&quot;Car 4 Has Passed Road B In Direction 3&quot;     // Car 4 crosses as the light is green on road B now.\n]\n<strong>Explanation:</strong> This is a dead-lock free scenario. Note that the scenario when car 4 crosses before turning light into green on road A and allowing car 5 to pass is also <strong>correct</strong> and <strong>Accepted</strong> scenario.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= cars.length &lt;= 20</code></li>\n\t<li><code>cars.length = directions.length</code></li>\n\t<li><code>cars.length = arrivalTimes.length</code></li>\n\t<li>All values of <code>cars</code> are unique</li>\n\t<li><code>1 &lt;= directions[i] &lt;= 4</code></li>\n\t<li><code>arrivalTimes</code> is non-decreasing</li>\n</ul>\n",
  "isPaidOnly": true,
  "difficulty": "Easy",
  "likes": 12,
  "dislikes": 16,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [],
  "topicTags": [],
  "companyTagStats": "{\"1\": [], \"2\": [], \"3\": []}",
  "codeSnippets": [
    {
      "lang": "C++",
      "code": "class TrafficLight {\npublic:\n    TrafficLight() {\n        \n    }\n\n    void carArrived(\n        int carId,                   // ID of the car\n        int roadId,                  // ID of the road the car travels on. Can be 1 (road A) or 2 (road B)\n        int direction,               // Direction of the car\n        function<void()> turnGreen,  // Use turnGreen() to turn light to green on current road\n        function<void()> crossCar    // Use crossCar() to make car cross the intersection\n    ) {\n        \n    }\n};"
    },
    {
      "lang": "Java",
      "code": "class TrafficLight {\n\n    public TrafficLight() {\n        \n    }\n    \n    public void carArrived(\n        int carId,           // ID of the car\n        int roadId,          // ID of the road the car travels on. Can be 1 (road A) or 2 (road B)\n        int direction,       // Direction of the car\n        Runnable turnGreen,  // Use turnGreen.run() to turn light to green on current road\n        Runnable crossCar    // Use crossCar.run() to make car cross the intersection \n    ) {\n        \n    }\n}"
    },
    {
      "lang": "Python",
      "code": "class TrafficLight(object):\n    \n    def __init__(self):\n        pass\n\n    def carArrived(self, carId, roadId, direction, turnGreen, crossCar):\n        \"\"\"\n        :type roadId: int --> // ID of the car\n        :type carId: int --> // ID of the road the car travels on. Can be 1 (road A) or 2 (road B)\n        :type direction: int --> // Direction of the car\n        :type turnGreen: method --> // Use turnGreen() to turn light to green on current road\n        :type crossCar: method --> // Use crossCar() to make car cross the intersection\n        :rtype: void\n        \"\"\"\n        "
    },
    {
      "lang": "Python3",
      "code": "class TrafficLight:\n    def __init__(self):\n        pass\n\n    def carArrived(\n        self,\n        carId: int,                      # ID of the car\n        roadId: int,                     # ID of the road the car travels on. Can be 1 (road A) or 2 (road B)\n        direction: int,                  # Direction of the car\n        turnGreen: 'Callable[[], None]', # Use turnGreen() to turn light to green on current road\n        crossCar: 'Callable[[], None]'   # Use crossCar() to make car cross the intersection\n    ) -> None:\n        "
    },
    {
      "lang": "C#",
      "code": "public class TrafficLight {\n    \n    public TrafficLight() {\n        \n    }\n    \n    public void CarArrived(\n        int carId,         // ID of the car\n        int roadId,        // ID of the road the car travels on. Can be 1 (road A) or 2 (road B)\n        int direction,     // Direction of the car\n        Action turnGreen,  // Use turnGreen() to turn light to green on current road\n        Action crossCar    // Use crossCar() to make car cross the intersection\n    ) {\n        \n    }\n}"
    }
  ],
  "stats": "{\"totalAccepted\": \"437\", \"totalSubmission\": \"520\", \"totalAcceptedRaw\": 437, \"totalSubmissionRaw\": 520, \"acRate\": \"84.0%\"}",
  "hints": [],
  "solution": null,
  "status": null,
  "sampleTestCase": "[1,3,5,2,4]\n[2,1,2,4,3]\n[10,20,30,40,50]",
  "metaData": "{\n  \"name\": \"carArrived\",\n  \"params\": [\n    {\n      \"type\": \"integer[]\",\n      \"name\": \"cars\"\n    },\n    {\n      \"type\": \"integer[]\",\n      \"name\": \"directions\"\n    },\n    {\n      \"type\": \"integer[]\",\n      \"name\": \"arrivalTimes\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"void\"\n  },\n  \"languages\": [\n    \"cpp\",\n    \"java\",\n    \"python\",\n    \"csharp\",\n    \"python3\"\n  ],\n  \"manual\": true\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
