{
  "questionId": "569",
  "questionFrontendId": "569",
  "boundTopicId": null,
  "title": "Median Employee Salary",
  "titleSlug": "median-employee-salary",
  "categoryTitle": "Database",
  "content": "<p>The <code>Employee</code> table holds all employees. The employee table has three columns: Employee Id, Company Name, and Salary.</p>\r\n\r\n<pre>\r\n+-----+------------+--------+\r\n|Id   | Company    | Salary |\r\n+-----+------------+--------+\r\n|1    | A          | 2341   |\r\n|2    | A          | 341    |\r\n|3    | A          | 15     |\r\n|4    | A          | 15314  |\r\n|5    | A          | 451    |\r\n|6    | A          | 513    |\r\n|7    | B          | 15     |\r\n|8    | B          | 13     |\r\n|9    | B          | 1154   |\r\n|10   | B          | 1345   |\r\n|11   | B          | 1221   |\r\n|12   | B          | 234    |\r\n|13   | C          | 2345   |\r\n|14   | C          | 2645   |\r\n|15   | C          | 2645   |\r\n|16   | C          | 2652   |\r\n|17   | C          | 65     |\r\n+-----+------------+--------+\r\n</pre>\r\n\r\n<p>Write a SQL query to find the median salary of each company. Bonus points if you can solve it without using any built-in SQL functions.</p>\r\n\r\n<pre>\r\n+-----+------------+--------+\r\n|Id   | Company    | Salary |\r\n+-----+------------+--------+\r\n|5    | A          | 451    |\r\n|6    | A          | 513    |\r\n|12   | B          | 234    |\r\n|9    | B          | 1154   |\r\n|14   | C          | 2645   |\r\n+-----+------------+--------+\r\n</pre>\r\n",
  "isPaidOnly": true,
  "difficulty": "Hard",
  "likes": 54,
  "dislikes": 33,
  "isLiked": null,
  "similarQuestions": "[{\"title\": \"Find Median Given Frequency of Numbers\", \"titleSlug\": \"find-median-given-frequency-of-numbers\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
  "contributors": [
    {
      "username": "jogging",
      "profileUrl": "/jogging/",
      "avatarUrl": "https://www.gravatar.com/avatar/a0471c661a6416e80c8567f6c22b2ea2.png?s=200"
    }
  ],
  "topicTags": [],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 0}], \"1\": [], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "MySQL",
      "code": "# Write your MySQL query statement below\n"
    },
    {
      "lang": "MS SQL Server",
      "code": "/* Write your T-SQL query statement below */\n"
    },
    {
      "lang": "Oracle",
      "code": "/* Write your PL/SQL query statement below */\n"
    }
  ],
  "stats": "{\"totalAccepted\": \"6.6K\", \"totalSubmission\": \"12.7K\", \"totalAcceptedRaw\": 6620, \"totalSubmissionRaw\": 12673, \"acRate\": \"52.2%\"}",
  "hints": [
    "Still remember how to select the sum which group by one column?",
    "Try to think about how to get the median from a sorted list.",
    "How to get the median one item for odd number list while how to get the median two items for even number list, try to unify them."
  ],
  "solution": {
    "id": "131",
    "canSeeDetail": true,
    "url": "/articles/median-employee-salary/",
    "content": "[TOC]\n\n## Solution\n---\n#### Approach #1: Using the definition of *median* [Accepted]\n\n**Intuition**\n\nBy the definition of *median*, the count of the bigger numbers than itself should be equal to the count of the smaller ones in an *odd* array.\n\n**Algorithm**\n\nTake array [1,3,2] for example, is the first number 1 the median? No, because this array only have 3 elements but there are 2 of them (3, 2) are greater than 1. To continue, we know 3 is not the median as well since there are 2 elements smaller. But for the last element 2, there are equal amount of bigger and smaller numbers. So it is the median in this array!\n\nWhat if an array has *even* amount of distinct values, the median is the average of the middle *two elements* next to each other  after sorting this array.  It is not hard to understand that for either of these two elements, the difference (absolute value) of its bigger and smaller number than itself in this array is 1, which is the exactly frequency of a element in the distinct array.\n\nSo in general, the median's frequency should be equal or grater than the absolute difference of its bigger elements and small ones in an array no matter whether it has odd or even amount of numbers and whether they are distinct. This rule is the key, and it is represented as the following code.\n```sql\nSUM(CASE\n    WHEN Employee.Salary = alias.Salary THEN 1\n    ELSE 0\nEND) >= ABS(SUM(SIGN(Employee.Salary - alias.Salary)))\n```\nThus, this approach is as following in MySQL code.\n\n**MySQL**\n```sql\nSELECT\n    Employee.Id, Employee.Company, Employee.Salary\nFROM\n    Employee,\n    Employee alias\nWHERE\n    Employee.Company = alias.Company\nGROUP BY Employee.Company , Employee.Salary\nHAVING SUM(CASE\n    WHEN Employee.Salary = alias.Salary THEN 1\n    ELSE 0\nEND) >= ABS(SUM(SIGN(Employee.Salary - alias.Salary)))\nORDER BY Employee.Id\n;\n```\n\n> Note: In MySQL 5.6, this code runs fine, but if you are using MySQL 5.7+, please use `ANY_VALUE(Employee.Id)` instead of `Employee.Id` in the SELECT statement. Otherwise, you may encouter the following error message:\nError Code: 1055. Expression #1 of SELECT list is not in GROUP BY clause and contains nonaggregated column 'Employee.Id' which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by.\n> For more details on how to user `ANY_VALUE(arg)`, please refer to this [link](https://dev.mysql.com/doc/refman/5.7/en/miscellaneous-functions.html#function_any-value).\n---\n\n#### Approach #2: Sort and then select the *median* [Accepted]\n\n**Intuition**\n\nIn general, we can just pick the middle one(s) to get the *median* if the records are ranked by **salary**. But how can we get them sorted particularly MySQL does not have the build-in rank function, and these are several companies in this case.\n\n**Algorithm**\n\nBy adding a virtual column to simulate the ranking, we can sort these records by **salary** and pick up the middle one(s). Here we need to use the session variable to achieve this goal.\n\nThis approach is more efficient than the first one since it does not calculate all the **salary** one by one in the table.\n\n```sql\nSELECT \n    Id, Company, Salary\nFROM\n    (SELECT \n        e.Id,\n            e.Salary,\n            e.Company,\n            IF(@prev = e.Company, @Rank:=@Rank + 1, @Rank:=1) AS rank,\n            @prev:=e.Company\n    FROM\n        Employee e, (SELECT @Rank:=0, @prev:=0) AS temp\n    ORDER BY e.Company , e.Salary , e.Id) Ranking\n        INNER JOIN\n    (SELECT \n        COUNT(*) AS totalcount, Company AS name\n    FROM\n        Employee e2\n    GROUP BY e2.Company) companycount ON companycount.name = Ranking.Company\nWHERE\n    Rank = FLOOR((totalcount + 1) / 2)\n        OR Rank = FLOOR((totalcount + 2) / 2)\n;\n```",
    "contentTypeId": "107",
    "rating": {
      "id": "128",
      "count": 18,
      "average": 3.056,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "{\"headers\": {\"Employee\": [\"Id\", \"Company\", \"Salary\"]}, \"rows\": {\"Employee\": [[1, \"A\", 2341],[2, \"A\", 341],[3, \"A\", 15],[4, \"A\", 15314],[5, \"A\", 451],[6, \"A\", 513],[7, \"B\", 15],[8, \"B\", 13],[9, \"B\", 1154],[10, \"B\", 1345],[11, \"B\", 1221],[12, \"B\", 234],[13, \"C\", 2345],[14, \"C\", 2645],[15, \"C\", 2645],[16, \"C\", 2652],[17, \"C\", 65]]}}",
  "metaData": "{\r\n  \"mysql\": [\r\n    \"Create table If Not Exists Employee (Id int, Company varchar(255), Salary int)\"\r\n  ],\r\n  \"mssql\": [\r\n    \"create table Employee ( Id int, Company varchar(255), Salary int )\"\r\n  ],\r\n  \"oraclesql\": [\r\n    \"create table Employee ( Id int, Company varchar(255), Salary int )\"\r\n  ],\r\n  \"database\": true\r\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [
    "Create table If Not Exists Employee (Id int, Company varchar(255), Salary int)",
    "Truncate table Employee",
    "insert into Employee (Id, Company, Salary) values ('1', 'A', '2341')",
    "insert into Employee (Id, Company, Salary) values ('2', 'A', '341')",
    "insert into Employee (Id, Company, Salary) values ('3', 'A', '15')",
    "insert into Employee (Id, Company, Salary) values ('4', 'A', '15314')",
    "insert into Employee (Id, Company, Salary) values ('5', 'A', '451')",
    "insert into Employee (Id, Company, Salary) values ('6', 'A', '513')",
    "insert into Employee (Id, Company, Salary) values ('7', 'B', '15')",
    "insert into Employee (Id, Company, Salary) values ('8', 'B', '13')",
    "insert into Employee (Id, Company, Salary) values ('9', 'B', '1154')",
    "insert into Employee (Id, Company, Salary) values ('10', 'B', '1345')",
    "insert into Employee (Id, Company, Salary) values ('11', 'B', '1221')",
    "insert into Employee (Id, Company, Salary) values ('12', 'B', '234')",
    "insert into Employee (Id, Company, Salary) values ('13', 'C', '2345')",
    "insert into Employee (Id, Company, Salary) values ('14', 'C', '2645')",
    "insert into Employee (Id, Company, Salary) values ('15', 'C', '2645')",
    "insert into Employee (Id, Company, Salary) values ('16', 'C', '2652')",
    "insert into Employee (Id, Company, Salary) values ('17', 'C', '65')"
  ],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
