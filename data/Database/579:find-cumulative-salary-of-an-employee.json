{
  "questionId": "579",
  "questionFrontendId": "579",
  "boundTopicId": null,
  "title": "Find Cumulative Salary of an Employee",
  "titleSlug": "find-cumulative-salary-of-an-employee",
  "categoryTitle": "Database",
  "content": "<p>The <b>Employee</b> table holds the salary information in a year.</p>\r\n\r\n<p>Write a SQL to get the cumulative sum of an employee&#39;s salary over a period of 3 months but exclude the most recent month.</p>\r\n\r\n<p>The result should be displayed by &#39;Id&#39; ascending, and then by &#39;Month&#39; descending.</p>\r\n\r\n<p><b>Example</b><br />\r\n<b>Input</b></p>\r\n\r\n<pre>\r\n| Id | Month | Salary |\r\n|----|-------|--------|\r\n| 1  | 1     | 20     |\r\n| 2  | 1     | 20     |\r\n| 1  | 2     | 30     |\r\n| 2  | 2     | 30     |\r\n| 3  | 2     | 40     |\r\n| 1  | 3     | 40     |\r\n| 3  | 3     | 60     |\r\n| 1  | 4     | 60     |\r\n| 3  | 4     | 70     |\r\n</pre>\r\n<b>Output</b>\r\n\r\n<pre>\r\n\r\n| Id | Month | Salary |\r\n|----|-------|--------|\r\n| 1  | 3     | 90     |\r\n| 1  | 2     | 50     |\r\n| 1  | 1     | 20     |\r\n| 2  | 1     | 20     |\r\n| 3  | 3     | 100    |\r\n| 3  | 2     | 40     |\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n<b>Explanation</b>\r\n\r\n<p>Employee &#39;1&#39; has 3 salary records for the following 3 months except the most recent month &#39;4&#39;: salary 40 for month &#39;3&#39;, 30 for month &#39;2&#39; and 20 for month &#39;1&#39;<br />\r\nSo the cumulative sum of salary of this employee over 3 months is 90(40+30+20), 50(30+20) and 20 respectively.</p>\r\n\r\n<pre>\r\n| Id | Month | Salary |\r\n|----|-------|--------|\r\n| 1  | 3     | 90     |\r\n| 1  | 2     | 50     |\r\n| 1  | 1     | 20     |\r\n</pre>\r\nEmployee &#39;2&#39; only has one salary record (month &#39;1&#39;) except its most recent month &#39;2&#39;.\r\n\r\n<pre>\r\n| Id | Month | Salary |\r\n|----|-------|--------|\r\n| 2  | 1     | 20     |\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\nEmploy &#39;3&#39; has two salary records except its most recent pay month &#39;4&#39;: month &#39;3&#39; with 60 and month &#39;2&#39; with 40. So the cumulative salary is as following.\r\n\r\n<pre>\r\n| Id | Month | Salary |\r\n|----|-------|--------|\r\n| 3  | 3     | 100    |\r\n| 3  | 2     | 40     |\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n",
  "isPaidOnly": true,
  "difficulty": "Hard",
  "likes": 61,
  "dislikes": 87,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [
    {
      "username": "ichangimath",
      "profileUrl": "/ichangimath/",
      "avatarUrl": "https://www.gravatar.com/avatar/807acb8b227907dbaa4ed84e02411719.png?s=200"
    }
  ],
  "topicTags": [],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 3}], \"1\": [], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "MySQL",
      "code": "# Write your MySQL query statement below\n"
    },
    {
      "lang": "MS SQL Server",
      "code": "/* Write your T-SQL query statement below */\n"
    },
    {
      "lang": "Oracle",
      "code": "/* Write your PL/SQL query statement below */\n"
    }
  ],
  "stats": "{\"totalAccepted\": \"6.8K\", \"totalSubmission\": \"19.3K\", \"totalAcceptedRaw\": 6808, \"totalSubmissionRaw\": 19334, \"acRate\": \"35.2%\"}",
  "hints": [
    "Seem hard at first glance? Try to divide this problem into some sub-problems. \r\nThink about how to calculate the cumulative sum of one employee, how to get the cumulative sum for many employees, and how to except the most recent month of the result.",
    "Use the technique of self-join if you have only one table but to write a complex query.",
    "Still remember how to use the function `sum` and `max`?"
  ],
  "solution": {
    "id": "207",
    "canSeeDetail": true,
    "url": "/articles/find-cumulative-salary-of-an-employee/",
    "content": "[TOC]\n\n## Solution\n---\n#### Approach: Using `OUTER JOIN` and temporary tables [Accepted]\n\n**Intuition**\n\nSolve this issue by two steps. The first one is to get the cumulative sum of an employee's salary over a period of 3 months, and then exclude the most recent month from the result.\n\n**Algorithm**\n\nIf you feel hard to work out how to get the cumulative sum of an employee's salary over a period of 3 months, think about 2 months as a start. By joining this **Employee** table with itself, you can get salary information for one more month.\n\n```sql\nSELECT *\nFROM\n    Employee E1\n        LEFT JOIN\n    Employee E2 ON (E2.id = E1.id\n        AND E2.month = E1.month - 1)\nORDER BY E1.id ASC , E1. month DESC\n```\n\n| Id | Month | Salary | Id | Month | Salary |\n|----|-------|--------|----|-------|--------|\n| 1  | 4     | 60     | 1  | 3     | 40     |\n| 1  | 3     | 40     | 1  | 2     | 30     |\n| 1  | 2     | 30     | 1  | 1     | 20     |\n| 1  | 1     | 20     |    |       |        |\n| 2  | 2     | 30     | 2  | 1     | 20     |\n| 2  | 1     | 20     |    |       |        |\n| 3  | 4     | 70     | 3  | 3     | 60     |\n| 3  | 3     | 60     | 3  | 2     | 40     |\n| 3  | 2     | 40     |    |       |        |\n>Note:\n> - The blank value in the output is actually `NULL` in the database.\n> - The first three columns are from E1, and the rest ones are from E2.\n\nThen we can add the salary to get the cumulative sum for 2 months.\n\n```sql\nSELECT\n    E1.id,\n    E1.month,\n    (IFNULL(E1.salary, 0) + IFNULL(E2.salary, 0)) AS Salary\nFROM\n    Employee E1\n        LEFT JOIN\n    Employee E2 ON (E2.id = E1.id\n        AND E2.month = E1.month - 1)\nORDER BY E1.id ASC , E1.month DESC\n```\n```\n| id | month | Salary |\n|----|-------|--------|\n| 1  | 4     | 100    |\n| 1  | 3     | 70     |\n| 1  | 2     | 50     |\n| 1  | 1     | 20     |\n| 2  | 2     | 50     |\n| 2  | 1     | 20     |\n| 3  | 4     | 130    |\n| 3  | 3     | 100    |\n| 3  | 2     | 40     |\n```\n\nSimilarly, you can join this table one more time to get the cumulative sum for 3 months.\n\n```sql\nSELECT\n    E1.id,\n    E1.month,\n    (IFNULL(E1.salary, 0) + IFNULL(E2.salary, 0) + IFNULL(E3.salary, 0)) AS Salary\nFROM\n    Employee E1\n        LEFT JOIN\n    Employee E2 ON (E2.id = E1.id\n        AND E2.month = E1.month - 1)\n        LEFT JOIN\n    Employee E3 ON (E3.id = E1.id\n        AND E3.month = E1.month - 2)\nORDER BY E1.id ASC , E1.month DESC\n;\n```\n```\n| id | month | Salary |\n|----|-------|--------|\n| 1  | 4     | 130    |\n| 1  | 3     | 90     |\n| 1  | 2     | 50     |\n| 1  | 1     | 20     |\n| 2  | 2     | 50     |\n| 2  | 1     | 20     |\n| 3  | 4     | 170    |\n| 3  | 3     | 100    |\n| 3  | 2     | 40     |\n```\n\nIn addition, we have to exclude the most recent month as required. If we have a temp table including every id and most recent month like below, then we can easily opt out these months by join it with the above table.\n```\n| id | month |\n|----|-------|\n| 1  | 4     |\n| 2  | 2     |\n| 3  | 4     |\n```\n\nHere is the code to generate this table.\n```sql\nSELECT\n    id, MAX(month) AS month\nFROM\n    Employee\nGROUP BY id\nHAVING COUNT(*) > 1\n;\n```\n\nAt last, we can join them together and get the desired cumulative sum of an employee's salary over a period of 3 months excluding the most recent one.\n\n**MySQL**\n\n```sql\nSELECT\n    E1.id,\n    E1.month,\n    (IFNULL(E1.salary, 0) + IFNULL(E2.salary, 0) + IFNULL(E3.salary, 0)) AS Salary\nFROM\n    (SELECT\n        id, MAX(month) AS month\n    FROM\n        Employee\n    GROUP BY id\n    HAVING COUNT(*) > 1) AS maxmonth\n        LEFT JOIN\n    Employee E1 ON (maxmonth.id = E1.id\n        AND maxmonth.month > E1.month)\n        LEFT JOIN\n    Employee E2 ON (E2.id = E1.id\n        AND E2.month = E1.month - 1)\n        LEFT JOIN\n    Employee E3 ON (E3.id = E1.id\n        AND E3.month = E1.month - 2)\nORDER BY id ASC , month DESC\n;\n```\n\n| id | month | Salary |\n|----|-------|--------|\n| 1  | 3     | 90     |\n| 1  | 2     | 50     |\n| 1  | 1     | 20     |\n| 2  | 1     | 20     |\n| 3  | 3     | 100    |\n| 3  | 2     | 40     |\n\nNote: Thank [@xiaxin](https://discuss.leetcode.com/user/xiaxin) for providing this elegant solution.",
    "contentTypeId": "107",
    "rating": {
      "id": "202",
      "count": 11,
      "average": 4.273,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "{\"headers\": {\"Employee\": [\"Id\", \"Month\", \"Salary\"]}, \"rows\": {\"Employee\": [[1, 1, 20], [2, 1, 20], [1, 2, 30], [2, 2, 30], [3,2,40],[1,3,40], [3,3,60],[1,4,60],[3,4,70]]}}",
  "metaData": "{\r\n  \"mysql\": [\r\n    \"Create table If Not Exists Employee (Id int, Month int, Salary int)\"\r\n  ],\r\n  \"mssql\": [\r\n    \"Create table Employee (Id int, Month int, Salary int)\"\r\n  ],\r\n  \"oraclesql\": [\r\n    \"Create table Employee (Id int, Month int, Salary int)\"\r\n  ],\r\n  \"database\": true\r\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [
    "Create table If Not Exists Employee (Id int, Month int, Salary int)",
    "Truncate table Employee",
    "insert into Employee (Id, Month, Salary) values ('1', '1', '20')",
    "insert into Employee (Id, Month, Salary) values ('2', '1', '20')",
    "insert into Employee (Id, Month, Salary) values ('1', '2', '30')",
    "insert into Employee (Id, Month, Salary) values ('2', '2', '30')",
    "insert into Employee (Id, Month, Salary) values ('3', '2', '40')",
    "insert into Employee (Id, Month, Salary) values ('1', '3', '40')",
    "insert into Employee (Id, Month, Salary) values ('3', '3', '60')",
    "insert into Employee (Id, Month, Salary) values ('1', '4', '60')",
    "insert into Employee (Id, Month, Salary) values ('3', '4', '70')"
  ],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
