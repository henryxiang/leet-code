{
  "questionId": "602",
  "questionFrontendId": "602",
  "boundTopicId": null,
  "title": "Friend Requests II: Who Has the Most Friends",
  "titleSlug": "friend-requests-ii-who-has-the-most-friends",
  "categoryTitle": "Database",
  "content": "<p>In social network like Facebook or Twitter, people send friend requests and accept others&#39; requests as well.</p>\n\n<p>&nbsp;</p>\n\n<p>Table <code>request_accepted</code></p>\n\n<pre>\n+--------------+-------------+------------+\n| requester_id | accepter_id | accept_date|\n|--------------|-------------|------------|\n| 1            | 2           | 2016_06-03 |\n| 1            | 3           | 2016-06-08 |\n| 2            | 3           | 2016-06-08 |\n| 3            | 4           | 2016-06-09 |\n+--------------+-------------+------------+\nThis table holds the data of friend acceptance, while <b>requester_id</b> and <b>accepter_id</b> both are the id of a person.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>Write a query to find the the people who has most friends and the most friends number under the following rules:</p>\n\n<ul>\n\t<li>It is guaranteed there is only 1 people having the most friends.</li>\n\t<li>The friend request could only been accepted once, which mean there is no multiple records with the same <b>requester_id</b> and <b>accepter_id</b> value.</li>\n</ul>\n\n<p>For the sample data above, the result is:</p>\n\n<pre>\nResult table:\n+------+------+\n| id   | num  |\n|------|------|\n| 3    | 3    |\n+------+------+\nThe person with id &#39;3&#39; is a friend of people &#39;1&#39;, &#39;2&#39; and &#39;4&#39;, so he has 3 friends in total, which is the most number than any others.\n</pre>\n\n<p><b>Follow-up:</b><br />\nIn the real world, multiple people could have the same most number of friends, can you find all these people in this case?</p>\n",
  "isPaidOnly": true,
  "difficulty": "Medium",
  "likes": 119,
  "dislikes": 49,
  "isLiked": null,
  "similarQuestions": "[]",
  "contributors": [
    {
      "username": "Mr-Bin",
      "profileUrl": "/mr-bin/",
      "avatarUrl": "https://assets.leetcode.com/users/mr-bin/avatar_1547655304.png"
    }
  ],
  "topicTags": [],
  "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"Facebook\", \"slug\": \"facebook\", \"timesEncountered\": 2}], \"1\": [], \"2\": []}",
  "codeSnippets": [
    {
      "lang": "MySQL",
      "code": "# Write your MySQL query statement below\n"
    },
    {
      "lang": "MS SQL Server",
      "code": "/* Write your T-SQL query statement below */\n"
    },
    {
      "lang": "Oracle",
      "code": "/* Write your PL/SQL query statement below */\n"
    }
  ],
  "stats": "{\"totalAccepted\": \"15.5K\", \"totalSubmission\": \"32.4K\", \"totalAcceptedRaw\": 15504, \"totalSubmissionRaw\": 32369, \"acRate\": \"47.9%\"}",
  "hints": [
    "Being friends is bidirectional. If you accept someone's adding friend request, both you and the other person will have one more friend."
  ],
  "solution": {
    "id": "162",
    "canSeeDetail": true,
    "url": "/articles/friend-requests-ii-who-has-most-friend/",
    "content": "[TOC]\n\n## Solution\n---\n#### Approach: Union *requester_id* and *accepter_id* [Accepted]\n\n**Algorithm**\n\nBeing friends is bidirectional, so if one person accepts a request from another person, both of them will have one more friend.\n\nThus, we can union column *requester_id* and *accepter_id*, and then count the number of the occurrence of each person.\n\n```mysql\nselect requester_id as ids from request_accepted\nunion all\nselect accepter_id from request_accepted;\n```\n>Note: Here we should use `union all` instead of `union` because `union all` will keep all the records even the 'duplicated' one.\n\nTaking the sample as an example, the output is:\n\n| ids |\n|-----|\n| 1   |\n| 1   |\n| 2   |\n| 3   |\n| 2   |\n| 3   |\n| 3   |\n| 4   |\n\nThen it will be fairly easy to get the 'ids' with most occurrence using the same technique as mentioned in problem [580. Customer Placing the Largest Number of Orders](https://leetcode.com/problems/count-student-number-in-departments/#/description).\n\n**MySQL**\n\n```mysql\nselect ids as id, cnt as num\nfrom\n(\nselect ids, count(*) as cnt\n   from\n   (\n        select requester_id as ids from request_accepted\n        union all\n        select accepter_id from request_accepted\n    ) as tbl1\n   group by ids\n   ) as tbl2\norder by cnt desc\nlimit 1\n;\n```",
    "contentTypeId": "107",
    "rating": {
      "id": "157",
      "count": 10,
      "average": 3.6,
      "userRating": null
    }
  },
  "status": null,
  "sampleTestCase": "{\"headers\":{\"request_accepted\":[\"requester_id\",\"accepter_id\",\"accept_date\"]},\"rows\":{\"request_accepted\":[[1,2,\"2016/06/03\"],[1,3,\"2016/06/08\"],[2,3,\"2016/06/08\"],[3,4,\"2016/06/09\"]]}}",
  "metaData": "{\r\n  \"mysql\": [\r\n    \"Create table If Not Exists request_accepted (        requester_id INT NOT NULL,        accepter_id INT NULL,        accept_date DATE NULL)\"\r\n  ],\r\n  \"mssql\": [\r\n    \"Create table request_accepted (        requester_id INT NOT NULL,        accepter_id INT NULL,        accept_date DATE NULL)\"\r\n  ],\r\n  \"oraclesql\": [\r\n    \"Create table request_accepted (        requester_id INT NOT NULL,        accepter_id INT NULL,        accept_date DATE NULL)\",\r\n    \"alter SESSION set NLS_DATE_FORMAT = 'YYYY/MM/DD'\"\r\n  ],\r\n  \"database\": true\r\n}",
  "judgerAvailable": true,
  "judgeType": "large",
  "mysqlSchemas": [
    "Create table If Not Exists request_accepted (        requester_id INT NOT NULL,        accepter_id INT NULL,        accept_date DATE NULL)",
    "Truncate table request_accepted",
    "insert into request_accepted (requester_id, accepter_id, accept_date) values ('1', '2', '2016/06/03')",
    "insert into request_accepted (requester_id, accepter_id, accept_date) values ('1', '3', '2016/06/08')",
    "insert into request_accepted (requester_id, accepter_id, accept_date) values ('2', '3', '2016/06/08')",
    "insert into request_accepted (requester_id, accepter_id, accept_date) values ('3', '4', '2016/06/09')"
  ],
  "enableRunCode": true,
  "enableTestMode": false,
  "libraryUrl": null
}
